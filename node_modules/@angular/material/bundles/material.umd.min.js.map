{"version":3,"file":"material.umd.min.js","sources":["../../src/lib/tabs/tab-nav-bar/tab-nav-bar.ts","../../src/lib/tabs/tabs-module.ts","../../src/lib/toolbar/toolbar.ts","../../src/lib/toolbar/toolbar-module.ts","../../src/lib/tree/outlet.ts","../../src/lib/tree/node.ts","../../src/lib/tree/padding.ts","../../src/lib/tree/tree.ts","../../src/lib/tree/toggle.ts","../../src/lib/tree/tree-module.ts","../../src/lib/tree/data-source/flat-data-source.ts","../../src/lib/tree/data-source/nested-data-source.ts","../../src/lib/version.ts","../../src/lib/autocomplete/autocomplete-trigger.ts","../../src/lib/core/testing/month-constants.ts","../../src/lib/expansion/expansion-animations.ts","../../src/lib/select/select.ts","../../src/lib/tooltip/tooltip.ts","../../src/lib/table/cell.ts","../../src/lib/table/row.ts","../../src/lib/table/table-module.ts","../../src/lib/table/table-data-source.ts","../../src/lib/tabs/ink-bar.ts","../../src/lib/tabs/tab-content.ts","../../src/lib/tabs/tab-label.ts","../../src/lib/tabs/tab.ts","../../src/lib/tabs/tabs-animations.ts","../../src/lib/tabs/tab-body.ts","../../src/lib/tabs/tab-label-wrapper.ts","../../src/lib/tabs/tab-header.ts","../../src/lib/tabs/tab-group.ts","../../src/lib/sort/sort-animations.ts","../../src/lib/sort/sort-header-intl.ts","../../src/lib/sort/sort-header.ts","../../src/lib/sort/sort-module.ts","../../src/lib/stepper/step-label.ts","../../src/lib/stepper/stepper-intl.ts","../../src/lib/stepper/step-header.ts","../../src/lib/stepper/stepper-animations.ts","../../src/lib/stepper/stepper-icon.ts","../../src/lib/stepper/stepper.ts","../../src/lib/stepper/stepper-button.ts","../../src/lib/stepper/stepper-module.ts","../../src/lib/table/table.ts","../../src/lib/slider/slider.ts","../../src/lib/slider/slider-module.ts","../../src/lib/snack-bar/snack-bar-ref.ts","../../src/lib/snack-bar/snack-bar-config.ts","../../src/lib/snack-bar/simple-snack-bar.ts","../../src/lib/snack-bar/snack-bar-animations.ts","../../src/lib/snack-bar/snack-bar-container.ts","../../src/lib/snack-bar/snack-bar-module.ts","../../src/lib/snack-bar/snack-bar.ts","../../src/lib/sort/sort.ts","../../src/lib/sidenav/drawer.ts","../../src/lib/sidenav/sidenav.ts","../../src/lib/sidenav/sidenav-module.ts","../../src/lib/slide-toggle/slide-toggle-config.ts","../../src/lib/slide-toggle/slide-toggle.ts","../../src/lib/slide-toggle/slide-toggle-module.ts","../../src/lib/progress-bar/progress-bar.ts","../../src/lib/progress-bar/progress-bar-module.ts","../../src/lib/progress-spinner/progress-spinner.ts","../../src/lib/progress-spinner/progress-spinner-module.ts","../../src/lib/radio/radio.ts","../../src/lib/radio/radio-module.ts","../../src/lib/sidenav/drawer-animations.ts","../../src/lib/select/select-module.ts","../../src/lib/tooltip/tooltip-animations.ts","../../src/lib/tooltip/tooltip-module.ts","../../src/lib/paginator/paginator-intl.ts","../../src/lib/paginator/paginator.ts","../../src/lib/paginator/paginator-module.ts","../../src/lib/menu/menu-content.ts","../../src/lib/menu/menu-animations.ts","../../src/lib/menu/menu-panel.ts","../../src/lib/menu/menu-item.ts","../../src/lib/menu/menu-directive.ts","../../src/lib/menu/menu-trigger.ts","../../src/lib/menu/menu-module.ts","../../src/lib/select/select-animations.ts","../../src/lib/list/selection-list.ts","../../src/lib/list/list-module.ts","../../src/lib/list/list.ts","../../src/lib/grid-list/grid-tile.ts","../../src/lib/grid-list/tile-coordinator.ts","../../src/lib/grid-list/tile-styler.ts","../../src/lib/grid-list/grid-list.ts","../../src/lib/grid-list/grid-list-module.ts","../../src/lib/icon/icon-registry.ts","../../src/lib/icon/icon.ts","../../src/lib/icon/icon-module.ts","../../src/lib/datepicker/datepicker.ts","../../src/lib/datepicker/datepicker-input.ts","../../src/lib/datepicker/datepicker-toggle.ts","../../src/lib/datepicker/datepicker-module.ts","../../src/lib/divider/divider.ts","../../src/lib/divider/divider-module.ts","../../src/lib/expansion/accordion-base.ts","../../src/lib/expansion/expansion-panel-content.ts","../../src/lib/expansion/expansion-panel.ts","../../src/lib/expansion/expansion-panel-header.ts","../../src/lib/expansion/accordion.ts","../../src/lib/expansion/expansion-module.ts","../../src/lib/grid-list/grid-list-base.ts","../../src/lib/datepicker/calendar-body.ts","../../src/lib/datepicker/month-view.ts","../../src/lib/datepicker/multi-year-view.ts","../../src/lib/datepicker/year-view.ts","../../src/lib/datepicker/calendar.ts","../../src/lib/datepicker/datepicker-animations.ts","../../src/lib/chips/chip-list.ts","../../src/lib/chips/chip-input.ts","../../src/lib/chips/chips-module.ts","../../src/lib/dialog/dialog-config.ts","../../src/lib/dialog/dialog-animations.ts","../../src/lib/dialog/dialog-container.ts","../../src/lib/dialog/dialog-ref.ts","../../src/lib/dialog/dialog.ts","../../src/lib/dialog/dialog-content-directives.ts","../../src/lib/dialog/dialog-module.ts","../../src/lib/input/autosize.ts","../../src/lib/input/input-value-accessor.ts","../../src/lib/input/input.ts","../../src/lib/input/input-module.ts","../../src/lib/datepicker/datepicker-intl.ts","../../src/lib/checkbox/checkbox.ts","../../src/lib/checkbox/checkbox-required-validator.ts","../../src/lib/checkbox/checkbox-module.ts","../../src/lib/chips/chip.ts","../../src/lib/chips/chip-default-options.ts","../../src/lib/button/button.ts","../../src/lib/button/button-module.ts","../../src/lib/button-toggle/button-toggle.ts","../../src/lib/button-toggle/button-toggle-module.ts","../../src/lib/card/card.ts","../../src/lib/card/card-module.ts","../../src/lib/checkbox/checkbox-config.ts","../../src/lib/autocomplete/autocomplete.ts","../../src/lib/autocomplete/autocomplete-origin.ts","../../src/lib/autocomplete/autocomplete-module.ts","../../src/lib/badge/badge.ts","../../src/lib/badge/badge-module.ts","../../src/lib/bottom-sheet/bottom-sheet-config.ts","../../src/lib/bottom-sheet/bottom-sheet-animations.ts","../../src/lib/bottom-sheet/bottom-sheet-container.ts","../../src/lib/bottom-sheet/bottom-sheet-module.ts","../../src/lib/bottom-sheet/bottom-sheet-ref.ts","../../src/lib/bottom-sheet/bottom-sheet.ts","../../src/lib/core/option/option.ts","../../src/lib/core/option/index.ts","../../src/lib/core/label/label-options.ts","../../src/lib/form-field/error.ts","../../src/lib/form-field/form-field-animations.ts","../../src/lib/form-field/form-field-control.ts","../../src/lib/form-field/hint.ts","../../src/lib/form-field/label.ts","../../src/lib/form-field/placeholder.ts","../../src/lib/form-field/prefix.ts","../../src/lib/form-field/suffix.ts","../../src/lib/form-field/form-field.ts","../../src/lib/form-field/form-field-module.ts","../../node_modules/tslib/tslib.es6.js","../../src/lib/core/common-behaviors/common-module.ts","../../src/lib/core/common-behaviors/disabled.ts","../../src/lib/core/common-behaviors/color.ts","../../src/lib/core/common-behaviors/disable-ripple.ts","../../src/lib/core/common-behaviors/tabindex.ts","../../src/lib/core/common-behaviors/error-state.ts","../../src/lib/core/common-behaviors/initialized.ts","../../src/lib/core/datetime/date-adapter.ts","../../src/lib/core/datetime/native-date-adapter.ts","../../src/lib/core/line/line.ts","../../src/lib/core/ripple/ripple-renderer.ts","../../src/lib/form-field/form-field-errors.ts","../../src/lib/input/input-errors.ts","../../src/lib/datepicker/datepicker-errors.ts","../../src/lib/menu/menu-errors.ts","../../src/lib/select/select-errors.ts","../../src/lib/sort/sort-errors.ts","../../src/lib/core/animation/animation.ts","../../src/lib/core/datetime/date-formats.ts","../../src/lib/core/datetime/native-date-formats.ts","../../src/lib/core/datetime/index.ts","../../src/lib/core/error/error-options.ts","../../src/lib/core/gestures/gesture-config.ts","../../src/lib/core/ripple/ripple-ref.ts","../../src/lib/core/ripple/ripple.ts","../../src/lib/core/ripple/index.ts","../../src/lib/core/selection/pseudo-checkbox/pseudo-checkbox.ts","../../src/lib/core/selection/index.ts","../../src/lib/core/option/optgroup.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Platform} from '@angular/cdk/platform';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HasTabIndex, HasTabIndexCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex, RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from '../ink-bar';\nimport {FocusMonitor} from '@angular/cdk/a11y';\n\n\n// Boilerplate for applying mixins to MatTabNav.\n/** @docs-private */\nexport class MatTabNavBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabNavMixinBase: CanDisableRippleCtor & CanColorCtor & typeof MatTabNavBase =\n    mixinDisableRipple(mixinColor(MatTabNavBase, 'primary'));\n\n/**\n * Navigation component matching the styles of the tab group header.\n * Provides anchored navigation with animated ink bar.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-tab-nav-bar]',\n  exportAs: 'matTabNavBar, matTabNav',\n  inputs: ['color', 'disableRipple'],\n  templateUrl: 'tab-nav-bar.html',\n  styleUrls: ['tab-nav-bar.css'],\n  host: {'class': 'mat-tab-nav-bar'},\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTabNav extends _MatTabNavMixinBase\n    implements AfterContentChecked, AfterContentInit, CanColor, CanDisableRipple, OnDestroy {\n\n  /** Subject that emits when the component has been destroyed. */\n  private readonly _onDestroy = new Subject<void>();\n\n  private _activeLinkChanged: boolean;\n  private _activeLinkElement: ElementRef<HTMLElement> | null;\n\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n\n  /** Query list of all tab links of the tab navigation. */\n  @ContentChildren(forwardRef(() => MatTabLink), {descendants: true})\n  _tabLinks: QueryList<MatTabLink>;\n\n  /** Background color of the tab nav. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  constructor(elementRef: ElementRef,\n              @Optional() private _dir: Directionality,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler) {\n    super(elementRef);\n  }\n\n  /**\n   * Notifies the component that the active link has been changed.\n   * @breaking-change 8.0.0 `element` parameter to be removed.\n   */\n  updateActiveLink(element: ElementRef) {\n    // Note: keeping the `element` for backwards-compat, but isn't being used for anything.\n    // @breaking-change 8.0.0\n    this._activeLinkChanged = !!element;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  ngAfterContentInit(): void {\n    this._ngZone.runOutsideAngular(() => {\n      const dirChange = this._dir ? this._dir.change : observableOf(null);\n\n      return merge(dirChange, this._viewportRuler.change(10))\n          .pipe(takeUntil(this._onDestroy))\n          .subscribe(() => this._alignInkBar());\n    });\n  }\n\n  /** Checks if the active link has been changed and, if so, will update the ink bar. */\n  ngAfterContentChecked(): void {\n    if (this._activeLinkChanged) {\n      const activeTab = this._tabLinks.find(tab => tab.active);\n\n      this._activeLinkElement = activeTab ? activeTab._elementRef : null;\n      this._alignInkBar();\n      this._activeLinkChanged = false;\n    }\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  /** Aligns the ink bar to the active link. */\n  _alignInkBar(): void {\n    if (this._activeLinkElement) {\n      this._inkBar.show();\n      this._inkBar.alignToElement(this._activeLinkElement.nativeElement);\n    } else {\n      this._inkBar.hide();\n    }\n  }\n}\n\n\n// Boilerplate for applying mixins to MatTabLink.\nexport class MatTabLinkBase {}\nexport const _MatTabLinkMixinBase:\n    HasTabIndexCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatTabLinkBase =\n        mixinTabIndex(mixinDisableRipple(mixinDisabled(MatTabLinkBase)));\n\n/**\n * Link inside of a `mat-tab-nav-bar`.\n */\n@Directive({\n  selector: '[mat-tab-link], [matTabLink]',\n  exportAs: 'matTabLink',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'class': 'mat-tab-link',\n    '[attr.aria-current]': 'active',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.tabIndex]': 'tabIndex',\n    '[class.mat-tab-disabled]': 'disabled',\n    '[class.mat-tab-label-active]': 'active',\n  }\n})\nexport class MatTabLink extends _MatTabLinkMixinBase\n    implements OnDestroy, CanDisable, CanDisableRipple, HasTabIndex, RippleTarget {\n\n  /** Whether the tab link is active or not. */\n  protected _isActive: boolean = false;\n\n  /** Reference to the RippleRenderer for the tab-link. */\n  protected _tabLinkRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /** Whether the link is active. */\n  @Input()\n  get active(): boolean { return this._isActive; }\n  set active(value: boolean) {\n    if (value !== this._isActive) {\n      this._isActive = value;\n      this._tabNavBar.updateActiveLink(this._elementRef);\n    }\n  }\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._tabNavBar.disableRipple ||\n      this._ripplesGloballyDisabled;\n  }\n\n  constructor(private _tabNavBar: MatTabNav,\n              public _elementRef: ElementRef,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Attribute('tabindex') tabIndex: string,\n              /**\n               * @deprecated\n               * @breaking-change 8.0.0 `_focusMonitor` parameter to be made required.\n               */\n              private _focusMonitor?: FocusMonitor) {\n    super();\n\n    this._tabLinkRipple = new RippleRenderer(this, ngZone, _elementRef, platform);\n    this._tabLinkRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n        animation: globalOptions.animation,\n      };\n    }\n\n    if (_focusMonitor) {\n      _focusMonitor.monitor(_elementRef);\n    }\n  }\n\n  ngOnDestroy() {\n    this._tabLinkRipple._removeTriggerEvents();\n\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatInkBar} from './ink-bar';\nimport {MatTab} from './tab';\nimport {MatTabBody, MatTabBodyPortal} from './tab-body';\nimport {MatTabContent} from './tab-content';\nimport {MatTabGroup} from './tab-group';\nimport {MatTabHeader} from './tab-header';\nimport {MatTabLabel} from './tab-label';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {MatTabLink, MatTabNav} from './tab-nav-bar/tab-nav-bar';\nimport {A11yModule} from '@angular/cdk/a11y';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    PortalModule,\n    MatRippleModule,\n    ObserversModule,\n    A11yModule,\n  ],\n  // Don't export all components because some are only to be used internally.\n  exports: [\n    MatCommonModule,\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatTabNav,\n    MatTabLink,\n    MatTabContent,\n  ],\n  declarations: [\n    MatTabGroup,\n    MatTabLabel,\n    MatTab,\n    MatInkBar,\n    MatTabLabelWrapper,\n    MatTabNav,\n    MatTabLink,\n    MatTabBody,\n    MatTabBodyPortal,\n    MatTabHeader,\n    MatTabContent,\n  ],\n})\nexport class MatTabsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Inject,\n  isDevMode,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatToolbar.\n/** @docs-private */\nexport class MatToolbarBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatToolbarMixinBase: CanColorCtor & typeof MatToolbarBase =\n    mixinColor(MatToolbarBase);\n\n@Directive({\n  selector: 'mat-toolbar-row',\n  exportAs: 'matToolbarRow',\n  host: {'class': 'mat-toolbar-row'},\n})\nexport class MatToolbarRow {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-toolbar',\n  exportAs: 'matToolbar',\n  templateUrl: 'toolbar.html',\n  styleUrls: ['toolbar.css'],\n  inputs: ['color'],\n  host: {\n    'class': 'mat-toolbar',\n    '[class.mat-toolbar-multiple-rows]': '_toolbarRows.length > 0',\n    '[class.mat-toolbar-single-row]': '_toolbarRows.length === 0',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatToolbar extends _MatToolbarMixinBase implements CanColor, AfterViewInit {\n  private _document: Document;\n\n  /** Reference to all toolbar row elements that have been projected. */\n  @ContentChildren(MatToolbarRow) _toolbarRows: QueryList<MatToolbarRow>;\n\n  constructor(\n    elementRef: ElementRef,\n    private _platform: Platform,\n    @Inject(DOCUMENT) document?: any) {\n    super(elementRef);\n\n    // TODO: make the document a required param when doing breaking changes.\n    this._document = document;\n  }\n\n  ngAfterViewInit() {\n    if (!isDevMode() || !this._platform.isBrowser) {\n      return;\n    }\n\n    this._checkToolbarMixedModes();\n    this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n  }\n\n  /**\n   * Throws an exception when developers are attempting to combine the different toolbar row modes.\n   */\n  private _checkToolbarMixedModes() {\n    if (!this._toolbarRows.length) {\n      return;\n    }\n\n    // Check if there are any other DOM nodes that can display content but aren't inside of\n    // a <mat-toolbar-row> element.\n    const isCombinedUsage = Array.from<HTMLElement>(this._elementRef.nativeElement.childNodes)\n      .filter(node => !(node.classList && node.classList.contains('mat-toolbar-row')))\n      .filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8))\n      .some(node => !!(node.textContent && node.textContent.trim()));\n\n    if (isCombinedUsage) {\n      throwToolbarMixedModesError();\n    }\n  }\n}\n\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nexport function throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' +\n    'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' +\n    'inside of a `<mat-toolbar>` for a single row.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatToolbar, MatToolbarRow} from './toolbar';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatToolbar, MatToolbarRow, MatCommonModule],\n  declarations: [MatToolbar, MatToolbarRow],\n})\nexport class MatToolbarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodeOutlet} from '@angular/cdk/tree';\nimport {\n  Directive,\n  ViewContainerRef,\n} from '@angular/core';\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\n@Directive({\n  selector: '[matTreeNodeOutlet]'\n})\nexport class MatTreeNodeOutlet implements CdkTreeNodeOutlet {\n  constructor(public viewContainer: ViewContainerRef) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkNestedTreeNode, CdkTree, CdkTreeNode, CdkTreeNodeDef} from '@angular/cdk/tree';\nimport {\n  AfterContentInit,\n  Attribute,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Input,\n  IterableDiffers,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\nexport const _MatTreeNodeMixinBase: HasTabIndexCtor & CanDisableCtor & typeof CdkTreeNode =\n    mixinTabIndex(mixinDisabled(CdkTreeNode));\n\nexport const _MatNestedTreeNodeMixinBase:\n    HasTabIndexCtor & CanDisableCtor & typeof CdkNestedTreeNode =\n        mixinTabIndex(mixinDisabled(CdkNestedTreeNode));\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\n@Directive({\n  selector: 'mat-tree-node',\n  exportAs: 'matTreeNode',\n  inputs: ['disabled', 'tabIndex'],\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.aria-level]': 'role === \"treeitem\" ? level : null',\n    '[attr.role]': 'role',\n    'class': 'mat-tree-node'\n  },\n  providers: [{provide: CdkTreeNode, useExisting: MatTreeNode}]\n})\nexport class MatTreeNode<T> extends _MatTreeNodeMixinBase<T>\n    implements CanDisable, HasTabIndex {\n  @Input() role: 'treeitem' | 'group' = 'treeitem';\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n}\n\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeDef]',\n  inputs: [\n    'when: matTreeNodeDefWhen'\n  ],\n  providers: [{provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef}]\n})\nexport class MatTreeNodeDef<T> extends CdkTreeNodeDef<T> {\n  @Input('matTreeNode') data: T;\n}\n\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\n@Directive({\n  selector: 'mat-nested-tree-node',\n  exportAs: 'matNestedTreeNode',\n  host: {\n    '[attr.aria-expanded]': 'isExpanded',\n    '[attr.role]': 'role',\n    'class': 'mat-nested-tree-node',\n  },\n  inputs: ['disabled', 'tabIndex'],\n  providers: [\n    {provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode},\n    {provide: CdkTreeNode, useExisting: MatNestedTreeNode}\n  ]\n})\nexport class MatNestedTreeNode<T> extends _MatNestedTreeNodeMixinBase<T>\n    implements AfterContentInit, CanDisable, HasTabIndex, OnDestroy {\n\n  @Input('matNestedTreeNode') node: T;\n\n  @ContentChildren(MatTreeNodeOutlet) nodeOutlet: QueryList<MatTreeNodeOutlet>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              protected _tree: CdkTree<T>,\n              protected _differs: IterableDiffers,\n              @Attribute('tabindex') tabIndex: string) {\n    super(_elementRef, _tree, _differs);\n\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #23091 is fixed\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {CdkTreeNodePadding} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodePadding]',\n  providers: [{provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding}]\n})\nexport class MatTreeNodePadding<T> extends CdkTreeNodePadding<T> {\n\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  @Input('matTreeNodePadding') level: number;\n\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  @Input('matTreeNodePaddingIndent') indent: number;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTree} from '@angular/cdk/tree';\nimport {ChangeDetectionStrategy, Component, ViewChild, ViewEncapsulation} from '@angular/core';\nimport {MatTreeNodeOutlet} from './outlet';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tree',\n  exportAs: 'matTree',\n  template: `<ng-container matTreeNodeOutlet></ng-container>`,\n  host: {\n    'class': 'mat-tree',\n    'role': 'tree',\n  },\n  styleUrls: ['tree.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [{provide: CdkTree, useExisting: MatTree}]\n})\nexport class MatTree<T> extends CdkTree<T> {\n  // Outlets within the tree's template where the dataNodes will be inserted.\n  @ViewChild(MatTreeNodeOutlet) _nodeOutlet: MatTreeNodeOutlet;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTreeNodeToggle} from '@angular/cdk/tree';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\n@Directive({\n  selector: '[matTreeNodeToggle]',\n  host: {\n    '(click)': '_toggle($event)',\n  },\n  providers: [{provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle}]\n})\nexport class MatTreeNodeToggle<T> extends CdkTreeNodeToggle<T> {\n  @Input('matTreeNodeToggleRecursive') recursive: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\n\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatNestedTreeNode, MatTreeNodeDef, MatTreeNode} from './node';\nimport {MatTree} from './tree';\nimport {MatTreeNodeToggle} from './toggle';\nimport {MatTreeNodeOutlet} from './outlet';\nimport {MatTreeNodePadding} from './padding';\n\nconst MAT_TREE_DIRECTIVES = [\n  MatNestedTreeNode,\n  MatTreeNodeDef,\n  MatTreeNodePadding,\n  MatTreeNodeToggle,\n  MatTree,\n  MatTreeNode,\n  MatTreeNodeOutlet\n];\n\n@NgModule({\n  imports: [CdkTreeModule, CommonModule, MatCommonModule],\n  exports: MAT_TREE_DIRECTIVES,\n  declarations: MAT_TREE_DIRECTIVES,\n})\nexport class MatTreeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {FlatTreeControl, TreeControl} from '@angular/cdk/tree';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map, take} from 'rxjs/operators';\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nexport class MatTreeFlattener<T, F> {\n\n  constructor(public transformFunction: (node: T, level: number) => F,\n              public getLevel: (node: F) => number,\n              public isExpandable: (node: F) => boolean,\n              public getChildren: (node: T) => Observable<T[]> | T[]) {}\n\n  _flattenNode(node: T, level: number,\n               resultNodes: F[], parentMap: boolean[]): F[] {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (Array.isArray(childrenNodes)) {\n        this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n      } else {\n        childrenNodes.pipe(take(1)).subscribe(children => {\n          this._flattenChildren(children, level, resultNodes, parentMap);\n        });\n      }\n    }\n    return resultNodes;\n  }\n\n  _flattenChildren(children: T[], level: number,\n                   resultNodes: F[], parentMap: boolean[]): void {\n    children.forEach((child, index) => {\n      let childParentMap: boolean[] = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData: T[]): F[] {\n    let resultNodes: F[] = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes: F[], treeControl: TreeControl<F>): F[] {\n    let results: F[] = [];\n    let currentExpand: boolean[] = [];\n    currentExpand[0] = true;\n\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n\n\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nexport class MatTreeFlatDataSource<T, F> extends DataSource<F> {\n  _flattenedData = new BehaviorSubject<F[]>([]);\n\n  _expandedData = new BehaviorSubject<F[]>([]);\n\n  _data: BehaviorSubject<T[]>;\n  get data() { return this._data.value; }\n  set data(value: T[]) {\n    this._data.next(value);\n    this._flattenedData.next(this.treeFlattener.flattenNodes(this.data));\n    this.treeControl.dataNodes = this._flattenedData.value;\n  }\n\n  constructor(private treeControl: FlatTreeControl<F>,\n              private treeFlattener: MatTreeFlattener<T, F>,\n              initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n  }\n\n  connect(collectionViewer: CollectionViewer): Observable<F[]> {\n    const changes = [\n      collectionViewer.viewChange,\n      this.treeControl.expansionModel.onChange,\n      this._flattenedData\n    ];\n    return merge(...changes).pipe(map(() => {\n      this._expandedData.next(\n        this.treeFlattener.expandFlattenedNodes(this._flattenedData.value, this.treeControl));\n      return this._expandedData.value;\n    }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CollectionViewer, DataSource} from '@angular/cdk/collections';\nimport {BehaviorSubject, merge, Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\n\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nexport class MatTreeNestedDataSource<T> extends DataSource<T> {\n  _data = new BehaviorSubject<T[]>([]);\n\n  /**\n   * Data for the nested tree\n   */\n  get data() { return this._data.value; }\n  set data(value: T[]) { this._data.next(value); }\n\n  connect(collectionViewer: CollectionViewer): Observable<T[]> {\n    return merge(...[collectionViewer.viewChange, this._data])\n      .pipe(map(() => {\n        return this.data;\n      }));\n  }\n\n  disconnect() {\n    // no op\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Version} from '@angular/core';\n\n/** Current version of Angular Material. */\nexport const VERSION = new Version('7.0.2-7730f45');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {Directionality} from '@angular/cdk/bidi';\nimport {DOWN_ARROW, ENTER, ESCAPE, TAB, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {filter, take, switchMap, delay, tap, map} from 'rxjs/operators';\nimport {\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Host,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n} from '@angular/core';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  MatOption,\n  MatOptionSelectionChange,\n} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {Subscription, defer, fromEvent, merge, of as observableOf, Subject, Observable} from 'rxjs';\nimport {MatAutocomplete} from './autocomplete';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n\n/** The height of each autocomplete option. */\nexport const AUTOCOMPLETE_OPTION_HEIGHT = 48;\n\n/** The total height of the autocomplete panel. */\nexport const AUTOCOMPLETE_PANEL_HEIGHT = 256;\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-autocomplete-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nexport const MAT_AUTOCOMPLETE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nexport function getMatAutocompleteMissingPanelError(): Error {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n               'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n               'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n\n\n@Directive({\n  selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n  host: {\n    '[attr.autocomplete]': 'autocompleteAttribute',\n    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n    '[attr.aria-activedescendant]': 'activeOption?.id',\n    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n    // a little earlier. This avoids issues where IE delays the focusing of the input.\n    '(focusin)': '_handleFocus()',\n    '(blur)': '_onTouched()',\n    '(input)': '_handleInput($event)',\n    '(keydown)': '_handleKeydown($event)',\n  },\n  exportAs: 'matAutocompleteTrigger',\n  providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n})\nexport class MatAutocompleteTrigger implements ControlValueAccessor, OnDestroy {\n  private _overlayRef: OverlayRef | null;\n  private _portal: TemplatePortal;\n  private _componentDestroyed = false;\n  private _autocompleteDisabled = false;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n  private _previousValue: string | number | null;\n\n  /** Strategy that is used to position the panel. */\n  private _positionStrategy: FlexibleConnectedPositionStrategy;\n\n  /** Whether or not the label state is being overridden. */\n  private _manuallyFloatingLabel = false;\n\n  /** The subscription for closing actions (some are bound to document). */\n  private _closingActionsSubscription: Subscription;\n\n  /** Subscription to viewport size changes. */\n  private _viewportSubscription = Subscription.EMPTY;\n\n  /**\n   * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n   * closed autocomplete from being reopened if the user switches to another browser tab and then\n   * comes back.\n   */\n  private _canOpenOnNextFocus = true;\n\n  /** Stream of keyboard events that can close the panel. */\n  private readonly _closeKeyEventStream = new Subject<void>();\n\n  /**\n   * Event handler for when the window is blurred. Needs to be an\n   * arrow function in order to preserve the context.\n   */\n  private _windowBlurHandler = () => {\n    // If the user blurred the window while the autocomplete is focused, it means that it'll be\n    // refocused when they come back. In this case we want to skip the first focus event, if the\n    // pane was closed, in order to avoid reopening it unintentionally.\n    this._canOpenOnNextFocus =\n        document.activeElement !== this._element.nativeElement || this.panelOpen;\n  }\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when autocomplete has been touched` */\n  _onTouched = () => {};\n\n  /** The autocomplete panel to be attached to this trigger. */\n  @Input('matAutocomplete') autocomplete: MatAutocomplete;\n\n  /**\n   * Reference relative to which to position the autocomplete panel.\n   * Defaults to the autocomplete trigger element.\n   */\n  @Input('matAutocompleteConnectedTo') connectedTo: MatAutocompleteOrigin;\n\n  /**\n   * `autocomplete` attribute to be set on the input element.\n   * @docs-private\n   */\n  @Input('autocomplete') autocompleteAttribute: string = 'off';\n\n  /**\n   * Whether the autocomplete is disabled. When disabled, the element will\n   * act as a regular input and the user won't be able to open the panel.\n   */\n  @Input('matAutocompleteDisabled')\n  get autocompleteDisabled(): boolean { return this._autocompleteDisabled; }\n  set autocompleteDisabled(value: boolean) {\n    this._autocompleteDisabled = coerceBooleanProperty(value);\n  }\n\n  constructor(private _element: ElementRef<HTMLInputElement>, private _overlay: Overlay,\n              private _viewContainerRef: ViewContainerRef,\n              private _zone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dir: Directionality,\n              @Optional() @Host() private _formField: MatFormField,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 Make `_viewportRuler` required.\n              private _viewportRuler?: ViewportRuler) {\n\n    if (typeof window !== 'undefined') {\n      _zone.runOutsideAngular(() => {\n        window.addEventListener('blur', this._windowBlurHandler);\n      });\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('blur', this._windowBlurHandler);\n    }\n\n    this._viewportSubscription.unsubscribe();\n    this._componentDestroyed = true;\n    this._destroyPanel();\n    this._closeKeyEventStream.complete();\n  }\n\n  /** Whether or not the autocomplete panel is open. */\n  get panelOpen(): boolean {\n    return this._overlayAttached && this.autocomplete.showPanel;\n  }\n  private _overlayAttached: boolean = false;\n\n  /** Opens the autocomplete suggestion panel. */\n  openPanel(): void {\n    this._attachOverlay();\n    this._floatLabel();\n  }\n\n  /** Closes the autocomplete suggestion panel. */\n  closePanel(): void {\n    this._resetLabel();\n\n    if (!this._overlayAttached) {\n      return;\n    }\n\n    if (this.panelOpen) {\n      // Only emit if the panel was visible.\n      this.autocomplete.closed.emit();\n    }\n\n    this.autocomplete._isOpen = this._overlayAttached = false;\n\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n      this._closingActionsSubscription.unsubscribe();\n    }\n\n    // Note that in some cases this can end up being called after the component is destroyed.\n    // Add a check to ensure that we don't try to run change detection on a destroyed view.\n    if (!this._componentDestroyed) {\n      // We need to trigger change detection manually, because\n      // `fromEvent` doesn't seem to do it at the proper time.\n      // This ensures that the label is reset when the\n      // user clicks outside.\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /**\n   * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n   * within the viewport.\n   */\n  updatePosition(): void {\n    if (this._overlayAttached) {\n      this._overlayRef!.updatePosition();\n    }\n  }\n\n  /**\n   * A stream of actions that should close the autocomplete panel, including\n   * when an option is selected, on blur, and when TAB is pressed.\n   */\n  get panelClosingActions(): Observable<MatOptionSelectionChange|null> {\n    return merge(\n      this.optionSelections,\n      this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)),\n      this._closeKeyEventStream,\n      this._getOutsideClickStream(),\n      this._overlayRef ?\n          this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n          observableOf()\n    ).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null)\n    );\n  }\n\n  /** Stream of autocomplete option selections. */\n  readonly optionSelections: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.autocomplete && this.autocomplete.options) {\n     return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n    }\n\n    // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n    // Return a stream that we'll replace with the real one once everything is in place.\n    return this._zone.onStable\n        .asObservable()\n        .pipe(take(1), switchMap(() => this.optionSelections));\n  });\n\n  /** The currently active option, coerced to MatOption type. */\n  get activeOption(): MatOption | null {\n    if (this.autocomplete && this.autocomplete._keyManager) {\n      return this.autocomplete._keyManager.activeItem;\n    }\n\n    return null;\n  }\n\n  /** Stream of clicks outside of the autocomplete panel. */\n  private _getOutsideClickStream(): Observable<any> {\n    if (!this._document) {\n      return observableOf(null);\n    }\n\n    return merge(\n      fromEvent<MouseEvent>(this._document, 'click'),\n      fromEvent<TouchEvent>(this._document, 'touchend')\n    )\n    .pipe(filter(event => {\n      const clickTarget = event.target as HTMLElement;\n      const formField = this._formField ?\n          this._formField._elementRef.nativeElement : null;\n\n      return this._overlayAttached &&\n              clickTarget !== this._element.nativeElement &&\n              (!formField || !formField.contains(clickTarget)) &&\n              (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n    }));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    Promise.resolve(null).then(() => this._setTriggerValue(value));\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => {}): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => {}) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this._element.nativeElement.disabled = isDisabled;\n  }\n\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    // Prevent the default action on all escape key presses. This is here primarily to bring IE\n    // in line with other browsers. By default, pressing escape on IE will cause it to revert\n    // the input value to the one that it had on focus, however it won't dispatch any events\n    // which means that the model value will be out of sync with the view.\n    if (keyCode === ESCAPE) {\n      event.preventDefault();\n    }\n\n    if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n      this.activeOption._selectViaInteraction();\n      this._resetActiveItem();\n      event.preventDefault();\n    } else if (this.autocomplete) {\n      const prevActiveItem = this.autocomplete._keyManager.activeItem;\n      const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n\n      if (this.panelOpen || keyCode === TAB) {\n        this.autocomplete._keyManager.onKeydown(event);\n      } else if (isArrowKey && this._canOpen()) {\n        this.openPanel();\n      }\n\n      if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n        this._scrollToOption();\n      }\n    }\n  }\n\n  _handleInput(event: KeyboardEvent): void {\n    let target = event.target as HTMLInputElement;\n    let value: number | string | null = target.value;\n\n    // Based on `NumberValueAccessor` from forms.\n    if (target.type === 'number') {\n      value = value == '' ? null : parseFloat(value);\n    }\n\n    // If the input has a placeholder, IE will fire the `input` event on page load,\n    // focus and blur, in addition to when the user actually changed the value. To\n    // filter out all of the extra events, we save the value on focus and between\n    // `input` events, and we check whether it changed.\n    // See: https://connect.microsoft.com/IE/feedback/details/885747/\n    if (this._previousValue !== value && document.activeElement === event.target) {\n      this._previousValue = value;\n      this._onChange(value);\n\n      if (this._canOpen()) {\n        this.openPanel();\n      }\n    }\n  }\n\n  _handleFocus(): void {\n    if (!this._canOpenOnNextFocus) {\n      this._canOpenOnNextFocus = true;\n    } else if (this._canOpen()) {\n      this._previousValue = this._element.nativeElement.value;\n      this._attachOverlay();\n      this._floatLabel(true);\n    }\n  }\n\n  /**\n   * In \"auto\" mode, the label will animate down as soon as focus is lost.\n   * This causes the value to jump when selecting an option with the mouse.\n   * This method manually floats the label until the panel can be closed.\n   * @param shouldAnimate Whether the label should be animated when it is floated.\n   */\n  private _floatLabel(shouldAnimate = false): void {\n    if (this._formField && this._formField.floatLabel === 'auto') {\n      if (shouldAnimate) {\n        this._formField._animateAndLockLabel();\n      } else {\n        this._formField.floatLabel = 'always';\n      }\n\n      this._manuallyFloatingLabel = true;\n    }\n  }\n\n  /** If the label has been manually elevated, return it to its normal state. */\n  private _resetLabel(): void  {\n    if (this._manuallyFloatingLabel) {\n      this._formField.floatLabel = 'auto';\n      this._manuallyFloatingLabel = false;\n    }\n  }\n\n  /**\n   * Given that we are not actually focusing active options, we must manually adjust scroll\n   * to reveal options below the fold. First, we find the offset of the option from the top\n   * of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n   * the panel height + the option height, so the active option will be just visible at the\n   * bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n   * will become the offset. If that offset is visible within the panel already, the scrollTop is\n   * not adjusted.\n   */\n  private _scrollToOption(): void {\n    const index = this.autocomplete._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(index,\n        this.autocomplete.options, this.autocomplete.optionGroups);\n\n    const newScrollPosition = _getOptionScrollPosition(\n      index + labelCount,\n      AUTOCOMPLETE_OPTION_HEIGHT,\n      this.autocomplete._getScrollTop(),\n      AUTOCOMPLETE_PANEL_HEIGHT\n    );\n\n    this.autocomplete._setScrollTop(newScrollPosition);\n  }\n\n  /**\n   * This method listens to a stream of panel closing actions and resets the\n   * stream every time the option list changes.\n   */\n  private _subscribeToClosingActions(): Subscription {\n    const firstStable = this._zone.onStable.asObservable().pipe(take(1));\n    const optionChanges = this.autocomplete.options.changes.pipe(\n      tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)\n    );\n\n    // When the zone is stable initially, and when the option list changes...\n    return merge(firstStable, optionChanges)\n      .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n          this._resetActiveItem();\n          this.autocomplete._setVisibility();\n\n          if (this.panelOpen) {\n            this._overlayRef!.updatePosition();\n          }\n\n          return this.panelClosingActions;\n        }),\n        // when the first closing event occurs...\n        take(1)\n      )\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n  }\n\n  /** Destroys the autocomplete suggestion panel. */\n  private _destroyPanel(): void {\n    if (this._overlayRef) {\n      this.closePanel();\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n  }\n\n  private _setTriggerValue(value: any): void {\n    const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n      this.autocomplete.displayWith(value) :\n      value;\n\n    // Simply falling back to an empty string if the display value is falsy does not work properly.\n    // The display value can also be the number zero and shouldn't fall back to an empty string.\n    const inputValue = toDisplay != null ? toDisplay : '';\n\n    // If it's used within a `MatFormField`, we should set it through the property so it can go\n    // through change detection.\n    if (this._formField) {\n      this._formField._control.value = inputValue;\n    } else {\n      this._element.nativeElement.value = inputValue;\n    }\n\n    this._previousValue = inputValue;\n  }\n\n  /**\n   * This method closes the panel, and if a value is specified, also sets the associated\n   * control to that value. It will also mark the control as dirty if this interaction\n   * stemmed from the user.\n   */\n  private _setValueAndClose(event: MatOptionSelectionChange | null): void {\n    if (event && event.source) {\n      this._clearPreviousSelectedOption(event.source);\n      this._setTriggerValue(event.source.value);\n      this._onChange(event.source.value);\n      this._element.nativeElement.focus();\n      this.autocomplete._emitSelectEvent(event.source);\n    }\n\n    this.closePanel();\n  }\n\n  /**\n   * Clear any previous selected option and emit a selection change event for this option\n   */\n  private _clearPreviousSelectedOption(skip: MatOption) {\n    this.autocomplete.options.forEach(option => {\n      if (option != skip && option.selected) {\n        option.deselect();\n      }\n    });\n  }\n\n  private _attachOverlay(): void {\n    if (!this.autocomplete) {\n      throw getMatAutocompleteMissingPanelError();\n    }\n\n    if (!this._overlayRef) {\n      this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef);\n      this._overlayRef = this._overlay.create(this._getOverlayConfig());\n\n      // Use the `keydownEvents` in order to take advantage of\n      // the overlay event targeting provided by the CDK overlay.\n      this._overlayRef.keydownEvents().subscribe(event => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if (event.keyCode === ESCAPE || (event.keyCode === UP_ARROW && event.altKey)) {\n          this._resetActiveItem();\n          this._closeKeyEventStream.next();\n        }\n      });\n\n      if (this._viewportRuler) {\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && this._overlayRef) {\n            this._overlayRef.updateSize({width: this._getPanelWidth()});\n          }\n        });\n      }\n    } else {\n      // Update the panel width and direction, in case anything has changed.\n      this._overlayRef.updateSize({width: this._getPanelWidth()});\n    }\n\n    if (this._overlayRef && !this._overlayRef.hasAttached()) {\n      this._overlayRef.attach(this._portal);\n      this._closingActionsSubscription = this._subscribeToClosingActions();\n    }\n\n    const wasOpen = this.panelOpen;\n\n    this.autocomplete._setVisibility();\n    this.autocomplete._isOpen = this._overlayAttached = true;\n\n    // We need to do an extra `panelOpen` check in here, because the\n    // autocomplete won't be shown if there are no options.\n    if (this.panelOpen && wasOpen !== this.panelOpen) {\n      this.autocomplete.opened.emit();\n    }\n  }\n\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._getOverlayPosition(),\n      scrollStrategy: this._scrollStrategy(),\n      width: this._getPanelWidth(),\n      direction: this._dir\n    });\n  }\n\n  private _getOverlayPosition(): PositionStrategy {\n    this._positionStrategy = this._overlay.position()\n      .flexibleConnectedTo(this._getConnectedElement())\n      .withFlexibleDimensions(false)\n      .withPush(false)\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom',\n\n          // The overlay edge connected to the trigger should have squared corners, while\n          // the opposite end has rounded corners. We apply a CSS class to swap the\n          // border-radius based on the overlay position.\n          panelClass: 'mat-autocomplete-panel-above'\n        }\n      ]);\n\n    return this._positionStrategy;\n  }\n\n  private _getConnectedElement(): ElementRef {\n    if (this.connectedTo) {\n      return this.connectedTo.elementRef;\n    }\n\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n  }\n\n  private _getPanelWidth(): number | string {\n    return this.autocomplete.panelWidth || this._getHostWidth();\n  }\n\n  /** Returns the width of the input element, so the panel width can match it. */\n  private _getHostWidth(): number {\n    return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n  }\n\n  /**\n   * Resets the active item to -1 so arrow events will activate the\n   * correct options, or to 0 if the consumer opted into it.\n   */\n  private _resetActiveItem(): void {\n    this.autocomplete._keyManager.setActiveItem(this.autocomplete.autoActiveFirstOption ? 0 : -1);\n  }\n\n  /** Determines whether the panel can be opened. */\n  private _canOpen(): boolean {\n    const element = this._element.nativeElement;\n    return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * When constructing a Date, the month is zero-based. This can be confusing, since people are\n * used to seeing them one-based. So we create these aliases to make writing the tests easier.\n */\nexport const JAN = 0, FEB = 1, MAR = 2, APR = 3, MAY = 4, JUN = 5, JUL = 6, AUG = 7, SEP = 8,\n    OCT = 9, NOV = 10, DEC = 11;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  animateChild,\n  group,\n  state,\n  style,\n  transition,\n  trigger,\n  query,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly expansionHeaderHeight: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n\n  /** Animation that expands and collapses the panel header height. */\n  expansionHeaderHeight: trigger('expansionHeight', [\n    state('collapsed, void', style({\n      height: '{{collapsedHeight}}',\n    }), {\n      params: {collapsedHeight: '48px'},\n    }),\n    state('expanded', style({\n      height: '{{expandedHeight}}'\n    }), {\n      params: {expandedHeight: '64px'}\n    }),\n    transition('expanded <=> collapsed, void => collapsed', group([\n      query('@indicatorRotate', animateChild(), {optional: true}),\n      animate(EXPANSION_PANEL_ANIMATION_TIMING),\n    ])),\n  ]),\n\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  A,\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  RIGHT_ARROW,\n  SPACE,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {CdkConnectedOverlay, Overlay, ScrollStrategy} from '@angular/cdk/overlay';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  isDevMode,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  _countGroupLabelsBeforeOption,\n  _getOptionScrollPosition,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  MatOptionSelectionChange,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinErrorState,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {MatFormField, MatFormFieldControl} from '@angular/material/form-field';\nimport {defer, merge, Observable, Subject} from 'rxjs';\nimport {\n  distinctUntilChanged,\n  filter,\n  map,\n  startWith,\n  switchMap,\n  take,\n  takeUntil,\n} from 'rxjs/operators';\nimport {matSelectAnimations} from './select-animations';\nimport {\n  getMatSelectDynamicMultipleError,\n  getMatSelectNonArrayValueError,\n  getMatSelectNonFunctionValueError,\n} from './select-errors';\n\n\nlet nextUniqueId = 0;\n\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n\n/** The max height of the select's overlay panel */\nexport const SELECT_PANEL_MAX_HEIGHT = 256;\n\n/** The panel's padding on the x-axis */\nexport const SELECT_PANEL_PADDING_X = 16;\n\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nexport const SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n\n/** The height of the select items in `em` units. */\nexport const SELECT_ITEM_HEIGHT_EM = 3;\n\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 20 = 44\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nexport let SELECT_MULTIPLE_PANEL_PADDING_X = 0;\n\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nexport const SELECT_PANEL_VIEWPORT_PADDING = 8;\n\n/** Injection token that determines the scroll handling while a select is open. */\nexport const MAT_SELECT_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-select-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n    () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_SELECT_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Change event object that is emitted when the select value has changed. */\nexport class MatSelectChange {\n  constructor(\n    /** Reference to the select that emitted the change event. */\n    public source: MatSelect,\n    /** Current value of the select that emitted the event. */\n    public value: any) { }\n}\n\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nexport class MatSelectBase {\n  constructor(public _elementRef: ElementRef,\n              public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              public ngControl: NgControl) {}\n}\nexport const _MatSelectMixinBase:\n    CanDisableCtor &\n    HasTabIndexCtor &\n    CanDisableRippleCtor &\n    CanUpdateErrorStateCtor &\n    typeof MatSelectBase =\n        mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(MatSelectBase))));\n\n\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\n@Directive({\n  selector: 'mat-select-trigger'\n})\nexport class MatSelectTrigger {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-select',\n  exportAs: 'matSelect',\n  templateUrl: 'select.html',\n  styleUrls: ['select.css'],\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'role': 'listbox',\n    '[attr.id]': 'id',\n    '[attr.tabindex]': 'tabIndex',\n    '[attr.aria-label]': '_getAriaLabel()',\n    '[attr.aria-labelledby]': '_getAriaLabelledby()',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-owns]': 'panelOpen ? _optionIds : null',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n    '[class.mat-select-disabled]': 'disabled',\n    '[class.mat-select-invalid]': 'errorState',\n    '[class.mat-select-required]': 'required',\n    '[class.mat-select-empty]': 'empty',\n    'class': 'mat-select',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n  },\n  animations: [\n    matSelectAnimations.transformPanel\n  ],\n  providers: [\n    {provide: MatFormFieldControl, useExisting: MatSelect},\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect}\n  ],\n})\nexport class MatSelect extends _MatSelectMixinBase implements AfterContentInit, OnChanges,\n    OnDestroy, OnInit, DoCheck, ControlValueAccessor, CanDisable, HasTabIndex,\n    MatFormFieldControl<any>, CanUpdateErrorState, CanDisableRipple {\n  private _scrollStrategyFactory: () => ScrollStrategy;\n\n  /** Whether or not the overlay panel is open. */\n  private _panelOpen = false;\n\n  /** Whether filling out the select is required in the form. */\n  private _required: boolean = false;\n\n  /** The scroll position of the overlay panel, calculated to center the selected option. */\n  private _scrollTop = 0;\n\n  /** The placeholder displayed in the trigger of the select. */\n  private _placeholder: string;\n\n  /** Whether the component is in multiple selection mode. */\n  private _multiple: boolean = false;\n\n  /** Comparison function to specify which option is displayed. Defaults to object equality. */\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /** Unique id for this input. */\n  private _uid = `mat-select-${nextUniqueId++}`;\n\n  /** Emits whenever the component is destroyed. */\n  private readonly _destroy = new Subject<void>();\n\n  /** The last measured value for the trigger's client bounding rect. */\n  _triggerRect: ClientRect;\n\n  /** The aria-describedby attribute on the select for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** The cached font-size of the trigger element. */\n  _triggerFontSize = 0;\n\n  /** Deals with the selection logic. */\n  _selectionModel: SelectionModel<MatOption>;\n\n  /** Manages keyboard events for options in the panel. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** `View -> model callback called when value changes` */\n  _onChange: (value: any) => void = () => {};\n\n  /** `View -> model callback called when select has been touched` */\n  _onTouched = () => {};\n\n  /** The IDs of child options to be passed to the aria-owns attribute. */\n  _optionIds: string = '';\n\n  /** The value of the select panel's transform-origin property. */\n  _transformOrigin: string = 'top';\n\n  /** Emits when the panel element is finished transforming in. */\n  _panelDoneAnimatingStream = new Subject<string>();\n\n  /** Strategy that will be used to handle scrolling while the select panel is open. */\n  _scrollStrategy: ScrollStrategy;\n\n  /**\n   * The y-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text.\n   * when the panel opens. Will change based on the y-position of the selected option.\n   */\n  _offsetY = 0;\n\n  /**\n   * This position config ensures that the top \"start\" corner of the overlay\n   * is aligned with with the top \"start\" of the origin by default (overlapping\n   * the trigger completely). If the panel cannot fit below the trigger, it\n   * will fall back to a position above the trigger.\n   */\n  _positions = [\n    {\n      originX: 'start',\n      originY: 'top',\n      overlayX: 'start',\n      overlayY: 'top',\n    },\n    {\n      originX: 'start',\n      originY: 'bottom',\n      overlayX: 'start',\n      overlayY: 'bottom',\n    },\n  ];\n\n  /** Whether the component is disabling centering of the active option over the trigger. */\n  private _disableOptionCentering: boolean = false;\n\n  /** Whether the select is focused. */\n  get focused(): boolean {\n    return this._focused || this._panelOpen;\n  }\n  /**\n   * @deprecated Setter to be removed as this property is intended to be readonly.\n   * @breaking-change 8.0.0\n   */\n  set focused(value: boolean) {\n    this._focused = value;\n  }\n  private _focused = false;\n\n  /** A name for this control that can be used by `mat-form-field`. */\n  controlType = 'mat-select';\n\n  /** Trigger that opens the select. */\n  @ViewChild('trigger') trigger: ElementRef;\n\n  /** Panel containing the select options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** Overlay pane containing the options. */\n  @ViewChild(CdkConnectedOverlay) overlayDir: CdkConnectedOverlay;\n\n  /** All of the defined select options. */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** All of the defined groups of options. */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** User-supplied override of the trigger element. */\n  @ContentChild(MatSelectTrigger) customTrigger: MatSelectTrigger;\n\n  /** Placeholder to be shown if no value has been selected. */\n  @Input()\n  get placeholder(): string { return this._placeholder; }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n\n  /** Whether the component is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n\n  /** Whether the user should be allowed to select multiple options. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    if (this._selectionModel) {\n      throw getMatSelectDynamicMultipleError();\n    }\n\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether to center the active option over the trigger. */\n  @Input()\n  get disableOptionCentering(): boolean { return this._disableOptionCentering; }\n  set disableOptionCentering(value: boolean) {\n    this._disableOptionCentering = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith() { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    if (typeof fn !== 'function') {\n      throw getMatSelectNonFunctionValueError();\n    }\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n\n  /** Value of the select control. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (newValue !== this._value) {\n      this.writeValue(newValue);\n      this._value = newValue;\n    }\n  }\n  private _value: any;\n\n  /** Aria label of the select. If not specified, the placeholder will be used as label. */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /** Input that can be used to specify the `aria-labelledby` attribute. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Function used to sort the values in a select in multiple mode.\n   * Follows the same logic as `Array.prototype.sort`.\n   */\n  @Input() sortComparator: (a: MatOption, b: MatOption, options: MatOption[]) => number;\n\n  /** Unique id of the element. */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) {\n    this._id = value || this._uid;\n    this.stateChanges.next();\n  }\n  private _id: string;\n\n  /** Combined stream of all of the child options' change events. */\n  readonly optionSelectionChanges: Observable<MatOptionSelectionChange> = defer(() => {\n    if (this.options) {\n      return merge(...this.options.map(option => option.onSelectionChange));\n    }\n\n    return this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1), switchMap(() => this.optionSelectionChanges));\n  });\n\n  /** Event emitted when the select panel has been toggled. */\n  @Output() readonly openedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the select has been opened. */\n  @Output('opened') readonly _openedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => o), map(() => {}));\n\n  /** Event emitted when the select has been closed. */\n  @Output('closed') readonly _closedStream: Observable<void> =\n      this.openedChange.pipe(filter(o => !o), map(() => {}));\n\n   /** Event emitted when the selected value has been changed by the user. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectChange> =\n      new EventEmitter<MatSelectChange>();\n\n  /**\n   * Event that emits whenever the raw value of the select changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    private _viewportRuler: ViewportRuler,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _ngZone: NgZone,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    elementRef: ElementRef,\n    @Optional() private _dir: Directionality,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    @Optional() private _parentFormField: MatFormField,\n    @Self() @Optional() public ngControl: NgControl,\n    @Attribute('tabindex') tabIndex: string,\n    @Inject(MAT_SELECT_SCROLL_STRATEGY) scrollStrategyFactory: any) {\n    super(elementRef, _defaultErrorStateMatcher, _parentForm,\n          _parentFormGroup, ngControl);\n\n    if (this.ngControl) {\n      // Note: we provide the value accessor through here, instead of\n      // the `providers` to avoid running into a circular import.\n      this.ngControl.valueAccessor = this;\n    }\n\n    this._scrollStrategyFactory = scrollStrategyFactory;\n    this._scrollStrategy = this._scrollStrategyFactory();\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatOption>(this.multiple);\n    this.stateChanges.next();\n\n    // We need `distinctUntilChanged` here, because some browsers will\n    // fire the animation end event twice for the same animation. See:\n    // https://github.com/angular/angular/issues/24084\n    this._panelDoneAnimatingStream\n      .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n      .subscribe(() => {\n        if (this.panelOpen) {\n          this._scrollTop = 0;\n          this.openedChange.emit(true);\n        } else {\n          this.openedChange.emit(false);\n          this.overlayDir.offsetX = 0;\n          this._changeDetectorRef.markForCheck();\n        }\n      });\n  }\n\n  ngAfterContentInit() {\n    this._initKeyManager();\n\n    this._selectionModel.onChange.pipe(takeUntil(this._destroy)).subscribe(event => {\n      event.added.forEach(option => option.select());\n      event.removed.forEach(option => option.deselect());\n    });\n\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n      this._resetOptions();\n      this._initializeSelection();\n    });\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      this.updateErrorState();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n    // the parent form field know to run change detection when the disabled state changes.\n    if (changes.disabled) {\n      this.stateChanges.next();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroy.next();\n    this._destroy.complete();\n    this.stateChanges.complete();\n  }\n\n  /** Toggles the overlay panel open or closed. */\n  toggle(): void {\n    this.panelOpen ? this.close() : this.open();\n  }\n\n  /** Opens the overlay panel. */\n  open(): void {\n    if (this.disabled || !this.options || !this.options.length || this._panelOpen) {\n      return;\n    }\n\n    this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n    // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n    // `parseInt` ignores the trailing 'px' and converts this to a number.\n    this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n\n    this._panelOpen = true;\n    this._keyManager.withHorizontalOrientation(null);\n    this._calculateOverlayPosition();\n    this._highlightCorrectOption();\n    this._changeDetectorRef.markForCheck();\n\n    // Set the font size on the panel element once it exists.\n    this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n      if (this._triggerFontSize && this.overlayDir.overlayRef &&\n          this.overlayDir.overlayRef.overlayElement) {\n        this.overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n      }\n    });\n  }\n\n  /** Closes the overlay panel and focuses the host element. */\n  close(): void {\n    if (this._panelOpen) {\n      this._panelOpen = false;\n      this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n      this._changeDetectorRef.markForCheck();\n      this._onTouched();\n    }\n  }\n\n  /**\n   * Sets the select's value. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param value New value to be written to the model.\n   */\n  writeValue(value: any): void {\n    if (this.options) {\n      this._setSelectionByValue(value);\n    }\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select's value\n   * changes from user input. Part of the ControlValueAccessor interface\n   * required to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the value changes.\n   */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /**\n   * Saves a callback function to be invoked when the select is blurred\n   * by the user. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param fn Callback to be triggered when the component has been touched.\n   */\n  registerOnTouched(fn: () => {}): void {\n    this._onTouched = fn;\n  }\n\n  /**\n   * Disables the select. Part of the ControlValueAccessor interface required\n   * to integrate with Angular's core forms API.\n   *\n   * @param isDisabled Sets whether the component is disabled.\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  /** Whether or not the overlay panel is open. */\n  get panelOpen(): boolean {\n    return this._panelOpen;\n  }\n\n  /** The currently selected option. */\n  get selected(): MatOption | MatOption[] {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The value displayed in the trigger. */\n  get triggerValue(): string {\n    if (this.empty) {\n      return '';\n    }\n\n    if (this._multiple) {\n      const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n\n      if (this._isRtl()) {\n        selectedOptions.reverse();\n      }\n\n      // TODO(crisbeto): delimiter should be configurable for proper localization.\n      return selectedOptions.join(', ');\n    }\n\n    return this._selectionModel.selected[0].viewValue;\n  }\n\n  /** Whether the element is in RTL mode. */\n  _isRtl(): boolean {\n    return this._dir ? this._dir.value === 'rtl' : false;\n  }\n\n  /** Handles all keydown events on the select. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (!this.disabled) {\n      this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n    }\n  }\n\n  /** Handles keyboard events while the select is closed. */\n  private _handleClosedKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW ||\n                       keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW;\n    const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n    const manager = this._keyManager;\n\n    // Open the select on ALT + arrow key to match the native <select>\n    if (isOpenKey || ((this.multiple || event.altKey) && isArrowKey)) {\n      event.preventDefault(); // prevents the page from scrolling down when pressing space\n      this.open();\n    } else if (!this.multiple) {\n      if (keyCode === HOME || keyCode === END) {\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        manager.onKeydown(event);\n      }\n    }\n  }\n\n  /** Handles keyboard events when the selected is open. */\n  private _handleOpenKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n    const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME || keyCode === END) {\n      event.preventDefault();\n      keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n    } else if (isArrowKey && event.altKey) {\n      // Close the select on ALT + arrow key to match the native <select>\n      event.preventDefault();\n      this.close();\n    } else if ((keyCode === ENTER || keyCode === SPACE) && manager.activeItem) {\n      event.preventDefault();\n      manager.activeItem._selectViaInteraction();\n    } else if (this._multiple && keyCode === A && event.ctrlKey) {\n      event.preventDefault();\n      const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n\n      this.options.forEach(option => {\n        if (!option.disabled) {\n          hasDeselectedOptions ? option.select() : option.deselect();\n        }\n      });\n    } else {\n      const previouslyFocusedIndex = manager.activeItemIndex;\n\n      manager.onKeydown(event);\n\n      if (this._multiple && isArrowKey && event.shiftKey && manager.activeItem &&\n          manager.activeItemIndex !== previouslyFocusedIndex) {\n        manager.activeItem._selectViaInteraction();\n      }\n    }\n  }\n\n  _onFocus() {\n    if (!this.disabled) {\n      this._focused = true;\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n   * \"blur\" to the panel when it opens, causing a false positive.\n   */\n  _onBlur() {\n    this._focused = false;\n\n    if (!this.disabled && !this.panelOpen) {\n      this._onTouched();\n      this._changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    }\n  }\n\n  /**\n   * Callback that is invoked when the overlay panel has been attached.\n   */\n  _onAttached(): void {\n    this.overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n      this._setPseudoCheckboxPaddingSize();\n      this._changeDetectorRef.detectChanges();\n      this._calculateOverlayOffsetX();\n      this.panel.nativeElement.scrollTop = this._scrollTop;\n    });\n  }\n\n  /** Returns the theme to be used on the panel. */\n  _getPanelTheme(): string {\n    return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n  }\n\n  // TODO(josephperrott): Remove after 2018 spec updates are fully merged.\n  /** Sets the pseudo checkbox padding size based on the width of the pseudo checkbox. */\n  private _setPseudoCheckboxPaddingSize() {\n    if (!SELECT_MULTIPLE_PANEL_PADDING_X && this.multiple) {\n      const pseudoCheckbox = this.panel.nativeElement.querySelector('.mat-pseudo-checkbox');\n      if (pseudoCheckbox) {\n        SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + pseudoCheckbox.offsetWidth;\n      }\n    }\n  }\n\n  /** Whether the select has a value. */\n  get empty(): boolean {\n    return !this._selectionModel || this._selectionModel.isEmpty();\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value);\n    });\n  }\n\n  /**\n   * Sets the selected option based on a value. If no option can be\n   * found with the designated value, the select trigger is cleared.\n   */\n  private _setSelectionByValue(value: any | any[]): void {\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw getMatSelectNonArrayValueError();\n      }\n\n      this._selectionModel.clear();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n      this._sortValues();\n    } else {\n      this._selectionModel.clear();\n      const correspondingOption = this._selectValue(value);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what option the user interacted with last.\n      if (correspondingOption) {\n        this._keyManager.setActiveItem(correspondingOption);\n      }\n    }\n\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Finds and selects and option based on its value.\n   * @returns Option that has the corresponding value.\n   */\n  private _selectValue(value: any): MatOption | undefined {\n    const correspondingOption = this.options.find((option: MatOption) => {\n      try {\n        // Treat null as a special reset value.\n        return option.value != null && this._compareWith(option.value,  value);\n      } catch (error) {\n        if (isDevMode()) {\n          // Notify developers of errors in their comparator.\n          console.warn(error);\n        }\n        return false;\n      }\n    });\n\n    if (correspondingOption) {\n      this._selectionModel.select(correspondingOption);\n    }\n\n    return correspondingOption;\n  }\n\n  /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n  private _initKeyManager() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options)\n      .withTypeAhead()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n      .withAllowedModifierKeys(['shiftKey']);\n\n    this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n      // Restore focus to the trigger before closing. Ensures that the focus\n      // position won't be lost if the user got focus into the overlay.\n      this.focus();\n      this.close();\n    });\n\n    this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n      if (this._panelOpen && this.panel) {\n        this._scrollActiveOptionIntoView();\n      } else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n        this._keyManager.activeItem._selectViaInteraction();\n      }\n    });\n  }\n\n  /** Drops current option subscriptions and IDs and resets from scratch. */\n  private _resetOptions(): void {\n    const changedOrDestroyed = merge(this.options.changes, this._destroy);\n\n    this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n      this._onSelect(event.source, event.isUserInput);\n\n      if (event.isUserInput && !this.multiple && this._panelOpen) {\n        this.close();\n        this.focus();\n      }\n    });\n\n    // Listen to changes in the internal state of the options and react accordingly.\n    // Handles cases like the labels of the selected options changing.\n    merge(...this.options.map(option => option._stateChanges))\n      .pipe(takeUntil(changedOrDestroyed))\n      .subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n\n    this._setOptionIds();\n  }\n\n  /** Invoked when an option is clicked. */\n  private _onSelect(option: MatOption, isUserInput: boolean): void {\n    const wasSelected = this._selectionModel.isSelected(option);\n\n    if (option.value == null && !this._multiple) {\n      option.deselect();\n      this._selectionModel.clear();\n      this._propagateChanges(option.value);\n    } else {\n      option.selected ? this._selectionModel.select(option) : this._selectionModel.deselect(option);\n\n      if (isUserInput) {\n        this._keyManager.setActiveItem(option);\n      }\n\n      if (this.multiple) {\n        this._sortValues();\n\n        if (isUserInput) {\n          // In case the user selected the option with their mouse, we\n          // want to restore focus back to the trigger, in order to\n          // prevent the select keyboard controls from clashing with\n          // the ones from `mat-option`.\n          this.focus();\n        }\n      }\n    }\n\n    if (wasSelected !== this._selectionModel.isSelected(option)) {\n      this._propagateChanges();\n    }\n\n    this.stateChanges.next();\n  }\n\n  /** Sorts the selected values in the selected based on their order in the panel. */\n  private _sortValues() {\n    if (this.multiple) {\n      const options = this.options.toArray();\n\n      this._selectionModel.sort((a, b) => {\n        return this.sortComparator ? this.sortComparator(a, b, options) :\n                                     options.indexOf(a) - options.indexOf(b);\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (this.multiple) {\n      valueToEmit = (this.selected as MatOption[]).map(option => option.value);\n    } else {\n      valueToEmit = this.selected ? (this.selected as MatOption).value : fallbackValue;\n    }\n\n    this._value = valueToEmit;\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this.selectionChange.emit(new MatSelectChange(this, valueToEmit));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Records option IDs to pass to the aria-owns property. */\n  private _setOptionIds() {\n    this._optionIds = this.options.map(option => option.id).join(' ');\n  }\n\n  /**\n   * Highlights the selected item. If no option is selected, it will highlight\n   * the first item instead.\n   */\n  private _highlightCorrectOption(): void {\n    if (this._keyManager) {\n      if (this.empty) {\n        this._keyManager.setFirstItemActive();\n      } else {\n        this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n      }\n    }\n  }\n\n  /** Scrolls the active option into view. */\n  private _scrollActiveOptionIntoView(): void {\n    const activeOptionIndex = this._keyManager.activeItemIndex || 0;\n    const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.options,\n        this.optionGroups);\n\n    this.panel.nativeElement.scrollTop = _getOptionScrollPosition(\n      activeOptionIndex + labelCount,\n      this._getItemHeight(),\n      this.panel.nativeElement.scrollTop,\n      SELECT_PANEL_MAX_HEIGHT\n    );\n  }\n\n  /** Focuses the select element. */\n  focus(): void {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Gets the index of the provided option in the option list. */\n  private _getOptionIndex(option: MatOption): number | undefined {\n    return this.options.reduce((result: number | undefined, current: MatOption, index: number) => {\n      return result === undefined ? (option === current ? index : undefined) : result;\n    }, undefined);\n  }\n\n  /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n  private _calculateOverlayPosition(): void {\n    const itemHeight = this._getItemHeight();\n    const items = this._getItemCount();\n    const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const scrollContainerHeight = items * itemHeight;\n\n    // The farthest the panel can be scrolled before it hits the bottom\n    const maxScroll = scrollContainerHeight - panelHeight;\n\n    // If no value is selected we open the popup to the first item.\n    let selectedOptionOffset =\n        this.empty ? 0 : this._getOptionIndex(this._selectionModel.selected[0])!;\n\n    selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options,\n        this.optionGroups);\n\n    // We must maintain a scroll buffer so the selected option will be scrolled to the\n    // center of the overlay panel rather than the top.\n    const scrollBuffer = panelHeight / 2;\n    this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n    this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n\n    this._checkOverlayWithinViewport(maxScroll);\n  }\n\n  /**\n   * Calculates the scroll position of the select's overlay panel.\n   *\n   * Attempts to center the selected option in the panel. If the option is\n   * too high or too low in the panel to be scrolled to the center, it clamps the\n   * scroll position to the min or max scroll positions respectively.\n   */\n  _calculateOverlayScroll(selectedIndex: number, scrollBuffer: number,\n                          maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n    const halfOptionHeight = itemHeight / 2;\n\n    // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n    // scroll container, then subtracts the scroll buffer to scroll the option down to\n    // the center of the overlay panel. Half the option height must be re-added to the\n    // scrollTop so the option is centered based on its middle, not its top edge.\n    const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n    return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n  }\n\n  /** Returns the aria-label of the select component. */\n  _getAriaLabel(): string | null {\n    // If an ariaLabelledby value has been set by the consumer, the select should not overwrite the\n    // `aria-labelledby` value by setting the ariaLabel to the placeholder.\n    return this.ariaLabelledby ? null : this.ariaLabel || this.placeholder;\n  }\n\n  /** Returns the aria-labelledby of the select component. */\n  _getAriaLabelledby(): string | null {\n    if (this.ariaLabelledby) {\n      return this.ariaLabelledby;\n    }\n\n    // Note: we use `_getAriaLabel` here, because we want to check whether there's a\n    // computed label. `this.ariaLabel` is only the user-specified label.\n    if (!this._parentFormField || !this._parentFormField._hasFloatingLabel() ||\n      this._getAriaLabel()) {\n      return null;\n    }\n\n    return this._parentFormField._labelId || null;\n  }\n\n  /** Determines the `aria-activedescendant` to be set on the host. */\n  _getAriaActiveDescendant(): string | null {\n    if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n      return this._keyManager.activeItem.id;\n    }\n\n    return null;\n  }\n\n  /**\n   * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n   * This must be adjusted to align the selected option text over the trigger text when\n   * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n   * can't be calculated until the panel has been attached, because we need to know the\n   * content width in order to constrain the panel within the viewport.\n   */\n  private _calculateOverlayOffsetX(): void {\n    const overlayRect = this.overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n    const viewportSize = this._viewportRuler.getViewportSize();\n    const isRtl = this._isRtl();\n    const paddingWidth = this.multiple ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X :\n                                         SELECT_PANEL_PADDING_X * 2;\n    let offsetX: number;\n\n    // Adjust the offset, depending on the option padding.\n    if (this.multiple) {\n      offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n    } else {\n      let selected = this._selectionModel.selected[0] || this.options.first;\n      offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n    }\n\n    // Invert the offset in LTR.\n    if (!isRtl) {\n      offsetX *= -1;\n    }\n\n    // Determine how much the select overflows on each side.\n    const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n    const rightOverflow = overlayRect.right + offsetX - viewportSize.width\n                          + (isRtl ? 0 : paddingWidth);\n\n    // If the element overflows on either side, reduce the offset to allow it to fit.\n    if (leftOverflow > 0) {\n      offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    } else if (rightOverflow > 0) {\n      offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n    }\n\n    // Set the offset directly in order to avoid having to go through change detection and\n    // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n    // blurry content in some browsers.\n    this.overlayDir.offsetX = Math.round(offsetX);\n    this.overlayDir.overlayRef.updatePosition();\n  }\n\n  /**\n   * Calculates the y-offset of the select's overlay panel in relation to the\n   * top start corner of the trigger. It has to be adjusted in order for the\n   * selected option to be aligned over the trigger when the panel opens.\n   */\n  private _calculateOverlayOffsetY(selectedIndex: number, scrollBuffer: number,\n                                  maxScroll: number): number {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n    let optionOffsetFromPanelTop: number;\n\n    // Disable offset if requested by user by returning 0 as value to offset\n    if (this._disableOptionCentering) {\n      return 0;\n    }\n\n    if (this._scrollTop === 0) {\n      optionOffsetFromPanelTop = selectedIndex * itemHeight;\n    } else if (this._scrollTop === maxScroll) {\n      const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n      const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n\n      // The first item is partially out of the viewport. Therefore we need to calculate what\n      // portion of it is shown in the viewport and account for it in our offset.\n      let partialItemHeight =\n          itemHeight - (this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight;\n\n      // Because the panel height is longer than the height of the options alone,\n      // there is always extra padding at the top or bottom of the panel. When\n      // scrolled to the very bottom, this padding is at the top of the panel and\n      // must be added to the offset.\n      optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n    } else {\n      // If the option was scrolled to the middle of the panel using a scroll buffer,\n      // its offset will be the scroll buffer minus the half height that was added to\n      // center it.\n      optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n    }\n\n    // The final offset is the option's offset from the top, adjusted for the height difference,\n    // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n    // The value is rounded to prevent some browsers from blurring the content.\n    return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n  }\n\n  /**\n   * Checks that the attempted overlay position will fit within the viewport.\n   * If it will not fit, tries to adjust the scroll position and the associated\n   * y-offset so the panel can open fully on-screen. If it still won't fit,\n   * sets the offset back to 0 to allow the fallback position to take over.\n   */\n  private _checkOverlayWithinViewport(maxScroll: number): void {\n    const itemHeight = this._getItemHeight();\n    const viewportSize = this._viewportRuler.getViewportSize();\n\n    const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n    const bottomSpaceAvailable =\n        viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n\n    const panelHeightTop = Math.abs(this._offsetY);\n    const totalPanelHeight =\n        Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n    const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n\n    if (panelHeightBottom > bottomSpaceAvailable) {\n      this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n    } else if (panelHeightTop > topSpaceAvailable) {\n     this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n    } else {\n      this._transformOrigin = this._getOriginBasedOnOption();\n    }\n  }\n\n  /** Adjusts the overlay panel up to fit in the viewport. */\n  private _adjustPanelUp(panelHeightBottom: number, bottomSpaceAvailable: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n\n    // Scrolls the panel up by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel up into the viewport.\n    this._scrollTop -= distanceBelowViewport;\n    this._offsetY -= distanceBelowViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very top, it won't be able to fit the panel\n    // by scrolling, so set the offset to 0 to allow the fallback position to take\n    // effect.\n    if (this._scrollTop <= 0) {\n      this._scrollTop = 0;\n      this._offsetY = 0;\n      this._transformOrigin = `50% bottom 0px`;\n    }\n  }\n\n  /** Adjusts the overlay panel down to fit in the viewport. */\n  private _adjustPanelDown(panelHeightTop: number, topSpaceAvailable: number,\n                           maxScroll: number) {\n    // Browsers ignore fractional scroll offsets, so we need to round.\n    const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n\n    // Scrolls the panel down by the distance it was extending past the boundary, then\n    // adjusts the offset by that amount to move the panel down into the viewport.\n    this._scrollTop += distanceAboveViewport;\n    this._offsetY += distanceAboveViewport;\n    this._transformOrigin = this._getOriginBasedOnOption();\n\n    // If the panel is scrolled to the very bottom, it won't be able to fit the\n    // panel by scrolling, so set the offset to 0 to allow the fallback position\n    // to take effect.\n    if (this._scrollTop >= maxScroll) {\n      this._scrollTop = maxScroll;\n      this._offsetY = 0;\n      this._transformOrigin = `50% top 0px`;\n      return;\n    }\n  }\n\n  /** Sets the transform origin point based on the selected option. */\n  private _getOriginBasedOnOption(): string {\n    const itemHeight = this._getItemHeight();\n    const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n    const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n    return `50% ${originY}px 0px`;\n  }\n\n  /** Calculates the amount of items in the select. This includes options and group labels. */\n  private _getItemCount(): number {\n    return this.options.length + this.optionGroups.length;\n  }\n\n  /** Calculates the height of the select's options. */\n  private _getItemHeight(): number {\n    return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) {\n    this._ariaDescribedby = ids.join(' ');\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    this.focus();\n    this.open();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    return this._panelOpen || !this.empty;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {AriaDescriber, FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {BreakpointObserver, Breakpoints, BreakpointState} from '@angular/cdk/layout';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  OriginConnectionPosition,\n  Overlay,\n  OverlayConnectionPosition,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {Platform} from '@angular/cdk/platform';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject, Observable} from 'rxjs';\nimport {matTooltipAnimations} from './tooltip-animations';\n\n\nexport type TooltipPosition = 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\n\n/** Time in ms to throttle repositioning after scroll events. */\nexport const SCROLL_THROTTLE_MS = 20;\n\n/** CSS class that will be attached to the overlay panel. */\nexport const TOOLTIP_PANEL_CLASS = 'mat-tooltip-panel';\n\n/**\n * Creates an error to be thrown if the user supplied an invalid tooltip position.\n * @docs-private\n */\nexport function getMatTooltipInvalidPositionError(position: string) {\n  return Error(`Tooltip position \"${position}\" is invalid.`);\n}\n\n/** Injection token that determines the scroll handling while a tooltip is visible. */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-tooltip-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition({scrollThrottle: SCROLL_THROTTLE_MS});\n}\n\n/** @docs-private */\nexport const MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_TOOLTIP_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default `matTooltip` options that can be overridden. */\nexport interface MatTooltipDefaultOptions {\n  showDelay: number;\n  hideDelay: number;\n  touchendHideDelay: number;\n}\n\n/** Injection token to be used to override the default options for `matTooltip`. */\nexport const MAT_TOOLTIP_DEFAULT_OPTIONS =\n    new InjectionToken<MatTooltipDefaultOptions>('mat-tooltip-default-options', {\n      providedIn: 'root',\n      factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY(): MatTooltipDefaultOptions {\n  return {\n    showDelay: 0,\n    hideDelay: 0,\n    touchendHideDelay: 1500,\n  };\n}\n\n/**\n * Directive that attaches a material design tooltip to the host element. Animates the showing and\n * hiding of a tooltip provided position (defaults to below the element).\n *\n * https://material.io/design/components/tooltips.html\n */\n@Directive({\n  selector: '[matTooltip]',\n  exportAs: 'matTooltip',\n  host: {\n    '(longpress)': 'show()',\n    '(keydown)': '_handleKeydown($event)',\n    '(touchend)': '_handleTouchend()',\n  },\n})\nexport class MatTooltip implements OnDestroy {\n  _overlayRef: OverlayRef | null;\n  _tooltipInstance: TooltipComponent | null;\n\n  private _portal: ComponentPortal<TooltipComponent>;\n  private _position: TooltipPosition = 'below';\n  private _disabled: boolean = false;\n  private _tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Allows the user to define the position of the tooltip relative to the parent element */\n  @Input('matTooltipPosition')\n  get position(): TooltipPosition { return this._position; }\n  set position(value: TooltipPosition) {\n    if (value !== this._position) {\n      this._position = value;\n\n      if (this._overlayRef) {\n        this._updatePosition();\n\n        if (this._tooltipInstance) {\n          this._tooltipInstance!.show(0);\n        }\n\n        this._overlayRef.updatePosition();\n      }\n    }\n  }\n\n  /** Disables the display of the tooltip. */\n  @Input('matTooltipDisabled')\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // If tooltip is disabled, hide immediately.\n    if (this._disabled) {\n      this.hide(0);\n    }\n  }\n\n  /** The default delay in ms before showing the tooltip after show is called */\n  @Input('matTooltipShowDelay') showDelay = this._defaultOptions.showDelay;\n\n  /** The default delay in ms before hiding the tooltip after hide is called */\n  @Input('matTooltipHideDelay') hideDelay = this._defaultOptions.hideDelay;\n\n  private _message = '';\n\n  /** The message to be displayed in the tooltip */\n  @Input('matTooltip')\n  get message() { return this._message; }\n  set message(value: string) {\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message);\n\n    // If the message is not a string (e.g. number), convert it to a string and trim it.\n    this._message = value != null ? `${value}`.trim() : '';\n\n    if (!this._message && this._isTooltipVisible()) {\n      this.hide(0);\n    } else {\n      this._updateTooltipMessage();\n      this._ariaDescriber.describe(this._elementRef.nativeElement, this.message);\n    }\n  }\n\n  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */\n  @Input('matTooltipClass')\n  get tooltipClass() { return this._tooltipClass; }\n  set tooltipClass(value: string|string[]|Set<string>|{[key: string]: any}) {\n    this._tooltipClass = value;\n    if (this._tooltipInstance) {\n      this._setTooltipClass(this._tooltipClass);\n    }\n  }\n\n  private _manualListeners = new Map<string, EventListenerOrEventListenerObject>();\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  constructor(\n    private _overlay: Overlay,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _scrollDispatcher: ScrollDispatcher,\n    private _viewContainerRef: ViewContainerRef,\n    private _ngZone: NgZone,\n    platform: Platform,\n    private _ariaDescriber: AriaDescriber,\n    private _focusMonitor: FocusMonitor,\n    @Inject(MAT_TOOLTIP_SCROLL_STRATEGY) scrollStrategy: any,\n    @Optional() private _dir: Directionality,\n    @Optional() @Inject(MAT_TOOLTIP_DEFAULT_OPTIONS)\n      private _defaultOptions: MatTooltipDefaultOptions,\n    @Optional() @Inject(HAMMER_LOADER) hammerLoader?: HammerLoader) {\n\n    this._scrollStrategy = scrollStrategy;\n    const element: HTMLElement = _elementRef.nativeElement;\n    const elementStyle = element.style as CSSStyleDeclaration & {webkitUserDrag: string};\n    const hasGestures = typeof window === 'undefined' || (window as any).Hammer || hammerLoader;\n\n    // The mouse events shouldn't be bound on mobile devices, because they can prevent the\n    // first tap from firing its click event or can cause the tooltip to open for clicks.\n    if (!platform.IOS && !platform.ANDROID) {\n      this._manualListeners\n        .set('mouseenter', () => this.show())\n        .set('mouseleave', () => this.hide());\n    } else if (!hasGestures) {\n      // If Hammerjs isn't loaded, fall back to showing on `touchstart`, otherwise\n      // there's no way for the user to trigger the tooltip on a touch device.\n      this._manualListeners.set('touchstart', () => this.show());\n    }\n\n    this._manualListeners.forEach((listener, event) => element.addEventListener(event, listener));\n\n    if (element.nodeName === 'INPUT' || element.nodeName === 'TEXTAREA') {\n      // When we bind a gesture event on an element (in this case `longpress`), HammerJS\n      // will add some inline styles by default, including `user-select: none`. This is\n      // problematic on iOS and in Safari, because it will prevent users from typing in inputs.\n      // Since `user-select: none` is not needed for the `longpress` event and can cause unexpected\n      // behavior for text fields, we always clear the `user-select` to avoid such issues.\n      elementStyle.webkitUserSelect = elementStyle.userSelect = elementStyle.msUserSelect = '';\n    }\n\n    // Hammer applies `-webkit-user-drag: none` on all elements by default,\n    // which breaks the native drag&drop. If the consumer explicitly made\n    // the element draggable, clear the `-webkit-user-drag`.\n    if (element.draggable && elementStyle.webkitUserDrag === 'none') {\n      elementStyle.webkitUserDrag = '';\n    }\n\n    _focusMonitor.monitor(_elementRef).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      // Note that the focus monitor runs outside the Angular zone.\n      if (!origin) {\n        _ngZone.run(() => this.hide(0));\n      } else if (origin === 'keyboard') {\n        _ngZone.run(() => this.show());\n      }\n    });\n  }\n\n  /**\n   * Dispose the tooltip when destroyed.\n   */\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._tooltipInstance = null;\n    }\n\n    // Clean up the event listeners set in the constructor\n    this._manualListeners.forEach((listener, event) => {\n      this._elementRef.nativeElement.removeEventListener(event, listener);\n    });\n    this._manualListeners.clear();\n\n    this._destroyed.next();\n    this._destroyed.complete();\n\n    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.message);\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */\n  show(delay: number = this.showDelay): void {\n    if (this.disabled || !this.message || (this._isTooltipVisible() &&\n      !this._tooltipInstance!._showTimeoutId && !this._tooltipInstance!._hideTimeoutId)) {\n        return;\n    }\n\n    const overlayRef = this._createOverlay();\n\n    this._detach();\n    this._portal = this._portal || new ComponentPortal(TooltipComponent, this._viewContainerRef);\n    this._tooltipInstance = overlayRef.attach(this._portal).instance;\n    this._tooltipInstance.afterHidden()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n    this._setTooltipClass(this._tooltipClass);\n    this._updateTooltipMessage();\n    this._tooltipInstance!.show(delay);\n  }\n\n  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */\n  hide(delay: number = this.hideDelay): void {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.hide(delay);\n    }\n  }\n\n  /** Shows/hides the tooltip */\n  toggle(): void {\n    this._isTooltipVisible() ? this.hide() : this.show();\n  }\n\n  /** Returns true if the tooltip is currently visible to the user */\n  _isTooltipVisible(): boolean {\n    return !!this._tooltipInstance && this._tooltipInstance.isVisible();\n  }\n\n  /** Handles the keydown events on the host element. */\n  _handleKeydown(e: KeyboardEvent) {\n    if (this._isTooltipVisible() && e.keyCode === ESCAPE) {\n      e.stopPropagation();\n      this.hide(0);\n    }\n  }\n\n  /** Handles the touchend events on the host element. */\n  _handleTouchend() {\n    this.hide(this._defaultOptions.touchendHideDelay);\n  }\n\n  /** Create the overlay config and position strategy */\n  private _createOverlay(): OverlayRef {\n    if (this._overlayRef) {\n      return this._overlayRef;\n    }\n\n    // Create connected position strategy that listens for scroll events to reposition.\n    const strategy = this._overlay.position()\n      .flexibleConnectedTo(this._elementRef)\n      .withTransformOriginOn('.mat-tooltip')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8);\n\n    const scrollableAncestors = this._scrollDispatcher\n      .getAncestorScrollContainers(this._elementRef);\n\n    strategy.withScrollableContainers(scrollableAncestors);\n\n    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe(change => {\n      if (this._tooltipInstance) {\n        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {\n          // After position changes occur and the overlay is clipped by\n          // a parent scrollable then close the tooltip.\n          this._ngZone.run(() => this.hide(0));\n        }\n      }\n    });\n\n    this._overlayRef = this._overlay.create({\n      direction: this._dir,\n      positionStrategy: strategy,\n      panelClass: TOOLTIP_PANEL_CLASS,\n      scrollStrategy: this._scrollStrategy()\n    });\n\n    this._updatePosition();\n\n    this._overlayRef.detachments()\n      .pipe(takeUntil(this._destroyed))\n      .subscribe(() => this._detach());\n\n    return this._overlayRef;\n  }\n\n  /** Detaches the currently-attached tooltip. */\n  private _detach() {\n    if (this._overlayRef && this._overlayRef.hasAttached()) {\n      this._overlayRef.detach();\n    }\n\n    this._tooltipInstance = null;\n  }\n\n  /** Updates the position of the current tooltip. */\n  private _updatePosition() {\n    const position =\n        this._overlayRef!.getConfig().positionStrategy as FlexibleConnectedPositionStrategy;\n    const origin = this._getOrigin();\n    const overlay = this._getOverlayPosition();\n\n    position.withPositions([\n      {...origin.main, ...overlay.main},\n      {...origin.fallback, ...overlay.fallback}\n    ]);\n  }\n\n  /**\n   * Returns the origin position and a fallback position based on the user's position preference.\n   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).\n   */\n  _getOrigin(): {main: OriginConnectionPosition, fallback: OriginConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let originPosition: OriginConnectionPosition;\n\n    if (position == 'above' || position == 'below') {\n      originPosition = {originX: 'center', originY: position == 'above' ? 'top' : 'bottom'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      originPosition = {originX: 'start', originY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      originPosition = {originX: 'end', originY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(originPosition.originX, originPosition.originY);\n\n    return {\n      main: originPosition,\n      fallback: {originX: x, originY: y}\n    };\n  }\n\n  /** Returns the overlay position and a fallback position based on the user's preference */\n  _getOverlayPosition(): {main: OverlayConnectionPosition, fallback: OverlayConnectionPosition} {\n    const isLtr = !this._dir || this._dir.value == 'ltr';\n    const position = this.position;\n    let overlayPosition: OverlayConnectionPosition;\n\n    if (position == 'above') {\n      overlayPosition = {overlayX: 'center', overlayY: 'bottom'};\n    } else if (position == 'below') {\n      overlayPosition = {overlayX: 'center', overlayY: 'top'};\n    } else if (\n      position == 'before' ||\n      (position == 'left' && isLtr) ||\n      (position == 'right' && !isLtr)) {\n      overlayPosition = {overlayX: 'end', overlayY: 'center'};\n    } else if (\n      position == 'after' ||\n      (position == 'right' && isLtr) ||\n      (position == 'left' && !isLtr)) {\n      overlayPosition = {overlayX: 'start', overlayY: 'center'};\n    } else {\n      throw getMatTooltipInvalidPositionError(position);\n    }\n\n    const {x, y} = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);\n\n    return {\n      main: overlayPosition,\n      fallback: {overlayX: x, overlayY: y}\n    };\n  }\n\n  /** Updates the tooltip message and repositions the overlay according to the new message length */\n  private _updateTooltipMessage() {\n    // Must wait for the message to be painted to the tooltip so that the overlay can properly\n    // calculate the correct positioning based on the size of the text.\n    if (this._tooltipInstance) {\n      this._tooltipInstance.message = this.message;\n      this._tooltipInstance._markForCheck();\n\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(\n        take(1),\n        takeUntil(this._destroyed)\n      ).subscribe(() => {\n        if (this._tooltipInstance) {\n          this._overlayRef!.updatePosition();\n        }\n      });\n    }\n  }\n\n  /** Updates the tooltip class */\n  private _setTooltipClass(tooltipClass: string|string[]|Set<string>|{[key: string]: any}) {\n    if (this._tooltipInstance) {\n      this._tooltipInstance.tooltipClass = tooltipClass;\n      this._tooltipInstance._markForCheck();\n    }\n  }\n\n  /** Inverts an overlay position. */\n  private _invertPosition(x: HorizontalConnectionPos, y: VerticalConnectionPos) {\n    if (this.position === 'above' || this.position === 'below') {\n      if (y === 'top') {\n        y = 'bottom';\n      } else if (y === 'bottom') {\n        y = 'top';\n      }\n    } else {\n      if (x === 'end') {\n        x = 'start';\n      } else if (x === 'start') {\n        x = 'end';\n      }\n    }\n\n    return {x, y};\n  }\n}\n\nexport type TooltipVisibility = 'initial' | 'visible' | 'hidden';\n\n/**\n * Internal component that wraps the tooltip's content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tooltip-component',\n  templateUrl: 'tooltip.html',\n  styleUrls: ['tooltip.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTooltipAnimations.tooltipState],\n  host: {\n    // Forces the element to have a layout in IE and Edge. This fixes issues where the element\n    // won't be rendered if the animations are disabled or there is no web animations polyfill.\n    '[style.zoom]': '_visibility === \"visible\" ? 1 : null',\n    '(body:click)': 'this._handleBodyInteraction()',\n    'aria-hidden': 'true',\n  }\n})\nexport class TooltipComponent {\n  /** Message to display in the tooltip */\n  message: string;\n\n  /** Classes to be added to the tooltip. Supports the same syntax as `ngClass`. */\n  tooltipClass: string|string[]|Set<string>|{[key: string]: any};\n\n  /** The timeout ID of any current timer set to show the tooltip */\n  _showTimeoutId: number | null;\n\n  /** The timeout ID of any current timer set to hide the tooltip */\n  _hideTimeoutId: number | null;\n\n  /** Property watched by the animation framework to show or hide the tooltip */\n  _visibility: TooltipVisibility = 'initial';\n\n  /** Whether interactions on the page should close the tooltip */\n  private _closeOnInteraction: boolean = false;\n\n  /** Subject for notifying that the tooltip has been hidden from the view */\n  private readonly _onHide: Subject<any> = new Subject();\n\n  /** Stream that emits whether the user has a handset-sized display.  */\n  _isHandset: Observable<BreakpointState> = this._breakpointObserver.observe(Breakpoints.Handset);\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _breakpointObserver: BreakpointObserver) {}\n\n  /**\n   * Shows the tooltip with an animation originating from the provided origin\n   * @param delay Amount of milliseconds to the delay showing the tooltip.\n   */\n  show(delay: number): void {\n    // Cancel the delayed hide if it is scheduled\n    if (this._hideTimeoutId) {\n      clearTimeout(this._hideTimeoutId);\n      this._hideTimeoutId = null;\n    }\n\n    // Body interactions should cancel the tooltip if there is a delay in showing.\n    this._closeOnInteraction = true;\n    this._showTimeoutId = setTimeout(() => {\n      this._visibility = 'visible';\n      this._showTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /**\n   * Begins the animation to hide the tooltip after the provided delay in ms.\n   * @param delay Amount of milliseconds to delay showing the tooltip.\n   */\n  hide(delay: number): void {\n    // Cancel the delayed show if it is scheduled\n    if (this._showTimeoutId) {\n      clearTimeout(this._showTimeoutId);\n      this._showTimeoutId = null;\n    }\n\n    this._hideTimeoutId = setTimeout(() => {\n      this._visibility = 'hidden';\n      this._hideTimeoutId = null;\n\n      // Mark for check so if any parent component has set the\n      // ChangeDetectionStrategy to OnPush it will be checked anyways\n      this._markForCheck();\n    }, delay);\n  }\n\n  /** Returns an observable that notifies when the tooltip has been hidden from view. */\n  afterHidden(): Observable<void> {\n    return this._onHide.asObservable();\n  }\n\n  /** Whether the tooltip is being displayed. */\n  isVisible(): boolean {\n    return this._visibility === 'visible';\n  }\n\n  _animationStart() {\n    this._closeOnInteraction = false;\n  }\n\n  _animationDone(event: AnimationEvent): void {\n    const toState = event.toState as TooltipVisibility;\n\n    if (toState === 'hidden' && !this.isVisible()) {\n      this._onHide.next();\n    }\n\n    if (toState === 'visible' || toState === 'hidden') {\n      this._closeOnInteraction = true;\n    }\n  }\n\n  /**\n   * Interactions on the HTML body should close the tooltip immediately as defined in the\n   * material design spec.\n   * https://material.io/design/components/tooltips.html#behavior\n   */\n  _handleBodyInteraction(): void {\n    if (this._closeOnInteraction) {\n      this.hide(0);\n    }\n  }\n\n  /**\n   * Marks that the tooltip needs to be checked in the next change detection run.\n   * Mainly used for rendering the initial text before positioning a tooltip, which\n   * can be problematic in components with OnPush change detection.\n   */\n  _markForCheck(): void {\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Input} from '@angular/core';\nimport {\n  CdkCell,\n  CdkCellDef,\n  CdkColumnDef, CdkFooterCell, CdkFooterCellDef,\n  CdkHeaderCell,\n  CdkHeaderCellDef,\n} from '@angular/cdk/table';\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matCellDef]',\n  providers: [{provide: CdkCellDef, useExisting: MatCellDef}]\n})\nexport class MatCellDef extends CdkCellDef {}\n\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matHeaderCellDef]',\n  providers: [{provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef}]\n})\nexport class MatHeaderCellDef extends CdkHeaderCellDef {}\n\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\n@Directive({\n  selector: '[matFooterCellDef]',\n  providers: [{provide: CdkFooterCellDef, useExisting: MatFooterCellDef}]\n})\nexport class MatFooterCellDef extends CdkFooterCellDef {}\n\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\n@Directive({\n  selector: '[matColumnDef]',\n  providers: [\n    {provide: CdkColumnDef, useExisting: MatColumnDef},\n    {provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef}\n  ],\n})\nexport class MatColumnDef extends CdkColumnDef {\n  /** Unique name for this column. */\n  @Input('matColumnDef') name: string;\n\n  /** Whether this column should be sticky positioned at the start of the row */\n  @Input() sticky: boolean;\n\n  /** Whether this column should be sticky positioned on the end of the row */\n  @Input() stickyEnd: boolean;\n}\n\n/** Header cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-header-cell, th[mat-header-cell]',\n  host: {\n    'class': 'mat-header-cell',\n    'role': 'columnheader',\n  },\n})\nexport class MatHeaderCell extends CdkHeaderCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Footer cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-footer-cell, td[mat-footer-cell]',\n  host: {\n    'class': 'mat-footer-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatFooterCell extends CdkFooterCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n\n/** Cell template container that adds the right classes and role. */\n@Directive({\n  selector: 'mat-cell, td[mat-cell]',\n  host: {\n    'class': 'mat-cell',\n    'role': 'gridcell',\n  },\n})\nexport class MatCell extends CdkCell {\n  constructor(columnDef: CdkColumnDef,\n              elementRef: ElementRef<HTMLElement>) {\n    super(columnDef, elementRef);\n    elementRef.nativeElement.classList.add(`mat-column-${columnDef.cssClassFriendlyName}`);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  Directive,\n  ViewEncapsulation\n} from '@angular/core';\nimport {\n  CDK_ROW_TEMPLATE, CdkFooterRow, CdkFooterRowDef,\n  CdkHeaderRow,\n  CdkHeaderRowDef,\n  CdkRow,\n  CdkRowDef,\n} from '@angular/cdk/table';\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\n@Directive({\n  selector: '[matHeaderRowDef]',\n  providers: [{provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef}],\n  inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n})\nexport class MatHeaderRowDef extends CdkHeaderRowDef {}\n\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\n@Directive({\n  selector: '[matFooterRowDef]',\n  providers: [{provide: CdkFooterRowDef, useExisting: MatFooterRowDef}],\n  inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n})\nexport class MatFooterRowDef extends CdkFooterRowDef {}\n\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\n@Directive({\n  selector: '[matRowDef]',\n  providers: [{provide: CdkRowDef, useExisting: MatRowDef}],\n  inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n})\nexport class MatRowDef<T> extends CdkRowDef<T> {}\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-header-row, tr[mat-header-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-header-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matHeaderRow',\n  providers: [{provide: CdkHeaderRow, useExisting: MatHeaderRow}],\n})\nexport class MatHeaderRow extends CdkHeaderRow { }\n\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-footer-row, tr[mat-footer-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-footer-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matFooterRow',\n  providers: [{provide: CdkFooterRow, useExisting: MatFooterRow}],\n})\nexport class MatFooterRow extends CdkFooterRow { }\n\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-row, tr[mat-row]',\n  template: CDK_ROW_TEMPLATE,\n  host: {\n    'class': 'mat-row',\n    'role': 'row',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRow',\n  providers: [{provide: CdkRow, useExisting: MatRow}],\n})\nexport class MatRow extends CdkRow { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatTable} from './table';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {\n  MatCell,\n  MatCellDef,\n  MatColumnDef,\n  MatFooterCell,\n  MatFooterCellDef,\n  MatHeaderCell,\n  MatHeaderCellDef\n} from './cell';\nimport {\n  MatFooterRow,\n  MatFooterRowDef,\n  MatHeaderRow,\n  MatHeaderRowDef,\n  MatRow,\n  MatRowDef\n} from './row';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\n\nconst EXPORTED_DECLARATIONS = [\n  // Table\n  MatTable,\n\n  // Template defs\n  MatHeaderCellDef,\n  MatHeaderRowDef,\n  MatColumnDef,\n  MatCellDef,\n  MatRowDef,\n  MatFooterCellDef,\n  MatFooterRowDef,\n\n  // Cell directives\n  MatHeaderCell,\n  MatCell,\n  MatFooterCell,\n\n  // Row directions\n  MatHeaderRow,\n  MatRow,\n  MatFooterRow,\n];\n\n@NgModule({\n  imports: [CdkTableModule, CommonModule, MatCommonModule],\n  exports: EXPORTED_DECLARATIONS,\n  declarations: EXPORTED_DECLARATIONS,\n})\nexport class MatTableModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {_isNumberValue} from '@angular/cdk/coercion';\nimport {DataSource} from '@angular/cdk/table';\nimport {\n  BehaviorSubject,\n  combineLatest,\n  merge,\n  Observable,\n  of as observableOf,\n  Subscription\n} from 'rxjs';\nimport {MatPaginator, PageEvent} from '@angular/material/paginator';\nimport {MatSort, Sort} from '@angular/material/sort';\nimport {map} from 'rxjs/operators';\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterTermAccessor,\n * which defines how row data is converted to a string for filter matching.\n */\nexport class MatTableDataSource<T> extends DataSource<T> {\n  /** Stream that emits when a new data array is set on the data source. */\n  private readonly _data: BehaviorSubject<T[]>;\n\n  /** Stream emitting render data to the table (depends on ordered data changes). */\n  private readonly _renderData = new BehaviorSubject<T[]>([]);\n\n  /** Stream that emits when a new filter string is set on the data source. */\n  private readonly _filter = new BehaviorSubject<string>('');\n\n  /**\n   * Subscription to the changes that should trigger an update to the table's rendered rows, such\n   * as filtering, sorting, pagination, or base data changes.\n   */\n  _renderChangesSubscription = Subscription.EMPTY;\n\n  /**\n   * The filtered set of data that has been matched by the filter string, or all the data if there\n   * is no filter. Useful for knowing the set of data the table represents.\n   * For example, a 'selectAll()' function would likely want to select the set of filtered data\n   * shown to the user rather than all the data.\n   */\n  filteredData: T[];\n\n  /** Array of data that should be rendered by the table, where each object represents one row. */\n  get data() { return this._data.value; }\n  set data(data: T[]) { this._data.next(data); }\n\n  /**\n   * Filter term that should be used to filter out objects from the data array. To override how\n   * data objects match to this filter string, provide a custom function for filterPredicate.\n   */\n  get filter(): string { return this._filter.value; }\n  set filter(filter: string) { this._filter.next(filter); }\n\n  /**\n   * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n   * emitted by the MatSort will trigger an update to the table's rendered data.\n   */\n  get sort(): MatSort | null { return this._sort; }\n  set sort(sort: MatSort|null) {\n    this._sort = sort;\n    this._updateChangeSubscription();\n  }\n  private _sort: MatSort|null;\n\n  /**\n   * Instance of the MatPaginator component used by the table to control what page of the data is\n   * displayed. Page changes emitted by the MatPaginator will trigger an update to the\n   * table's rendered data.\n   *\n   * Note that the data source uses the paginator's properties to calculate which page of data\n   * should be displayed. If the paginator receives its properties as template inputs,\n   * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n   * initialized before assigning it to this data source.\n   */\n  get paginator(): MatPaginator | null { return this._paginator; }\n  set paginator(paginator: MatPaginator|null) {\n    this._paginator = paginator;\n    this._updateChangeSubscription();\n  }\n  private _paginator: MatPaginator|null;\n\n  /**\n   * Data accessor function that is used for accessing data properties for sorting through\n   * the default sortData function.\n   * This default function assumes that the sort header IDs (which defaults to the column name)\n   * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n   * May be set to a custom function for different behavior.\n   * @param data Data object that is being accessed.\n   * @param sortHeaderId The name of the column that represents the data.\n   */\n  sortingDataAccessor: ((data: T, sortHeaderId: string) => string|number) =\n      (data: T, sortHeaderId: string): string|number => {\n    const value = (data as {[key: string]: any})[sortHeaderId];\n\n    if (_isNumberValue(value)) {\n      const numberValue = Number(value);\n\n      // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n      // leave them as strings. For more info: https://goo.gl/y5vbSg\n      return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n    }\n\n    return value;\n  }\n\n  /**\n   * Gets a sorted copy of the data array based on the state of the MatSort. Called\n   * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n   * By default, the function retrieves the active sort and its direction and compares data\n   * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n   * of data ordering.\n   * @param data The array of data that should be sorted.\n   * @param sort The connected MatSort that holds the current sort state.\n   */\n  sortData: ((data: T[], sort: MatSort) => T[]) = (data: T[], sort: MatSort): T[] => {\n    const active = sort.active;\n    const direction = sort.direction;\n    if (!active || direction == '') { return data; }\n\n    return data.sort((a, b) => {\n      let valueA = this.sortingDataAccessor(a, active);\n      let valueB = this.sortingDataAccessor(b, active);\n\n      // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n      // one value exists while the other doesn't. In this case, existing value should come first.\n      // This avoids inconsistent results when comparing values to undefined/null.\n      // If neither value exists, return 0 (equal).\n      let comparatorResult = 0;\n      if (valueA != null && valueB != null) {\n        // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n        if (valueA > valueB) {\n          comparatorResult = 1;\n        } else if (valueA < valueB) {\n          comparatorResult = -1;\n        }\n      } else if (valueA != null) {\n        comparatorResult = 1;\n      } else if (valueB != null) {\n        comparatorResult = -1;\n      }\n\n      return comparatorResult * (direction == 'asc' ? 1 : -1);\n    });\n  }\n\n  /**\n   * Checks if a data object matches the data source's filter string. By default, each data object\n   * is converted to a string of its properties and returns true if the filter has\n   * at least one occurrence in that string. By default, the filter string has its whitespace\n   * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n   * filter matching.\n   * @param data Data object used to check against the filter.\n   * @param filter Filter string that has been set on the data source.\n   * @returns Whether the filter matches against the data\n   */\n  filterPredicate: ((data: T, filter: string) => boolean) = (data: T, filter: string): boolean => {\n    // Transform the data into a lowercase string of all property values.\n    const dataStr = Object.keys(data).reduce((currentTerm: string, key: string) => {\n      // Use an obscure Unicode character to delimit the words in the concatenated string.\n      // This avoids matches where the values of two columns combined will match the user's query\n      // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n      // that has a very low chance of being typed in by somebody in a text field. This one in\n      // particular is \"White up-pointing triangle with dot\" from\n      // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n      return currentTerm + (data as {[key: string]: any})[key] + '◬';\n    }, '').toLowerCase();\n\n    // Transform the filter by converting it to lowercase and removing whitespace.\n    const transformedFilter = filter.trim().toLowerCase();\n\n    return dataStr.indexOf(transformedFilter) != -1;\n  }\n\n  constructor(initialData: T[] = []) {\n    super();\n    this._data = new BehaviorSubject<T[]>(initialData);\n    this._updateChangeSubscription();\n  }\n\n  /**\n   * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n   * changes occur, process the current state of the filter, sort, and pagination along with\n   * the provided base data and send it to the table for rendering.\n   */\n  _updateChangeSubscription() {\n    // Sorting and/or pagination should be watched if MatSort and/or MatPaginator are provided.\n    // The events should emit whenever the component emits a change or initializes, or if no\n    // component is provided, a stream with just a null event should be provided.\n    // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n    // pipeline can progress to the next step. Note that the value from these streams are not used,\n    // they purely act as a signal to progress in the pipeline.\n    const sortChange: Observable<Sort|null|void> = this._sort ?\n        merge<Sort|void>(this._sort.sortChange, this._sort.initialized) :\n        observableOf(null);\n    const pageChange: Observable<PageEvent|null|void> = this._paginator ?\n        merge<PageEvent|void>(this._paginator.page, this._paginator.initialized) :\n        observableOf(null);\n\n    const dataStream = this._data;\n    // Watch for base data or filter changes to provide a filtered set of data.\n    const filteredData = combineLatest(dataStream, this._filter)\n      .pipe(map(([data]) => this._filterData(data)));\n    // Watch for filtered data or sort changes to provide an ordered set of data.\n    const orderedData = combineLatest(filteredData, sortChange)\n      .pipe(map(([data]) => this._orderData(data)));\n    // Watch for ordered data or page changes to provide a paged set of data.\n    const paginatedData = combineLatest(orderedData, pageChange)\n      .pipe(map(([data]) => this._pageData(data)));\n    // Watched for paged data changes and send the result to the table to render.\n    this._renderChangesSubscription.unsubscribe();\n    this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n  }\n\n  /**\n   * Returns a filtered data array where each filter object contains the filter string within\n   * the result of the filterTermAccessor function. If no filter is set, returns the data array\n   * as provided.\n   */\n  _filterData(data: T[]) {\n    // If there is a filter string, filter out data that does not contain it.\n    // Each data object is converted to a string using the function defined by filterTermAccessor.\n    // May be overridden for customization.\n    this.filteredData =\n        !this.filter ? data : data.filter(obj => this.filterPredicate(obj, this.filter));\n\n    if (this.paginator) { this._updatePaginator(this.filteredData.length); }\n\n    return this.filteredData;\n  }\n\n  /**\n   * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n   * data array as provided. Uses the default data accessor for data lookup, unless a\n   * sortDataAccessor function is defined.\n   */\n  _orderData(data: T[]): T[] {\n    // If there is no active sort or direction, return the data without trying to sort.\n    if (!this.sort) { return data; }\n\n    return this.sortData(data.slice(), this.sort);\n  }\n\n  /**\n   * Returns a paged splice of the provided data array according to the provided MatPaginator's page\n   * index and length. If there is no paginator provided, returns the data array as provided.\n   */\n  _pageData(data: T[]): T[] {\n    if (!this.paginator) { return data; }\n\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.slice().splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n   * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n   * guard against making property changes within a round of change detection.\n   */\n  _updatePaginator(filteredDataLength: number) {\n    Promise.resolve().then(() => {\n      if (!this.paginator) { return; }\n\n      this.paginator.length = filteredDataLength;\n\n      // If the page index is set beyond the page, reduce it to the last page.\n      if (this.paginator.pageIndex > 0) {\n        const lastPageIndex = Math.ceil(this.paginator.length / this.paginator.pageSize) - 1 || 0;\n        this.paginator.pageIndex = Math.min(this.paginator.pageIndex, lastPageIndex);\n      }\n    });\n  }\n\n  /**\n   * Used by the MatTable. Called when it connects to the data source.\n   * @docs-private\n   */\n  connect() { return this._renderData; }\n\n  /**\n   * Used by the MatTable. Called when it is destroyed. No-op.\n   * @docs-private\n   */\n  disconnect() { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef, Inject, InjectionToken, NgZone} from '@angular/core';\n\n\n/**\n * Interface for a a MatInkBar positioner method, defining the positioning and width of the ink\n * bar in a set of tabs.\n */\n// tslint:disable-next-line class-name Using leading underscore to denote internal interface.\nexport interface _MatInkBarPositioner {\n  (element: HTMLElement): { left: string, width: string };\n}\n\n/** Injection token for the MatInkBar's Positioner. */\nexport const _MAT_INK_BAR_POSITIONER =\n  new InjectionToken<_MatInkBarPositioner>('MatInkBarPositioner', {\n    providedIn: 'root',\n    factory: _MAT_INK_BAR_POSITIONER_FACTORY\n  });\n\n/**\n * The default positioner function for the MatInkBar.\n * @docs-private\n */\nexport function _MAT_INK_BAR_POSITIONER_FACTORY(): _MatInkBarPositioner {\n  const method = (element: HTMLElement) => ({\n    left: element ? (element.offsetLeft || 0) + 'px' : '0',\n    width: element ? (element.offsetWidth || 0) + 'px' : '0',\n  });\n\n  return method;\n}\n\n/**\n * The ink-bar is used to display and animate the line underneath the current active tab label.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-ink-bar',\n  host: {\n    'class': 'mat-ink-bar',\n  },\n})\nexport class MatInkBar {\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(_MAT_INK_BAR_POSITIONER) private _inkBarPositioner: _MatInkBarPositioner) { }\n\n  /**\n   * Calculates the styles from the provided element in order to align the ink-bar to that element.\n   * Shows the ink bar if previously set as hidden.\n   * @param element\n   */\n  alignToElement(element: HTMLElement) {\n    this.show();\n\n    if (typeof requestAnimationFrame !== 'undefined') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => this._setStyles(element));\n      });\n    } else {\n      this._setStyles(element);\n    }\n  }\n\n  /** Shows the ink bar. */\n  show(): void {\n    this._elementRef.nativeElement.style.visibility = 'visible';\n  }\n\n  /** Hides the ink bar. */\n  hide(): void {\n    this._elementRef.nativeElement.style.visibility = 'hidden';\n  }\n\n  /**\n   * Sets the proper styles to the ink bar element.\n   * @param element\n   */\n  private _setStyles(element: HTMLElement) {\n    const positions = this._inkBarPositioner(element);\n    const inkBar: HTMLElement = this._elementRef.nativeElement;\n\n    inkBar.style.left = positions.left;\n    inkBar.style.width = positions.width;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/** Decorates the `ng-template` tags and reads out the template from it. */\n@Directive({selector: '[matTabContent]'})\nexport class MatTabContent {\n  constructor(public template: TemplateRef<any>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkPortal} from '@angular/cdk/portal';\n\n/** Used to flag tab labels for use with the portal directive */\n@Directive({\n  selector: '[mat-tab-label], [matTabLabel]',\n})\nexport class MatTabLabel extends CdkPortal {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  SimpleChanges,\n  TemplateRef,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {MatTabContent} from './tab-content';\nimport {MatTabLabel} from './tab-label';\n\n\n// Boilerplate for applying mixins to MatTab.\n/** @docs-private */\nexport class MatTabBase {}\nexport const _MatTabMixinBase: CanDisableCtor & typeof MatTabBase =\n    mixinDisabled(MatTabBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab',\n  templateUrl: 'tab.html',\n  inputs: ['disabled'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matTab',\n})\nexport class MatTab extends _MatTabMixinBase implements OnInit, CanDisable, OnChanges, OnDestroy {\n  /** Content for the tab label given by `<ng-template mat-tab-label>`. */\n  @ContentChild(MatTabLabel) templateLabel: MatTabLabel;\n\n  /**\n   * Template provided in the tab content that will be used if present, used to enable lazy-loading\n   */\n  @ContentChild(MatTabContent, {read: TemplateRef}) _explicitContent: TemplateRef<any>;\n\n  /** Template inside the MatTab view that contains an `<ng-content>`. */\n  @ViewChild(TemplateRef) _implicitContent: TemplateRef<any>;\n\n  /** Plain text label for the tab, used when there is no template label. */\n  @Input('label') textLabel: string = '';\n\n  /** Aria label for the tab. */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Reference to the element that the tab is labelled by.\n   * Will be cleared if `aria-label` is set at the same time.\n   */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** Portal that will be the hosted content of the tab */\n  private _contentPortal: TemplatePortal | null = null;\n\n  /** @docs-private */\n  get content(): TemplatePortal | null {\n    return this._contentPortal;\n  }\n\n  /** Emits whenever the internal state of the tab changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /**\n   * The relatively indexed position where 0 represents the center, negative is left, and positive\n   * represents the right.\n   */\n  position: number | null = null;\n\n  /**\n   * The initial relatively index origin of the tab if it was created and selected after there\n   * was already a selected tab. Provides context of what position the tab should originate from.\n   */\n  origin: number | null = null;\n\n  /**\n   * Whether the tab is currently active.\n   */\n  isActive = false;\n\n  constructor(private _viewContainerRef: ViewContainerRef) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.hasOwnProperty('textLabel') || changes.hasOwnProperty('disabled')) {\n      this._stateChanges.next();\n    }\n  }\n\n  ngOnDestroy(): void {\n    this._stateChanges.complete();\n  }\n\n  ngOnInit(): void {\n    this._contentPortal = new TemplatePortal(\n        this._explicitContent || this._implicitContent, this._viewContainerRef);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material tabs.\n * @docs-private\n */\nexport const matTabsAnimations: {\n  readonly translateTab: AnimationTriggerMetadata;\n} = {\n  /** Animation translates a tab along the X axis. */\n  translateTab: trigger('translateTab', [\n    // Note: transitions to `none` instead of 0, because some browsers might blur the content.\n    state('center, void, left-origin-center, right-origin-center', style({transform: 'none'})),\n\n    // If the tab is either on the left or right, we additionally add a `min-height` of 1px\n    // in order to ensure that the element has a height before its state changes. This is\n    // necessary because Chrome does seem to skip the transition in RTL mode if the element does\n    // not have a static height and is not rendered. See related issue: #9465\n    state('left', style({transform: 'translate3d(-100%, 0, 0)', minHeight: '1px'})),\n    state('right', style({transform: 'translate3d(100%, 0, 0)', minHeight: '1px'})),\n\n    transition('* => left, * => right, left => center, right => center',\n        animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')),\n    transition('void => left-origin-center', [\n      style({transform: 'translate3d(-100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ]),\n    transition('void => right-origin-center', [\n      style({transform: 'translate3d(100%, 0, 0)'}),\n      animate('{{animationDuration}} cubic-bezier(0.35, 0, 0.25, 1)')\n    ])\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ChangeDetectorRef,\n  Input,\n  Inject,\n  Output,\n  EventEmitter,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Directive,\n  Optional,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  ComponentFactoryResolver,\n  ViewContainerRef,\n  forwardRef,\n  ViewChild,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {TemplatePortal, CdkPortalOutlet, PortalHostDirective} from '@angular/cdk/portal';\nimport {Directionality, Direction} from '@angular/cdk/bidi';\nimport {Subscription, Subject} from 'rxjs';\nimport {matTabsAnimations} from './tabs-animations';\nimport {startWith, distinctUntilChanged} from 'rxjs/operators';\n\n/**\n * These position states are used internally as animation states for the tab body. Setting the\n * position state to left, right, or center will transition the tab body from its current\n * position to its respective state. If there is not current position (void, in the case of a new\n * tab body), then there will be no transition animation to its state.\n *\n * In the case of a new tab body that should immediately be centered with an animating transition,\n * then left-origin-center or right-origin-center can be used, which will use left or right as its\n * psuedo-prior state.\n */\nexport type MatTabBodyPositionState =\n    'left' | 'center' | 'right' | 'left-origin-center' | 'right-origin-center';\n\n/**\n * The origin state is an internally used state that is set on a new tab body indicating if it\n * began to the left or right of the prior selected index. For example, if the selected index was\n * set to 1, and a new tab is created and selected at index 2, then the tab body would have an\n * origin of right because its index was greater than the prior selected index.\n */\nexport type MatTabBodyOriginState = 'left' | 'right';\n\n/**\n * The portal host directive for the contents of the tab.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabBodyHost]'\n})\nexport class MatTabBodyPortal extends CdkPortalOutlet implements OnInit, OnDestroy {\n  /** Subscription to events for when the tab body begins centering. */\n  private _centeringSub = Subscription.EMPTY;\n  /** Subscription to events for when the tab body finishes leaving from center position. */\n  private _leavingSub = Subscription.EMPTY;\n\n  constructor(\n    componentFactoryResolver: ComponentFactoryResolver,\n    viewContainerRef: ViewContainerRef,\n    @Inject(forwardRef(() => MatTabBody)) private _host: MatTabBody) {\n      super(componentFactoryResolver, viewContainerRef);\n  }\n\n  /** Set initial visibility or set up subscription for changing visibility. */\n  ngOnInit(): void {\n    super.ngOnInit();\n\n    this._centeringSub = this._host._beforeCentering\n      .pipe(startWith(this._host._isCenterPosition(this._host._position)))\n      .subscribe((isCentering: boolean) => {\n        if (isCentering && !this.hasAttached()) {\n          this.attach(this._host._content);\n        }\n      });\n\n    this._leavingSub = this._host._afterLeavingCenter.subscribe(() => {\n      this.detach();\n    });\n  }\n\n  /** Clean up centering subscription. */\n  ngOnDestroy(): void {\n    super.ngOnDestroy();\n    this._centeringSub.unsubscribe();\n    this._leavingSub.unsubscribe();\n  }\n}\n\n/**\n * Wrapper for the contents of a tab.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-body',\n  templateUrl: 'tab-body.html',\n  styleUrls: ['tab-body.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [matTabsAnimations.translateTab],\n  host: {\n    'class': 'mat-tab-body',\n  },\n})\nexport class MatTabBody implements OnInit, OnDestroy {\n\n  /** Current position of the tab-body in the tab-group. Zero means that the tab is visible. */\n  private _positionIndex: number;\n\n  /** Subscription to the directionality change observable. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** Tab body position state. Used by the animation trigger for the current state. */\n  _position: MatTabBodyPositionState;\n\n  /** Emits when an animation on the tab is complete. */\n  _translateTabComplete = new Subject<AnimationEvent>();\n\n  /** Event emitted when the tab begins to animate towards the center as the active tab. */\n  @Output() readonly _onCentering: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _beforeCentering: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted before the centering of the tab begins. */\n  @Output() readonly _afterLeavingCenter: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** Event emitted when the tab completes its animation towards the center. */\n  @Output() readonly _onCentered: EventEmitter<void> = new EventEmitter<void>(true);\n\n   /** The portal host inside of this container into which the tab body content will be loaded. */\n  @ViewChild(PortalHostDirective) _portalHost: PortalHostDirective;\n\n  /** The tab body content to display. */\n  @Input('content') _content: TemplatePortal;\n\n  /** Position that will be used when the tab is immediately becoming visible after creation. */\n  @Input() origin: number;\n\n  // Note that the default value will always be overwritten by `MatTabBody`, but we need one\n  // anyway to prevent the animations module from throwing an error if the body is used on its own.\n  /** Duration for the tab's animation. */\n  @Input() animationDuration: string = '500ms';\n\n  /** The shifted index position of the tab body, where zero represents the active center tab. */\n  @Input()\n  set position(position: number) {\n    this._positionIndex = position;\n    this._computePositionAnimationState();\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality,\n              /**\n               * @breaking-change 8.0.0 changeDetectorRef to be made required.\n               */\n              changeDetectorRef?: ChangeDetectorRef) {\n\n    if (this._dir && changeDetectorRef) {\n      this._dirChangeSubscription = this._dir.change.subscribe((dir: Direction) => {\n        this._computePositionAnimationState(dir);\n        changeDetectorRef.markForCheck();\n      });\n    }\n\n    // Ensure that we get unique animation events, because the `.done` callback can get\n    // invoked twice in some browsers. See https://github.com/angular/angular/issues/24084.\n    this._translateTabComplete.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      // If the transition to the center is complete, emit an event.\n      if (this._isCenterPosition(event.toState) && this._isCenterPosition(this._position)) {\n        this._onCentered.emit();\n      }\n\n      if (this._isCenterPosition(event.fromState) && !this._isCenterPosition(this._position)) {\n        this._afterLeavingCenter.emit();\n      }\n    });\n  }\n\n  /**\n   * After initialized, check if the content is centered and has an origin. If so, set the\n   * special position states that transition the tab from the left or right before centering.\n   */\n  ngOnInit() {\n    if (this._position == 'center' && this.origin != null) {\n      this._position = this._computePositionFromOrigin();\n    }\n  }\n\n  ngOnDestroy() {\n    this._dirChangeSubscription.unsubscribe();\n    this._translateTabComplete.complete();\n  }\n\n  _onTranslateTabStarted(event: AnimationEvent): void {\n    const isCentering = this._isCenterPosition(event.toState);\n    this._beforeCentering.emit(isCentering);\n    if (isCentering) {\n      this._onCentering.emit(this._elementRef.nativeElement.clientHeight);\n    }\n  }\n\n  /** The text direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the provided position state is considered center, regardless of origin. */\n  _isCenterPosition(position: MatTabBodyPositionState|string): boolean {\n    return position == 'center' ||\n        position == 'left-origin-center' ||\n        position == 'right-origin-center';\n  }\n\n  /** Computes the position state that will be used for the tab-body animation trigger. */\n  private _computePositionAnimationState(dir: Direction = this._getLayoutDirection()) {\n    if (this._positionIndex < 0) {\n      this._position = dir == 'ltr' ? 'left' : 'right';\n    } else if (this._positionIndex > 0) {\n      this._position = dir == 'ltr' ? 'right' : 'left';\n    } else {\n      this._position = 'center';\n    }\n  }\n\n  /**\n   * Computes the position state based on the specified origin position. This is used if the\n   * tab is becoming visible immediately after creation.\n   */\n  private _computePositionFromOrigin(): MatTabBodyPositionState {\n    const dir = this._getLayoutDirection();\n\n    if ((dir == 'ltr' && this.origin <= 0) || (dir == 'rtl' && this.origin > 0)) {\n      return 'left-origin-center';\n    }\n\n    return 'right-origin-center';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\n\n\n// Boilerplate for applying mixins to MatTabLabelWrapper.\n/** @docs-private */\nexport class MatTabLabelWrapperBase {}\nexport const _MatTabLabelWrapperMixinBase: CanDisableCtor & typeof MatTabLabelWrapperBase =\n    mixinDisabled(MatTabLabelWrapperBase);\n\n/**\n * Used in the `mat-tab-group` view to display tab labels.\n * @docs-private\n */\n@Directive({\n  selector: '[matTabLabelWrapper]',\n  inputs: ['disabled'],\n  host: {\n    '[class.mat-tab-disabled]': 'disabled',\n    '[attr.aria-disabled]': '!!disabled',\n  }\n})\nexport class MatTabLabelWrapper extends _MatTabLabelWrapperMixinBase implements CanDisable {\n  constructor(public elementRef: ElementRef) {\n    super();\n  }\n\n  /** Sets focus on the wrapper element */\n  focus(): void {\n    this.elementRef.nativeElement.focus();\n  }\n\n  getOffsetLeft(): number {\n    return this.elementRef.nativeElement.offsetLeft;\n  }\n\n  getOffsetWidth(): number {\n    return this.elementRef.nativeElement.offsetWidth;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {END, ENTER, HOME, SPACE} from '@angular/cdk/keycodes';\nimport {ViewportRuler} from '@angular/cdk/scrolling';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanDisableRipple, CanDisableRippleCtor, mixinDisableRipple} from '@angular/material/core';\nimport {merge, of as observableOf, Subject} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\nimport {MatInkBar} from './ink-bar';\nimport {MatTabLabelWrapper} from './tab-label-wrapper';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\n\n\n/**\n * The directions that scrolling can go in when the header's tabs exceed the header width. 'After'\n * will scroll the header towards the end of the tabs list and 'before' will scroll towards the\n * beginning of the list.\n */\nexport type ScrollDirection = 'after' | 'before';\n\n/**\n * The distance in pixels that will be overshot when scrolling a tab label into view. This helps\n * provide a small affordance to the label next to it.\n */\nconst EXAGGERATED_OVERSCROLL = 60;\n\n// Boilerplate for applying mixins to MatTabHeader.\n/** @docs-private */\nexport class MatTabHeaderBase {}\nexport const _MatTabHeaderMixinBase: CanDisableRippleCtor & typeof MatTabHeaderBase =\n    mixinDisableRipple(MatTabHeaderBase);\n\n/**\n * The header of the tab group which displays a list of all the tabs in the tab group. Includes\n * an ink bar that follows the currently selected tab. When the tabs list's width exceeds the\n * width of the header container, then arrows will be displayed to allow the user to scroll\n * left and right across the header.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-header',\n  templateUrl: 'tab-header.html',\n  styleUrls: ['tab-header.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-tab-header',\n    '[class.mat-tab-header-pagination-controls-enabled]': '_showPaginationControls',\n    '[class.mat-tab-header-rtl]': \"_getLayoutDirection() == 'rtl'\",\n  },\n})\nexport class MatTabHeader extends _MatTabHeaderMixinBase\n    implements AfterContentChecked, AfterContentInit, OnDestroy, CanDisableRipple {\n\n  @ContentChildren(MatTabLabelWrapper) _labelWrappers: QueryList<MatTabLabelWrapper>;\n  @ViewChild(MatInkBar) _inkBar: MatInkBar;\n  @ViewChild('tabListContainer') _tabListContainer: ElementRef;\n  @ViewChild('tabList') _tabList: ElementRef;\n\n  /** The distance in pixels that the tab labels should be translated to the left. */\n  private _scrollDistance = 0;\n\n  /** Whether the header should scroll to the selected index after the view has been checked. */\n  private _selectedIndexChanged = false;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Whether the controls for pagination should be displayed */\n  _showPaginationControls = false;\n\n  /** Whether the tab list can be scrolled more towards the end of the tab label list. */\n  _disableScrollAfter = true;\n\n  /** Whether the tab list can be scrolled more towards the beginning of the tab label list. */\n  _disableScrollBefore = true;\n\n  /**\n   * The number of tab labels that are displayed on the header. When this changes, the header\n   * should re-evaluate the scroll position.\n   */\n  private _tabLabelCount: number;\n\n  /** Whether the scroll distance has changed and should be applied after the view is checked. */\n  private _scrollDistanceChanged: boolean;\n\n  /** Used to manage focus between the tabs. */\n  private _keyManager: FocusKeyManager<MatTabLabelWrapper>;\n\n  private _selectedIndex: number = 0;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number { return this._selectedIndex; }\n  set selectedIndex(value: number) {\n    value = coerceNumberProperty(value);\n    this._selectedIndexChanged = this._selectedIndex != value;\n    this._selectedIndex = value;\n\n    if (this._keyManager) {\n      this._keyManager.updateActiveItemIndex(value);\n    }\n  }\n\n  /** Event emitted when the option is selected. */\n  @Output() readonly selectFocusedIndex = new EventEmitter();\n\n  /** Event emitted when a label is focused. */\n  @Output() readonly indexFocused = new EventEmitter();\n\n  constructor(private _elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _viewportRuler: ViewportRuler,\n              @Optional() private _dir: Directionality,\n              // @breaking-change 8.0.0 `_ngZone` parameter to be made required.\n              private _ngZone?: NgZone) {\n    super();\n  }\n\n  ngAfterContentChecked(): void {\n    // If the number of tab labels have changed, check if scrolling should be enabled\n    if (this._tabLabelCount != this._labelWrappers.length) {\n      this.updatePagination();\n      this._tabLabelCount = this._labelWrappers.length;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the selected index has changed, scroll to the label and check if the scrolling controls\n    // should be disabled.\n    if (this._selectedIndexChanged) {\n      this._scrollToLabel(this._selectedIndex);\n      this._checkScrollingControls();\n      this._alignInkBarToSelectedTab();\n      this._selectedIndexChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n\n    // If the scroll distance has been changed (tab selected, focused, scroll controls activated),\n    // then translate the header to reflect this.\n    if (this._scrollDistanceChanged) {\n      this._updateTabScrollPosition();\n      this._scrollDistanceChanged = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  _handleKeydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      case HOME:\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n        break;\n      case END:\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case ENTER:\n      case SPACE:\n        this.selectFocusedIndex.emit(this.focusIndex);\n        event.preventDefault();\n        break;\n      default:\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Aligns the ink bar to the selected tab on load.\n   */\n  ngAfterContentInit() {\n    const dirChange = this._dir ? this._dir.change : observableOf(null);\n    const resize = this._viewportRuler.change(150);\n    const realign = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n    };\n\n    this._keyManager = new FocusKeyManager(this._labelWrappers)\n      .withHorizontalOrientation(this._getLayoutDirection())\n      .withWrap();\n\n    this._keyManager.updateActiveItem(0);\n\n    // Defer the first call in order to allow for slower browsers to lay out the elements.\n    // This helps in cases where the user lands directly on a page with paginated tabs.\n    typeof requestAnimationFrame !== 'undefined' ? requestAnimationFrame(realign) : realign();\n\n    // On dir change or window resize, realign the ink bar and update the orientation of\n    // the key manager if the direction has changed.\n    merge(dirChange, resize).pipe(takeUntil(this._destroyed)).subscribe(() => {\n      realign();\n      this._keyManager.withHorizontalOrientation(this._getLayoutDirection());\n    });\n\n    // If there is a change in the focus key manager we need to emit the `indexFocused`\n    // event in order to provide a public event that notifies about focus changes. Also we realign\n    // the tabs container by scrolling the new focused tab into the visible section.\n    this._keyManager.change.pipe(takeUntil(this._destroyed)).subscribe(newFocusIndex => {\n      this.indexFocused.emit(newFocusIndex);\n      this._setTabFocus(newFocusIndex);\n    });\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /**\n   * Callback for when the MutationObserver detects that the content has changed.\n   */\n  _onContentChanges() {\n    const zoneCallback = () => {\n      this.updatePagination();\n      this._alignInkBarToSelectedTab();\n      this._changeDetectorRef.markForCheck();\n    };\n\n    // The content observer runs outside the `NgZone` by default, which\n    // means that we need to bring the callback back in ourselves.\n    // @breaking-change 8.0.0 Remove null check for `_ngZone` once it's a required parameter.\n    this._ngZone ? this._ngZone.run(zoneCallback) : zoneCallback();\n  }\n\n  /**\n   * Updates the view whether pagination should be enabled or not.\n   *\n   * WARNING: Calling this method can be very costly in terms of performance.  It should be called\n   * as infrequently as possible from outside of the Tabs component as it causes a reflow of the\n   * page.\n   */\n  updatePagination() {\n    this._checkPaginationEnabled();\n    this._checkScrollingControls();\n    this._updateTabScrollPosition();\n  }\n\n  /** Tracks which element has focus; used for keyboard navigation */\n  get focusIndex(): number {\n    return this._keyManager ? this._keyManager.activeItemIndex! : 0;\n  }\n\n  /** When the focus index is set, we must manually send focus to the correct label */\n  set focusIndex(value: number) {\n    if (!this._isValidIndex(value) || this.focusIndex === value || !this._keyManager) {\n      return;\n    }\n\n    this._keyManager.setActiveItem(value);\n  }\n\n  /**\n   * Determines if an index is valid.  If the tabs are not ready yet, we assume that the user is\n   * providing a valid index and return true.\n   */\n  _isValidIndex(index: number): boolean {\n    if (!this._labelWrappers) { return true; }\n\n    const tab = this._labelWrappers ? this._labelWrappers.toArray()[index] : null;\n    return !!tab && !tab.disabled;\n  }\n\n  /**\n   * Sets focus on the HTML element for the label wrapper and scrolls it into the view if\n   * scrolling is enabled.\n   */\n  _setTabFocus(tabIndex: number) {\n    if (this._showPaginationControls) {\n      this._scrollToLabel(tabIndex);\n    }\n\n    if (this._labelWrappers && this._labelWrappers.length) {\n      this._labelWrappers.toArray()[tabIndex].focus();\n\n      // Do not let the browser manage scrolling to focus the element, this will be handled\n      // by using translation. In LTR, the scroll left should be 0. In RTL, the scroll width\n      // should be the full width minus the offset width.\n      const containerEl = this._tabListContainer.nativeElement;\n      const dir = this._getLayoutDirection();\n\n      if (dir == 'ltr') {\n        containerEl.scrollLeft = 0;\n      } else {\n        containerEl.scrollLeft = containerEl.scrollWidth - containerEl.offsetWidth;\n      }\n    }\n  }\n\n  /** The layout direction of the containing app. */\n  _getLayoutDirection(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Performs the CSS transformation on the tab list that will cause the list to scroll. */\n  _updateTabScrollPosition() {\n    const scrollDistance = this.scrollDistance;\n    const translateX = this._getLayoutDirection() === 'ltr' ? -scrollDistance : scrollDistance;\n\n    // Don't use `translate3d` here because we don't want to create a new layer. A new layer\n    // seems to cause flickering and overflow in Internet Explorer. For example, the ink bar\n    // and ripples will exceed the boundaries of the visible tab bar.\n    // See: https://github.com/angular/material2/issues/10276\n    this._tabList.nativeElement.style.transform = `translateX(${translateX}px)`;\n  }\n\n  /** Sets the distance in pixels that the tab header should be transformed in the X-axis. */\n  get scrollDistance(): number { return this._scrollDistance; }\n  set scrollDistance(v: number) {\n    this._scrollDistance = Math.max(0, Math.min(this._getMaxScrollDistance(), v));\n\n    // Mark that the scroll distance has changed so that after the view is checked, the CSS\n    // transformation can move the header.\n    this._scrollDistanceChanged = true;\n    this._checkScrollingControls();\n  }\n\n  /**\n   * Moves the tab list in the 'before' or 'after' direction (towards the beginning of the list or\n   * the end of the list, respectively). The distance to scroll is computed to be a third of the\n   * length of the tab list view window.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollHeader(scrollDir: ScrollDirection) {\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    // Move the scroll distance one-third the length of the tab list's viewport.\n    this.scrollDistance += (scrollDir == 'before' ? -1 : 1) * viewLength / 3;\n  }\n\n  /**\n   * Moves the tab list such that the desired tab label (marked by index) is moved into view.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _scrollToLabel(labelIndex: number) {\n    const selectedLabel = this._labelWrappers ? this._labelWrappers.toArray()[labelIndex] : null;\n\n    if (!selectedLabel) { return; }\n\n    // The view length is the visible width of the tab labels.\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n\n    let labelBeforePos: number, labelAfterPos: number;\n    if (this._getLayoutDirection() == 'ltr') {\n      labelBeforePos = selectedLabel.getOffsetLeft();\n      labelAfterPos = labelBeforePos + selectedLabel.getOffsetWidth();\n    } else {\n      labelAfterPos = this._tabList.nativeElement.offsetWidth - selectedLabel.getOffsetLeft();\n      labelBeforePos = labelAfterPos - selectedLabel.getOffsetWidth();\n    }\n\n    const beforeVisiblePos = this.scrollDistance;\n    const afterVisiblePos = this.scrollDistance + viewLength;\n\n    if (labelBeforePos < beforeVisiblePos) {\n      // Scroll header to move label to the before direction\n      this.scrollDistance -= beforeVisiblePos - labelBeforePos + EXAGGERATED_OVERSCROLL;\n    } else if (labelAfterPos > afterVisiblePos) {\n      // Scroll header to move label to the after direction\n      this.scrollDistance += labelAfterPos - afterVisiblePos + EXAGGERATED_OVERSCROLL;\n    }\n  }\n\n  /**\n   * Evaluate whether the pagination controls should be displayed. If the scroll width of the\n   * tab list is wider than the size of the header container, then the pagination controls should\n   * be shown.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkPaginationEnabled() {\n    const isEnabled =\n        this._tabList.nativeElement.scrollWidth > this._elementRef.nativeElement.offsetWidth;\n\n    if (!isEnabled) {\n      this.scrollDistance = 0;\n    }\n\n    if (isEnabled !== this._showPaginationControls) {\n      this._changeDetectorRef.markForCheck();\n    }\n\n    this._showPaginationControls = isEnabled;\n  }\n\n  /**\n   * Evaluate whether the before and after controls should be enabled or disabled.\n   * If the header is at the beginning of the list (scroll distance is equal to 0) then disable the\n   * before button. If the header is at the end of the list (scroll distance is equal to the\n   * maximum distance we can scroll), then disable the after button.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _checkScrollingControls() {\n    // Check if the pagination arrows should be activated.\n    this._disableScrollBefore = this.scrollDistance == 0;\n    this._disableScrollAfter = this.scrollDistance == this._getMaxScrollDistance();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /**\n   * Determines what is the maximum length in pixels that can be set for the scroll distance. This\n   * is equal to the difference in width between the tab list container and tab header container.\n   *\n   * This is an expensive call that forces a layout reflow to compute box and scroll metrics and\n   * should be called sparingly.\n   */\n  _getMaxScrollDistance(): number {\n    const lengthOfTabList = this._tabList.nativeElement.scrollWidth;\n    const viewLength = this._tabListContainer.nativeElement.offsetWidth;\n    return (lengthOfTabList - viewLength) || 0;\n  }\n\n  /** Tells the ink-bar to align itself to the current label wrapper */\n  _alignInkBarToSelectedTab(): void {\n    const selectedLabelWrapper = this._labelWrappers && this._labelWrappers.length ?\n        this._labelWrappers.toArray()[this.selectedIndex].elementRef.nativeElement :\n        null;\n\n    this._inkBar.alignToElement(selectedLabelWrapper!);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  mixinColor,\n  mixinDisableRipple,\n  ThemePalette,\n} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatTab} from './tab';\nimport {MatTabHeader} from './tab-header';\n\n\n/** Used to generate unique ID's for each tab component */\nlet nextId = 0;\n\n/** A simple change event emitted on focus or selection changes. */\nexport class MatTabChangeEvent {\n  /** Index of the currently-selected tab. */\n  index: number;\n  /** Reference to the currently-selected tab. */\n  tab: MatTab;\n}\n\n/** Possible positions for the tab header. */\nexport type MatTabHeaderPosition = 'above' | 'below';\n\n/** Object that can be used to configure the default options for the tabs module. */\nexport interface MatTabsConfig {\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  animationDuration?: string;\n}\n\n/** Injection token that can be used to provide the default options the tabs module. */\nexport const MAT_TABS_CONFIG = new InjectionToken('MAT_TABS_CONFIG');\n\n// Boilerplate for applying mixins to MatTabGroup.\n/** @docs-private */\nexport class MatTabGroupBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatTabGroupMixinBase: CanColorCtor & CanDisableRippleCtor & typeof MatTabGroupBase =\n    mixinColor(mixinDisableRipple(MatTabGroupBase), 'primary');\n\n/**\n * Material design tab-group component.  Supports basic tab pairs (label + content) and includes\n * animated ink-bar, keyboard navigation, and screen reader.\n * See: https://material.io/design/components/tabs.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-tab-group',\n  exportAs: 'matTabGroup',\n  templateUrl: 'tab-group.html',\n  styleUrls: ['tab-group.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color', 'disableRipple'],\n  host: {\n    'class': 'mat-tab-group',\n    '[class.mat-tab-group-dynamic-height]': 'dynamicHeight',\n    '[class.mat-tab-group-inverted-header]': 'headerPosition === \"below\"',\n  },\n})\nexport class MatTabGroup extends _MatTabGroupMixinBase implements AfterContentInit,\n    AfterContentChecked, OnDestroy, CanColor, CanDisableRipple {\n\n  @ContentChildren(MatTab) _tabs: QueryList<MatTab>;\n\n  @ViewChild('tabBodyWrapper') _tabBodyWrapper: ElementRef;\n\n  @ViewChild('tabHeader') _tabHeader: MatTabHeader;\n\n  /** The tab index that should be selected after the content has been checked. */\n  private _indexToSelect: number | null = 0;\n\n  /** Snapshot of the height of the tab body wrapper before another tab is activated. */\n  private _tabBodyWrapperHeight: number = 0;\n\n  /** Subscription to tabs being added/removed. */\n  private _tabsSubscription = Subscription.EMPTY;\n\n  /** Subscription to changes in the tab labels. */\n  private _tabLabelSubscription = Subscription.EMPTY;\n\n  /** Whether the tab group should grow to the size of the active tab. */\n  @Input()\n  get dynamicHeight(): boolean { return this._dynamicHeight; }\n  set dynamicHeight(value: boolean) { this._dynamicHeight = coerceBooleanProperty(value); }\n  private _dynamicHeight: boolean = false;\n\n  /** The index of the active tab. */\n  @Input()\n  get selectedIndex(): number | null { return this._selectedIndex; }\n  set selectedIndex(value: number | null) {\n    this._indexToSelect = coerceNumberProperty(value, null);\n  }\n  private _selectedIndex: number | null = null;\n\n  /** Position of the tab header. */\n  @Input() headerPosition: MatTabHeaderPosition = 'above';\n\n  /** Duration for the tab animation. Must be a valid CSS value (e.g. 600ms). */\n  @Input() animationDuration: string;\n\n  /** Background color of the tab group. */\n  @Input()\n  get backgroundColor(): ThemePalette { return this._backgroundColor; }\n  set backgroundColor(value: ThemePalette) {\n    const nativeElement: HTMLElement = this._elementRef.nativeElement;\n\n    nativeElement.classList.remove(`mat-background-${this.backgroundColor}`);\n\n    if (value) {\n      nativeElement.classList.add(`mat-background-${value}`);\n    }\n\n    this._backgroundColor = value;\n  }\n  private _backgroundColor: ThemePalette;\n\n  /** Output to enable support for two-way binding on `[(selectedIndex)]` */\n  @Output() readonly selectedIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n  /** Event emitted when focus has changed within a tab group. */\n  @Output() readonly focusChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>();\n\n  /** Event emitted when the body animation has completed */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event emitted when the tab selection has changed. */\n  @Output() readonly selectedTabChange: EventEmitter<MatTabChangeEvent> =\n      new EventEmitter<MatTabChangeEvent>(true);\n\n  private _groupId: number;\n\n  constructor(elementRef: ElementRef,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_TABS_CONFIG) @Optional() defaultConfig?: MatTabsConfig) {\n    super(elementRef);\n    this._groupId = nextId++;\n    this.animationDuration = defaultConfig && defaultConfig.animationDuration ?\n        defaultConfig.animationDuration : '500ms';\n  }\n\n  /**\n   * After the content is checked, this component knows what tabs have been defined\n   * and what the selected index should be. This is where we can know exactly what position\n   * each tab should be in according to the new selected index, and additionally we know how\n   * a new selected tab should transition in (from the left or right).\n   */\n  ngAfterContentChecked() {\n    // Don't clamp the `indexToSelect` immediately in the setter because it can happen that\n    // the amount of tabs changes before the actual change detection runs.\n    const indexToSelect = this._indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n    // If there is a change in selected index, emit a change event. Should not trigger if\n    // the selected index has not yet been initialized.\n    if (this._selectedIndex != indexToSelect) {\n      const isFirstRun = this._selectedIndex == null;\n\n      if (!isFirstRun) {\n        this.selectedTabChange.emit(this._createChangeEvent(indexToSelect));\n      }\n\n      // Changing these values after change detection has run\n      // since the checked content may contain references to them.\n      Promise.resolve().then(() => {\n        this._tabs.forEach((tab, index) => tab.isActive = index === indexToSelect);\n\n        if (!isFirstRun) {\n          this.selectedIndexChange.emit(indexToSelect);\n        }\n      });\n    }\n\n    // Setup the position for each tab and optionally setup an origin on the next selected tab.\n    this._tabs.forEach((tab: MatTab, index: number) => {\n      tab.position = index - indexToSelect;\n\n      // If there is already a selected tab, then set up an origin for the next selected tab\n      // if it doesn't have one already.\n      if (this._selectedIndex != null && tab.position == 0 && !tab.origin) {\n        tab.origin = indexToSelect - this._selectedIndex;\n      }\n    });\n\n    if (this._selectedIndex !== indexToSelect) {\n      this._selectedIndex = indexToSelect;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngAfterContentInit() {\n    this._subscribeToTabLabels();\n\n    // Subscribe to changes in the amount of tabs, in order to be\n    // able to re-render the content as new tabs are added or removed.\n    this._tabsSubscription = this._tabs.changes.subscribe(() => {\n      const indexToSelect = this._clampTabIndex(this._indexToSelect);\n\n      // Maintain the previously-selected tab if a new tab is added or removed and there is no\n      // explicit change that selects a different tab.\n      if (indexToSelect === this._selectedIndex) {\n        const tabs = this._tabs.toArray();\n\n        for (let i = 0; i < tabs.length; i++) {\n          if (tabs[i].isActive) {\n            // Assign both to the `_indexToSelect` and `_selectedIndex` so we don't fire a changed\n            // event, otherwise the consumer may end up in an infinite loop in some edge cases like\n            // adding a tab within the `selectedIndexChange` event.\n            this._indexToSelect = this._selectedIndex = i;\n            break;\n          }\n        }\n      }\n\n      this._subscribeToTabLabels();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngOnDestroy() {\n    this._tabsSubscription.unsubscribe();\n    this._tabLabelSubscription.unsubscribe();\n  }\n\n  /** Re-aligns the ink bar to the selected tab element. */\n  realignInkBar() {\n    if (this._tabHeader) {\n      this._tabHeader._alignInkBarToSelectedTab();\n    }\n  }\n\n  _focusChanged(index: number) {\n    this.focusChange.emit(this._createChangeEvent(index));\n  }\n\n  private _createChangeEvent(index: number): MatTabChangeEvent {\n    const event = new MatTabChangeEvent;\n    event.index = index;\n    if (this._tabs && this._tabs.length) {\n      event.tab = this._tabs.toArray()[index];\n    }\n    return event;\n  }\n\n  /**\n   * Subscribes to changes in the tab labels. This is needed, because the @Input for the label is\n   * on the MatTab component, whereas the data binding is inside the MatTabGroup. In order for the\n   * binding to be updated, we need to subscribe to changes in it and trigger change detection\n   * manually.\n   */\n  private _subscribeToTabLabels() {\n    if (this._tabLabelSubscription) {\n      this._tabLabelSubscription.unsubscribe();\n    }\n\n    this._tabLabelSubscription = merge(...this._tabs.map(tab => tab._stateChanges))\n      .subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  /** Clamps the given index to the bounds of 0 and the tabs length. */\n  private _clampTabIndex(index: number | null): number {\n    // Note the `|| 0`, which ensures that values like NaN can't get through\n    // and which would otherwise throw the component into an infinite loop\n    // (since Math.max(NaN, 0) === NaN).\n    return Math.min(this._tabs.length - 1, Math.max(index || 0, 0));\n  }\n\n  /** Returns a unique id for each tab label element */\n  _getTabLabelId(i: number): string {\n    return `mat-tab-label-${this._groupId}-${i}`;\n  }\n\n  /** Returns a unique id for each tab content element */\n  _getTabContentId(i: number): string {\n    return `mat-tab-content-${this._groupId}-${i}`;\n  }\n\n  /**\n   * Sets the height of the body wrapper to the height of the activating tab if dynamic\n   * height property is true.\n   */\n  _setTabBodyWrapperHeight(tabHeight: number): void {\n    if (!this._dynamicHeight || !this._tabBodyWrapperHeight) { return; }\n\n    const wrapper: HTMLElement = this._tabBodyWrapper.nativeElement;\n\n    wrapper.style.height = this._tabBodyWrapperHeight + 'px';\n\n    // This conditional forces the browser to paint the height so that\n    // the animation to the new height can have an origin.\n    if (this._tabBodyWrapper.nativeElement.offsetHeight) {\n      wrapper.style.height = tabHeight + 'px';\n    }\n  }\n\n  /** Removes the height of the tab body wrapper. */\n  _removeTabBodyWrapperHeight(): void {\n    const wrapper = this._tabBodyWrapper.nativeElement;\n    this._tabBodyWrapperHeight = wrapper.clientHeight;\n    wrapper.style.height = '';\n    this.animationDone.emit();\n  }\n\n  /** Handle click events, setting new selected index if appropriate. */\n  _handleClick(tab: MatTab, tabHeader: MatTabHeader, index: number) {\n    if (!tab.disabled) {\n      this.selectedIndex = tabHeader.focusIndex = index;\n    }\n  }\n\n  /** Retrieves the tabindex for the tab. */\n  _getTabIndex(tab: MatTab, idx: number): number | null {\n    if (tab.disabled) {\n      return null;\n    }\n    return this.selectedIndex === idx ? 0 : -1;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  keyframes,\n  AnimationTriggerMetadata, query, animateChild,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\nconst SORT_ANIMATION_TRANSITION = AnimationDurations.ENTERING + ' ' +\n                                  AnimationCurves.STANDARD_CURVE;\n\n/**\n * Animations used by MatSort.\n * @docs-private\n */\nexport const matSortAnimations: {\n  readonly indicator: AnimationTriggerMetadata;\n  readonly leftPointer: AnimationTriggerMetadata;\n  readonly rightPointer: AnimationTriggerMetadata;\n  readonly arrowOpacity: AnimationTriggerMetadata;\n  readonly arrowPosition: AnimationTriggerMetadata;\n  readonly allowChildren: AnimationTriggerMetadata;\n} = {\n  /** Animation that moves the sort indicator. */\n  indicator: trigger('indicator', [\n    state('active-asc, asc', style({transform: 'translateY(0px)'})),\n    // 10px is the height of the sort indicator, minus the width of the pointers\n    state('active-desc, desc', style({transform: 'translateY(10px)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: trigger('leftPointer', [\n    state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: trigger('rightPointer', [\n    state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n    state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n    transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION))\n  ]),\n\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: trigger('arrowOpacity', [\n    state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n    state('desc-to-hint, asc-to-hint, hint', style({opacity: .54})),\n    state('hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n        style({opacity: 0})),\n    // Transition between all states except for immediate transitions\n    transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n    transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  ]),\n\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: trigger('arrowPosition', [\n    // Hidden Above => Hint Center\n    transition('* => desc-to-hint, * => desc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(-25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Below\n    transition('* => hint-to-desc, * => active-to-desc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(25%)'})\n        ]))),\n    // Hidden Below => Hint Center\n    transition('* => asc-to-hint, * => asc-to-active',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(25%)'}),\n          style({transform: 'translateY(0)'})\n        ]))),\n    // Hint Center => Hidden Above\n    transition('* => hint-to-asc, * => active-to-asc',\n        animate(SORT_ANIMATION_TRANSITION, keyframes([\n          style({transform: 'translateY(0)'}),\n          style({transform: 'translateY(-25%)'})\n        ]))),\n    state('desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n        style({transform: 'translateY(0)'})),\n    state('hint-to-desc, active-to-desc, desc',\n        style({transform: 'translateY(-25%)'})),\n    state('hint-to-asc, active-to-asc, asc',\n        style({transform: 'translateY(25%)'})),\n  ]),\n\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: trigger('allowChildren', [\n    transition('* <=> *', [\n      query('@*', animateChild(), {optional: true})\n    ])\n  ]),\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, SkipSelf, Optional} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\n@Injectable({providedIn: 'root'})\nexport class MatSortHeaderIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** ARIA label for the sorting button. */\n  sortButtonLabel = (id: string) => {\n    return `Change sorting for ${id}`;\n  }\n}\n/** @docs-private */\nexport function MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl: MatSortHeaderIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n\n/** @docs-private */\nexport const MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[new Optional(), new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  ViewEncapsulation,\n  Inject,\n} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '@angular/material/core';\nimport {merge, Subscription} from 'rxjs';\nimport {MatSort, MatSortable} from './sort';\nimport {matSortAnimations} from './sort-animations';\nimport {SortDirection} from './sort-direction';\nimport {getSortHeaderNotContainedWithinSortError} from './sort-errors';\nimport {MatSortHeaderIntl} from './sort-header-intl';\n\n\n// Boilerplate for applying mixins to the sort header.\n/** @docs-private */\nexport class MatSortHeaderBase {}\nexport const _MatSortHeaderMixinBase: CanDisableCtor & typeof MatSortHeaderBase =\n    mixinDisabled(MatSortHeaderBase);\n\n/**\n * Valid positions for the arrow to be in for its opacity and translation. If the state is a\n * sort direction, the position of the arrow will be above/below and opacity 0. If the state is\n * hint, the arrow will be in the center with a slight opacity. Active state means the arrow will\n * be fully opaque in the center.\n *\n * @docs-private\n */\nexport type ArrowViewState = SortDirection | 'hint' | 'active';\n\n/**\n * States describing the arrow's animated position (animating fromState to toState).\n * If the fromState is not defined, there will be no animated transition to the toState.\n * @docs-private\n */\nexport interface ArrowViewStateTransition {\n  fromState?: ArrowViewState;\n  toState: ArrowViewState;\n}\n\n/** Column definition associated with a `MatSortHeader`. */\ninterface MatSortHeaderColumnDef {\n  name: string;\n}\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-sort-header]',\n  exportAs: 'matSortHeader',\n  templateUrl: 'sort-header.html',\n  styleUrls: ['sort-header.css'],\n  host: {\n    '(click)': '_handleClick()',\n    '(mouseenter)': '_setIndicatorHintVisible(true)',\n    '(longpress)': '_setIndicatorHintVisible(true)',\n    '(mouseleave)': '_setIndicatorHintVisible(false)',\n    '[attr.aria-sort]': '_getAriaSortAttribute()',\n    '[class.mat-sort-header-disabled]': '_isDisabled()',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  animations: [\n    matSortAnimations.indicator,\n    matSortAnimations.leftPointer,\n    matSortAnimations.rightPointer,\n    matSortAnimations.arrowOpacity,\n    matSortAnimations.arrowPosition,\n    matSortAnimations.allowChildren,\n  ]\n})\nexport class MatSortHeader extends _MatSortHeaderMixinBase\n    implements CanDisable, MatSortable, OnDestroy, OnInit {\n  private _rerenderSubscription: Subscription;\n\n  /**\n   * Flag set to true when the indicator should be displayed while the sort is not active. Used to\n   * provide an affordance that the header is sortable by showing on focus and hover.\n   */\n  _showIndicatorHint: boolean = false;\n\n  /**\n   * The view transition state of the arrow (translation/ opacity) - indicates its `from` and `to`\n   * position through the animation. If animations are currently disabled, the fromState is removed\n   * so that there is no animation displayed.\n   */\n  _viewState: ArrowViewStateTransition;\n\n  /** The direction the arrow should be facing according to the current state. */\n  _arrowDirection: SortDirection = '';\n\n  /**\n   * Whether the view state animation should show the transition between the `from` and `to` states.\n   */\n  _disableViewStateAnimation = false;\n\n  /**\n   * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n   * the column's name.\n   */\n  @Input('mat-sort-header') id: string;\n\n  /** Sets the position of the arrow that displays when sorted. */\n  @Input() arrowPosition: 'before' | 'after' = 'after';\n\n  /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n  @Input() start: 'asc' | 'desc';\n\n  /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n  @Input()\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  constructor(public _intl: MatSortHeaderIntl,\n              changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _sort: MatSort,\n              @Inject('MAT_SORT_HEADER_COLUMN_DEF') @Optional()\n                  public _columnDef: MatSortHeaderColumnDef) {\n    // Note that we use a string token for the `_columnDef`, because the value is provided both by\n    // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n    // and we want to avoid having the sort header depending on the CDK table because\n    // of this single reference.\n    super();\n\n    if (!_sort) {\n      throw getSortHeaderNotContainedWithinSortError();\n    }\n\n    this._rerenderSubscription = merge(_sort.sortChange, _sort._stateChanges, _intl.changes)\n        .subscribe(() => {\n          if (this._isSorted()) {\n            this._updateArrowDirection();\n          }\n\n          // If this header was recently active and now no longer sorted, animate away the arrow.\n          if (!this._isSorted() && this._viewState && this._viewState.toState === 'active') {\n            this._disableViewStateAnimation = false;\n            this._setAnimationTransitionState({fromState: 'active', toState: this._arrowDirection});\n          }\n\n          changeDetectorRef.markForCheck();\n        });\n  }\n\n  ngOnInit() {\n    if (!this.id && this._columnDef) {\n      this.id = this._columnDef.name;\n    }\n\n    // Initialize the direction of the arrow and set the view state to be immediately that state.\n    this._updateArrowDirection();\n    this._setAnimationTransitionState(\n        {toState: this._isSorted() ? 'active' : this._arrowDirection});\n\n    this._sort.register(this);\n  }\n\n  ngOnDestroy() {\n    this._sort.deregister(this);\n    this._rerenderSubscription.unsubscribe();\n  }\n\n  /**\n   * Sets the \"hint\" state such that the arrow will be semi-transparently displayed as a hint to the\n   * user showing what the active sort will become. If set to false, the arrow will fade away.\n   */\n  _setIndicatorHintVisible(visible: boolean) {\n    // No-op if the sort header is disabled - should not make the hint visible.\n    if (this._isDisabled() && visible) { return; }\n\n    this._showIndicatorHint = visible;\n\n    if (!this._isSorted()) {\n      this._updateArrowDirection();\n      if (this._showIndicatorHint) {\n        this._setAnimationTransitionState({fromState: this._arrowDirection, toState: 'hint'});\n      } else {\n        this._setAnimationTransitionState({fromState: 'hint', toState: this._arrowDirection});\n      }\n    }\n  }\n\n  /**\n   * Sets the animation transition view state for the arrow's position and opacity. If the\n   * `disableViewStateAnimation` flag is set to true, the `fromState` will be ignored so that\n   * no animation appears.\n   */\n  _setAnimationTransitionState(viewState: ArrowViewStateTransition) {\n    this._viewState = viewState;\n\n    // If the animation for arrow position state (opacity/translation) should be disabled,\n    // remove the fromState so that it jumps right to the toState.\n    if (this._disableViewStateAnimation) {\n      this._viewState = {toState: viewState.toState};\n    }\n  }\n\n  /** Triggers the sort on this sort header and removes the indicator hint. */\n  _handleClick() {\n    if (this._isDisabled()) { return; }\n\n    this._sort.sort(this);\n\n    // Do not show the animation if the header was already shown in the right position.\n    if (this._viewState.toState === 'hint' || this._viewState.toState === 'active') {\n      this._disableViewStateAnimation = true;\n    }\n\n    // If the arrow is now sorted, animate the arrow into place. Otherwise, animate it away into\n    // the direction it is facing.\n    const viewState: ArrowViewStateTransition = this._isSorted() ?\n        {fromState: this._arrowDirection, toState: 'active'} :\n        {fromState: 'active', toState: this._arrowDirection};\n    this._setAnimationTransitionState(viewState);\n\n    this._showIndicatorHint = false;\n  }\n\n  /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n  _isSorted() {\n    return this._sort.active == this.id &&\n        (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n  }\n\n  /** Returns the animation state for the arrow direction (indicator and pointers). */\n  _getArrowDirectionState() {\n    return `${this._isSorted() ? 'active-' : ''}${this._arrowDirection}`;\n  }\n\n  /** Returns the arrow position state (opacity, translation). */\n  _getArrowViewState() {\n    const fromState = this._viewState.fromState;\n    return (fromState ? `${fromState}-to-` : '') + this._viewState.toState;\n  }\n\n  /**\n   * Updates the direction the arrow should be pointing. If it is not sorted, the arrow should be\n   * facing the start direction. Otherwise if it is sorted, the arrow should point in the currently\n   * active sorted direction. The reason this is updated through a function is because the direction\n   * should only be changed at specific times - when deactivated but the hint is displayed and when\n   * the sort is active and the direction changes. Otherwise the arrow's direction should linger\n   * in cases such as the sort becoming deactivated but we want to animate the arrow away while\n   * preserving its direction, even though the next sort direction is actually different and should\n   * only be changed once the arrow displays again (hint or activation).\n   */\n  _updateArrowDirection() {\n    this._arrowDirection = this._isSorted() ?\n        this._sort.direction :\n        (this.start || this._sort.start);\n  }\n\n  _isDisabled() {\n    return this._sort.disabled || this.disabled;\n  }\n\n  /**\n   * Gets the aria-sort attribute that should be applied to this sort header. If this header\n   * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n   * says that the aria-sort property should only be present on one header at a time, so removing\n   * ensures this is true.\n   */\n  _getAriaSortAttribute() {\n    if (!this._isSorted()) { return null; }\n\n    return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatSortHeader} from './sort-header';\nimport {MatSort} from './sort';\nimport {MAT_SORT_HEADER_INTL_PROVIDER} from './sort-header-intl';\nimport {CommonModule} from '@angular/common';\n\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [MatSort, MatSortHeader],\n  declarations: [MatSort, MatSortHeader],\n  providers: [MAT_SORT_HEADER_INTL_PROVIDER]\n})\nexport class MatSortModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepLabel} from '@angular/cdk/stepper';\n\n@Directive({\n  selector: '[matStepLabel]',\n})\nexport class MatStepLabel extends CdkStepLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Stepper data that is required for internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatStepperIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** Label that is rendered below optional steps. */\n  optionalLabel: string = 'Optional';\n}\n\n\n/** @docs-private */\nexport function MAT_STEPPER_INTL_PROVIDER_FACTORY(parentIntl: MatStepperIntl) {\n  return parentIntl || new MatStepperIntl();\n}\n\n/** @docs-private */\nexport const MAT_STEPPER_INTL_PROVIDER = {\n  provide: MatStepperIntl,\n  deps: [[new Optional(), new SkipSelf(), MatStepperIntl]],\n  useFactory: MAT_STEPPER_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n  TemplateRef,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatStepLabel} from './step-label';\nimport {MatStepperIntl} from './stepper-intl';\nimport {MatStepperIconContext} from './stepper-icon';\nimport {CdkStepHeader, StepState} from '@angular/cdk/stepper';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step-header',\n  templateUrl: 'step-header.html',\n  styleUrls: ['step-header.css'],\n  host: {\n    'class': 'mat-step-header',\n    'role': 'tab',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStepHeader extends CdkStepHeader implements OnDestroy {\n  private _intlSubscription: Subscription;\n\n  /** State of the given step. */\n  @Input() state: StepState;\n\n  /** Label of the given step. */\n  @Input() label: MatStepLabel | string;\n\n  /** Error message to display when there's an error. */\n  @Input() errorMessage: string;\n\n  /** Overrides for the header icons, passed in via the stepper. */\n  @Input() iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>};\n\n  /** Index of the given step. */\n  @Input() index: number;\n\n  /** Whether the given step is selected. */\n  @Input() selected: boolean;\n\n  /** Whether the given step label is active. */\n  @Input() active: boolean;\n\n  /** Whether the given step is optional. */\n  @Input() optional: boolean;\n\n  constructor(\n    public _intl: MatStepperIntl,\n    private _focusMonitor: FocusMonitor,\n    _elementRef: ElementRef<HTMLElement>,\n    changeDetectorRef: ChangeDetectorRef) {\n    super(_elementRef);\n    _focusMonitor.monitor(_elementRef, true);\n    this._intlSubscription = _intl.changes.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  ngOnDestroy() {\n    this._intlSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Returns string label of given step if it is a text label. */\n  _stringLabel(): string | null {\n    return this.label instanceof MatStepLabel ? null : this.label;\n  }\n\n  /** Returns MatStepLabel if the label of given step is a template label. */\n  _templateLabel(): MatStepLabel | null {\n    return this.label instanceof MatStepLabel ? this.label : null;\n  }\n\n  /** Returns the host HTML element. */\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Template context variables that are exposed to the `matStepperIcon` instances. */\n  _getIconContext(): MatStepperIconContext {\n    return {\n      index: this.index,\n      active: this.active,\n      optional: this.optional\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material steppers.\n * @docs-private\n */\nexport const matStepperAnimations: {\n  readonly horizontalStepTransition: AnimationTriggerMetadata;\n  readonly verticalStepTransition: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions the step along the X axis in a horizontal stepper. */\n  horizontalStepTransition: trigger('stepTransition', [\n    state('previous', style({transform: 'translate3d(-100%, 0, 0)', visibility: 'hidden'})),\n    state('current', style({transform: 'none', visibility: 'visible'})),\n    state('next', style({transform: 'translate3d(100%, 0, 0)', visibility: 'hidden'})),\n    transition('* => *', animate('500ms cubic-bezier(0.35, 0, 0.25, 1)'))\n  ]),\n\n  /** Animation that transitions the step along the Y axis in a vertical stepper. */\n  verticalStepTransition: trigger('stepTransition', [\n    state('previous', style({height: '0px', visibility: 'hidden'})),\n    state('next', style({height: '0px', visibility: 'hidden'})),\n    state('current', style({height: '*', visibility: 'visible'})),\n    transition('* <=> current', animate('225ms cubic-bezier(0.4, 0.0, 0.2, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, TemplateRef} from '@angular/core';\nimport {StepState} from '@angular/cdk/stepper';\n\n/** Template context available to an attached `matStepperIcon`. */\nexport interface MatStepperIconContext {\n  /** Index of the step. */\n  index: number;\n  /** Whether the step is currently active. */\n  active: boolean;\n  /** Whether the step is optional. */\n  optional: boolean;\n}\n\n/**\n * Template to be used to override the icons inside the step header.\n */\n@Directive({\n  selector: 'ng-template[matStepperIcon]',\n})\nexport class MatStepperIcon {\n  /** Name of the icon to be overridden. */\n  @Input('matStepperIcon') name: StepState;\n\n  constructor(public templateRef: TemplateRef<MatStepperIconContext>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  CdkStep,\n  CdkStepper,\n  StepContentPositionState,\n  MAT_STEPPER_GLOBAL_OPTIONS,\n  StepperOptions\n} from '@angular/cdk/stepper';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  QueryList,\n  SkipSelf,\n  TemplateRef,\n  ViewChildren,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm} from '@angular/forms';\nimport {DOCUMENT} from '@angular/common';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {takeUntil, distinctUntilChanged} from 'rxjs/operators';\n\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {matStepperAnimations} from './stepper-animations';\nimport {MatStepperIcon, MatStepperIconContext} from './stepper-icon';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-step',\n  templateUrl: 'step.html',\n  providers: [{provide: ErrorStateMatcher, useExisting: MatStep}],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matStep',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatStep extends CdkStep implements ErrorStateMatcher {\n  /** Content for step label given by `<ng-template matStepLabel>`. */\n  @ContentChild(MatStepLabel) stepLabel: MatStepLabel;\n\n  /** @breaking-change 8.0.0 remove the `?` after `stepperOptions` */\n  constructor(@Inject(forwardRef(() => MatStepper)) stepper: MatStepper,\n              @SkipSelf() private _errorStateMatcher: ErrorStateMatcher,\n              @Optional() @Inject(MAT_STEPPER_GLOBAL_OPTIONS) stepperOptions?: StepperOptions) {\n    super(stepper, stepperOptions);\n  }\n\n  /** Custom error state matcher that additionally checks for validity of interacted form. */\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const originalErrorState = this._errorStateMatcher.isErrorState(control, form);\n\n    // Custom error state checks for the validity of form that is not submitted or touched\n    // since user can trigger a form change by calling for another step without directly\n    // interacting with the current form.\n    const customErrorState = !!(control && control.invalid && this.interacted);\n\n    return originalErrorState || customErrorState;\n  }\n}\n\n\n@Directive({\n  selector: '[matStepper]'\n})\nexport class MatStepper extends CdkStepper implements AfterContentInit {\n  /** The list of step headers of the steps in the stepper. */\n  @ViewChildren(MatStepHeader) _stepHeader: QueryList<MatStepHeader>;\n\n  /** Steps that the stepper holds. */\n  @ContentChildren(MatStep) _steps: QueryList<MatStep>;\n\n  /** Custom icon overrides passed in by the consumer. */\n  @ContentChildren(MatStepperIcon) _icons: QueryList<MatStepperIcon>;\n\n  /** Event emitted when the current step is done transitioning in. */\n  @Output() readonly animationDone: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Consumer-specified template-refs to be used to override the header icons. */\n  _iconOverrides: {[key: string]: TemplateRef<MatStepperIconContext>} = {};\n\n  /** Stream of animation `done` events when the body expands/collapses. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  ngAfterContentInit() {\n    this._icons.forEach(({name, templateRef}) => this._iconOverrides[name] = templateRef);\n\n    // Mark the component for change detection whenever the content children query changes\n    this._steps.changes.pipe(takeUntil(this._destroyed)).subscribe(() => this._stateChanged());\n\n    this._animationDone.pipe(\n      // This needs a `distinctUntilChanged` in order to avoid emitting the same event twice due\n      // to a bug in animations where the `.done` callback gets invoked twice on some browsers.\n      // See https://github.com/angular/angular/issues/24084\n      distinctUntilChanged((x, y) => x.fromState === y.fromState && x.toState === y.toState),\n      takeUntil(this._destroyed)\n    ).subscribe(event => {\n      if ((event.toState as StepContentPositionState) === 'current') {\n        this.animationDone.emit();\n      }\n    });\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-horizontal-stepper',\n  exportAs: 'matHorizontalStepper',\n  templateUrl: 'stepper-horizontal.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-horizontal',\n    '[class.mat-stepper-label-position-end]': 'labelPosition == \"end\"',\n    '[class.mat-stepper-label-position-bottom]': 'labelPosition == \"bottom\"',\n    'aria-orientation': 'horizontal',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.horizontalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatHorizontalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatHorizontalStepper extends MatStepper {\n  /** Whether the label should display in bottom or end position. */\n  @Input()\n  labelPosition: 'bottom' | 'end' = 'end';\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-vertical-stepper',\n  exportAs: 'matVerticalStepper',\n  templateUrl: 'stepper-vertical.html',\n  styleUrls: ['stepper.css'],\n  inputs: ['selectedIndex'],\n  host: {\n    'class': 'mat-stepper-vertical',\n    'aria-orientation': 'vertical',\n    'role': 'tablist',\n  },\n  animations: [matStepperAnimations.verticalStepTransition],\n  providers: [{provide: MatStepper, useExisting: MatVerticalStepper}],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatVerticalStepper extends MatStepper {\n  constructor(\n    @Optional() dir: Directionality,\n    changeDetectorRef: ChangeDetectorRef,\n    // @breaking-change 8.0.0 `elementRef` and `_document` parameters to become required.\n    elementRef?: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) _document?: any) {\n    super(dir, changeDetectorRef, elementRef, _document);\n    this._orientation = 'vertical';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\nimport {CdkStepper, CdkStepperNext, CdkStepperPrevious} from '@angular/cdk/stepper';\nimport {MatStepper} from './stepper';\n\n/** Button that moves to the next step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperNext]',\n  host: {\n    '(click)': '_stepper.next()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperNext extends CdkStepperNext {}\n\n/** Button that moves to the previous step in a stepper workflow. */\n@Directive({\n  selector: 'button[matStepperPrevious]',\n  host: {\n    '(click)': '_stepper.previous()',\n    '[type]': 'type',\n  },\n  inputs: ['type'],\n  providers: [{provide: CdkStepper, useExisting: MatStepper}]\n})\nexport class MatStepperPrevious extends CdkStepperPrevious {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ErrorStateMatcher, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatStepHeader} from './step-header';\nimport {MatStepLabel} from './step-label';\nimport {MatHorizontalStepper, MatStep, MatStepper, MatVerticalStepper} from './stepper';\nimport {MatStepperNext, MatStepperPrevious} from './stepper-button';\nimport {MatStepperIcon} from './stepper-icon';\nimport {MAT_STEPPER_INTL_PROVIDER} from './stepper-intl';\n\n\n@NgModule({\n  imports: [\n    MatCommonModule,\n    CommonModule,\n    PortalModule,\n    MatButtonModule,\n    CdkStepperModule,\n    MatIconModule,\n    MatRippleModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  declarations: [\n    MatHorizontalStepper,\n    MatVerticalStepper,\n    MatStep,\n    MatStepLabel,\n    MatStepper,\n    MatStepperNext,\n    MatStepperPrevious,\n    MatStepHeader,\n    MatStepperIcon,\n  ],\n  providers: [MAT_STEPPER_INTL_PROVIDER, ErrorStateMatcher],\n})\nexport class MatStepperModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CDK_TABLE_TEMPLATE, CdkTable} from '@angular/cdk/table';\nimport {ChangeDetectionStrategy, Component, ViewEncapsulation} from '@angular/core';\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-table, table[mat-table]',\n  exportAs: 'matTable',\n  template: CDK_TABLE_TEMPLATE,\n  styleUrls: ['table.css'],\n  host: {\n    'class': 'mat-table',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatTable<T> extends CdkTable<T> {\n  /** Overrides the sticky CSS class set by the `CdkTable`. */\n  protected stickyCssClass = 'mat-table-sticky';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {\n  DOWN_ARROW,\n  END,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n} from '@angular/cdk/keycodes';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  HammerInput,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subscription} from 'rxjs';\n\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nexport const MAT_SLIDER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlider),\n  multi: true\n};\n\n/** A simple change event emitted by the MatSlider component. */\nexport class MatSliderChange {\n  /** The MatSlider that changed. */\n  source: MatSlider;\n\n  /** The new value of the source slider. */\n  value: number | null;\n}\n\n\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nexport class MatSliderBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSliderMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableCtor &\n    typeof MatSliderBase =\n        mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slider',\n  exportAs: 'matSlider',\n  providers: [MAT_SLIDER_VALUE_ACCESSOR],\n  host: {\n    '(focus)': '_onFocus()',\n    '(blur)': '_onBlur()',\n    '(mousedown)': '_onMousedown($event)',\n    '(keydown)': '_onKeydown($event)',\n    '(keyup)': '_onKeyup()',\n    '(mouseenter)': '_onMouseenter()',\n    '(slide)': '_onSlide($event)',\n    '(slideend)': '_onSlideEnd()',\n    '(slidestart)': '_onSlideStart($event)',\n    'class': 'mat-slider',\n    'role': 'slider',\n    '[tabIndex]': 'tabIndex',\n    '[attr.aria-disabled]': 'disabled',\n    '[attr.aria-valuemax]': 'max',\n    '[attr.aria-valuemin]': 'min',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-slider-disabled]': 'disabled',\n    '[class.mat-slider-has-ticks]': 'tickInterval',\n    '[class.mat-slider-horizontal]': '!vertical',\n    '[class.mat-slider-axis-inverted]': '_invertAxis',\n    '[class.mat-slider-sliding]': '_isSliding',\n    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n    '[class.mat-slider-vertical]': 'vertical',\n    '[class.mat-slider-min-value]': '_isMinValue',\n    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue && _thumbGap && _invertAxis',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'slider.html',\n  styleUrls: ['slider.css'],\n  inputs: ['disabled', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlider extends _MatSliderMixinBase\n    implements ControlValueAccessor, OnDestroy, CanDisable, CanColor, OnInit, HasTabIndex {\n  /** Whether the slider is inverted. */\n  @Input()\n  get invert(): boolean { return this._invert; }\n  set invert(value: boolean) {\n    this._invert = coerceBooleanProperty(value);\n  }\n  private _invert = false;\n\n  /** The maximum value that the slider can have. */\n  @Input()\n  get max(): number { return this._max; }\n  set max(v: number) {\n    this._max = coerceNumberProperty(v, this._max);\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _max: number = 100;\n\n  /** The minimum value that the slider can have. */\n  @Input()\n  get min(): number { return this._min; }\n  set min(v: number) {\n    this._min = coerceNumberProperty(v, this._min);\n\n    // If the value wasn't explicitly set by the user, set it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    this._percent = this._calculatePercentage(this._value);\n\n    // Since this also modifies the percentage, we need to let the change detection know.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _min: number = 0;\n\n  /** The values at which the thumb will snap. */\n  @Input()\n  get step(): number { return this._step; }\n  set step(v: number) {\n    this._step = coerceNumberProperty(v, this._step);\n\n    if (this._step % 1 !== 0) {\n      this._roundToDecimal = this._step.toString().split('.').pop()!.length;\n    }\n\n    // Since this could modify the label, we need to notify the change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n  private _step: number = 1;\n\n  /** Whether or not to show the thumb label. */\n  @Input()\n  get thumbLabel(): boolean { return this._thumbLabel; }\n  set thumbLabel(value: boolean) { this._thumbLabel = coerceBooleanProperty(value); }\n  private _thumbLabel: boolean = false;\n\n  /**\n   * How often to show ticks. Relative to the step so that a tick always appears on a step.\n   * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n   */\n  @Input()\n  get tickInterval() { return this._tickInterval; }\n  set tickInterval(value: 'auto' | number) {\n    if (value === 'auto') {\n      this._tickInterval = 'auto';\n    } else if (typeof value === 'number' || typeof value === 'string') {\n      this._tickInterval = coerceNumberProperty(value, this._tickInterval as number);\n    } else {\n      this._tickInterval = 0;\n    }\n  }\n  private _tickInterval: 'auto' | number = 0;\n\n  /** Value of the slider. */\n  @Input()\n  get value(): number | null {\n    // If the value needs to be read and it is still uninitialized, initialize it to the min.\n    if (this._value === null) {\n      this.value = this._min;\n    }\n    return this._value;\n  }\n  set value(v: number | null) {\n    if (v !== this._value) {\n      let value = coerceNumberProperty(v);\n\n      // While incrementing by a decimal we can end up with values like 33.300000000000004.\n      // Truncate it to ensure that it matches the label and to make it easier to work with.\n      if (this._roundToDecimal) {\n        value = parseFloat(value.toFixed(this._roundToDecimal));\n      }\n\n      this._value = value;\n      this._percent = this._calculatePercentage(this._value);\n\n      // Since this also modifies the percentage, we need to let the change detection know.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _value: number | null = null;\n\n  /**\n   * Function that will be used to format the value before it is displayed\n   * in the thumb label. Can be used to format very large number in order\n   * for them to fit into the slider thumb.\n   */\n  @Input() displayWith: (value: number | null) => string | number;\n\n  /** Whether the slider is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n  private _vertical = false;\n\n  /** Event emitted when the slider value has changed. */\n  @Output() readonly change: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /** Event emitted when the slider thumb moves. */\n  @Output() readonly input: EventEmitter<MatSliderChange> = new EventEmitter<MatSliderChange>();\n\n  /**\n   * Emits when the raw value of the slider changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<number | null> = new EventEmitter<number | null>();\n\n  /** The value to be used for display purposes. */\n  get displayValue(): string | number {\n    if (this.displayWith) {\n      return this.displayWith(this.value);\n    }\n\n    // Note that this could be improved further by rounding something like 0.999 to 1 or\n    // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n    // every change detection cycle.\n    if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n      return this.value.toFixed(this._roundToDecimal);\n    }\n\n    return this.value || 0;\n  }\n\n  /** set focus to the host element */\n  focus() {\n    this._focusHostElement();\n  }\n\n  /** blur the host element */\n  blur() {\n    this._blurHostElement();\n  }\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  onTouched: () => any = () => {};\n\n  /** The percentage of the slider that coincides with the value. */\n  get percent(): number { return this._clamp(this._percent); }\n  private _percent: number = 0;\n\n  /**\n   * Whether or not the thumb is sliding.\n   * Used to determine if there should be a transition for the thumb and fill track.\n   */\n  _isSliding: boolean = false;\n\n  /**\n   * Whether or not the slider is active (clicked or sliding).\n   * Used to shrink and grow the thumb as according to the Material Design spec.\n   */\n  _isActive: boolean = false;\n\n  /**\n   * Whether the axis of the slider is inverted.\n   * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n   */\n  get _invertAxis() {\n    // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n    // top. However from a y-axis standpoint this is inverted.\n    return this.vertical ? !this.invert : this.invert;\n  }\n\n\n  /** Whether the slider is at its minimum value. */\n  get _isMinValue() {\n    return this.percent === 0;\n  }\n\n  /**\n   * The amount of space to leave between the slider thumb and the track fill & track background\n   * elements.\n   */\n  get _thumbGap() {\n    if (this.disabled) {\n      return DISABLED_THUMB_GAP;\n    }\n    if (this._isMinValue && !this.thumbLabel) {\n      return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n    }\n    return 0;\n  }\n\n  /** CSS styles for the track background element. */\n  get _trackBackgroundStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '-' : '';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the track fill element. */\n  get _trackFillStyles(): { [key: string]: string } {\n    const axis = this.vertical ? 'Y' : 'X';\n    const scale = this.vertical ? `1, ${this.percent}, 1` : `${this.percent}, 1, 1`;\n    const sign = this._shouldInvertMouseCoords() ? '' : '-';\n\n    return {\n      // scale3d avoids some rendering issues in Chrome. See #12071.\n      transform: `translate${axis}(${sign}${this._thumbGap}px) scale3d(${scale})`\n    };\n  }\n\n  /** CSS styles for the ticks container element. */\n  get _ticksContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the ticks container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n    let offset = this._tickIntervalPercent / 2 * 100;\n    return {\n      'transform': `translate${axis}(${sign}${offset}%)`\n    };\n  }\n\n  /** CSS styles for the ticks element. */\n  get _ticksStyles(): { [key: string]: string } {\n    let tickSize = this._tickIntervalPercent * 100;\n    let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n    let axis = this.vertical ? 'Y' : 'X';\n    // Depending on the direction we pushed the ticks container, push the ticks the opposite\n    // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n    // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n    let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n    let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n    let styles: { [key: string]: string } = {\n      'backgroundSize': backgroundSize,\n      // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n      'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n    };\n\n    if (this._isMinValue && this._thumbGap) {\n      let side = this.vertical ?\n          (this._invertAxis ? 'Bottom' : 'Top') :\n          (this._invertAxis ? 'Right' : 'Left');\n      styles[`padding${side}`] = `${this._thumbGap}px`;\n    }\n\n    return styles;\n  }\n\n  get _thumbContainerStyles(): { [key: string]: string } {\n    let axis = this.vertical ? 'Y' : 'X';\n    // For a horizontal slider in RTL languages we push the thumb container off the left edge\n    // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n    let invertOffset =\n        (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n    let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n    return {\n      'transform': `translate${axis}(-${offset}%)`\n    };\n  }\n\n  /** The size of a tick interval as a percentage of the size of the track. */\n  private _tickIntervalPercent: number = 0;\n\n  /** The dimensions of the slider. */\n  private _sliderDimensions: ClientRect | null = null;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** Decimal places to round to, based on the step amount. */\n  private _roundToDecimal: number;\n\n  /** Subscription to the Directionality change EventEmitter. */\n  private _dirChangeSubscription = Subscription.EMPTY;\n\n  /** The value of the slider when the slide start event fires. */\n  private _valueOnSlideStart: number | null;\n\n  /** Reference to the inner slider wrapper element. */\n  @ViewChild('sliderWrapper') private _sliderWrapper: ElementRef;\n\n  /**\n   * Whether mouse events should be converted to a slider position by calculating their distance\n   * from the right or bottom edge of the slider as opposed to the top or left.\n   */\n  private _shouldInvertMouseCoords() {\n    return (this._getDirection() == 'rtl' && !this.vertical) ? !this._invertAxis : this._invertAxis;\n  }\n\n  /** The language direction for this slider element. */\n  private _getDirection() {\n    return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n  }\n\n  constructor(elementRef: ElementRef,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Attribute('tabindex') tabIndex: string,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngOnInit() {\n    this._focusMonitor\n        .monitor(this._elementRef, true)\n        .subscribe((origin: FocusOrigin) => {\n          this._isActive = !!origin && origin !== 'keyboard';\n          this._changeDetectorRef.detectChanges();\n        });\n    if (this._dir) {\n      this._dirChangeSubscription = this._dir.change.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._dirChangeSubscription.unsubscribe();\n  }\n\n  _onMouseenter() {\n    if (this.disabled) {\n      return;\n    }\n\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onMousedown(event: MouseEvent) {\n    if (this.disabled) {\n      return;\n    }\n\n    const oldValue = this.value;\n    this._isSliding = false;\n    this._focusHostElement();\n    this._updateValueFromPosition({x: event.clientX, y: event.clientY});\n\n    // Emit a change and input event if the value changed.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n  }\n\n  _onSlide(event: HammerInput) {\n    if (this.disabled) {\n      return;\n    }\n\n    // The slide start event sometimes fails to fire on iOS, so if we're not already in the sliding\n    // state, call the slide start handler manually.\n    if (!this._isSliding) {\n      this._onSlideStart(null);\n    }\n\n    // Prevent the slide from selecting anything else.\n    event.preventDefault();\n\n    let oldValue = this.value;\n    this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n\n    // Native range elements always emit `input` events when the value changed while sliding.\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n    }\n  }\n\n  _onSlideStart(event: HammerInput | null) {\n    if (this.disabled || this._isSliding) {\n      return;\n    }\n\n    // Simulate mouseenter in case this is a mobile device.\n    this._onMouseenter();\n\n    this._isSliding = true;\n    this._focusHostElement();\n    this._valueOnSlideStart = this.value;\n\n    if (event) {\n      this._updateValueFromPosition({x: event.center.x, y: event.center.y});\n      event.preventDefault();\n    }\n  }\n\n  _onSlideEnd() {\n    this._isSliding = false;\n\n    if (this._valueOnSlideStart != this.value && !this.disabled) {\n      this._emitChangeEvent();\n    }\n    this._valueOnSlideStart = null;\n  }\n\n  _onFocus() {\n    // We save the dimensions of the slider here so we can use them to update the spacing of the\n    // ticks and determine where on the slider click and slide events happen.\n    this._sliderDimensions = this._getSliderDimensions();\n    this._updateTickIntervalPercent();\n  }\n\n  _onBlur() {\n    this.onTouched();\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    if (this.disabled) { return; }\n\n    let oldValue = this.value;\n\n    switch (event.keyCode) {\n      case PAGE_UP:\n        this._increment(10);\n        break;\n      case PAGE_DOWN:\n        this._increment(-10);\n        break;\n      case END:\n        this.value = this.max;\n        break;\n      case HOME:\n        this.value = this.min;\n        break;\n      case LEFT_ARROW:\n        // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n        // inverted slider the thumb moves in that direction. However for a blind user, nothing\n        // about the slider indicates that it is inverted. They will expect left to be decrement,\n        // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n        // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n        // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n        // sighted users, therefore we do not swap the meaning.\n        this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n        break;\n      case UP_ARROW:\n        this._increment(1);\n        break;\n      case RIGHT_ARROW:\n        // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n        this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n        break;\n      case DOWN_ARROW:\n        this._increment(-1);\n        break;\n      default:\n        // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n        // it.\n        return;\n    }\n\n    if (oldValue != this.value) {\n      this._emitInputEvent();\n      this._emitChangeEvent();\n    }\n\n    this._isSliding = true;\n    event.preventDefault();\n  }\n\n  _onKeyup() {\n    this._isSliding = false;\n  }\n\n  /** Increments the slider by the given number of steps (negative number decrements). */\n  private _increment(numSteps: number) {\n    this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n  }\n\n  /** Calculate the new value from the new physical location. The value will always be snapped. */\n  private _updateValueFromPosition(pos: {x: number, y: number}) {\n    if (!this._sliderDimensions) {\n      return;\n    }\n\n    let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n    let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n    let posComponent = this.vertical ? pos.y : pos.x;\n\n    // The exact value is calculated from the event and used to find the closest snap value.\n    let percent = this._clamp((posComponent - offset) / size);\n\n    if (this._shouldInvertMouseCoords()) {\n      percent = 1 - percent;\n    }\n\n    // Since the steps may not divide cleanly into the max value, if the user\n    // slid to 0 or 100 percent, we jump to the min/max value. This approach\n    // is slightly more intuitive than using `Math.ceil` below, because it\n    // follows the user's pointer closer.\n    if (percent === 0) {\n      this.value = this.min;\n    } else if (percent === 1) {\n      this.value = this.max;\n    } else {\n      const exactValue = this._calculateValue(percent);\n\n      // This calculation finds the closest step by finding the closest\n      // whole number divisible by the step relative to the min.\n      const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n\n      // The value needs to snap to the min and max.\n      this.value = this._clamp(closestValue, this.min, this.max);\n    }\n  }\n\n  /** Emits a change event if the current value is different from the last emitted value. */\n  private _emitChangeEvent() {\n    this._controlValueAccessorChangeFn(this.value);\n    this.valueChange.emit(this.value);\n    this.change.emit(this._createChangeEvent());\n  }\n\n  /** Emits an input event when the current value is different from the last emitted value. */\n  private _emitInputEvent() {\n    this.input.emit(this._createChangeEvent());\n  }\n\n  /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n  private _updateTickIntervalPercent() {\n    if (!this.tickInterval || !this._sliderDimensions) {\n      return;\n    }\n\n    if (this.tickInterval == 'auto') {\n      let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n      let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n      let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n      let pixelsPerTick = stepsPerTick * this.step;\n      this._tickIntervalPercent = pixelsPerTick / trackSize;\n    } else {\n      this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n    }\n  }\n\n  /** Creates a slider change object from the specified value. */\n  private _createChangeEvent(value = this.value): MatSliderChange {\n    let event = new MatSliderChange();\n\n    event.source = this;\n    event.value = value;\n\n    return event;\n  }\n\n  /** Calculates the percentage of the slider that a value is. */\n  private _calculatePercentage(value: number | null) {\n    return ((value || 0) - this.min) / (this.max - this.min);\n  }\n\n  /** Calculates the value a percentage of the slider corresponds to. */\n  private _calculateValue(percentage: number) {\n    return this.min + percentage * (this.max - this.min);\n  }\n\n  /** Return a number between two numbers. */\n  private _clamp(value: number, min = 0, max = 1) {\n    return Math.max(min, Math.min(value, max));\n  }\n\n  /**\n   * Get the bounding client rect of the slider track element.\n   * The track is used rather than the native element to ignore the extra space that the thumb can\n   * take up.\n   */\n  private _getSliderDimensions() {\n    return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n  }\n\n  /**\n   * Focuses the native element.\n   * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n   */\n  private _focusHostElement() {\n    this._elementRef.nativeElement.focus();\n  }\n\n  /** Blurs the native element. */\n  private _blurHostElement() {\n    this._elementRef.nativeElement.blur();\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n  }\n\n  /**\n   * Registers a callback to be triggered when the value has changed.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the component is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets whether the component should be disabled.\n   * Implemented as part of ControlValueAccessor.\n   * @param isDisabled\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlider} from './slider';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatSlider, MatCommonModule],\n  declarations: [MatSlider],\n  providers: [{provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}]\n})\nexport class MatSliderModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {Observable, Subject} from 'rxjs';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n/** Event that is emitted when a snack bar is dismissed. */\nexport interface MatSnackBarDismiss {\n  /** Whether the snack bar was dismissed using the action button. */\n  dismissedByAction: boolean;\n}\n\n/**\n * Reference to a snack bar dispatched from the snack bar service.\n */\nexport class MatSnackBarRef<T> {\n  /** The instance of the component making up the content of the snack bar. */\n  instance: T;\n\n  /**\n   * The instance of the component making up the content of the snack bar.\n   * @docs-private\n   */\n  containerInstance: MatSnackBarContainer;\n\n  /** Subject for notifying the user that the snack bar has been dismissed. */\n  private readonly _afterDismissed = new Subject<MatSnackBarDismiss>();\n\n  /** Subject for notifying the user that the snack bar has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the snack bar action was called. */\n  private readonly _onAction = new Subject<void>();\n\n  /**\n   * Timeout ID for the duration setTimeout call. Used to clear the timeout if the snackbar is\n   * dismissed before the duration passes.\n   */\n  private _durationTimeoutId: number;\n\n  /** Whether the snack bar was dismissed using the action button. */\n  private _dismissedByAction = false;\n\n  constructor(containerInstance: MatSnackBarContainer,\n              private _overlayRef: OverlayRef) {\n    this.containerInstance = containerInstance;\n    // Dismiss snackbar on action.\n    this.onAction().subscribe(() => this.dismiss());\n    containerInstance._onExit.subscribe(() => this._finishDismiss());\n  }\n\n  /** Dismisses the snack bar. */\n  dismiss(): void {\n    if (!this._afterDismissed.closed) {\n      this.containerInstance.exit();\n    }\n    clearTimeout(this._durationTimeoutId);\n  }\n\n  /** Marks the snackbar action clicked. */\n  dismissWithAction(): void {\n    if (!this._onAction.closed) {\n      this._dismissedByAction = true;\n      this._onAction.next();\n      this._onAction.complete();\n    }\n  }\n\n\n  /**\n   * Marks the snackbar action clicked.\n   * @deprecated Use `dismissWithAction` instead.\n   * @breaking-change 8.0.0\n   */\n  closeWithAction(): void {\n    this.dismissWithAction();\n  }\n\n  /** Dismisses the snack bar after some duration */\n  _dismissAfter(duration: number): void {\n    this._durationTimeoutId = setTimeout(() => this.dismiss(), duration);\n  }\n\n  /** Marks the snackbar as opened */\n  _open(): void {\n    if (!this._afterOpened.closed) {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    }\n  }\n\n  /** Cleans up the DOM after closing. */\n  private _finishDismiss(): void {\n    this._overlayRef.dispose();\n\n    if (!this._onAction.closed) {\n      this._onAction.complete();\n    }\n\n    this._afterDismissed.next({dismissedByAction: this._dismissedByAction});\n    this._afterDismissed.complete();\n    this._dismissedByAction = false;\n  }\n\n  /** Gets an observable that is notified when the snack bar is finished closing. */\n  afterDismissed(): Observable<MatSnackBarDismiss> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the snack bar has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this.containerInstance._onEnter;\n  }\n\n  /** Gets an observable that is notified when the snack bar action is called. */\n  onAction(): Observable<void> {\n    return this._onAction.asObservable();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {AriaLivePoliteness} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a snack bar. */\nexport const MAT_SNACK_BAR_DATA = new InjectionToken<any>('MatSnackBarData');\n\n/** Possible values for horizontalPosition on MatSnackBarConfig. */\nexport type MatSnackBarHorizontalPosition = 'start' | 'center' | 'end' | 'left' | 'right';\n\n/** Possible values for verticalPosition on MatSnackBarConfig. */\nexport type MatSnackBarVerticalPosition = 'top' | 'bottom';\n\n/**\n * Configuration used when opening a snack-bar.\n */\nexport class MatSnackBarConfig<D = any> {\n  /** The politeness level for the MatAriaLiveAnnouncer announcement. */\n  politeness?: AriaLivePoliteness = 'assertive';\n\n  /**\n   * Message to be announced by the LiveAnnouncer. When opening a snackbar without a custom\n   * component or template, the announcement message will default to the specified message.\n   */\n  announcementMessage?: string = '';\n\n  /** The view container to place the overlay for the snack bar into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** The length of time in milliseconds to wait before automatically dismissing the snack bar. */\n  duration?: number = 0;\n\n  /** Extra CSS classes to be added to the snack bar container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the snack bar. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** The horizontal position to place the snack bar. */\n  horizontalPosition?: MatSnackBarHorizontalPosition = 'center';\n\n  /** The vertical position to place the snack bar. */\n  verticalPosition?: MatSnackBarVerticalPosition = 'bottom';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Component, ViewEncapsulation, Inject, ChangeDetectionStrategy} from '@angular/core';\nimport {MatSnackBarRef} from './snack-bar-ref';\nimport {MAT_SNACK_BAR_DATA} from './snack-bar-config';\n\n\n/**\n * A component used to open as the default snack bar, matching material spec.\n * This should only be used internally by the snack bar service.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'simple-snack-bar',\n  templateUrl: 'simple-snack-bar.html',\n  styleUrls: ['simple-snack-bar.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {\n    'class': 'mat-simple-snackbar',\n  }\n})\nexport class SimpleSnackBar {\n  /** Data that was injected into the snack bar. */\n  data: {message: string, action: string};\n\n  constructor(\n    public snackBarRef: MatSnackBarRef<SimpleSnackBar>,\n    @Inject(MAT_SNACK_BAR_DATA) data: any) {\n    this.data = data;\n  }\n\n  /** Performs the action on the snack bar. */\n  action(): void {\n    this.snackBarRef.dismissWithAction();\n  }\n\n  /** If the action button should be shown. */\n  get hasAction(): boolean {\n    return !!this.data.action;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material snack bar.\n * @docs-private\n */\nexport const matSnackBarAnimations: {\n  readonly snackBarState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a snack bar. */\n  snackBarState: trigger('state', [\n    state('void, hidden', style({\n      transform: 'scale(0.8)',\n      opacity: 0,\n    })),\n    state('visible', style({\n      transform: 'scale(1)',\n      opacity: 1,\n    })),\n    transition('* => visible', animate('150ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void, * => hidden', animate('75ms cubic-bezier(0.4, 0.0, 1, 1)', style({\n      opacity: 0\n    }))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  CdkPortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n} from '@angular/cdk/portal';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  NgZone,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\nimport {matSnackBarAnimations} from './snack-bar-animations';\nimport {MatSnackBarConfig} from './snack-bar-config';\n\n\n/**\n * Internal component that wraps user-provided snack bar content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'snack-bar-container',\n  templateUrl: 'snack-bar-container.html',\n  styleUrls: ['snack-bar-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matSnackBarAnimations.snackBarState],\n  host: {\n    '[attr.role]': '_role',\n    'class': 'mat-snack-bar-container',\n    '[@state]': '_animationState',\n    '(@state.done)': 'onAnimationEnd($event)'\n  },\n})\nexport class MatSnackBarContainer extends BasePortalOutlet implements OnDestroy {\n  /** Whether the component has been destroyed. */\n  private _destroyed = false;\n\n  /** The portal outlet inside of this container into which the snack bar content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** Subject for notifying that the snack bar has exited from view. */\n  readonly _onExit: Subject<any> = new Subject();\n\n  /** Subject for notifying that the snack bar has finished entering the view. */\n  readonly _onEnter: Subject<any> = new Subject();\n\n  /** The state of the snack bar animations. */\n  _animationState = 'void';\n\n  /** ARIA role for the snack bar container. */\n  _role: 'alert' | 'status' | null;\n\n  constructor(\n    private _ngZone: NgZone,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    /** The snack bar configuration. */\n    public snackBarConfig: MatSnackBarConfig) {\n\n    super();\n\n    // Based on the ARIA spec, `alert` and `status` roles have an\n    // implicit `assertive` and `polite` politeness respectively.\n    if (snackBarConfig.politeness === 'assertive' && !snackBarConfig.announcementMessage) {\n      this._role = 'alert';\n    } else if (snackBarConfig.politeness === 'off') {\n      this._role = null;\n    } else {\n      this._role = 'status';\n    }\n  }\n\n  /** Attach a component portal as content to this snack bar container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this snack bar container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._assertNotAttached();\n    this._applySnackBarClasses();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Handle end of animations, updating the state of the snackbar. */\n  onAnimationEnd(event: AnimationEvent) {\n    const {fromState, toState} = event;\n\n    if ((toState === 'void' && fromState !== 'void') || toState === 'hidden') {\n      this._completeExit();\n    }\n\n    if (toState === 'visible') {\n      // Note: we shouldn't use `this` inside the zone callback,\n      // because it can cause a memory leak.\n      const onEnter = this._onEnter;\n\n      this._ngZone.run(() => {\n        onEnter.next();\n        onEnter.complete();\n      });\n    }\n  }\n\n  /** Begin animation of snack bar entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the snack bar exiting from view. */\n  exit(): Observable<void> {\n    // Note: this one transitions to `hidden`, rather than `void`, in order to handle the case\n    // where multiple snack bars are opened in quick succession (e.g. two consecutive calls to\n    // `MatSnackBar.open`).\n    this._animationState = 'hidden';\n    return this._onExit;\n  }\n\n  /** Makes sure the exit callbacks have been invoked when the element is destroyed. */\n  ngOnDestroy() {\n    this._destroyed = true;\n    this._completeExit();\n  }\n\n  /**\n   * Waits for the zone to settle before removing the element. Helps prevent\n   * errors where we end up removing an element which is in the middle of an animation.\n   */\n  private _completeExit() {\n    this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n      this._onExit.next();\n      this._onExit.complete();\n    });\n  }\n\n  /** Applies the various positioning and user-configured CSS classes to the snack bar. */\n  private _applySnackBarClasses() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClasses = this.snackBarConfig.panelClass;\n\n    if (panelClasses) {\n      if (Array.isArray(panelClasses)) {\n        // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n        panelClasses.forEach(cssClass => element.classList.add(cssClass));\n      } else {\n        element.classList.add(panelClasses);\n      }\n    }\n\n    if (this.snackBarConfig.horizontalPosition === 'center') {\n      element.classList.add('mat-snack-bar-center');\n    }\n\n    if (this.snackBarConfig.verticalPosition === 'top') {\n      element.classList.add('mat-snack-bar-top');\n    }\n  }\n\n  /** Asserts that no content is already attached to the container. */\n  private _assertNotAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach snack bar content after content is already attached');\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MatSnackBarContainer} from './snack-bar-container';\n\n\n@NgModule({\n  imports: [\n    OverlayModule,\n    PortalModule,\n    CommonModule,\n    MatButtonModule,\n    MatCommonModule,\n  ],\n  exports: [MatSnackBarContainer, MatCommonModule],\n  declarations: [MatSnackBarContainer, SimpleSnackBar],\n  entryComponents: [MatSnackBarContainer, SimpleSnackBar],\n})\nexport class MatSnackBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LiveAnnouncer} from '@angular/cdk/a11y';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  EmbeddedViewRef,\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  OnDestroy,\n} from '@angular/core';\nimport {take, takeUntil} from 'rxjs/operators';\nimport {SimpleSnackBar} from './simple-snack-bar';\nimport {MAT_SNACK_BAR_DATA, MatSnackBarConfig} from './snack-bar-config';\nimport {MatSnackBarContainer} from './snack-bar-container';\nimport {MatSnackBarModule} from './snack-bar-module';\nimport {MatSnackBarRef} from './snack-bar-ref';\n\n\n/** Injection token that can be used to specify default snack bar. */\nexport const MAT_SNACK_BAR_DEFAULT_OPTIONS =\n    new InjectionToken<MatSnackBarConfig>('mat-snack-bar-default-options', {\n      providedIn: 'root',\n      factory: MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY(): MatSnackBarConfig {\n  return new MatSnackBarConfig();\n}\n\n/**\n * Service to dispatch Material Design snack bar messages.\n */\n@Injectable({providedIn: MatSnackBarModule})\nexport class MatSnackBar implements OnDestroy {\n  /**\n   * Reference to the current snack bar in the view *at this level* (in the Angular injector tree).\n   * If there is a parent snack-bar service, all operations should delegate to that parent\n   * via `_openedSnackBarRef`.\n   */\n  private _snackBarRefAtThisLevel: MatSnackBarRef<any> | null = null;\n\n  /** Reference to the currently opened snackbar at *any* level. */\n  get _openedSnackBarRef(): MatSnackBarRef<any> | null {\n    const parent = this._parentSnackBar;\n    return parent ? parent._openedSnackBarRef : this._snackBarRefAtThisLevel;\n  }\n\n  set _openedSnackBarRef(value: MatSnackBarRef<any> | null) {\n    if (this._parentSnackBar) {\n      this._parentSnackBar._openedSnackBarRef = value;\n    } else {\n      this._snackBarRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _live: LiveAnnouncer,\n      private _injector: Injector,\n      private _breakpointObserver: BreakpointObserver,\n      @Optional() @SkipSelf() private _parentSnackBar: MatSnackBar,\n      @Inject(MAT_SNACK_BAR_DEFAULT_OPTIONS) private _defaultConfig: MatSnackBarConfig) {}\n\n  /**\n   * Creates and dispatches a snack bar with a custom component for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param component Component to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromComponent<T>(component: ComponentType<T>, config?: MatSnackBarConfig):\n    MatSnackBarRef<T> {\n    return this._attach(component, config) as MatSnackBarRef<T>;\n  }\n\n  /**\n   * Creates and dispatches a snack bar with a custom template for the content, removing any\n   * currently opened snack bars.\n   *\n   * @param template Template to be instantiated.\n   * @param config Extra configuration for the snack bar.\n   */\n  openFromTemplate(template: TemplateRef<any>, config?: MatSnackBarConfig):\n    MatSnackBarRef<EmbeddedViewRef<any>> {\n    return this._attach(template, config);\n  }\n\n  /**\n   * Opens a snackbar with a message and an optional action.\n   * @param message The message to show in the snackbar.\n   * @param action The label for the snackbar action.\n   * @param config Additional configuration options for the snackbar.\n   */\n  open(message: string, action: string = '', config?: MatSnackBarConfig):\n      MatSnackBarRef<SimpleSnackBar> {\n    const _config = {...this._defaultConfig, ...config};\n\n    // Since the user doesn't have access to the component, we can\n    // override the data to pass in our own message and action.\n    _config.data = {message, action};\n\n    if (!_config.announcementMessage) {\n      _config.announcementMessage = message;\n    }\n\n    return this.openFromComponent(SimpleSnackBar, _config);\n  }\n\n  /**\n   * Dismisses the currently-visible snack bar.\n   */\n  dismiss(): void {\n    if (this._openedSnackBarRef) {\n      this._openedSnackBarRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    // Only dismiss the snack bar at the current level on destroy.\n    if (this._snackBarRefAtThisLevel) {\n      this._snackBarRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the snack bar container component to the overlay.\n   */\n  private _attachSnackBarContainer(overlayRef: OverlayRef,\n                                   config: MatSnackBarConfig): MatSnackBarContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatSnackBarConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatSnackBarContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatSnackBarContainer> = overlayRef.attach(containerPortal);\n    containerRef.instance.snackBarConfig = config;\n    return containerRef.instance;\n  }\n\n  /**\n   * Places a new component or a template as the content of the snack bar container.\n   */\n  private _attach<T>(content: ComponentType<T> | TemplateRef<T>, userConfig?: MatSnackBarConfig):\n    MatSnackBarRef<T | EmbeddedViewRef<any>> {\n\n    const config = {...new MatSnackBarConfig(), ...this._defaultConfig, ...userConfig};\n    const overlayRef = this._createOverlay(config);\n    const container = this._attachSnackBarContainer(overlayRef, config);\n    const snackBarRef = new MatSnackBarRef<T | EmbeddedViewRef<any>>(container, overlayRef);\n\n    if (content instanceof TemplateRef) {\n      const portal = new TemplatePortal(content, null!, {\n        $implicit: config.data,\n        snackBarRef\n      } as any);\n\n      snackBarRef.instance = container.attachTemplatePortal(portal);\n    } else {\n      const injector = this._createInjector(config, snackBarRef);\n      const portal = new ComponentPortal(content, undefined, injector);\n      const contentRef = container.attachComponentPortal<T>(portal);\n\n      // We can't pass this via the injector, because the injector is created earlier.\n      snackBarRef.instance = contentRef.instance;\n    }\n\n    // Subscribe to the breakpoint observer and attach the mat-snack-bar-handset class as\n    // appropriate. This class is applied to the overlay element because the overlay must expand to\n    // fill the width of the screen for full width snackbars.\n    this._breakpointObserver.observe(Breakpoints.Handset).pipe(\n      takeUntil(overlayRef.detachments().pipe(take(1)))\n    ).subscribe(state => {\n      if (state.matches) {\n        overlayRef.overlayElement.classList.add('mat-snack-bar-handset');\n      } else {\n        overlayRef.overlayElement.classList.remove('mat-snack-bar-handset');\n      }\n    });\n\n    this._animateSnackBar(snackBarRef, config);\n    this._openedSnackBarRef = snackBarRef;\n    return this._openedSnackBarRef;\n  }\n\n  /** Animates the old snack bar out and the new one in. */\n  private _animateSnackBar(snackBarRef: MatSnackBarRef<any>, config: MatSnackBarConfig) {\n    // When the snackbar is dismissed, clear the reference to it.\n    snackBarRef.afterDismissed().subscribe(() => {\n      // Clear the snackbar ref if it hasn't already been replaced by a newer snackbar.\n      if (this._openedSnackBarRef == snackBarRef) {\n        this._openedSnackBarRef = null;\n      }\n\n      if (config.announcementMessage) {\n        this._live.clear();\n      }\n    });\n\n    if (this._openedSnackBarRef) {\n      // If a snack bar is already in view, dismiss it and enter the\n      // new snack bar after exit animation is complete.\n      this._openedSnackBarRef.afterDismissed().subscribe(() => {\n        snackBarRef.containerInstance.enter();\n      });\n      this._openedSnackBarRef.dismiss();\n    } else {\n      // If no snack bar is in view, enter the new snack bar.\n      snackBarRef.containerInstance.enter();\n    }\n\n    // If a dismiss timeout is provided, set up dismiss based on after the snackbar is opened.\n    if (config.duration && config.duration > 0) {\n      snackBarRef.afterOpened().subscribe(() => snackBarRef._dismissAfter(config.duration!));\n    }\n\n    if (config.announcementMessage) {\n      this._live.announce(config.announcementMessage, config.politeness);\n    }\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified snack bar config.\n   */\n  private _createOverlay(config: MatSnackBarConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig();\n    overlayConfig.direction = config.direction;\n\n    let positionStrategy = this._overlay.position().global();\n    // Set horizontal position.\n    const isRtl = config.direction === 'rtl';\n    const isLeft = (\n      config.horizontalPosition === 'left' ||\n      (config.horizontalPosition === 'start' && !isRtl) ||\n      (config.horizontalPosition === 'end' && isRtl));\n    const isRight = !isLeft && config.horizontalPosition !== 'center';\n    if (isLeft) {\n      positionStrategy.left('0');\n    } else if (isRight) {\n      positionStrategy.right('0');\n    } else {\n      positionStrategy.centerHorizontally();\n    }\n    // Set horizontal position.\n    if (config.verticalPosition === 'top') {\n      positionStrategy.top('0');\n    } else {\n      positionStrategy.bottom('0');\n    }\n\n    overlayConfig.positionStrategy = positionStrategy;\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a snack bar component.\n   * @param config Config that was used to create the snack bar.\n   * @param snackBarRef Reference to the snack bar.\n   */\n  private _createInjector<T>(\n      config: MatSnackBarConfig,\n      snackBarRef: MatSnackBarRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    return new PortalInjector(userInjector || this._injector, new WeakMap<any, any>([\n      [MatSnackBarRef, snackBarRef],\n      [MAT_SNACK_BAR_DATA, config.data]\n    ]));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Directive,\n  EventEmitter,\n  Input,\n  isDevMode,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n} from '@angular/core';\nimport {\n  CanDisable,\n  CanDisableCtor,\n  HasInitialized,\n  HasInitializedCtor,\n  mixinDisabled,\n  mixinInitialized,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {SortDirection} from './sort-direction';\nimport {\n  getSortDuplicateSortableIdError,\n  getSortHeaderMissingIdError,\n  getSortInvalidDirectionError,\n} from './sort-errors';\n\n/** Interface for a directive that holds sorting state consumed by `MatSortHeader`. */\nexport interface MatSortable {\n  /** The id of the column being sorted. */\n  id: string;\n\n  /** Starting sort direction. */\n  start: 'asc' | 'desc';\n\n  /** Whether to disable clearing the sorting state. */\n  disableClear: boolean;\n}\n\n/** The current sort state. */\nexport interface Sort {\n  /** The id of the column being sorted. */\n  active: string;\n\n  /** The sort direction. */\n  direction: SortDirection;\n}\n\n// Boilerplate for applying mixins to MatSort.\n/** @docs-private */\nexport class MatSortBase {}\nexport const _MatSortMixinBase: HasInitializedCtor & CanDisableCtor & typeof MatSortBase =\n    mixinInitialized(mixinDisabled(MatSortBase));\n\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\n@Directive({\n  selector: '[matSort]',\n  exportAs: 'matSort',\n  inputs: ['disabled: matSortDisabled']\n})\nexport class MatSort extends _MatSortMixinBase\n    implements CanDisable, HasInitialized, OnChanges, OnDestroy, OnInit {\n  /** Collection of all registered sortables that this directive manages. */\n  sortables = new Map<string, MatSortable>();\n\n  /** Used to notify any child components listening to state changes. */\n  readonly _stateChanges = new Subject<void>();\n\n  /** The id of the most recently sorted MatSortable. */\n  @Input('matSortActive') active: string;\n\n  /**\n   * The direction to set when an MatSortable is initially sorted.\n   * May be overriden by the MatSortable's sort start.\n   */\n  @Input('matSortStart') start: 'asc' | 'desc' = 'asc';\n\n  /** The sort direction of the currently active MatSortable. */\n  @Input('matSortDirection')\n  get direction(): SortDirection { return this._direction; }\n  set direction(direction: SortDirection) {\n    if (isDevMode() && direction && direction !== 'asc' && direction !== 'desc') {\n      throw getSortInvalidDirectionError(direction);\n    }\n    this._direction = direction;\n  }\n  private _direction: SortDirection = '';\n\n  /**\n   * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n   * May be overriden by the MatSortable's disable clear input.\n   */\n  @Input('matSortDisableClear')\n  get disableClear(): boolean { return this._disableClear; }\n  set disableClear(v: boolean) { this._disableClear = coerceBooleanProperty(v); }\n  private _disableClear: boolean;\n\n  /** Event emitted when the user changes either the active sort or sort direction. */\n  @Output('matSortChange') readonly sortChange: EventEmitter<Sort> = new EventEmitter<Sort>();\n\n  /**\n   * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n   * collection of MatSortables.\n   */\n  register(sortable: MatSortable): void {\n    if (!sortable.id) {\n      throw getSortHeaderMissingIdError();\n    }\n\n    if (this.sortables.has(sortable.id)) {\n      throw getSortDuplicateSortableIdError(sortable.id);\n    }\n    this.sortables.set(sortable.id, sortable);\n  }\n\n  /**\n   * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n   * collection of contained MatSortables.\n   */\n  deregister(sortable: MatSortable): void {\n    this.sortables.delete(sortable.id);\n  }\n\n  /** Sets the active sort id and determines the new sort direction. */\n  sort(sortable: MatSortable): void {\n    if (this.active != sortable.id) {\n      this.active = sortable.id;\n      this.direction = sortable.start ? sortable.start : this.start;\n    } else {\n      this.direction = this.getNextSortDirection(sortable);\n    }\n\n    this.sortChange.emit({active: this.active, direction: this.direction});\n  }\n\n  /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n  getNextSortDirection(sortable: MatSortable): SortDirection {\n    if (!sortable) { return ''; }\n\n    // Get the sort direction cycle with the potential sortable overrides.\n    const disableClear = sortable.disableClear != null ? sortable.disableClear : this.disableClear;\n    let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n\n    // Get and return the next direction in the cycle\n    let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n    if (nextDirectionIndex >= sortDirectionCycle.length) { nextDirectionIndex = 0; }\n    return sortDirectionCycle[nextDirectionIndex];\n  }\n\n  ngOnInit() {\n    this._markInitialized();\n  }\n\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start: 'asc' | 'desc',\n                               disableClear: boolean): SortDirection[] {\n  let sortOrder: SortDirection[] = ['asc', 'desc'];\n  if (start == 'desc') { sortOrder.reverse(); }\n  if (!disableClear) { sortOrder.push(''); }\n\n  return sortOrder;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {AnimationEvent} from '@angular/animations';\nimport {FocusMonitor, FocusOrigin, FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {CdkScrollable, ScrollDispatcher} from '@angular/cdk/scrolling';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {fromEvent, merge, Observable, Subject} from 'rxjs';\nimport {\n  debounceTime,\n  filter,\n  map,\n  startWith,\n  take,\n  takeUntil,\n  distinctUntilChanged,\n} from 'rxjs/operators';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/**\n * Throws an exception when two MatDrawer are matching the same position.\n * @docs-private\n */\nexport function throwMatDuplicatedDrawerError(position: string) {\n  throw Error(`A drawer was already declared for 'position=\"${position}\"'`);\n}\n\n\n/** Result of the toggle promise that indicates the state of the drawer. */\nexport type MatDrawerToggleResult = 'open' | 'close';\n\n/** Configures whether drawers should use auto sizing by default. */\nexport const MAT_DRAWER_DEFAULT_AUTOSIZE =\n    new InjectionToken<boolean>('MAT_DRAWER_DEFAULT_AUTOSIZE', {\n      providedIn: 'root',\n      factory: MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY(): boolean {\n  return false;\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContent extends CdkScrollable implements AfterContentInit {\n  constructor(\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatDrawerContainer)) public _container: MatDrawerContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(elementRef, scrollDispatcher, ngZone);\n  }\n\n  ngAfterContentInit() {\n    this._container._contentMarginChanges.subscribe(() => {\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n}\n\n\n/**\n * This component corresponds to a drawer that can be opened on the drawer container.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer',\n  exportAs: 'matDrawer',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    'tabIndex': '-1',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawer implements AfterContentInit, AfterContentChecked, OnDestroy {\n  private _focusTrap: FocusTrap;\n  private _elementFocusedBeforeDrawerWasOpened: HTMLElement | null = null;\n\n  /** Whether the drawer is initialized. Used for disabling the initial animation. */\n  private _enableAnimations = false;\n\n  /** The side that the drawer is attached to. */\n  @Input()\n  get position(): 'start' | 'end' { return this._position; }\n  set position(value: 'start' | 'end') {\n    // Make sure we have a valid value.\n    value = value === 'end' ? 'end' : 'start';\n    if (value != this._position) {\n      this._position = value;\n      this.onPositionChanged.emit();\n    }\n  }\n  private _position: 'start' | 'end' = 'start';\n\n  /** Mode of the drawer; one of 'over', 'push' or 'side'. */\n  @Input()\n  get mode(): 'over' | 'push' | 'side' { return this._mode; }\n  set mode(value: 'over' | 'push' | 'side') {\n    this._mode = value;\n    this._modeChanged.next();\n  }\n  private _mode: 'over' | 'push' | 'side' = 'over';\n\n  /** Whether the drawer can be closed with the escape key or by clicking on the backdrop. */\n  @Input()\n  get disableClose(): boolean { return this._disableClose; }\n  set disableClose(value: boolean) { this._disableClose = coerceBooleanProperty(value); }\n  private _disableClose: boolean = false;\n\n  /** Whether the drawer should focus the first focusable element automatically when opened. */\n  @Input()\n  get autoFocus(): boolean { return this._autoFocus; }\n  set autoFocus(value: boolean) { this._autoFocus = coerceBooleanProperty(value); }\n  private _autoFocus: boolean = true;\n\n  /** How the sidenav was opened (keypress, mouse click etc.) */\n  private _openedVia: FocusOrigin | null;\n\n  /** Emits whenever the drawer has started animating. */\n  _animationStarted = new Subject<AnimationEvent>();\n\n  /** Emits whenever the drawer is done animating. */\n  _animationEnd = new Subject<AnimationEvent>();\n\n  /** Current state of the sidenav animation. */\n  _animationState: 'open-instant' | 'open' | 'void' = 'void';\n\n  /** Event emitted when the drawer open state is changed. */\n  @Output() readonly openedChange: EventEmitter<boolean> =\n      // Note this has to be async in order to avoid some issues with two-bindings (see #8872).\n      new EventEmitter<boolean>(/* isAsync */true);\n\n  /** Event emitted when the drawer has been opened. */\n  @Output('opened')\n  get _openedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started opening. */\n  @Output()\n  get openedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState.indexOf('open') === 0),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer has been closed. */\n  @Output('closed')\n  get _closedStream(): Observable<void> {\n    return this.openedChange.pipe(filter(o => !o), map(() => {}));\n  }\n\n  /** Event emitted when the drawer has started closing. */\n  @Output()\n  get closedStart(): Observable<void> {\n    return this._animationStarted.pipe(\n      filter(e => e.fromState !== e.toState && e.toState === 'void'),\n      map(() => {})\n    );\n  }\n\n  /** Event emitted when the drawer's position changes. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output('positionChanged') onPositionChanged: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An observable that emits when the drawer mode changes. This is used by the drawer container to\n   * to know when to when the mode changes so it can adapt the margins on the content.\n   */\n  readonly _modeChanged = new Subject();\n\n  get _isFocusTrapEnabled(): boolean {\n    // The focus trap is only enabled when the drawer is open in any mode other than side.\n    return this.opened && this.mode !== 'side';\n  }\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              private _focusTrapFactory: FocusTrapFactory,\n              private _focusMonitor: FocusMonitor,\n              private _platform: Platform,\n              private _ngZone: NgZone,\n              @Optional() @Inject(DOCUMENT) private _doc: any) {\n\n    this.openedChange.subscribe((opened: boolean) => {\n      if (opened) {\n        if (this._doc) {\n          this._elementFocusedBeforeDrawerWasOpened = this._doc.activeElement as HTMLElement;\n        }\n\n        if (this._isFocusTrapEnabled && this._focusTrap) {\n          this._trapFocus();\n        }\n      } else {\n        this._restoreFocus();\n      }\n    });\n\n    /**\n     * Listen to `keydown` events outside the zone so that change detection is not run every\n     * time a key is pressed. Instead we re-enter the zone only if the `ESC` key is pressed\n     * and we don't have close disabled.\n     */\n    this._ngZone.runOutsideAngular(() => {\n        fromEvent<KeyboardEvent>(this._elementRef.nativeElement, 'keydown').pipe(\n            filter(event => event.keyCode === ESCAPE && !this.disableClose)\n        ).subscribe(event => this._ngZone.run(() => {\n            this.close();\n            event.stopPropagation();\n        }));\n    });\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._animationEnd.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe((event: AnimationEvent) => {\n      const {fromState, toState} = event;\n\n      if ((toState.indexOf('open') === 0 && fromState === 'void') ||\n          (toState === 'void' && fromState.indexOf('open') === 0)) {\n        this.openedChange.emit(this._opened);\n      }\n    });\n  }\n\n  /** Traps focus inside the drawer. */\n  private _trapFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    this._focusTrap.focusInitialElementWhenReady().then(hasMovedFocus => {\n      // If there were no focusable elements, focus the sidenav itself so the keyboard navigation\n      // still works. We need to check that `focus` is a function due to Universal.\n      if (!hasMovedFocus && typeof this._elementRef.nativeElement.focus === 'function') {\n        this._elementRef.nativeElement.focus();\n      }\n    });\n  }\n\n  /**\n   * If focus is currently inside the drawer, restores it to where it was before the drawer\n   * opened.\n   */\n  private _restoreFocus() {\n    if (!this.autoFocus) {\n      return;\n    }\n\n    const activeEl = this._doc && this._doc.activeElement;\n\n    if (activeEl && this._elementRef.nativeElement.contains(activeEl)) {\n      if (this._elementFocusedBeforeDrawerWasOpened instanceof HTMLElement) {\n        this._focusMonitor.focusVia(this._elementFocusedBeforeDrawerWasOpened, this._openedVia);\n      } else {\n        this._elementRef.nativeElement.blur();\n      }\n    }\n\n    this._elementFocusedBeforeDrawerWasOpened = null;\n    this._openedVia = null;\n  }\n\n  ngAfterContentInit() {\n    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    this._focusTrap.enabled = this._isFocusTrapEnabled;\n  }\n\n  ngAfterContentChecked() {\n    // Enable the animations after the lifecycle hooks have run, in order to avoid animating\n    // drawers that are open by default. When we're on the server, we shouldn't enable the\n    // animations, because we don't want the drawer to animate the first time the user sees\n    // the page.\n    if (this._platform.isBrowser) {\n      this._enableAnimations = true;\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n\n    this._animationStarted.complete();\n    this._animationEnd.complete();\n  }\n\n  /**\n   * Whether the drawer is opened. We overload this because we trigger an event when it\n   * starts or end.\n   */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { this.toggle(coerceBooleanProperty(value)); }\n  private _opened: boolean = false;\n\n  /**\n   * Open the drawer.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  open(openedVia?: FocusOrigin): Promise<MatDrawerToggleResult> {\n    return this.toggle(true, openedVia);\n  }\n\n  /** Close the drawer. */\n  close(): Promise<MatDrawerToggleResult> {\n    return this.toggle(false);\n  }\n\n  /**\n   * Toggle this drawer.\n   * @param isOpen Whether the drawer should be open.\n   * @param openedVia Whether the drawer was opened by a key press, mouse click or programmatically.\n   * Used for focus management after the sidenav is closed.\n   */\n  toggle(isOpen: boolean = !this.opened, openedVia: FocusOrigin = 'program'):\n    Promise<MatDrawerToggleResult> {\n\n    this._opened = isOpen;\n\n    if (isOpen) {\n      this._animationState = this._enableAnimations ? 'open' : 'open-instant';\n      this._openedVia = openedVia;\n    } else {\n      this._animationState = 'void';\n      this._restoreFocus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.enabled = this._isFocusTrapEnabled;\n    }\n\n    return new Promise<MatDrawerToggleResult>(resolve => {\n      this.openedChange.pipe(take(1)).subscribe(open => resolve(open ? 'open' : 'close'));\n    });\n  }\n\n  get _width(): number {\n    return this._elementRef.nativeElement ? (this._elementRef.nativeElement.offsetWidth || 0) : 0;\n  }\n}\n\n\n/**\n * `<mat-drawer-container>` component.\n *\n * This is the parent component to one or two `<mat-drawer>`s that validates the state internally\n * and coordinates the backdrop and content styling.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-drawer-container',\n  exportAs: 'matDrawerContainer',\n  templateUrl: 'drawer-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDrawerContainer implements AfterContentInit, DoCheck, OnDestroy {\n  @ContentChildren(MatDrawer) _drawers: QueryList<MatDrawer>;\n  @ContentChild(MatDrawerContent) _content: MatDrawerContent;\n  @ViewChild(MatDrawerContent) _userContent: MatDrawerContent;\n\n  /** The drawer child with the `start` position. */\n  get start(): MatDrawer | null { return this._start; }\n\n  /** The drawer child with the `end` position. */\n  get end(): MatDrawer | null { return this._end; }\n\n  /**\n   * Whether to automatically resize the container whenever\n   * the size of any of its drawers changes.\n   *\n   * **Use at your own risk!** Enabling this option can cause layout thrashing by measuring\n   * the drawers on every change detection cycle. Can be configured globally via the\n   * `MAT_DRAWER_DEFAULT_AUTOSIZE` token.\n   */\n  @Input()\n  get autosize(): boolean { return this._autosize; }\n  set autosize(value: boolean) { this._autosize = coerceBooleanProperty(value); }\n  private _autosize: boolean;\n\n  /**\n   * Whether the drawer container should have a backdrop while one of the sidenavs is open.\n   * If explicitly set to `true`, the backdrop will be enabled for drawers in the `side`\n   * mode as well.\n   */\n  @Input()\n  get hasBackdrop() {\n    if (this._backdropOverride == null) {\n      return !this._start || this._start.mode !== 'side' || !this._end || this._end.mode !== 'side';\n    }\n\n    return this._backdropOverride;\n  }\n  set hasBackdrop(value: any) {\n    this._backdropOverride = value == null ? null : coerceBooleanProperty(value);\n  }\n  _backdropOverride: boolean | null;\n\n  /** Event emitted when the drawer backdrop is clicked. */\n  @Output() readonly backdropClick: EventEmitter<void> = new EventEmitter<void>();\n\n  /** The drawer at the start/end position, independent of direction. */\n  private _start: MatDrawer | null;\n  private _end: MatDrawer | null;\n\n  /**\n   * The drawer at the left/right. When direction changes, these will change as well.\n   * They're used as aliases for the above to set the left/right style properly.\n   * In LTR, _left == _start and _right == _end.\n   * In RTL, _left == _end and _right == _start.\n   */\n  private _left: MatDrawer | null;\n  private _right: MatDrawer | null;\n\n  /** Emits when the component is destroyed. */\n  private readonly _destroyed = new Subject<void>();\n\n  /** Emits on every ngDoCheck. Used for debouncing reflows. */\n  private readonly _doCheckSubject = new Subject<void>();\n\n  /**\n   * Margins to be applied to the content. These are used to push / shrink the drawer content when a\n   * drawer is open. We use margin rather than transform even for push mode because transform breaks\n   * fixed position elements inside of the transformed element.\n   */\n  _contentMargins: {left: number|null, right: number|null} = {left: null, right: null};\n\n  readonly _contentMarginChanges = new Subject<{left: number|null, right: number|null}>();\n\n  /** Reference to the CdkScrollable instance that wraps the scrollable content. */\n  get scrollable(): CdkScrollable {\n    return this._userContent || this._content;\n  }\n\n  constructor(@Optional() private _dir: Directionality,\n              private _element: ElementRef<HTMLElement>,\n              private _ngZone: NgZone,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Inject(MAT_DRAWER_DEFAULT_AUTOSIZE) defaultAutosize = false,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private _animationMode?: string) {\n\n    // If a `Dir` directive exists up the tree, listen direction changes\n    // and update the left/right properties to point to the proper start/end.\n    if (_dir) {\n      _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        this._validateDrawers();\n        this._updateContentMargins();\n      });\n    }\n\n    this._autosize = defaultAutosize;\n  }\n\n  ngAfterContentInit() {\n    this._drawers.changes.pipe(startWith(null)).subscribe(() => {\n      this._validateDrawers();\n\n      this._drawers.forEach((drawer: MatDrawer) => {\n        this._watchDrawerToggle(drawer);\n        this._watchDrawerPosition(drawer);\n        this._watchDrawerMode(drawer);\n      });\n\n      if (!this._drawers.length ||\n          this._isDrawerOpen(this._start) ||\n          this._isDrawerOpen(this._end)) {\n        this._updateContentMargins();\n      }\n\n      this._changeDetectorRef.markForCheck();\n    });\n\n    this._doCheckSubject.pipe(\n      debounceTime(10), // Arbitrary debounce time, less than a frame at 60fps\n      takeUntil(this._destroyed)\n    ).subscribe(() => this._updateContentMargins());\n  }\n\n  ngOnDestroy() {\n    this._doCheckSubject.complete();\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n\n  /** Calls `open` of both start and end drawers */\n  open(): void {\n    this._drawers.forEach(drawer => drawer.open());\n  }\n\n  /** Calls `close` of both start and end drawers */\n  close(): void {\n    this._drawers.forEach(drawer => drawer.close());\n  }\n\n  ngDoCheck() {\n    // If users opted into autosizing, do a check every change detection cycle.\n    if (this._autosize && this._isPushed()) {\n      // Run outside the NgZone, otherwise the debouncer will throw us into an infinite loop.\n      this._ngZone.runOutsideAngular(() => this._doCheckSubject.next());\n    }\n  }\n\n  /**\n   * Subscribes to drawer events in order to set a class on the main container element when the\n   * drawer is open and the backdrop is visible. This ensures any overflow on the container element\n   * is properly hidden.\n   */\n  private _watchDrawerToggle(drawer: MatDrawer): void {\n    drawer._animationStarted.pipe(\n      takeUntil(this._drawers.changes),\n      filter((event: AnimationEvent) => event.fromState !== event.toState)\n    )\n    .subscribe((event: AnimationEvent) => {\n      // Set the transition class on the container so that the animations occur. This should not\n      // be set initially because animations should only be triggered via a change in state.\n      if (event.toState !== 'open-instant' && this._animationMode !== 'NoopAnimations') {\n        this._element.nativeElement.classList.add('mat-drawer-transition');\n      }\n\n      this._updateContentMargins();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    if (drawer.mode !== 'side') {\n      drawer.openedChange.pipe(takeUntil(this._drawers.changes)).subscribe(() =>\n          this._setContainerClass(drawer.opened));\n    }\n  }\n\n  /**\n   * Subscribes to drawer onPositionChanged event in order to\n   * re-validate drawers when the position changes.\n   */\n  private _watchDrawerPosition(drawer: MatDrawer): void {\n    if (!drawer) {\n      return;\n    }\n    // NOTE: We need to wait for the microtask queue to be empty before validating,\n    // since both drawers may be swapping positions at the same time.\n    drawer.onPositionChanged.pipe(takeUntil(this._drawers.changes)).subscribe(() => {\n      this._ngZone.onMicrotaskEmpty.asObservable().pipe(take(1)).subscribe(() => {\n        this._validateDrawers();\n      });\n    });\n  }\n\n  /** Subscribes to changes in drawer mode so we can run change detection. */\n  private _watchDrawerMode(drawer: MatDrawer): void {\n    if (drawer) {\n      drawer._modeChanged.pipe(takeUntil(merge(this._drawers.changes, this._destroyed)))\n        .subscribe(() => {\n          this._updateContentMargins();\n          this._changeDetectorRef.markForCheck();\n        });\n    }\n  }\n\n  /** Toggles the 'mat-drawer-opened' class on the main 'mat-drawer-container' element. */\n  private _setContainerClass(isAdd: boolean): void {\n    if (isAdd) {\n      this._element.nativeElement.classList.add('mat-drawer-opened');\n    } else {\n      this._element.nativeElement.classList.remove('mat-drawer-opened');\n    }\n  }\n\n  /** Validate the state of the drawer children components. */\n  private _validateDrawers() {\n    this._start = this._end = null;\n\n    // Ensure that we have at most one start and one end drawer.\n    this._drawers.forEach(drawer => {\n      if (drawer.position == 'end') {\n        if (this._end != null) {\n          throwMatDuplicatedDrawerError('end');\n        }\n        this._end = drawer;\n      } else {\n        if (this._start != null) {\n          throwMatDuplicatedDrawerError('start');\n        }\n        this._start = drawer;\n      }\n    });\n\n    this._right = this._left = null;\n\n    // Detect if we're LTR or RTL.\n    if (this._dir && this._dir.value === 'rtl') {\n      this._left = this._end;\n      this._right = this._start;\n    } else {\n      this._left = this._start;\n      this._right = this._end;\n    }\n  }\n\n  /** Whether the container is being pushed to the side by one of the drawers. */\n  private _isPushed() {\n    return (this._isDrawerOpen(this._start) && this._start.mode != 'over') ||\n           (this._isDrawerOpen(this._end) && this._end.mode != 'over');\n  }\n\n  _onBackdropClicked() {\n    this.backdropClick.emit();\n    this._closeModalDrawer();\n  }\n\n  _closeModalDrawer() {\n    // Close all open drawers where closing is not disabled and the mode is not `side`.\n    [this._start, this._end]\n      .filter(drawer => drawer && !drawer.disableClose && this._canHaveBackdrop(drawer))\n      .forEach(drawer => drawer!.close());\n  }\n\n  _isShowingBackdrop(): boolean {\n    return (this._isDrawerOpen(this._start) && this._canHaveBackdrop(this._start)) ||\n           (this._isDrawerOpen(this._end) && this._canHaveBackdrop(this._end));\n  }\n\n  private _canHaveBackdrop(drawer: MatDrawer): boolean {\n    return drawer.mode !== 'side' || !!this._backdropOverride;\n  }\n\n  private _isDrawerOpen(drawer: MatDrawer | null): drawer is MatDrawer {\n    return drawer != null && drawer.opened;\n  }\n\n  /**\n   * Recalculates and updates the inline styles for the content. Note that this should be used\n   * sparingly, because it causes a reflow.\n   */\n  private _updateContentMargins() {\n    // 1. For drawers in `over` mode, they don't affect the content.\n    // 2. For drawers in `side` mode they should shrink the content. We do this by adding to the\n    //    left margin (for left drawer) or right margin (for right the drawer).\n    // 3. For drawers in `push` mode the should shift the content without resizing it. We do this by\n    //    adding to the left or right margin and simultaneously subtracting the same amount of\n    //    margin from the other side.\n\n    let left = 0;\n    let right = 0;\n\n    if (this._left && this._left.opened) {\n      if (this._left.mode == 'side') {\n        left += this._left._width;\n      } else if (this._left.mode == 'push') {\n        let width = this._left._width;\n        left += width;\n        right -= width;\n      }\n    }\n\n    if (this._right && this._right.opened) {\n      if (this._right.mode == 'side') {\n        right += this._right._width;\n      } else if (this._right.mode == 'push') {\n        let width = this._right._width;\n        right += width;\n        left -= width;\n      }\n    }\n\n    // If either `right` or `left` is zero, don't set a style to the element. This\n    // allows users to specify a custom size via CSS class in SSR scenarios where the\n    // measured widths will always be zero. Note that we reset to `null` here, rather\n    // than below, in order to ensure that the types in the `if` below are consistent.\n    left = left || null!;\n    right = right || null!;\n\n    if (left !== this._contentMargins.left || right !== this._contentMargins.right) {\n      this._contentMargins = {left, right};\n\n      // Pull back into the NgZone since in some cases we could be outside. We need to be careful\n      // to do it only when something changed, otherwise we can end up hitting the zone too often.\n      this._ngZone.run(() => this._contentMarginChanges.next(this._contentMargins));\n    }\n\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  forwardRef,\n  Inject,\n  Input,\n  ViewEncapsulation,\n  QueryList,\n  ElementRef,\n  NgZone,\n} from '@angular/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {matDrawerAnimations} from './drawer-animations';\nimport {coerceBooleanProperty, coerceNumberProperty} from '@angular/cdk/coercion';\nimport {ScrollDispatcher} from '@angular/cdk/scrolling';\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-content',\n  template: '<ng-content></ng-content>',\n  host: {\n    'class': 'mat-drawer-content mat-sidenav-content',\n    '[style.margin-left.px]': '_container._contentMargins.left',\n    '[style.margin-right.px]': '_container._contentMargins.right',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContent extends MatDrawerContent {\n  constructor(\n      changeDetectorRef: ChangeDetectorRef,\n      @Inject(forwardRef(() => MatSidenavContainer)) container: MatSidenavContainer,\n      elementRef: ElementRef<HTMLElement>,\n      scrollDispatcher: ScrollDispatcher,\n      ngZone: NgZone) {\n    super(changeDetectorRef, container, elementRef, scrollDispatcher, ngZone);\n  }\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav',\n  exportAs: 'matSidenav',\n  templateUrl: 'drawer.html',\n  animations: [matDrawerAnimations.transformDrawer],\n  host: {\n    'class': 'mat-drawer mat-sidenav',\n    'tabIndex': '-1',\n    '[@transform]': '_animationState',\n    '(@transform.start)': '_animationStarted.next($event)',\n    '(@transform.done)': '_animationEnd.next($event)',\n    // must prevent the browser from aligning text based on value\n    '[attr.align]': 'null',\n    '[class.mat-drawer-end]': 'position === \"end\"',\n    '[class.mat-drawer-over]': 'mode === \"over\"',\n    '[class.mat-drawer-push]': 'mode === \"push\"',\n    '[class.mat-drawer-side]': 'mode === \"side\"',\n    '[class.mat-sidenav-fixed]': 'fixedInViewport',\n    '[style.top.px]': 'fixedInViewport ? fixedTopGap : null',\n    '[style.bottom.px]': 'fixedInViewport ? fixedBottomGap : null',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenav extends MatDrawer {\n  /** Whether the sidenav is fixed in the viewport. */\n  @Input()\n  get fixedInViewport(): boolean { return this._fixedInViewport; }\n  set fixedInViewport(value) { this._fixedInViewport = coerceBooleanProperty(value); }\n  private _fixedInViewport = false;\n\n  /**\n   * The gap between the top of the sidenav and the top of the viewport when the sidenav is in fixed\n   * mode.\n   */\n  @Input()\n  get fixedTopGap(): number { return this._fixedTopGap; }\n  set fixedTopGap(value) { this._fixedTopGap = coerceNumberProperty(value); }\n  private _fixedTopGap = 0;\n\n  /**\n   * The gap between the bottom of the sidenav and the bottom of the viewport when the sidenav is in\n   * fixed mode.\n   */\n  @Input()\n  get fixedBottomGap(): number { return this._fixedBottomGap; }\n  set fixedBottomGap(value) { this._fixedBottomGap = coerceNumberProperty(value); }\n  private _fixedBottomGap = 0;\n}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-sidenav-container',\n  exportAs: 'matSidenavContainer',\n  templateUrl: 'sidenav-container.html',\n  styleUrls: ['drawer.css'],\n  host: {\n    'class': 'mat-drawer-container mat-sidenav-container',\n    '[class.mat-drawer-container-explicit-backdrop]': '_backdropOverride',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSidenavContainer extends MatDrawerContainer {\n  @ContentChildren(MatSidenav) _drawers: QueryList<MatSidenav>;\n  @ContentChild(MatSidenavContent) _content: MatSidenavContent;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDrawer, MatDrawerContainer, MatDrawerContent} from './drawer';\nimport {MatSidenav, MatSidenavContainer, MatSidenavContent} from './sidenav';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    ScrollingModule,\n    PlatformModule,\n  ],\n  exports: [\n    MatCommonModule,\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n  declarations: [\n    MatDrawer,\n    MatDrawerContainer,\n    MatDrawerContent,\n    MatSidenav,\n    MatSidenavContainer,\n    MatSidenavContent,\n  ],\n})\nexport class MatSidenavModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/** Default `mat-slide-toggle` options that can be overridden. */\nexport interface MatSlideToggleDefaultOptions {\n  /** Whether toggle action triggers value changes in slide toggle. */\n  disableToggleValue?: boolean;\n  /** Whether drag action triggers value changes in slide toggle. */\n  disableDragValue?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nexport const MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS =\n  new InjectionToken<MatSlideToggleDefaultOptions>('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({disableToggleValue: false, disableDragValue: false})\n  });\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  NgZone,\n  Optional,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor, CanColorCtor,\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  HammerInput,\n  HasTabIndex, HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,\n  MatSlideToggleDefaultOptions\n} from './slide-toggle-config';\n\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n\n/** @docs-private */\nexport const MAT_SLIDE_TOGGLE_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSlideToggle),\n  multi: true\n};\n\n/** Change event object emitted by a MatSlideToggle. */\nexport class MatSlideToggleChange {\n  constructor(\n    /** The source MatSlideToggle of the event. */\n    public source: MatSlideToggle,\n    /** The new `checked` value of the MatSlideToggle. */\n    public checked: boolean) { }\n}\n\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nexport class MatSlideToggleBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatSlideToggleMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatSlideToggleBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-slide-toggle',\n  exportAs: 'matSlideToggle',\n  host: {\n    'class': 'mat-slide-toggle',\n    '[id]': 'id',\n    '[attr.tabindex]': '-1', // Needs to be `-1` so it can still receive programmatic focus.\n    '[class.mat-checked]': 'checked',\n    '[class.mat-disabled]': 'disabled',\n    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  templateUrl: 'slide-toggle.html',\n  styleUrls: ['slide-toggle.css'],\n  providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n  inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatSlideToggle extends _MatSlideToggleMixinBase implements OnDestroy, AfterContentInit,\n    ControlValueAccessor, CanDisable, CanColor, HasTabIndex, CanDisableRipple {\n\n  private onChange = (_: any) => {};\n  private onTouched = () => {};\n\n  private _uniqueId: string = `mat-slide-toggle-${++nextUniqueId}`;\n  private _required: boolean = false;\n  private _checked: boolean = false;\n\n  /** Whether the thumb is currently being dragged. */\n  private _dragging = false;\n\n  /** Previous checked state before drag started. */\n  private _previousChecked: boolean;\n\n  /** Width of the thumb bar of the slide-toggle. */\n  private _thumbBarWidth: number;\n\n  /** Percentage of the thumb while dragging. Percentage as fraction of 100. */\n  private _dragPercentage: number;\n\n  /** Reference to the thumb HTMLElement. */\n  @ViewChild('thumbContainer') _thumbEl: ElementRef;\n\n  /** Reference to the thumb bar HTMLElement. */\n  @ViewChild('toggleBar') _thumbBarEl: ElementRef;\n\n  /** Name value will be applied to the input element if present. */\n  @Input() name: string | null = null;\n\n  /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Used to set the aria-label attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string | null = null;\n\n  /** Used to set the aria-labelledby attribute on the underlying input element. */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Whether the slide-toggle is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value) { this._required = coerceBooleanProperty(value); }\n\n  /** Whether the slide-toggle element is checked or not. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value) {\n    this._checked = coerceBooleanProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  /** An event will be dispatched each time the slide-toggle changes its value. */\n  @Output() readonly change: EventEmitter<MatSlideToggleChange> =\n      new EventEmitter<MatSlideToggleChange>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle input is toggled.\n   * This event is always emitted when the user toggles the slide toggle, but this does not mean\n   * the slide toggle's value has changed. The event does not fire when the user drags to change\n   * the slide toggle value.\n   */\n  @Output() readonly toggleChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * An event will be dispatched each time the slide-toggle is dragged.\n   * This event is always emitted when the user drags the slide toggle to make a change greater\n   * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n   * the user toggles the slide toggle to change its value.\n   */\n  @Output() readonly dragChange: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Reference to the underlying input element. */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated The `_platform` parameter to be removed.\n               * @breaking-change 8.0.0\n               */\n              _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Attribute('tabindex') tabIndex: string,\n              private _ngZone: NgZone,\n              @Inject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS)\n                  public defaults: MatSlideToggleDefaultOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() private _dir?: Directionality) {\n    super(elementRef);\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin) {\n          // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n          // Angular does not expect events to be raised during change detection, so any state\n          // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n          // error. See https://github.com/angular/angular/issues/17793. To work around this,\n          // we defer telling the form control it has been touched until the next tick.\n          Promise.resolve().then(() => this.onTouched());\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Method being called whenever the underlying input emits a change event. */\n  _onChangeEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the component's `change` output.\n    event.stopPropagation();\n\n    if (!this._dragging) {\n      this.toggleChange.emit();\n    }\n    // Releasing the pointer over the `<label>` element while dragging triggers another\n    // click event on the `<label>` element. This means that the checked state of the underlying\n    // input changed unintentionally and needs to be changed back. Or when the slide toggle's config\n    // disabled toggle change event by setting `disableToggleValue: true`, the slide toggle's value\n    // does not change, and the checked state of the underlying input needs to be changed back.\n    if (this._dragging || this.defaults.disableToggleValue) {\n      this._inputElement.nativeElement.checked = this.checked;\n      return;\n    }\n\n    // Sync the value from the underlying input element with the component instance.\n    this.checked = this._inputElement.nativeElement.checked;\n\n    // Emit our custom change event only if the underlying input emitted one. This ensures that\n    // there is no change event, when the checked state changes programmatically.\n    this._emitChangeEvent();\n  }\n\n  /** Method being called whenever the slide-toggle has been clicked. */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `slide-toggle` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the slide-toggle. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /** Toggles the checked state of the slide-toggle. */\n  toggle(): void {\n    this.checked = !this.checked;\n    this.onChange(this.checked);\n  }\n\n  /**\n   * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n   */\n  private _emitChangeEvent() {\n    this.onChange(this.checked);\n    this.change.emit(new MatSlideToggleChange(this, this.checked));\n  }\n\n  /** Retrieves the percentage of thumb from the moved distance. Percentage as fraction of 100. */\n  private _getDragPercentage(distance: number) {\n    let percentage = (distance / this._thumbBarWidth) * 100;\n\n    // When the toggle was initially checked, then we have to start the drag at the end.\n    if (this._previousChecked) {\n      percentage += 100;\n    }\n\n    return Math.max(0, Math.min(percentage, 100));\n  }\n\n  _onDragStart() {\n    if (!this.disabled && !this._dragging) {\n      const thumbEl = this._thumbEl.nativeElement;\n      this._thumbBarWidth = this._thumbBarEl.nativeElement.clientWidth - thumbEl.clientWidth;\n      thumbEl.classList.add('mat-dragging');\n\n      this._previousChecked = this.checked;\n      this._dragging = true;\n    }\n  }\n\n  _onDrag(event: HammerInput) {\n    if (this._dragging) {\n      const direction = this._dir && this._dir.value === 'rtl' ? -1 : 1;\n      this._dragPercentage = this._getDragPercentage(event.deltaX * direction);\n      // Calculate the moved distance based on the thumb bar width.\n      const dragX = (this._dragPercentage / 100) * this._thumbBarWidth * direction;\n      this._thumbEl.nativeElement.style.transform = `translate3d(${dragX}px, 0, 0)`;\n    }\n  }\n\n  _onDragEnd() {\n    if (this._dragging) {\n      const newCheckedValue = this._dragPercentage > 50;\n\n      if (newCheckedValue !== this.checked) {\n        this.dragChange.emit();\n        if (!this.defaults.disableDragValue) {\n          this.checked = newCheckedValue;\n          this._emitChangeEvent();\n        }\n      }\n\n      // The drag should be stopped outside of the current event handler, otherwise the\n      // click event will be fired before it and will revert the drag change.\n      this._ngZone.runOutsideAngular(() => setTimeout(() => {\n        if (this._dragging) {\n          this._dragging = false;\n          this._thumbEl.nativeElement.classList.remove('mat-dragging');\n\n          // Reset the transform because the component will take care\n          // of the thumb position after drag.\n          this._thumbEl.nativeElement.style.transform = '';\n        }\n      }));\n    }\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n    // slide-toggle component will be only marked for check, but no actual change detection runs\n    // automatically. Instead of going back into the zone in order to trigger a change detection\n    // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n    // we only trigger an explicit change detection for the slide-toggle view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {MatSlideToggle} from './slide-toggle';\n\n\n@NgModule({\n  imports: [MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatSlideToggle, MatCommonModule],\n  declarations: [MatSlideToggle],\n  providers: [\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig}\n  ],\n})\nexport class MatSlideToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  Component,\n  ChangeDetectionStrategy,\n  ElementRef,\n  Inject,\n  Input,\n  Output,\n  EventEmitter,\n  Optional,\n  NgZone,\n  ViewEncapsulation,\n  AfterViewInit,\n  ViewChild,\n  OnDestroy,\n  InjectionToken,\n  inject,\n} from '@angular/core';\nimport {fromEvent, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {DOCUMENT} from '@angular/common';\n\n// TODO(josephperrott): Benchpress tests.\n// TODO(josephperrott): Add ARIA attributes for progress bar \"for\".\n\n// Boilerplate for applying mixins to MatProgressBar.\n/** @docs-private */\nexport class MatProgressBarBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/** Last animation end data. */\nexport interface ProgressAnimationEnd {\n  value: number;\n}\n\nexport const _MatProgressBarMixinBase: CanColorCtor & typeof MatProgressBarBase =\n    mixinColor(MatProgressBarBase, 'primary');\n\n/**\n * Injection token used to provide the current location to `MatProgressBar`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_PROGRESS_BAR_LOCATION = new InjectionToken<MatProgressBarLocation>(\n  'mat-progress-bar-location',\n  {providedIn: 'root', factory: MAT_PROGRESS_BAR_LOCATION_FACTORY}\n);\n\n/**\n * Stubbed out location for `MatProgressBar`.\n * @docs-private\n */\nexport interface MatProgressBarLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_PROGRESS_BAR_LOCATION_FACTORY(): MatProgressBarLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** Counter used to generate unique IDs for progress bars. */\nlet progressbarId = 0;\n\n/**\n * `<mat-progress-bar>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-bar',\n  exportAs: 'matProgressBar',\n  host: {\n    'role': 'progressbar',\n    'aria-valuemin': '0',\n    'aria-valuemax': '100',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n    'class': 'mat-progress-bar',\n    '[class._mat-animation-noopable]': `_isNoopAnimation`,\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-bar.html',\n  styleUrls: ['progress-bar.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressBar extends _MatProgressBarMixinBase implements CanColor,\n                                                      AfterViewInit, OnDestroy {\n  constructor(public _elementRef: ElementRef, private _ngZone: NgZone,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              /**\n               * @deprecated `location` parameter to be made required.\n               * @breaking-change 8.0.0\n               */\n              @Optional() @Inject(MAT_PROGRESS_BAR_LOCATION) location?: MatProgressBarLocation) {\n    super(_elementRef);\n\n    // We need to prefix the SVG reference with the current path, otherwise they won't work\n    // in Safari if the page has a `<base>` tag. Note that we need quotes inside the `url()`,\n\n    // because named route URLs can contain parentheses (see #12338). Also we don't use since\n    // we can't tell the difference between whether\n    // the consumer is using the hash location strategy or not, because `Location` normalizes\n    // both `/#/foo/bar` and `/foo/bar` to the same thing.\n    const path = location ? location.getPathname().split('#')[0] : '';\n    this._rectangleFillValue = `url('${path}#${this.progressbarId}')`;\n    this._isNoopAnimation = _animationMode === 'NoopAnimations';\n  }\n\n  /** Flag that indicates whether NoopAnimations mode is set to true. */\n  _isNoopAnimation = false;\n\n  /** Value of the progress bar. Defaults to zero. Mirrored to aria-valuenow. */\n  @Input()\n  get value(): number { return this._value; }\n  set value(v: number) {\n    this._value = clamp(v || 0);\n\n    // When noop animation is set to true, trigger animationEnd directly.\n    if (this._isNoopAnimation) {\n      this.emitAnimationEnd();\n    }\n  }\n  private _value: number = 0;\n\n  /** Buffer value of the progress bar. Defaults to zero. */\n  @Input()\n  get bufferValue(): number { return this._bufferValue; }\n  set bufferValue(v: number) { this._bufferValue = clamp(v || 0); }\n  private _bufferValue: number = 0;\n\n  @ViewChild('primaryValueBar') _primaryValueBar: ElementRef;\n\n  /**\n   * Event emitted when animation of the primary progress bar completes. This event will not\n   * be emitted when animations are disabled, nor will it be emitted for modes with continuous\n   * animations (indeterminate and query).\n   */\n  @Output() animationEnd = new EventEmitter<ProgressAnimationEnd>();\n\n  /** Reference to animation end subscription to be unsubscribed on destroy. */\n  private _animationEndSubscription: Subscription = Subscription.EMPTY;\n\n  /**\n   * Mode of the progress bar.\n   *\n   * Input must be one of these values: determinate, indeterminate, buffer, query, defaults to\n   * 'determinate'.\n   * Mirrored to mode attribute.\n   */\n  @Input() mode: 'determinate' | 'indeterminate' | 'buffer' | 'query' = 'determinate';\n\n  /** ID of the progress bar. */\n  progressbarId = `mat-progress-bar-${progressbarId++}`;\n\n  /** Attribute to be used for the `fill` attribute on the internal `rect` element. */\n  _rectangleFillValue: string;\n\n  /** Gets the current transform value for the progress bar's primary indicator. */\n  _primaryTransform() {\n    const scale = this.value / 100;\n    return {transform: `scaleX(${scale})`};\n  }\n\n  /**\n   * Gets the current transform value for the progress bar's buffer indicator. Only used if the\n   * progress mode is set to buffer, otherwise returns an undefined, causing no transformation.\n   */\n  _bufferTransform() {\n    if (this.mode === 'buffer') {\n      const scale = this.bufferValue / 100;\n      return {transform: `scaleX(${scale})`};\n    }\n  }\n\n  ngAfterViewInit() {\n    if (!this._isNoopAnimation) {\n      // Run outside angular so change detection didn't get triggered on every transition end\n      // instead only on the animation that we care about (primary value bar's transitionend)\n      this._ngZone.runOutsideAngular((() => {\n        this._animationEndSubscription =\n            fromEvent<TransitionEvent>(this._primaryValueBar.nativeElement, 'transitionend')\n            .pipe(filter(((e: TransitionEvent) =>\n              e.target === this._primaryValueBar.nativeElement)))\n            .subscribe(_ => this._ngZone.run(() => this.emitAnimationEnd()));\n      }));\n    }\n  }\n\n  ngOnDestroy() {\n    this._animationEndSubscription.unsubscribe();\n  }\n\n  /** Emit an animationEnd event if in determinate or buffer mode. */\n  private emitAnimationEnd(): void {\n    if (this.mode === 'determinate' || this.mode === 'buffer') {\n      this.animationEnd.next({value: this.value});\n    }\n  }\n}\n\n/** Clamps a value to be between two numbers, by default 0 and 100. */\nfunction clamp(v: number, min = 0, max = 100) {\n  return Math.max(min, Math.min(max, v));\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressBar} from './progress-bar';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule],\n  exports: [MatProgressBar, MatCommonModule],\n  declarations: [MatProgressBar],\n})\nexport class MatProgressBarModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {Platform} from '@angular/cdk/platform';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n/** Possible mode for a progress spinner. */\nexport type ProgressSpinnerMode = 'determinate' | 'indeterminate';\n\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nexport class MatProgressSpinnerBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatProgressSpinnerMixinBase: CanColorCtor & typeof MatProgressSpinnerBase =\n    mixinColor(MatProgressSpinnerBase, 'primary');\n\n/** Default `mat-progress-spinner` options that can be overridden. */\nexport interface MatProgressSpinnerDefaultOptions {\n  /** Diameter of the spinner. */\n  diameter?: number;\n  /** Width of the spinner's stroke. */\n  strokeWidth?: number;\n  /**\n   * Whether the animations should be force to be enabled, ignoring if the current environment is\n   * using NoopAnimationsModule.\n   */\n  _forceAnimations?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nexport const MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS =\n    new InjectionToken<MatProgressSpinnerDefaultOptions>('mat-progress-spinner-default-options', {\n      providedIn: 'root',\n      factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY(): MatProgressSpinnerDefaultOptions {\n  return {diameter: BASE_SIZE};\n}\n\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/material2/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n\n/**\n * `<mat-progress-spinner>` component.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-progress-spinner',\n  exportAs: 'matProgressSpinner',\n  host: {\n    'role': 'progressbar',\n    'class': 'mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.mode]': 'mode',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatProgressSpinner extends _MatProgressSpinnerMixinBase implements CanColor {\n\n  private _value = 0;\n  private _strokeWidth: number;\n  private _fallbackAnimation = false;\n\n  /** Tracks diameters of existing instances to de-dupe generated styles (default d = 100) */\n  private static diameters = new Set<number>([BASE_SIZE]);\n\n  /**\n   * Used for storing all of the generated keyframe animations.\n   * @dynamic\n   */\n  private static styleTag: HTMLStyleElement|null = null;\n\n  /** Whether the _mat-animation-noopable class should be applied, disabling animations.  */\n  _noopAnimations: boolean = this.animationMode === 'NoopAnimations' && (\n      !!this.defaults && !this.defaults._forceAnimations);\n\n  /** The diameter of the progress spinner (will set width and height of svg). */\n  @Input()\n  get diameter(): number { return this._diameter; }\n  set diameter(size: number) {\n    this._diameter = coerceNumberProperty(size);\n\n    if (!this._fallbackAnimation && !MatProgressSpinner.diameters.has(this._diameter)) {\n      this._attachStyleNode();\n    }\n  }\n  private _diameter = BASE_SIZE;\n\n  /** Stroke width of the progress spinner. */\n  @Input()\n  get strokeWidth(): number {\n    return this._strokeWidth || this.diameter / 10;\n  }\n  set strokeWidth(value: number) {\n    this._strokeWidth = coerceNumberProperty(value);\n  }\n\n  /** Mode of the progress circle */\n  @Input() mode: ProgressSpinnerMode = 'determinate';\n\n  /** Value of the progress circle. */\n  @Input()\n  get value(): number {\n    return this.mode === 'determinate' ? this._value : 0;\n  }\n  set value(newValue: number) {\n    this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n  }\n\n  constructor(public _elementRef: ElementRef,\n              platform: Platform,\n              @Optional() @Inject(DOCUMENT) private _document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) private animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  private defaults?: MatProgressSpinnerDefaultOptions) {\n\n    super(_elementRef);\n    this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n\n    if (defaults) {\n      if (defaults.diameter) {\n        this.diameter = defaults.diameter;\n      }\n\n      if (defaults.strokeWidth) {\n        this.strokeWidth = defaults.strokeWidth;\n      }\n    }\n\n    // On IE and Edge, we can't animate the `stroke-dashoffset`\n    // reliably so we fall back to a non-spec animation.\n    const animationClass =\n      `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n\n    _elementRef.nativeElement.classList.add(animationClass);\n  }\n\n  /** The radius of the spinner, adjusted for stroke width. */\n  get _circleRadius() {\n    return (this.diameter - BASE_STROKE_WIDTH) / 2;\n  }\n\n  /** The view box of the spinner's svg element. */\n  get _viewBox() {\n    const viewBox = this._circleRadius * 2 + this.strokeWidth;\n    return `0 0 ${viewBox} ${viewBox}`;\n  }\n\n  /** The stroke circumference of the svg circle. */\n  get _strokeCircumference(): number {\n    return 2 * Math.PI * this._circleRadius;\n  }\n\n  /** The dash offset of the svg circle. */\n  get _strokeDashOffset() {\n    if (this.mode === 'determinate') {\n      return this._strokeCircumference * (100 - this._value) / 100;\n    }\n\n    // In fallback mode set the circle to 80% and rotate it with CSS.\n    if (this._fallbackAnimation && this.mode === 'indeterminate') {\n      return this._strokeCircumference * 0.2;\n    }\n\n    return null;\n  }\n\n  /** Stroke width of the circle in percent. */\n  get _circleStrokeWidth() {\n    return this.strokeWidth / this.diameter * 100;\n  }\n\n  /** Dynamically generates a style tag containing the correct animation for this diameter. */\n  private _attachStyleNode(): void {\n    let styleTag = MatProgressSpinner.styleTag;\n\n    if (!styleTag) {\n      styleTag = this._document.createElement('style');\n      this._document.head.appendChild(styleTag);\n      MatProgressSpinner.styleTag = styleTag;\n    }\n\n    if (styleTag && styleTag.sheet) {\n      (styleTag.sheet as CSSStyleSheet).insertRule(this._getAnimationText(), 0);\n    }\n\n    MatProgressSpinner.diameters.add(this.diameter);\n  }\n\n  /** Generates animation styles adjusted for the spinner's diameter. */\n  private _getAnimationText(): string {\n    return INDETERMINATE_ANIMATION_TEMPLATE\n        // Animation should begin at 5% and end at 80%\n        .replace(/START_VALUE/g, `${0.95 * this._strokeCircumference}`)\n        .replace(/END_VALUE/g, `${0.2 * this._strokeCircumference}`)\n        .replace(/DIAMETER/g, `${this.diameter}`);\n  }\n}\n\n\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-spinner',\n  host: {\n    'role': 'progressbar',\n    'mode': 'indeterminate',\n    'class': 'mat-spinner mat-progress-spinner',\n    '[class._mat-animation-noopable]': `_noopAnimations`,\n    '[style.width.px]': 'diameter',\n    '[style.height.px]': 'diameter',\n  },\n  inputs: ['color'],\n  templateUrl: 'progress-spinner.html',\n  styleUrls: ['progress-spinner.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatSpinner extends MatProgressSpinner {\n  constructor(elementRef: ElementRef, platform: Platform,\n              @Optional() @Inject(DOCUMENT) document: any,\n              // @breaking-change 8.0.0 animationMode and defaults parameters to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string,\n              @Inject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)\n                  defaults?: MatProgressSpinnerDefaultOptions) {\n    super(elementRef, platform, document, animationMode, defaults);\n    this.mode = 'indeterminate';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatProgressSpinner, MatSpinner} from './progress-spinner';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [\n    MatProgressSpinner,\n    MatSpinner,\n    MatCommonModule\n  ],\n  declarations: [\n    MatProgressSpinner,\n    MatSpinner\n  ],\n})\nclass MatProgressSpinnerModule {}\n\nexport {MatProgressSpinnerModule};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nexport const MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatRadioGroup),\n  multi: true\n};\n\n/** Change event object emitted by MatRadio and MatRadioGroup. */\nexport class MatRadioChange {\n  constructor(\n    /** The MatRadioButton that emits the change event. */\n    public source: MatRadioButton,\n    /** The value of the MatRadioButton. */\n    public value: any) {}\n}\n\n\n// Boilerplate for applying mixins to MatRadioGroup.\n/** @docs-private */\nexport class MatRadioGroupBase { }\nexport const _MatRadioGroupMixinBase: CanDisableCtor & typeof MatRadioGroupBase =\n    mixinDisabled(MatRadioGroupBase);\n\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\n@Directive({\n  selector: 'mat-radio-group',\n  exportAs: 'matRadioGroup',\n  providers: [MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR],\n  host: {\n    'role': 'radiogroup',\n    'class': 'mat-radio-group',\n  },\n  inputs: ['disabled'],\n})\nexport class MatRadioGroup extends _MatRadioGroupMixinBase\n    implements AfterContentInit, ControlValueAccessor, CanDisable {\n\n  /** Selected value for the radio group. */\n  private _value: any = null;\n\n  /** The HTML name attribute applied to radio buttons in this group. */\n  private _name: string = `mat-radio-group-${nextUniqueId++}`;\n\n  /** The currently selected radio button. Should match value. */\n  private _selected: MatRadioButton | null = null;\n\n  /** Whether the `value` has been set to its initial value. */\n  private _isInitialized: boolean = false;\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  private _labelPosition: 'before' | 'after' = 'after';\n\n  /** Whether the radio group is disabled. */\n  private _disabled: boolean = false;\n\n  /** Whether the radio group is required. */\n  private _required: boolean = false;\n\n  /** The method to be called in order to update ngModel */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /**\n   * onTouch function registered via registerOnTouch (ControlValueAccessor).\n   * @docs-private\n   */\n  onTouched: () => any = () => {};\n\n  /**\n   * Event emitted when the group value changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * a radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** Child radio buttons. */\n  @ContentChildren(forwardRef(() => MatRadioButton), { descendants: true })\n  _radios: QueryList<MatRadioButton>;\n\n  /** Name of the radio button group. All radio buttons inside this group will use this name. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n    this._updateRadioButtonNames();\n  }\n\n  /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition;\n  }\n  set labelPosition(v) {\n    this._labelPosition = v === 'before' ? 'before' : 'after';\n    this._markRadiosForCheck();\n  }\n\n  /**\n   * Value for the radio-group. Should equal the value of the selected radio button if there is\n   * a corresponding radio button with a matching value. If there is not such a corresponding\n   * radio button, this value persists to be applied in case a new radio button is added with a\n   * matching value.\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(newValue: any) {\n    if (this._value !== newValue) {\n      // Set this before proceeding to ensure no circular loop occurs with selection.\n      this._value = newValue;\n\n      this._updateSelectedRadioFromValue();\n      this._checkSelectedRadioButton();\n    }\n  }\n\n  _checkSelectedRadioButton() {\n    if (this._selected && !this._selected.checked) {\n      this._selected.checked = true;\n    }\n  }\n\n  /**\n   * The currently selected radio button. If set to a new radio button, the radio group value\n   * will be updated to match the new selected button.\n   */\n  @Input()\n  get selected() { return this._selected; }\n  set selected(selected: MatRadioButton | null) {\n    this._selected = selected;\n    this.value = selected ? selected.value : null;\n    this._checkSelectedRadioButton();\n  }\n\n  /** Whether the radio group is disabled */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  /** Whether the radio group is required */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this._markRadiosForCheck();\n  }\n\n  constructor(private _changeDetector: ChangeDetectorRef) {\n    super();\n  }\n\n  /**\n   * Initialize properties once content children are available.\n   * This allows us to propagate relevant attributes to associated buttons.\n   */\n  ngAfterContentInit() {\n    // Mark this component as initialized in AfterContentInit because the initial value can\n    // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n    // NgModel occurs *after* the OnInit of the MatRadioGroup.\n    this._isInitialized = true;\n  }\n\n  /**\n   * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n   * radio buttons upon their blur.\n   */\n  _touch() {\n    if (this.onTouched) {\n      this.onTouched();\n    }\n  }\n\n  private _updateRadioButtonNames(): void {\n    if (this._radios) {\n      this._radios.forEach(radio => {\n        radio.name = this.name;\n      });\n    }\n  }\n\n  /** Updates the `selected` radio button from the internal _value state. */\n  private _updateSelectedRadioFromValue(): void {\n    // If the value already matches the selected radio, do nothing.\n    const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n\n    if (this._radios && !isAlreadySelected) {\n      this._selected = null;\n      this._radios.forEach(radio => {\n        radio.checked = this.value === radio.value;\n        if (radio.checked) {\n          this._selected = radio;\n        }\n      });\n    }\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    if (this._isInitialized) {\n      this.change.emit(new MatRadioChange(this._selected!, this._value));\n    }\n  }\n\n  _markRadiosForCheck() {\n    if (this._radios) {\n      this._radios.forEach(radio => radio._markForCheck());\n    }\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  /**\n   * Registers a callback to be triggered when the model value changes.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  /**\n   * Registers a callback to be triggered when the control is touched.\n   * Implemented as part of ControlValueAccessor.\n   * @param fn Callback to be registered.\n   */\n  registerOnTouched(fn: any) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n   * @param isDisabled Whether the control should be disabled.\n   */\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n    this._changeDetector.markForCheck();\n  }\n}\n\n// Boilerplate for applying mixins to MatRadioButton.\n/** @docs-private */\nexport class MatRadioButtonBase {\n  // Since the disabled property is manually defined for the MatRadioButton and isn't set up in\n  // the mixin base class. To be able to use the tabindex mixin, a disabled property must be\n  // defined to properly work.\n  disabled: boolean;\n\n  constructor(public _elementRef: ElementRef) {}\n}\n// As per Material design specifications the selection control radio should use the accent color\n// palette by default. https://material.io/guidelines/components/selection-controls.html\nexport const _MatRadioButtonMixinBase:\n    CanColorCtor & CanDisableRippleCtor & HasTabIndexCtor & typeof MatRadioButtonBase =\n        mixinColor(mixinDisableRipple(mixinTabIndex(MatRadioButtonBase)), 'accent');\n\n/**\n * A Material design radio-button. Typically placed inside of `<mat-radio-group>` elements.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-radio-button',\n  templateUrl: 'radio.html',\n  styleUrls: ['radio.css'],\n  inputs: ['color', 'disableRipple', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matRadioButton',\n  host: {\n    'class': 'mat-radio-button',\n    '[class.mat-radio-checked]': 'checked',\n    '[class.mat-radio-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[attr.tabindex]': 'null',\n    '[attr.id]': 'id',\n    // Note: under normal conditions focus shouldn't land on this element, however it may be\n    // programmatically set, for example inside of a focus trap, in this case we want to forward\n    // the focus to the native element.\n    '(focus)': '_inputElement.nativeElement.focus()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatRadioButton extends _MatRadioButtonMixinBase\n    implements OnInit, AfterViewInit, OnDestroy, CanColor, CanDisableRipple, HasTabIndex {\n\n  private _uniqueId: string = `mat-radio-${++nextUniqueId}`;\n\n  /** The unique ID for the radio button. */\n  @Input() id: string = this._uniqueId;\n\n  /** Analog to HTML 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** Used to set the 'aria-label' attribute on the underlying input element. */\n  @Input('aria-label') ariaLabel: string;\n\n  /** The 'aria-labelledby' attribute takes precedence as the element's text alternative. */\n  @Input('aria-labelledby') ariaLabelledby: string;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  /** Whether this radio button is checked. */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    const newCheckedState = coerceBooleanProperty(value);\n    if (this._checked !== newCheckedState) {\n      this._checked = newCheckedState;\n      if (newCheckedState && this.radioGroup && this.radioGroup.value !== this.value) {\n        this.radioGroup.selected = this;\n      } else if (!newCheckedState && this.radioGroup && this.radioGroup.value === this.value) {\n\n        // When unchecking the selected radio button, update the selected radio\n        // property on the group.\n        this.radioGroup.selected = null;\n      }\n\n      if (newCheckedState) {\n        // Notify all radio buttons with the same name to un-check.\n        this._radioDispatcher.notify(this.id, this.name);\n      }\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** The value of this radio button. */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    if (this._value !== value) {\n      this._value = value;\n      if (this.radioGroup !== null) {\n        if (!this.checked) {\n          // Update checked when the value changed to match the radio group's value\n          this.checked = this.radioGroup.value === value;\n        }\n        if (this.checked) {\n          this.radioGroup.selected = this;\n        }\n      }\n    }\n  }\n\n  /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n  @Input()\n  get labelPosition(): 'before' | 'after' {\n    return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n  }\n  set labelPosition(value) {\n    this._labelPosition = value;\n  }\n  private _labelPosition: 'before' | 'after';\n\n  /** Whether the radio button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n  }\n  set disabled(value: boolean) {\n    const newDisabledState = coerceBooleanProperty(value);\n    if (this._disabled !== newDisabledState) {\n      this._disabled = newDisabledState;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the radio button is required. */\n  @Input()\n  get required(): boolean {\n    return this._required || (this.radioGroup && this.radioGroup.required);\n  }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n  }\n\n  /**\n   * Event emitted when the checked state of this radio button changes.\n   * Change events are only emitted when the value changes due to user interaction with\n   * the radio button (the same behavior as `<input type-\"radio\">`).\n   */\n  @Output() readonly change: EventEmitter<MatRadioChange> = new EventEmitter<MatRadioChange>();\n\n  /** The parent radio group. May or may not be present. */\n  radioGroup: MatRadioGroup;\n\n  /** ID of the native input element inside `<mat-radio-button>` */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether this radio is checked. */\n  private _checked: boolean = false;\n\n  /** Whether this radio is disabled. */\n  private _disabled: boolean;\n\n  /** Whether this radio is required. */\n  private _required: boolean;\n\n  /** Value assigned to this radio. */\n  private _value: any = null;\n\n  /** Unregister function for _radioDispatcher */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  /** The native `<input type=radio>` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  constructor(@Optional() radioGroup: MatRadioGroup,\n              elementRef: ElementRef,\n              private _changeDetector: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _radioDispatcher: UniqueSelectionDispatcher,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // Assertions. Ideally these should be stripped out by the compiler.\n    // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n    this.radioGroup = radioGroup;\n\n    this._removeUniqueSelectionListener =\n      _radioDispatcher.listen((id: string, name: string) => {\n        if (id !== this.id && name === this.name) {\n          this.checked = false;\n        }\n      });\n  }\n\n  /** Focuses the radio button. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  /**\n   * Marks the radio button as needing checking for change detection.\n   * This method is exposed because the parent radio group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n    // update radio button's status\n    this._changeDetector.markForCheck();\n  }\n\n  ngOnInit() {\n    if (this.radioGroup) {\n      // If the radio is inside a radio group, determine if it should be checked\n      this.checked = this.radioGroup.value === this._value;\n      // Copy name from parent radio group\n      this.name = this.radioGroup.name;\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor\n      .monitor(this._elementRef, true)\n      .subscribe(focusOrigin => {\n        if (!focusOrigin && this.radioGroup) {\n          this.radioGroup._touch();\n        }\n      });\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n    this._removeUniqueSelectionListener();\n  }\n\n  /** Dispatch change event with current value. */\n  private _emitChangeEvent(): void {\n    this.change.emit(new MatRadioChange(this, this._value));\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `radio-button` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n  }\n\n  /**\n   * Triggered when the radio button received a click or the input recognized any change.\n   * Clicking on a label element, will trigger a change event on the associated input.\n   */\n  _onInputChange(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n\n    const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n    this.checked = true;\n    this._emitChangeEvent();\n\n    if (this.radioGroup) {\n      this.radioGroup._controlValueAccessorChangeFn(this.value);\n      this.radioGroup._touch();\n      if (groupValueChanged) {\n        this.radioGroup._emitChangeEvent();\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatRadioButton, MatRadioGroup} from './radio';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule],\n  exports: [MatRadioGroup, MatRadioButton, MatCommonModule],\n  declarations: [MatRadioGroup, MatRadioButton],\n})\nexport class MatRadioModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material drawers.\n * @docs-private\n */\nexport const matDrawerAnimations: {\n  readonly transformDrawer: AnimationTriggerMetadata;\n} = {\n  /** Animation that slides a drawer in and out. */\n  transformDrawer: trigger('transform', [\n    // We remove the `transform` here completely, rather than setting it to zero, because:\n    // 1. Having a transform can cause elements with ripples or an animated\n    //    transform to shift around in Chrome with an RTL layout (see #10023).\n    // 2. 3d transforms causes text to appear blurry on IE and Edge.\n    state('open, open-instant', style({\n      'transform': 'none',\n      'visibility': 'visible',\n    })),\n    state('void', style({\n      // Avoids the shadow showing up when closed in SSR.\n      'box-shadow': 'none',\n      'visibility': 'hidden',\n    })),\n    transition('void => open-instant', animate('0ms')),\n    transition('void <=> open, open-instant => void',\n        animate('400ms cubic-bezier(0.25, 0.8, 0.25, 1)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatOptionModule} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MatSelect, MatSelectTrigger} from './select';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatOptionModule,\n    MatCommonModule,\n  ],\n  exports: [MatFormFieldModule, MatSelect, MatSelectTrigger, MatOptionModule, MatCommonModule],\n  declarations: [MatSelect, MatSelectTrigger],\n  providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER]\n})\nexport class MatSelectModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  keyframes,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * Animations used by MatTooltip.\n * @docs-private\n */\nexport const matTooltipAnimations: {\n  readonly tooltipState: AnimationTriggerMetadata;\n} = {\n  /** Animation that transitions a tooltip in and out. */\n  tooltipState: trigger('state', [\n    state('initial, void, hidden', style({opacity: 0, transform: 'scale(0)'})),\n    state('visible', style({transform: 'scale(1)'})),\n    transition('* => visible', animate('200ms cubic-bezier(0, 0, 0.2, 1)', keyframes([\n      style({opacity: 0, transform: 'scale(0)', offset: 0}),\n      style({opacity: 0.5, transform: 'scale(0.99)', offset: 0.5}),\n      style({opacity: 1, transform: 'scale(1)', offset: 1})\n    ]))),\n    transition('* => hidden', animate('100ms cubic-bezier(0, 0, 0.2, 1)', style({opacity: 0}))),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {GestureConfig, MatCommonModule} from '@angular/material/core';\nimport {HAMMER_GESTURE_CONFIG} from '@angular/platform-browser';\nimport {\n  MatTooltip,\n  TooltipComponent,\n  MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './tooltip';\n\n@NgModule({\n  imports: [\n    A11yModule,\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n  ],\n  exports: [MatTooltip, TooltipComponent, MatCommonModule],\n  declarations: [MatTooltip, TooltipComponent],\n  entryComponents: [TooltipComponent],\n  providers: [\n    MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER,\n    {provide: HAMMER_GESTURE_CONFIG, useClass: GestureConfig},\n  ]\n})\nexport class MatTooltipModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Optional, SkipSelf} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/**\n * To modify the labels and text displayed, create a new instance of MatPaginatorIntl and\n * include it in a custom provider\n */\n@Injectable({providedIn: 'root'})\nexport class MatPaginatorIntl {\n  /**\n   * Stream to emit from when labels are changed. Use this to notify components when the labels have\n   * changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the page size selector. */\n  itemsPerPageLabel: string = 'Items per page:';\n\n  /** A label for the button that increments the current page. */\n  nextPageLabel: string = 'Next page';\n\n  /** A label for the button that decrements the current page. */\n  previousPageLabel: string = 'Previous page';\n\n  /** A label for the button that moves to the first page. */\n  firstPageLabel: string = 'First page';\n\n  /** A label for the button that moves to the last page. */\n  lastPageLabel: string = 'Last page';\n\n  /** A label for the range of items within the current page and the length of the whole list. */\n  getRangeLabel = (page: number, pageSize: number, length: number) => {\n    if (length == 0 || pageSize == 0) { return `0 of ${length}`; }\n\n    length = Math.max(length, 0);\n\n    const startIndex = page * pageSize;\n\n    // If the start index exceeds the list length, do not try and fix the end index to the end.\n    const endIndex = startIndex < length ?\n        Math.min(startIndex + pageSize, length) :\n        startIndex + pageSize;\n\n    return `${startIndex + 1} - ${endIndex} of ${length}`;\n  }\n}\n\n/** @docs-private */\nexport function MAT_PAGINATOR_INTL_PROVIDER_FACTORY(parentIntl: MatPaginatorIntl) {\n  return parentIntl || new MatPaginatorIntl();\n}\n\n/** @docs-private */\nexport const MAT_PAGINATOR_INTL_PROVIDER = {\n  // If there is already an MatPaginatorIntl available, use that. Otherwise, provide a new one.\n  provide: MatPaginatorIntl,\n  deps: [[new Optional(), new SkipSelf(), MatPaginatorIntl]],\n  useFactory: MAT_PAGINATOR_INTL_PROVIDER_FACTORY\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceNumberProperty, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {MatPaginatorIntl} from './paginator-intl';\nimport {\n  HasInitialized,\n  HasInitializedCtor,\n  mixinInitialized,\n  ThemePalette,\n  mixinDisabled,\n  CanDisableCtor,\n  CanDisable,\n} from '@angular/material/core';\n\n/** The default page size if there is no page size and there are no provided page size options. */\nconst DEFAULT_PAGE_SIZE = 50;\n\n/**\n * Change event object that is emitted when the user selects a\n * different page size or navigates to another page.\n */\nexport class PageEvent {\n  /** The current page index. */\n  pageIndex: number;\n\n  /**\n   * Index of the page that was selected previously.\n   * @breaking-change 8.0.0 To be made into a required property.\n   */\n  previousPageIndex?: number;\n\n  /** The current page size */\n  pageSize: number;\n\n  /** The current total number of items being paged */\n  length: number;\n}\n\n// Boilerplate for applying mixins to MatPaginator.\n/** @docs-private */\nexport class MatPaginatorBase {}\nexport const _MatPaginatorBase: CanDisableCtor & HasInitializedCtor & typeof MatPaginatorBase =\n    mixinDisabled(mixinInitialized(MatPaginatorBase));\n\n/**\n * Component to provide navigation between paged information. Displays the size of the current\n * page, user-selectable options to change that size, what items are being shown, and\n * navigational button to go to the previous or next page.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-paginator',\n  exportAs: 'matPaginator',\n  templateUrl: 'paginator.html',\n  styleUrls: ['paginator.css'],\n  inputs: ['disabled'],\n  host: {\n    'class': 'mat-paginator',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatPaginator extends _MatPaginatorBase implements OnInit, OnDestroy, CanDisable,\n  HasInitialized {\n  private _initialized: boolean;\n  private _intlChanges: Subscription;\n\n  /** Theme color to be used for the underlying form controls. */\n  @Input() color: ThemePalette;\n\n  /** The zero-based page index of the displayed list of items. Defaulted to 0. */\n  @Input()\n  get pageIndex(): number { return this._pageIndex; }\n  set pageIndex(value: number) {\n    this._pageIndex = Math.max(coerceNumberProperty(value), 0);\n    this._changeDetectorRef.markForCheck();\n  }\n  _pageIndex: number = 0;\n\n  /** The length of the total number of items that are being paginated. Defaulted to 0. */\n  @Input()\n  get length(): number { return this._length; }\n  set length(value: number) {\n    this._length = coerceNumberProperty(value);\n    this._changeDetectorRef.markForCheck();\n  }\n  _length: number = 0;\n\n  /** Number of items to display on a page. By default set to 50. */\n  @Input()\n  get pageSize(): number { return this._pageSize; }\n  set pageSize(value: number) {\n    this._pageSize = Math.max(coerceNumberProperty(value), 0);\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSize: number;\n\n  /** The set of provided page size options to display to the user. */\n  @Input()\n  get pageSizeOptions(): number[] { return this._pageSizeOptions; }\n  set pageSizeOptions(value: number[]) {\n    this._pageSizeOptions = (value || []).map(p => coerceNumberProperty(p));\n    this._updateDisplayedPageSizeOptions();\n  }\n  private _pageSizeOptions: number[] = [];\n\n  /** Whether to hide the page size selection UI from the user. */\n  @Input()\n  get hidePageSize(): boolean { return this._hidePageSize; }\n  set hidePageSize(value: boolean) {\n    this._hidePageSize = coerceBooleanProperty(value);\n  }\n  private _hidePageSize = false;\n\n\n  /** Whether to show the first/last buttons UI to the user. */\n  @Input()\n  get showFirstLastButtons(): boolean { return this._showFirstLastButtons; }\n  set showFirstLastButtons(value: boolean) {\n    this._showFirstLastButtons = coerceBooleanProperty(value);\n  }\n  private _showFirstLastButtons = false;\n\n  /** Event emitted when the paginator changes the page size or page index. */\n  @Output() readonly page: EventEmitter<PageEvent> = new EventEmitter<PageEvent>();\n\n  /** Displayed set of page size options. Will be sorted and include current page size. */\n  _displayedPageSizeOptions: number[];\n\n  constructor(public _intl: MatPaginatorIntl,\n              private _changeDetectorRef: ChangeDetectorRef) {\n    super();\n    this._intlChanges = _intl.changes.subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n\n  ngOnInit() {\n    this._initialized = true;\n    this._updateDisplayedPageSizeOptions();\n    this._markInitialized();\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n  }\n\n  /** Advances to the next page if it exists. */\n  nextPage(): void {\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex++;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move back to the previous page if it exists. */\n  previousPage(): void {\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex--;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the first page if not already there. */\n  firstPage(): void {\n    // hasPreviousPage being false implies at the start\n    if (!this.hasPreviousPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = 0;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Move to the last page if not already there. */\n  lastPage(): void {\n    // hasNextPage being false implies at the end\n    if (!this.hasNextPage()) { return; }\n\n    const previousPageIndex = this.pageIndex;\n    this.pageIndex = this.getNumberOfPages() - 1;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Whether there is a previous page. */\n  hasPreviousPage(): boolean {\n    return this.pageIndex >= 1 && this.pageSize != 0;\n  }\n\n  /** Whether there is a next page. */\n  hasNextPage(): boolean {\n    const maxPageIndex = this.getNumberOfPages() - 1;\n    return this.pageIndex < maxPageIndex && this.pageSize != 0;\n  }\n\n  /** Calculate the number of pages */\n  getNumberOfPages(): number {\n    if (!this.pageSize) {\n      return 0;\n    }\n\n    return Math.ceil(this.length / this.pageSize);\n  }\n\n\n  /**\n   * Changes the page size so that the first item displayed on the page will still be\n   * displayed using the new page size.\n   *\n   * For example, if the page size is 10 and on the second page (items indexed 10-19) then\n   * switching so that the page size is 5 will set the third page as the current page so\n   * that the 10th item will still be displayed.\n   */\n  _changePageSize(pageSize: number) {\n    // Current page needs to be updated to reflect the new page size. Navigate to the page\n    // containing the previous page's first item.\n    const startIndex = this.pageIndex * this.pageSize;\n    const previousPageIndex = this.pageIndex;\n\n    this.pageIndex = Math.floor(startIndex / pageSize) || 0;\n    this.pageSize = pageSize;\n    this._emitPageEvent(previousPageIndex);\n  }\n\n  /** Checks whether the buttons for going forwards should be disabled. */\n  _nextButtonsDisabled() {\n    return this.disabled || !this.hasNextPage();\n  }\n\n  /** Checks whether the buttons for going backwards should be disabled. */\n  _previousButtonsDisabled() {\n    return this.disabled || !this.hasPreviousPage();\n  }\n\n  /**\n   * Updates the list of page size options to display to the user. Includes making sure that\n   * the page size is an option and that the list is sorted.\n   */\n  private _updateDisplayedPageSizeOptions() {\n    if (!this._initialized) { return; }\n\n    // If no page size is provided, use the first page size option or the default page size.\n    if (!this.pageSize) {\n      this._pageSize = this.pageSizeOptions.length != 0 ?\n          this.pageSizeOptions[0] :\n          DEFAULT_PAGE_SIZE;\n    }\n\n    this._displayedPageSizeOptions = this.pageSizeOptions.slice();\n\n    if (this._displayedPageSizeOptions.indexOf(this.pageSize) === -1) {\n      this._displayedPageSizeOptions.push(this.pageSize);\n    }\n\n    // Sort the numbers using a number-specific sort function.\n    this._displayedPageSizeOptions.sort((a, b) => a - b);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits an event notifying that a change of the paginator's properties has been triggered. */\n  private _emitPageEvent(previousPageIndex: number) {\n    this.page.emit({\n      previousPageIndex,\n      pageIndex: this.pageIndex,\n      pageSize: this.pageSize,\n      length: this.length\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatPaginator} from './paginator';\nimport {MAT_PAGINATOR_INTL_PROVIDER} from './paginator-intl';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatTooltipModule,\n  ],\n  exports: [MatPaginator],\n  declarations: [MatPaginator],\n  providers: [MAT_PAGINATOR_INTL_PROVIDER],\n})\nexport class MatPaginatorModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  TemplateRef,\n  ComponentFactoryResolver,\n  ApplicationRef,\n  Injector,\n  ViewContainerRef,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {TemplatePortal, DomPortalOutlet} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {Subject} from 'rxjs';\n\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\n@Directive({\n  selector: 'ng-template[matMenuContent]'\n})\nexport class MatMenuContent implements OnDestroy {\n  private _portal: TemplatePortal<any>;\n  private _outlet: DomPortalOutlet;\n\n  /** Emits when the menu content has been attached. */\n  _attached = new Subject<void>();\n\n  constructor(\n    private _template: TemplateRef<any>,\n    private _componentFactoryResolver: ComponentFactoryResolver,\n    private _appRef: ApplicationRef,\n    private _injector: Injector,\n    private _viewContainerRef: ViewContainerRef,\n    @Inject(DOCUMENT) private _document: any) {}\n\n  /**\n   * Attaches the content with a particular context.\n   * @docs-private\n   */\n  attach(context: any = {}) {\n    if (!this._portal) {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n    }\n\n    this.detach();\n\n    if (!this._outlet) {\n      this._outlet = new DomPortalOutlet(this._document.createElement('div'),\n          this._componentFactoryResolver, this._appRef, this._injector);\n    }\n\n    const element: HTMLElement = this._template.elementRef.nativeElement;\n\n    // Because we support opening the same menu from different triggers (which in turn have their\n    // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n    // risk it staying attached to a pane that's no longer in the DOM.\n    element.parentNode!.insertBefore(this._outlet.outletElement, element);\n    this._portal.attach(this._outlet, context);\n    this._attached.next();\n  }\n\n  /**\n   * Detaches the content.\n   * @docs-private\n   */\n  detach() {\n    if (this._portal.isAttached) {\n      this._portal.detach();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._outlet) {\n      this._outlet.dispose();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport{\n  trigger,\n  state,\n  style,\n  animate,\n  transition,\n  query,\n  group,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nexport const matMenuAnimations: {\n  readonly transformMenu: AnimationTriggerMetadata;\n  readonly fadeInItems: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation controls the menu panel's entry and exit from the page.\n   *\n   * When the menu panel is added to the DOM, it scales in and fades in its border.\n   *\n   * When the menu panel is removed from the DOM, it simply fades out after a brief\n   * delay to display the ripple.\n   */\n  transformMenu: trigger('transformMenu', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(0.8)'\n    })),\n    transition('void => enter', group([\n      query('.mat-menu-content', animate('100ms linear', style({opacity: 1}))),\n      animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({transform: 'scale(1)'})),\n    ])),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n\n  /**\n   * This animation fades in the background color and content of the menu panel\n   * after its containing element is scaled in.\n   */\n  fadeInItems: trigger('fadeInItems', [\n    // TODO(crisbeto): this is inside the `transformMenu`\n    // now. Remove next time we do breaking changes.\n    state('showing', style({opacity: 1})),\n    transition('void => *', [\n      style({opacity: 0}),\n      animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInItems = matMenuAnimations.fadeInItems;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformMenu = matMenuAnimations.transformMenu;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {EventEmitter, TemplateRef, InjectionToken} from '@angular/core';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {Direction} from '@angular/cdk/bidi';\nimport {FocusOrigin} from '@angular/cdk/a11y';\nimport {MatMenuContent} from './menu-content';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nexport const MAT_MENU_PANEL = new InjectionToken<MatMenuPanel>('MAT_MENU_PANEL');\n\n/**\n * Interface for a custom menu panel that can be used with `matMenuTriggerFor`.\n * @docs-private\n */\nexport interface MatMenuPanel<T = any> {\n  xPosition: MenuPositionX;\n  yPosition: MenuPositionY;\n  overlapTrigger: boolean;\n  templateRef: TemplateRef<any>;\n  close: EventEmitter<void | 'click' | 'keydown' | 'tab'>;\n  parentMenu?: MatMenuPanel | undefined;\n  direction?: Direction;\n  focusFirstItem: (origin?: FocusOrigin) => void;\n  resetActiveItem: () => void;\n  setPositionClasses?: (x: MenuPositionX, y: MenuPositionY) => void;\n  setElevation?(depth: number): void;\n  lazyContent?: MatMenuContent;\n  backdropClass?: string;\n  hasBackdrop?: boolean;\n  addItem?: (item: T) => void;\n  removeItem?: (item: T) => void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewEncapsulation,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {\n  CanDisable, CanDisableCtor,\n  CanDisableRipple, CanDisableRippleCtor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nexport class MatMenuItemBase {}\nexport const _MatMenuItemMixinBase: CanDisableRippleCtor & CanDisableCtor & typeof MatMenuItemBase =\n    mixinDisableRipple(mixinDisabled(MatMenuItemBase));\n\n/**\n * This directive is intended to be used inside an mat-menu tag.\n * It exists mostly to set the role attribute.\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-menu-item]',\n  exportAs: 'matMenuItem',\n  inputs: ['disabled', 'disableRipple'],\n  host: {\n    'role': 'menuitem',\n    'class': 'mat-menu-item',\n    '[class.mat-menu-item-highlighted]': '_highlighted',\n    '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.disabled]': 'disabled || null',\n    '(click)': '_checkDisabled($event)',\n    '(mouseenter)': '_handleMouseEnter()',\n  },\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  templateUrl: 'menu-item.html',\n})\nexport class MatMenuItem extends _MatMenuItemMixinBase\n    implements FocusableOption, CanDisable, CanDisableRipple, OnDestroy {\n\n  private _document: Document;\n\n  /** Stream that emits when the menu item is hovered. */\n  readonly _hovered: Subject<MatMenuItem> = new Subject<MatMenuItem>();\n\n  /** Whether the menu item is highlighted. */\n  _highlighted: boolean = false;\n\n  /** Whether the menu item acts as a trigger for a sub-menu. */\n  _triggersSubmenu: boolean = false;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(DOCUMENT) document?: any,\n    private _focusMonitor?: FocusMonitor,\n    @Inject(MAT_MENU_PANEL) @Optional() private _parentMenu?: MatMenuPanel<MatMenuItem>) {\n\n    // @breaking-change 8.0.0 make `_focusMonitor` and `document` required params.\n    super();\n\n    if (_focusMonitor) {\n      // Start monitoring the element so it gets the appropriate focused classes. We want\n      // to show the focus style for menu items only when the focus was not caused by a\n      // mouse or touch interaction.\n      _focusMonitor.monitor(this._elementRef, false);\n    }\n\n    if (_parentMenu && _parentMenu.addItem) {\n      _parentMenu.addItem(this);\n    }\n\n    this._document = document;\n  }\n\n  /** Focuses the menu item. */\n  focus(origin: FocusOrigin = 'program'): void {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._getHostElement(), origin);\n    } else {\n      this._getHostElement().focus();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._focusMonitor) {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n\n    if (this._parentMenu && this._parentMenu.removeItem) {\n      this._parentMenu.removeItem(this);\n    }\n\n    this._hovered.complete();\n  }\n\n  /** Used to set the `tabindex`. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Returns the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._elementRef.nativeElement;\n  }\n\n  /** Prevents the default element actions if it is disabled. */\n  _checkDisabled(event: Event): void {\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /** Emits to the hover stream. */\n  _handleMouseEnter() {\n    this._hovered.next(this);\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const textNodeType = this._document ? this._document.TEXT_NODE : 3;\n    let output = '';\n\n    if (element.childNodes) {\n      const length = element.childNodes.length;\n\n      // Go through all the top-level text nodes and extract their text.\n      // We skip anything that's not a text node to prevent the text from\n      // being thrown off by something like an icon.\n      for (let i = 0; i < length; i++) {\n        if (element.childNodes[i].nodeType === textNodeType) {\n          output += element.childNodes[i].textContent;\n        }\n      }\n    }\n\n    return output.trim();\n  }\n\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager, FocusOrigin} from '@angular/cdk/a11y';\nimport {Direction} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, LEFT_ARROW, RIGHT_ARROW, DOWN_ARROW, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Output,\n  TemplateRef,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  OnInit,\n} from '@angular/core';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, switchMap, take} from 'rxjs/operators';\nimport {matMenuAnimations} from './menu-animations';\nimport {MatMenuContent} from './menu-content';\nimport {throwMatMenuInvalidPositionX, throwMatMenuInvalidPositionY} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MAT_MENU_PANEL, MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\nimport {AnimationEvent} from '@angular/animations';\n\n\n/** Default `mat-menu` options that can be overridden. */\nexport interface MatMenuDefaultOptions {\n  /** The x-axis position of the menu. */\n  xPosition: MenuPositionX;\n\n  /** The y-axis position of the menu. */\n  yPosition: MenuPositionY;\n\n  /** Whether the menu should overlap the menu trigger. */\n  overlapTrigger: boolean;\n\n  /** Class to be applied to the menu's backdrop. */\n  backdropClass: string;\n\n  /** Whether the menu has a backdrop. */\n  hasBackdrop?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nexport const MAT_MENU_DEFAULT_OPTIONS =\n    new InjectionToken<MatMenuDefaultOptions>('mat-menu-default-options', {\n      providedIn: 'root',\n      factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_MENU_DEFAULT_OPTIONS_FACTORY(): MatMenuDefaultOptions {\n  return {\n    overlapTrigger: false,\n    xPosition: 'after',\n    yPosition: 'below',\n    backdropClass: 'cdk-overlay-transparent-backdrop',\n  };\n}\n/**\n * Start elevation for the menu panel.\n * @docs-private\n */\nconst MAT_MENU_BASE_ELEVATION = 4;\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-menu',\n  templateUrl: 'menu.html',\n  styleUrls: ['menu.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matMenu',\n  animations: [\n    matMenuAnimations.transformMenu,\n    matMenuAnimations.fadeInItems\n  ],\n  providers: [\n    {provide: MAT_MENU_PANEL, useExisting: MatMenu}\n  ]\n})\nexport class MatMenu implements AfterContentInit, MatMenuPanel<MatMenuItem>, OnInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatMenuItem>;\n  private _xPosition: MenuPositionX = this._defaultOptions.xPosition;\n  private _yPosition: MenuPositionY = this._defaultOptions.yPosition;\n  private _previousElevation: string;\n\n  /** Menu items inside the current menu. */\n  private _items: MatMenuItem[] = [];\n\n  /** Emits whenever the amount of menu items changes. */\n  private _itemChanges = new Subject<MatMenuItem[]>();\n\n  /** Subscription to tab events on the menu panel */\n  private _tabSubscription = Subscription.EMPTY;\n\n  /** Config object to be passed into the menu's ngClass */\n  _classList: {[key: string]: boolean} = {};\n\n  /** Current state of the panel animation. */\n  _panelAnimationState: 'void' | 'enter' = 'void';\n\n  /** Emits whenever an animation on the menu completes. */\n  _animationDone = new Subject<AnimationEvent>();\n\n  /** Whether the menu is animating. */\n  _isAnimating: boolean;\n\n  /** Parent menu of the current menu panel. */\n  parentMenu: MatMenuPanel | undefined;\n\n  /** Layout direction of the menu. */\n  direction: Direction;\n\n  /** Class to be added to the backdrop element. */\n  @Input() backdropClass: string = this._defaultOptions.backdropClass;\n\n  /** Position of the menu in the X axis. */\n  @Input()\n  get xPosition(): MenuPositionX { return this._xPosition; }\n  set xPosition(value: MenuPositionX) {\n    if (value !== 'before' && value !== 'after') {\n      throwMatMenuInvalidPositionX();\n    }\n    this._xPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** Position of the menu in the Y axis. */\n  @Input()\n  get yPosition(): MenuPositionY { return this._yPosition; }\n  set yPosition(value: MenuPositionY) {\n    if (value !== 'above' && value !== 'below') {\n      throwMatMenuInvalidPositionY();\n    }\n    this._yPosition = value;\n    this.setPositionClasses();\n  }\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) templateRef: TemplateRef<any>;\n\n  /**\n   * List of the items inside of a menu.\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ContentChildren(MatMenuItem) items: QueryList<MatMenuItem>;\n\n  /**\n   * Menu content that will be rendered lazily.\n   * @docs-private\n   */\n  @ContentChild(MatMenuContent) lazyContent: MatMenuContent;\n\n  /** Whether the menu should overlap its trigger. */\n  @Input()\n  get overlapTrigger(): boolean { return this._overlapTrigger; }\n  set overlapTrigger(value: boolean) {\n    this._overlapTrigger = coerceBooleanProperty(value);\n  }\n  private _overlapTrigger: boolean = this._defaultOptions.overlapTrigger;\n\n  /** Whether the menu has a backdrop. */\n  @Input()\n  get hasBackdrop(): boolean | undefined { return this._hasBackdrop; }\n  set hasBackdrop(value: boolean | undefined) {\n    this._hasBackdrop = coerceBooleanProperty(value);\n  }\n  private _hasBackdrop: boolean | undefined = this._defaultOptions.hasBackdrop;\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @param classes list of class names\n   */\n  @Input('class')\n  set panelClass(classes: string) {\n    if (classes && classes.length) {\n      this._classList = classes.split(' ').reduce((obj: any, className: string) => {\n        obj[className] = true;\n        return obj;\n      }, {});\n\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n\n  /**\n   * This method takes classes set on the host mat-menu element and applies them on the\n   * menu template that displays in the overlay container.  Otherwise, it's difficult\n   * to style the containing menu from outside the component.\n   * @deprecated Use `panelClass` instead.\n   * @breaking-change 8.0.0\n   */\n  @Input()\n  get classList(): string { return this.panelClass; }\n  set classList(classes: string) { this.panelClass = classes; }\n\n  /** Event emitted when the menu is closed. */\n  @Output() readonly closed: EventEmitter<void | 'click' | 'keydown' | 'tab'> =\n      new EventEmitter<void | 'click' | 'keydown' | 'tab'>();\n\n  /**\n   * Event emitted when the menu is closed.\n   * @deprecated Switch to `closed` instead\n   * @breaking-change 8.0.0\n   */\n  @Output() close = this.closed;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _ngZone: NgZone,\n    @Inject(MAT_MENU_DEFAULT_OPTIONS) private _defaultOptions: MatMenuDefaultOptions) { }\n\n  ngOnInit() {\n    this.setPositionClasses();\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatMenuItem>(this._items).withWrap().withTypeAhead();\n    this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n  }\n\n  ngOnDestroy() {\n    this._tabSubscription.unsubscribe();\n    this.closed.complete();\n  }\n\n  /** Stream that emits whenever the hovered menu item changes. */\n  _hovered(): Observable<MatMenuItem> {\n    return this._itemChanges.pipe(\n      startWith(this._items),\n      switchMap(items => merge(...items.map(item => item._hovered)))\n    );\n  }\n\n  /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n  _handleKeydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n\n    switch (keyCode) {\n      case ESCAPE:\n        this.closed.emit('keydown');\n      break;\n      case LEFT_ARROW:\n        if (this.parentMenu && this.direction === 'ltr') {\n          this.closed.emit('keydown');\n        }\n      break;\n      case RIGHT_ARROW:\n        if (this.parentMenu && this.direction === 'rtl') {\n          this.closed.emit('keydown');\n        }\n      break;\n      default:\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n          this._keyManager.setFocusOrigin('keyboard');\n        }\n\n        this._keyManager.onKeydown(event);\n    }\n  }\n\n  /**\n   * Focus the first item in the menu.\n   * @param origin Action from which the focus originated. Used to set the correct styling.\n   */\n  focusFirstItem(origin: FocusOrigin = 'program'): void {\n    // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n    if (this.lazyContent) {\n      this._ngZone.onStable.asObservable()\n        .pipe(take(1))\n        .subscribe(() => this._keyManager.setFocusOrigin(origin).setFirstItemActive());\n    } else {\n      this._keyManager.setFocusOrigin(origin).setFirstItemActive();\n    }\n  }\n\n  /**\n   * Resets the active item in the menu. This is used when the menu is opened, allowing\n   * the user to start from the first option when pressing the down arrow.\n   */\n  resetActiveItem() {\n    this._keyManager.setActiveItem(-1);\n  }\n\n  /**\n   * Sets the menu panel elevation.\n   * @param depth Number of parent menus that come before the menu.\n   */\n  setElevation(depth: number): void {\n    // The elevation starts at the base and increases by one for each level.\n    const newElevation = `mat-elevation-z${MAT_MENU_BASE_ELEVATION + depth}`;\n    const customElevation = Object.keys(this._classList).find(c => c.startsWith('mat-elevation-z'));\n\n    if (!customElevation || customElevation === this._previousElevation) {\n      if (this._previousElevation) {\n        this._classList[this._previousElevation] = false;\n      }\n\n      this._classList[newElevation] = true;\n      this._previousElevation = newElevation;\n    }\n  }\n\n  /**\n   * Registers a menu item with the menu.\n   * @docs-private\n   */\n  addItem(item: MatMenuItem) {\n    // We register the items through this method, rather than picking them up through\n    // `ContentChildren`, because we need the items to be picked up by their closest\n    // `mat-menu` ancestor. If we used `@ContentChildren(MatMenuItem, {descendants: true})`,\n    // all descendant items will bleed into the top-level menu in the case where the consumer\n    // has `mat-menu` instances nested inside each other.\n    if (this._items.indexOf(item) === -1) {\n      this._items.push(item);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Removes an item from the menu.\n   * @docs-private\n   */\n  removeItem(item: MatMenuItem) {\n    const index = this._items.indexOf(item);\n\n    if (this._items.indexOf(item) > -1) {\n      this._items.splice(index, 1);\n      this._itemChanges.next(this._items);\n    }\n  }\n\n  /**\n   * Adds classes to the menu panel based on its position. Can be used by\n   * consumers to add specific styling based on the position.\n   * @param posX Position of the menu along the x axis.\n   * @param posY Position of the menu along the y axis.\n   * @docs-private\n   */\n  setPositionClasses(posX: MenuPositionX = this.xPosition, posY: MenuPositionY = this.yPosition) {\n    const classes = this._classList;\n    classes['mat-menu-before'] = posX === 'before';\n    classes['mat-menu-after'] = posX === 'after';\n    classes['mat-menu-above'] = posY === 'above';\n    classes['mat-menu-below'] = posY === 'below';\n  }\n\n  /** Starts the enter animation. */\n  _startAnimation() {\n    // @breaking-change 8.0.0 Combine with _resetAnimation.\n    this._panelAnimationState = 'enter';\n  }\n\n  /** Resets the panel animation to its initial state. */\n  _resetAnimation() {\n    // @breaking-change 8.0.0 Combine with _startAnimation.\n    this._panelAnimationState = 'void';\n  }\n\n  /** Callback that is invoked when the panel animation completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    this._animationDone.next(event);\n    this._isAnimating = false;\n\n    // Scroll the content element to the top once the animation is done. This is necessary, because\n    // we move focus to the first item while it's still being animated, which can throw the browser\n    // off when it determines the scroll position. Alternatively we can move focus when the\n    // animation is done, however moving focus asynchronously will interrupt screen readers\n    // which are in the process of reading out the menu already. We take the `element` from\n    // the `event` since we can't use a `ViewChild` to access the pane.\n    if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n      event.element.scrollTop = 0;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusOrigin, isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {Direction, Directionality} from '@angular/cdk/bidi';\nimport {LEFT_ARROW, RIGHT_ARROW} from '@angular/cdk/keycodes';\nimport {\n  FlexibleConnectedPositionStrategy,\n  HorizontalConnectionPos,\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  VerticalConnectionPos,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  Self,\n  ViewContainerRef,\n} from '@angular/core';\nimport {normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {asapScheduler, merge, of as observableOf, Subscription} from 'rxjs';\nimport {delay, filter, take, takeUntil} from 'rxjs/operators';\nimport {MatMenu} from './menu-directive';\nimport {throwMatMenuMissingError} from './menu-errors';\nimport {MatMenuItem} from './menu-item';\nimport {MatMenuPanel} from './menu-panel';\nimport {MenuPositionX, MenuPositionY} from './menu-positions';\n\n/** Injection token that determines the scroll handling while the menu is open. */\nexport const MAT_MENU_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-menu-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_MENU_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n\n/** Default top padding of the menu panel. */\nexport const MENU_PANEL_TOP_PADDING = 8;\n\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({passive: true});\n\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\n\n/**\n * This directive is intended to be used in conjunction with an mat-menu tag.  It is\n * responsible for toggling the display of the provided menu instance.\n */\n@Directive({\n  selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n  host: {\n    'aria-haspopup': 'true',\n    '[attr.aria-expanded]': 'menuOpen || null',\n    '(mousedown)': '_handleMousedown($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(click)': '_handleClick($event)',\n  },\n  exportAs: 'matMenuTrigger'\n})\nexport class MatMenuTrigger implements AfterContentInit, OnDestroy {\n  private _portal: TemplatePortal;\n  private _overlayRef: OverlayRef | null = null;\n  private _menuOpen: boolean = false;\n  private _closeSubscription = Subscription.EMPTY;\n  private _hoverSubscription = Subscription.EMPTY;\n  private _menuCloseSubscription = Subscription.EMPTY;\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /**\n   * Handles touch start events on the trigger.\n   * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n   */\n  private _handleTouchStart = () => this._openedBy = 'touch';\n\n  // Tracking input type is necessary so it's possible to only auto-focus\n  // the first item of the list when the menu is opened via the keyboard\n  _openedBy: 'mouse' | 'touch' | null = null;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @Input('mat-menu-trigger-for')\n  get _deprecatedMatMenuTriggerFor(): MatMenuPanel { return this.menu; }\n  set _deprecatedMatMenuTriggerFor(v: MatMenuPanel) {\n    this.menu = v;\n  }\n\n  /** References the menu instance that the trigger is associated with. */\n  @Input('matMenuTriggerFor')\n  get menu() { return this._menu; }\n  set menu(menu: MatMenuPanel) {\n    if (menu === this._menu) {\n      return;\n    }\n\n    this._menu = menu;\n    this._menuCloseSubscription.unsubscribe();\n\n    if (menu) {\n      this._menuCloseSubscription = menu.close.asObservable().subscribe(reason => {\n        this._destroyMenu();\n\n        // If a click closed the menu, we should close the entire chain of nested menus.\n        if ((reason === 'click' || reason === 'tab') && this._parentMenu) {\n          this._parentMenu.closed.emit(reason);\n        }\n      });\n    }\n  }\n  private _menu: MatMenuPanel;\n\n  /** Data to be passed along to any lazily-rendered content. */\n  @Input('matMenuTriggerData') menuData: any;\n\n  /** Event emitted when the associated menu is opened. */\n  @Output() readonly menuOpened: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is opened.\n   * @deprecated Switch to `menuOpened` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuOpen: EventEmitter<void> = this.menuOpened;\n\n  /** Event emitted when the associated menu is closed. */\n  @Output() readonly menuClosed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Event emitted when the associated menu is closed.\n   * @deprecated Switch to `menuClosed` instead\n   * @breaking-change 8.0.0\n   */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onMenuClose: EventEmitter<void> = this.menuClosed;\n\n  constructor(private _overlay: Overlay,\n              private _element: ElementRef<HTMLElement>,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_MENU_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _parentMenu: MatMenu,\n              @Optional() @Self() private _menuItemInstance: MatMenuItem,\n              @Optional() private _dir: Directionality,\n              // TODO(crisbeto): make the _focusMonitor required when doing breaking changes.\n              // @breaking-change 8.0.0\n              private _focusMonitor?: FocusMonitor) {\n\n    _element.nativeElement.addEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    if (_menuItemInstance) {\n      _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngAfterContentInit() {\n    this._checkMenu();\n    this._handleHover();\n  }\n\n  ngOnDestroy() {\n    if (this._overlayRef) {\n      this._overlayRef.dispose();\n      this._overlayRef = null;\n    }\n\n    this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart,\n        passiveEventListenerOptions);\n\n    this._cleanUpSubscriptions();\n  }\n\n  /** Whether the menu is open. */\n  get menuOpen(): boolean {\n    return this._menuOpen;\n  }\n\n  /** The text direction of the containing app. */\n  get dir(): Direction {\n    return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n  }\n\n  /** Whether the menu triggers a sub-menu or a top-level one. */\n  triggersSubmenu(): boolean {\n    return !!(this._menuItemInstance && this._parentMenu);\n  }\n\n  /** Toggles the menu between the open and closed states. */\n  toggleMenu(): void {\n    return this._menuOpen ? this.closeMenu() : this.openMenu();\n  }\n\n  /** Opens the menu. */\n  openMenu(): void {\n    if (this._menuOpen) {\n      return;\n    }\n\n    this._checkMenu();\n\n    const overlayRef = this._createOverlay();\n    this._setPosition(overlayRef.getConfig().positionStrategy as FlexibleConnectedPositionStrategy);\n    overlayRef.attach(this._getPortal());\n\n    if (this.menu.lazyContent) {\n      this.menu.lazyContent.attach(this.menuData);\n    }\n\n    this._closeSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n    this._initMenu();\n\n    if (this.menu instanceof MatMenu) {\n      this.menu._startAnimation();\n    }\n  }\n\n  /** Closes the menu. */\n  closeMenu(): void {\n    this.menu.close.emit();\n  }\n\n  /**\n   * Focuses the menu trigger.\n   * @param origin Source of the menu trigger's focus.\n   */\n  focus(origin: FocusOrigin = 'program') {\n    if (this._focusMonitor) {\n      this._focusMonitor.focusVia(this._element, origin);\n    } else {\n      this._element.nativeElement.focus();\n    }\n  }\n\n  /** Closes the menu and does the necessary cleanup. */\n  private _destroyMenu() {\n    if (!this._overlayRef || !this.menuOpen) {\n      return;\n    }\n\n    const menu = this.menu;\n\n    this._closeSubscription.unsubscribe();\n    this._overlayRef.detach();\n\n    if (menu instanceof MatMenu) {\n      menu._resetAnimation();\n\n      if (menu.lazyContent) {\n        // Wait for the exit animation to finish before detaching the content.\n        menu._animationDone\n          .pipe(\n            filter(event => event.toState === 'void'),\n            take(1),\n            // Interrupt if the content got re-attached.\n            takeUntil(menu.lazyContent._attached)\n          )\n          .subscribe(() => menu.lazyContent!.detach(), undefined, () => {\n            // No matter whether the content got re-attached, reset the menu.\n            this._resetMenu();\n          });\n      } else {\n        this._resetMenu();\n      }\n    } else {\n      this._resetMenu();\n\n      if (menu.lazyContent) {\n        menu.lazyContent.detach();\n      }\n    }\n  }\n\n  /**\n   * This method sets the menu state to open and focuses the first item if\n   * the menu was opened via the keyboard.\n   */\n  private _initMenu(): void {\n    this.menu.parentMenu = this.triggersSubmenu() ? this._parentMenu : undefined;\n    this.menu.direction = this.dir;\n    this._setMenuElevation();\n    this._setIsMenuOpen(true);\n    this.menu.focusFirstItem(this._openedBy || 'program');\n  }\n\n  /** Updates the menu elevation based on the amount of parent menus that it has. */\n  private _setMenuElevation(): void {\n    if (this.menu.setElevation) {\n      let depth = 0;\n      let parentMenu = this.menu.parentMenu;\n\n      while (parentMenu) {\n        depth++;\n        parentMenu = parentMenu.parentMenu;\n      }\n\n      this.menu.setElevation(depth);\n    }\n  }\n\n  /**\n   * This method resets the menu when it's closed, most importantly restoring\n   * focus to the menu trigger if the menu was opened via the keyboard.\n   */\n  private _resetMenu(): void {\n    this._setIsMenuOpen(false);\n\n    // We should reset focus if the user is navigating using a keyboard or\n    // if we have a top-level trigger which might cause focus to be lost\n    // when clicking on the backdrop.\n    if (!this._openedBy) {\n      // Note that the focus style will show up both for `program` and\n      // `keyboard` so we don't have to specify which one it is.\n      this.focus();\n    } else if (!this.triggersSubmenu()) {\n      this.focus(this._openedBy);\n    }\n\n    this._openedBy = null;\n  }\n\n  // set state rather than toggle to support triggers sharing a menu\n  private _setIsMenuOpen(isOpen: boolean): void {\n    this._menuOpen = isOpen;\n    this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n\n    if (this.triggersSubmenu()) {\n      this._menuItemInstance._highlighted = isOpen;\n    }\n  }\n\n  /**\n   * This method checks that a valid instance of MatMenu has been passed into\n   * matMenuTriggerFor. If not, an exception is thrown.\n   */\n  private _checkMenu() {\n    if (!this.menu) {\n      throwMatMenuMissingError();\n    }\n  }\n\n  /**\n   * This method creates the overlay from the provided menu's template and saves its\n   * OverlayRef so that it can be attached to the DOM when openMenu is called.\n   */\n  private _createOverlay(): OverlayRef {\n    if (!this._overlayRef) {\n      const config = this._getOverlayConfig();\n      this._subscribeToPositions(config.positionStrategy as FlexibleConnectedPositionStrategy);\n      this._overlayRef = this._overlay.create(config);\n\n      // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n      // Ideally we'd also have our keyboard event logic in here, however doing so will\n      // break anybody that may have implemented the `MatMenuPanel` themselves.\n      this._overlayRef.keydownEvents().subscribe();\n    }\n\n    return this._overlayRef;\n  }\n\n  /**\n   * This method builds the configuration object needed to create the overlay, the OverlayState.\n   * @returns OverlayConfig\n   */\n  private _getOverlayConfig(): OverlayConfig {\n    return new OverlayConfig({\n      positionStrategy: this._overlay.position()\n          .flexibleConnectedTo(this._element)\n          .withLockedPosition()\n          .withTransformOriginOn('.mat-menu-panel'),\n      hasBackdrop: this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop,\n      backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n      scrollStrategy: this._scrollStrategy(),\n      direction: this._dir\n    });\n  }\n\n  /**\n   * Listens to changes in the position of the overlay and sets the correct classes\n   * on the menu based on the new position. This ensures the animation origin is always\n   * correct, even if a fallback position is used for the overlay.\n   */\n  private _subscribeToPositions(position: FlexibleConnectedPositionStrategy): void {\n    if (this.menu.setPositionClasses) {\n      position.positionChanges.subscribe(change => {\n        const posX: MenuPositionX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n        const posY: MenuPositionY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n\n        this.menu.setPositionClasses!(posX, posY);\n      });\n    }\n  }\n\n  /**\n   * Sets the appropriate positions on a position strategy\n   * so the overlay connects with the trigger correctly.\n   * @param positionStrategy Strategy whose position to update.\n   */\n  private _setPosition(positionStrategy: FlexibleConnectedPositionStrategy) {\n    let [originX, originFallbackX]: HorizontalConnectionPos[] =\n        this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n\n    let [overlayY, overlayFallbackY]: VerticalConnectionPos[] =\n        this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n\n    let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n    let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n    let offsetY = 0;\n\n    if (this.triggersSubmenu()) {\n      // When the menu is a sub-menu, it should always align itself\n      // to the edges of the trigger, instead of overlapping it.\n      overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n      originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n      offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n    } else if (!this.menu.overlapTrigger) {\n      originY = overlayY === 'top' ? 'bottom' : 'top';\n      originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n    }\n\n    positionStrategy.withPositions([\n      {originX, originY, overlayX, overlayY, offsetY},\n      {originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY},\n      {\n        originX,\n        originY: originFallbackY,\n        overlayX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      },\n      {\n        originX: originFallbackX,\n        originY: originFallbackY,\n        overlayX: overlayFallbackX,\n        overlayY: overlayFallbackY,\n        offsetY: -offsetY\n      }\n    ]);\n  }\n\n  /** Cleans up the active subscriptions. */\n  private _cleanUpSubscriptions(): void {\n    this._closeSubscription.unsubscribe();\n    this._hoverSubscription.unsubscribe();\n  }\n\n  /** Returns a stream that emits whenever an action that should close the menu occurs. */\n  private _menuClosingActions() {\n    const backdrop = this._overlayRef!.backdropClick();\n    const detachments = this._overlayRef!.detachments();\n    const parentClose = this._parentMenu ? this._parentMenu.closed : observableOf();\n    const hover = this._parentMenu ? this._parentMenu._hovered().pipe(\n      filter(active => active !== this._menuItemInstance),\n      filter(() => this._menuOpen)\n    ) : observableOf();\n\n    return merge(backdrop, parentClose, hover, detachments);\n  }\n\n  /** Handles mouse presses on the trigger. */\n  _handleMousedown(event: MouseEvent): void {\n    if (!isFakeMousedownFromScreenReader(event)) {\n      // Since right or middle button clicks won't trigger the `click` event,\n      // we shouldn't consider the menu as opened by mouse in those cases.\n      this._openedBy = event.button === 0 ? 'mouse' : null;\n\n      // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n      // we should prevent focus from moving onto it via click to avoid the\n      // highlight from lingering on the menu item.\n      if (this.triggersSubmenu()) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  /** Handles key presses on the trigger. */\n  _handleKeydown(event: KeyboardEvent): void {\n    const keyCode = event.keyCode;\n\n    if (this.triggersSubmenu() && (\n            (keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n            (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n      this.openMenu();\n    }\n  }\n\n  /** Handles click events on the trigger. */\n  _handleClick(event: MouseEvent): void {\n    if (this.triggersSubmenu()) {\n      // Stop event propagation to avoid closing the parent menu.\n      event.stopPropagation();\n      this.openMenu();\n    } else {\n      this.toggleMenu();\n    }\n  }\n\n  /** Handles the cases where the user hovers over the trigger. */\n  private _handleHover() {\n    // Subscribe to changes in the hovered item in order to toggle the panel.\n    if (!this.triggersSubmenu()) {\n      return;\n    }\n\n    this._hoverSubscription = this._parentMenu._hovered()\n      // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n      // with different data and triggers), we have to delay it by a tick to ensure that\n      // it won't be closed immediately after it is opened.\n      .pipe(\n        filter(active => active === this._menuItemInstance && !active.disabled),\n        delay(0, asapScheduler)\n      )\n      .subscribe(() => {\n        this._openedBy = 'mouse';\n\n        // If the same menu is used between multiple triggers, it might still be animating\n        // while the new trigger tries to re-open it. Wait for the animation to finish\n        // before doing so. Also interrupt if the user moves to another item.\n        if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n          // We need the `delay(0)` here in order to avoid\n          // 'changed after checked' errors in some cases. See #12194.\n          this.menu._animationDone\n            .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMenu._hovered()))\n            .subscribe(() => this.openMenu());\n        } else {\n          this.openMenu();\n        }\n      });\n  }\n\n  /** Gets the portal that should be attached to the overlay. */\n  private _getPortal(): TemplatePortal {\n    // Note that we can avoid this check by keeping the portal on the menu panel.\n    // While it would be cleaner, we'd have to introduce another required method on\n    // `MatMenuPanel`, making it harder to consume.\n    if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n      this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n    }\n\n    return this._portal;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatMenuContent} from './menu-content';\nimport {MatMenu} from './menu-directive';\nimport {MatMenuItem} from './menu-item';\nimport {\n  MatMenuTrigger,\n  MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './menu-trigger';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatCommonModule,\n    MatRippleModule,\n    OverlayModule,\n  ],\n  exports: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent, MatCommonModule],\n  declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n  providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER]\n})\nexport class MatMenuModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nexport const matSelectAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInContent: AnimationTriggerMetadata;\n} = {\n  /**\n   * This animation transforms the select's overlay panel on and off the page.\n   *\n   * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n   * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n   * side to ensure the option text correctly overlaps the trigger text.\n   *\n   * When the panel is removed from the DOM, it simply fades out linearly.\n   */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      transform: 'scaleY(0.8)',\n      minWidth: '100%',\n      opacity: 0\n    })),\n    state('showing', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 32px)', // 32px = 2 * 16px padding\n      transform: 'scaleY(1)'\n    })),\n    state('showing-multiple', style({\n      opacity: 1,\n      minWidth: 'calc(100% + 64px)', // 64px = 48px padding on the left + 16px padding on the right\n      transform: 'scaleY(1)'\n    })),\n    transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n    transition('* => void', animate('100ms 25ms linear', style({opacity: 0})))\n  ]),\n\n  /**\n   * This animation fades in the background color and text content of the\n   * select's options. It is time delayed to occur 100ms after the overlay\n   * panel has transformed in.\n   * @deprecated Not used anymore. To be removed.\n   * @breaking-change 8.0.0\n   */\n  fadeInContent: trigger('fadeInContent', [\n    state('showing', style({opacity: 1})),\n    transition('void => showing', [\n      style({opacity: 0}),\n      animate('150ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')\n    ])\n  ])\n};\n\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const transformPanel = matSelectAnimations.transformPanel;\n\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nexport const fadeInContent = matSelectAnimations.fadeInContent;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {SPACE, ENTER, HOME, END, UP_ARROW, DOWN_ARROW, A} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple, CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {Subscription} from 'rxjs';\nimport {MatListAvatarCssMatStyler, MatListIconCssMatStyler} from './list';\n\n\n/** @docs-private */\nexport class MatSelectionListBase {}\nexport const _MatSelectionListMixinBase: CanDisableRippleCtor & typeof MatSelectionListBase =\n    mixinDisableRipple(MatSelectionListBase);\n\n/** @docs-private */\nexport class MatListOptionBase {}\nexport const _MatListOptionMixinBase: CanDisableRippleCtor & typeof MatListOptionBase =\n    mixinDisableRipple(MatListOptionBase);\n\n/** @docs-private */\nexport const MAT_SELECTION_LIST_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatSelectionList),\n  multi: true\n};\n\n/** Change event that is being fired whenever the selected state of an option changes. */\nexport class MatSelectionListChange {\n  constructor(\n    /** Reference to the selection list that emitted the event. */\n    public source: MatSelectionList,\n    /** Reference to the option that has been changed. */\n    public option: MatListOption) {}\n}\n\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-option',\n  exportAs: 'matListOption',\n  inputs: ['disableRipple'],\n  host: {\n    'role': 'option',\n    'class': 'mat-list-item mat-list-option',\n    '(focus)': '_handleFocus()',\n    '(blur)': '_handleBlur()',\n    '(click)': '_handleClick()',\n    'tabindex': '-1',\n    '[class.mat-list-item-disabled]': 'disabled',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  templateUrl: 'list-option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListOption extends _MatListOptionMixinBase\n    implements AfterContentInit, OnDestroy, OnInit, FocusableOption, CanDisableRipple {\n\n  private _selected = false;\n  private _disabled = false;\n  private _hasFocus = false;\n\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  /** DOM element containing the item's text. */\n  @ViewChild('text') _text: ElementRef;\n\n  /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n  @Input() checkboxPosition: 'before' | 'after' = 'after';\n\n  /** Value of the option */\n  @Input() value: any;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return this._disabled || (this.selectionList && this.selectionList.disabled); }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n\n  /** Whether the option is selected. */\n  @Input()\n  get selected(): boolean { return this.selectionList.selectedOptions.isSelected(this); }\n  set selected(value: boolean) {\n    const isSelected = coerceBooleanProperty(value);\n\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              private _changeDetector: ChangeDetectorRef,\n              /** @docs-private */\n              @Inject(forwardRef(() => MatSelectionList)) public selectionList: MatSelectionList) {\n    super();\n  }\n\n  ngOnInit() {\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    const wasSelected = this._selected;\n\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  ngOnDestroy(): void {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => this.selected = false);\n    }\n\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n\n  /** Toggles the selection state of the option. */\n  toggle(): void {\n    this.selected = !this.selected;\n  }\n\n  /** Allows for programmatic focusing of the option. */\n  focus(): void {\n    this._element.nativeElement.focus();\n  }\n\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? (this._text.nativeElement.textContent || '') : '';\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n\n  _handleClick() {\n    if (!this.disabled) {\n      this.toggle();\n\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent(this);\n    }\n  }\n\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected: boolean): boolean {\n    if (selected === this._selected) {\n      return false;\n    }\n\n    this._selected = selected;\n\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n\n    this._changeDetector.markForCheck();\n    return true;\n  }\n\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n\n\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-selection-list',\n  exportAs: 'matSelectionList',\n  inputs: ['disabled', 'disableRipple', 'tabIndex'],\n  host: {\n    'role': 'listbox',\n    '[tabIndex]': 'tabIndex',\n    'class': 'mat-selection-list',\n    '(focus)': 'focus()',\n    '(blur)': '_onTouched()',\n    '(keydown)': '_keydown($event)',\n    'aria-multiselectable': 'true',\n    '[attr.aria-disabled]': 'disabled.toString()',\n  },\n  template: '<ng-content></ng-content>',\n  styleUrls: ['list.css'],\n  encapsulation: ViewEncapsulation.None,\n  providers: [MAT_SELECTION_LIST_VALUE_ACCESSOR],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectionList extends _MatSelectionListMixinBase implements FocusableOption,\n    CanDisableRipple, AfterContentInit, ControlValueAccessor, OnDestroy {\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatListOption>;\n\n  /** The option components contained within this selection-list. */\n  @ContentChildren(MatListOption) options: QueryList<MatListOption>;\n\n  /** Emits a change event whenever the selected state of an option changes. */\n  @Output() readonly selectionChange: EventEmitter<MatSelectionListChange> =\n      new EventEmitter<MatSelectionListChange>();\n\n  /** Tabindex of the selection list. */\n  @Input() tabIndex: number = 0;\n\n  /**\n   * Function used for comparing an option against the selected value when determining which\n   * options should appear as selected. The first argument is the value of an options. The second\n   * one is a value from the selected value. A boolean must be returned.\n   */\n  @Input() compareWith: (o1: any, o2: any) => boolean;\n\n  /** Whether the selection list is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  private _disabled: boolean = false;\n\n  /** The currently selected options. */\n  selectedOptions: SelectionModel<MatListOption> = new SelectionModel<MatListOption>(true);\n\n  /** View to model callback that should be called whenever the selected options change. */\n  private _onChange: (value: any) => void = (_: any) => {};\n\n  /** Used for storing the values that were assigned before the options were initialized. */\n  private _tempValues: string[]|null;\n\n  /** Subscription to sync value changes in the SelectionModel back to the SelectionList. */\n  private _modelChanges = Subscription.EMPTY;\n\n  /** View to model callback that should be called if the list or its options lost focus. */\n  _onTouched: () => void = () => {};\n\n  constructor(private _element: ElementRef<HTMLElement>, @Attribute('tabindex') tabIndex: string) {\n    super();\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterContentInit(): void {\n    this._keyManager = new FocusKeyManager<MatListOption>(this.options)\n      .withWrap()\n      .withTypeAhead()\n      // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n      // screenreader users, that allows reading the different options of the list.\n      .skipPredicate(() => false)\n      .withAllowedModifierKeys(['shiftKey']);\n\n    if (this._tempValues) {\n      this._setOptionsFromValues(this._tempValues);\n      this._tempValues = null;\n    }\n\n    // Sync external changes to the model back to the options.\n    this._modelChanges = this.selectedOptions.onChange.subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._modelChanges.unsubscribe();\n  }\n\n  /** Focuses the last active list option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option: MatListOption) {\n    this._keyManager.updateActiveItemIndex(this._getOptionIndex(option));\n  }\n\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option: MatListOption): MatListOption | null {\n    const optionIndex = this._getOptionIndex(option);\n\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItemIndex(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItemIndex(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n\n    return this._keyManager.activeItem;\n  }\n\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event: KeyboardEvent) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        this._toggleFocusedOption();\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n      case HOME:\n      case END:\n        keyCode === HOME ? manager.setFirstItemActive() : manager.setLastItemActive();\n        event.preventDefault();\n        break;\n      case A:\n        if (event.ctrlKey) {\n          this.options.find(option => !option.selected) ? this.selectAll() : this.deselectAll();\n          event.preventDefault();\n        }\n        break;\n      default:\n        manager.onKeydown(event);\n    }\n\n    if ((keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey &&\n        manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    if (this.options) {\n      this._onChange(this._getSelectedOptionValues());\n    }\n  }\n\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(option: MatListOption) {\n    this.selectionChange.emit(new MatSelectionListChange(this, option));\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values: string[]): void {\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    } else {\n      this._tempValues = values;\n    }\n  }\n\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  /** Sets the selected options based on the specified values. */\n  private _setOptionsFromValues(values: string[]) {\n    this.options.forEach(option => option._setSelected(false));\n\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        if (option.selected) {\n          return false;\n        }\n\n        return this.compareWith ? this.compareWith(option.value, value) : option.value === value;\n      });\n\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n\n  /** Returns the values of the selected options. */\n  private _getSelectedOptionValues(): string[] {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n\n  /** Toggles the state of the currently focused option if enabled. */\n  private _toggleFocusedOption(): void {\n    let focusedIndex = this._keyManager.activeItemIndex;\n\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption: MatListOption = this.options.toArray()[focusedIndex];\n\n      if (focusedOption && !focusedOption.disabled) {\n        focusedOption.toggle();\n\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent(focusedOption);\n      }\n    }\n  }\n\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  private _setAllOptionsSelected(isSelected: boolean) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    let hasChanged = false;\n\n    this.options.forEach(option => {\n      if (option._setSelected(isSelected)) {\n        hasChanged = true;\n      }\n    });\n\n    if (hasChanged) {\n      this._reportValueChange();\n    }\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.options.length;\n  }\n\n  /** Returns the index of the specified list option. */\n  private _getOptionIndex(option: MatListOption): number {\n    return this.options.toArray().indexOf(option);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {\n  MatCommonModule,\n  MatLineModule,\n  MatPseudoCheckboxModule,\n  MatRippleModule,\n} from '@angular/material/core';\nimport {\n  MatList,\n  MatNavList,\n  MatListAvatarCssMatStyler,\n  MatListIconCssMatStyler,\n  MatListItem,\n  MatListSubheaderCssMatStyler,\n} from './list';\nimport {MatListOption, MatSelectionList} from './selection-list';\nimport {MatDividerModule} from '@angular/material/divider';\n\n\n@NgModule({\n  imports: [MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule, CommonModule],\n  exports: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatLineModule,\n    MatCommonModule,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatPseudoCheckboxModule,\n    MatSelectionList,\n    MatListOption,\n    MatDividerModule\n  ],\n  declarations: [\n    MatList,\n    MatNavList,\n    MatListItem,\n    MatListAvatarCssMatStyler,\n    MatListIconCssMatStyler,\n    MatListSubheaderCssMatStyler,\n    MatSelectionList,\n    MatListOption\n  ],\n})\nexport class MatListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChild,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  Optional,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MatLine,\n  setLines,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nexport class MatListBase {}\nexport const _MatListMixinBase: CanDisableRippleCtor & typeof MatListBase =\n    mixinDisableRipple(MatListBase);\n\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nexport class MatListItemBase {}\nexport const _MatListItemMixinBase: CanDisableRippleCtor & typeof MatListItemBase =\n    mixinDisableRipple(MatListItemBase);\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-nav-list',\n  exportAs: 'matNavList',\n  host: {\n    'role': 'navigation',\n    'class': 'mat-nav-list'\n  },\n  templateUrl: 'list.html',\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatNavList extends _MatListMixinBase implements CanDisableRipple {}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list, mat-action-list',\n  exportAs: 'matList',\n  templateUrl: 'list.html',\n  host: {'class': 'mat-list'},\n  styleUrls: ['list.css'],\n  inputs: ['disableRipple'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatList extends _MatListMixinBase implements CanDisableRipple {\n  /**\n   * @deprecated _elementRef parameter to be made required.\n   * @breaking-change 8.0.0\n   */\n  constructor(private _elementRef?: ElementRef<HTMLElement>) {\n    super();\n  }\n\n  _getListType(): 'list' | 'action-list' | null {\n    const elementRef = this._elementRef;\n\n    // @breaking-change 8.0.0 Remove null check once _elementRef is a required param.\n    if (elementRef) {\n      const nodeName = elementRef.nativeElement.nodeName.toLowerCase();\n\n      if (nodeName === 'mat-list') {\n        return 'list';\n      }\n\n      if (nodeName === 'mat-action-list') {\n        return 'action-list';\n      }\n    }\n\n    return null;\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-avatar], [matListAvatar]',\n  host: {'class': 'mat-list-avatar'}\n})\nexport class MatListAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-list-icon], [matListIcon]',\n  host: {'class': 'mat-list-icon'}\n})\nexport class MatListIconCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-subheader], [matSubheader]',\n  host: {'class': 'mat-subheader'}\n})\nexport class MatListSubheaderCssMatStyler {}\n\n/** An item within a Material Design list. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-list-item, a[mat-list-item], button[mat-list-item]',\n  exportAs: 'matListItem',\n  host: {\n    'class': 'mat-list-item',\n    // @breaking-change 8.0.0 Remove `mat-list-item-avatar` in favor of `mat-list-item-with-avatar`.\n    '[class.mat-list-item-avatar]': '_avatar || _icon',\n    '[class.mat-list-item-with-avatar]': '_avatar || _icon',\n  },\n  inputs: ['disableRipple'],\n  templateUrl: 'list-item.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatListItem extends _MatListItemMixinBase implements AfterContentInit,\n    CanDisableRipple {\n  private _isInteractiveList: boolean = false;\n  private _list?: MatNavList | MatList;\n\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n  @ContentChild(MatListAvatarCssMatStyler) _avatar: MatListAvatarCssMatStyler;\n  @ContentChild(MatListIconCssMatStyler) _icon: MatListIconCssMatStyler;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() navList?: MatNavList,\n              @Optional() list?: MatList) {\n    super();\n    this._isInteractiveList = !!(navList || (list && list._getListType() === 'action-list'));\n    this._list = navList || list;\n\n    // If no type attributed is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n  }\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple ||\n           !!(this._list && this._list.disableRipple);\n  }\n\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ElementRef,\n  Input,\n  Optional,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  Directive,\n  ChangeDetectionStrategy,\n  Inject,\n} from '@angular/core';\nimport {MatLine, setLines} from '@angular/material/core';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile',\n  exportAs: 'matGridTile',\n  host: {\n    'class': 'mat-grid-tile',\n  },\n  templateUrl: 'grid-tile.html',\n  styleUrls: ['grid-list.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatGridTile {\n  _rowspan: number = 1;\n  _colspan: number = 1;\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    @Optional() @Inject(MAT_GRID_LIST) public _gridList?: MatGridListBase) {}\n\n  /** Amount of rows that the grid tile takes up. */\n  @Input()\n  get rowspan(): number { return this._rowspan; }\n  set rowspan(value: number) { this._rowspan = Math.round(coerceNumberProperty(value)); }\n\n  /** Amount of columns that the grid tile takes up. */\n  @Input()\n  get colspan(): number { return this._colspan; }\n  set colspan(value: number) { this._colspan = Math.round(coerceNumberProperty(value)); }\n\n  /**\n   * Sets the style of the grid-tile element.  Needs to be set manually to avoid\n   * \"Changed after checked\" errors that would occur with HostBinding.\n   */\n  _setStyle(property: string, value: any): void {\n    (this._element.nativeElement.style as any)[property] = value;\n  }\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-tile-header, mat-grid-tile-footer',\n  templateUrl: 'grid-tile-text.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridTileText implements AfterContentInit {\n  @ContentChildren(MatLine) _lines: QueryList<MatLine>;\n\n  constructor(private _element: ElementRef<HTMLElement>) {}\n\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-grid-avatar], [matGridAvatar]',\n  host: {'class': 'mat-grid-avatar'}\n})\nexport class MatGridAvatarCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-header',\n  host: {'class': 'mat-grid-tile-header'}\n})\nexport class MatGridTileHeaderCssMatStyler {}\n\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-grid-tile-footer',\n  host: {'class': 'mat-grid-tile-footer'}\n})\nexport class MatGridTileFooterCssMatStyler {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridTile} from './grid-tile';\n\n/**\n * Class for determining, from a list of tiles, the (row, col) position of each of those tiles\n * in the grid. This is necessary (rather than just rendering the tiles in normal document flow)\n * because the tiles can have a rowspan.\n *\n * The positioning algorithm greedily places each tile as soon as it encounters a gap in the grid\n * large enough to accommodate it so that the tiles still render in the same order in which they\n * are given.\n *\n * The basis of the algorithm is the use of an array to track the already placed tiles. Each\n * element of the array corresponds to a column, and the value indicates how many cells in that\n * column are already occupied; zero indicates an empty cell. Moving \"down\" to the next row\n * decrements each value in the tracking array (indicating that the column is one cell closer to\n * being free).\n *\n * @docs-private\n */\nexport class TileCoordinator {\n  /** Tracking array (see class description). */\n  tracker: number[];\n\n  /** Index at which the search for the next gap will start. */\n  columnIndex: number = 0;\n\n  /** The current row index. */\n  rowIndex: number = 0;\n\n  /** Gets the total number of rows occupied by tiles */\n  get rowCount(): number { return this.rowIndex + 1; }\n\n  /**\n   * Gets the total span of rows occupied by tiles.\n   * Ex: A list with 1 row that contains a tile with rowspan 2 will have a total rowspan of 2.\n   */\n  get rowspan() {\n    const lastRowMax = Math.max(...this.tracker);\n    // if any of the tiles has a rowspan that pushes it beyond the total row count,\n    // add the difference to the rowcount\n    return lastRowMax > 1 ? this.rowCount + lastRowMax - 1 : this.rowCount;\n  }\n\n  /** The computed (row, col) position of each tile (the output). */\n  positions: TilePosition[];\n\n  /**\n   * Updates the tile positions.\n   * @param numColumns Amount of columns in the grid.\n   */\n  update(numColumns: number, tiles: MatGridTile[]) {\n    this.columnIndex = 0;\n    this.rowIndex = 0;\n\n    this.tracker = new Array(numColumns);\n    this.tracker.fill(0, 0, this.tracker.length);\n    this.positions = tiles.map(tile => this._trackTile(tile));\n  }\n\n  /** Calculates the row and col position of a tile. */\n  private _trackTile(tile: MatGridTile): TilePosition {\n    // Find a gap large enough for this tile.\n    const gapStartIndex = this._findMatchingGap(tile.colspan);\n\n    // Place tile in the resulting gap.\n    this._markTilePosition(gapStartIndex, tile);\n\n    // The next time we look for a gap, the search will start at columnIndex, which should be\n    // immediately after the tile that has just been placed.\n    this.columnIndex = gapStartIndex + tile.colspan;\n\n    return new TilePosition(this.rowIndex, gapStartIndex);\n  }\n\n  /** Finds the next available space large enough to fit the tile. */\n  private _findMatchingGap(tileCols: number): number {\n    if (tileCols > this.tracker.length) {\n      throw Error(`mat-grid-list: tile with colspan ${tileCols} is wider than ` +\n                      `grid with cols=\"${this.tracker.length}\".`);\n    }\n\n    // Start index is inclusive, end index is exclusive.\n    let gapStartIndex = -1;\n    let gapEndIndex = -1;\n\n    // Look for a gap large enough to fit the given tile. Empty spaces are marked with a zero.\n    do {\n      // If we've reached the end of the row, go to the next row.\n      if (this.columnIndex + tileCols > this.tracker.length) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n\n      // If there are no more empty spaces in this row at all, move on to the next row.\n      if (gapStartIndex == -1) {\n        this._nextRow();\n        gapStartIndex = this.tracker.indexOf(0, this.columnIndex);\n        gapEndIndex = this._findGapEndIndex(gapStartIndex);\n        continue;\n      }\n\n      gapEndIndex = this._findGapEndIndex(gapStartIndex);\n\n      // If a gap large enough isn't found, we want to start looking immediately after the current\n      // gap on the next iteration.\n      this.columnIndex = gapStartIndex + 1;\n\n      // Continue iterating until we find a gap wide enough for this tile. Since gapEndIndex is\n      // exclusive, gapEndIndex is 0 means we didn't find a gap and should continue.\n    } while ((gapEndIndex - gapStartIndex < tileCols) || (gapEndIndex == 0));\n\n    // If we still didn't manage to find a gap, ensure that the index is\n    // at least zero so the tile doesn't get pulled out of the grid.\n    return Math.max(gapStartIndex, 0);\n  }\n\n  /** Move \"down\" to the next row. */\n  private _nextRow(): void {\n    this.columnIndex = 0;\n    this.rowIndex++;\n\n    // Decrement all spaces by one to reflect moving down one row.\n    for (let i = 0; i < this.tracker.length; i++) {\n      this.tracker[i] = Math.max(0, this.tracker[i] - 1);\n    }\n  }\n\n  /**\n   * Finds the end index (exclusive) of a gap given the index from which to start looking.\n   * The gap ends when a non-zero value is found.\n   */\n  private _findGapEndIndex(gapStartIndex: number): number {\n    for (let i = gapStartIndex + 1; i < this.tracker.length; i++) {\n      if (this.tracker[i] != 0) {\n        return i;\n      }\n    }\n\n    // The gap ends with the end of the row.\n    return this.tracker.length;\n  }\n\n  /** Update the tile tracker to account for the given tile in the given space. */\n  private _markTilePosition(start: number, tile: MatGridTile): void {\n    for (let i = 0; i < tile.colspan; i++) {\n      this.tracker[start + i] = tile.rowspan;\n    }\n  }\n}\n\n/**\n * Simple data structure for tile position (row, col).\n * @docs-private\n */\nexport class TilePosition {\n  constructor(public row: number, public col: number) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatGridList} from './grid-list';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\n\n/**\n * RegExp that can be used to check whether a value will\n * be allowed inside a CSS `calc()` expression.\n */\nconst cssCalcAllowedValue = /^-?\\d+((\\.\\d+)?[A-Za-z%$]?)+$/;\n\n/**\n * Sets the style properties for an individual tile, given the position calculated by the\n * Tile Coordinator.\n * @docs-private\n */\nexport abstract class TileStyler {\n  _gutterSize: string;\n  _rows: number = 0;\n  _rowspan: number = 0;\n  _cols: number;\n  _direction: string;\n\n  /**\n   * Adds grid-list layout info once it is available. Cannot be processed in the constructor\n   * because these properties haven't been calculated by that point.\n   *\n   * @param gutterSize Size of the grid's gutter.\n   * @param tracker Instance of the TileCoordinator.\n   * @param cols Amount of columns in the grid.\n   * @param direction Layout direction of the grid.\n   */\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string): void {\n    this._gutterSize = normalizeUnits(gutterSize);\n    this._rows = tracker.rowCount;\n    this._rowspan = tracker.rowspan;\n    this._cols = cols;\n    this._direction = direction;\n  }\n\n  /**\n   * Computes the amount of space a single 1x1 tile would take up (width or height).\n   * Used as a basis for other calculations.\n   * @param sizePercent Percent of the total grid-list space that one 1x1 tile would take up.\n   * @param gutterFraction Fraction of the gutter size taken up by one 1x1 tile.\n   * @return The size of a 1x1 tile as an expression that can be evaluated via CSS calc().\n   */\n  getBaseTileSize(sizePercent: number, gutterFraction: number): string {\n    // Take the base size percent (as would be if evenly dividing the size between cells),\n    // and then subtracting the size of one gutter. However, since there are no gutters on the\n    // edges, each tile only uses a fraction (gutterShare = numGutters / numCells) of the gutter\n    // size. (Imagine having one gutter per tile, and then breaking up the extra gutter on the\n    // edge evenly among the cells).\n    return `(${sizePercent}% - (${this._gutterSize} * ${gutterFraction}))`;\n  }\n\n\n  /**\n   * Gets The horizontal or vertical position of a tile, e.g., the 'top' or 'left' property value.\n   * @param offset Number of tiles that have already been rendered in the row/column.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @return Position of the tile as a CSS calc() expression.\n   */\n  getTilePosition(baseSize: string, offset: number): string {\n    // The position comes the size of a 1x1 tile plus gutter for each previous tile in the\n    // row/column (offset).\n    return offset === 0 ? '0' : calc(`(${baseSize} + ${this._gutterSize}) * ${offset}`);\n  }\n\n\n  /**\n   * Gets the actual size of a tile, e.g., width or height, taking rowspan or colspan into account.\n   * @param baseSize Base size of a 1x1 tile (as computed in getBaseTileSize).\n   * @param span The tile's rowspan or colspan.\n   * @return Size of the tile as a CSS calc() expression.\n   */\n  getTileSize(baseSize: string, span: number): string {\n    return `(${baseSize} * ${span}) + (${span - 1} * ${this._gutterSize})`;\n  }\n\n\n  /**\n   * Sets the style properties to be applied to a tile for the given row and column index.\n   * @param tile Tile to which to apply the styling.\n   * @param rowIndex Index of the tile's row.\n   * @param colIndex Index of the tile's column.\n   */\n  setStyle(tile: MatGridTile, rowIndex: number, colIndex: number): void {\n    // Percent of the available horizontal space that one column takes up.\n    let percentWidthPerTile = 100 / this._cols;\n\n    // Fraction of the vertical gutter size that each column takes up.\n    // For example, if there are 5 columns, each column uses 4/5 = 0.8 times the gutter width.\n    let gutterWidthFractionPerTile = (this._cols - 1) / this._cols;\n\n    this.setColStyles(tile, colIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n    this.setRowStyles(tile, rowIndex, percentWidthPerTile, gutterWidthFractionPerTile);\n  }\n\n  /** Sets the horizontal placement of the tile in the list. */\n  setColStyles(tile: MatGridTile, colIndex: number, percentWidth: number,\n               gutterWidth: number) {\n    // Base horizontal size of a column.\n    let baseTileWidth = this.getBaseTileSize(percentWidth, gutterWidth);\n\n    // The width and horizontal position of each tile is always calculated the same way, but the\n    // height and vertical position depends on the rowMode.\n    let side = this._direction === 'rtl' ? 'right' : 'left';\n    tile._setStyle(side, this.getTilePosition(baseTileWidth, colIndex));\n    tile._setStyle('width', calc(this.getTileSize(baseTileWidth, tile.colspan)));\n  }\n\n  /**\n   * Calculates the total size taken up by gutters across one axis of a list.\n   */\n  getGutterSpan(): string {\n    return `${this._gutterSize} * (${this._rowspan} - 1)`;\n  }\n\n  /**\n   * Calculates the total size taken up by tiles across one axis of a list.\n   * @param tileHeight Height of the tile.\n   */\n  getTileSpan(tileHeight: string): string {\n    return `${this._rowspan} * ${this.getTileSize(tileHeight, 1)}`;\n  }\n\n  /**\n   * Sets the vertical placement of the tile in the list.\n   * This method will be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  abstract setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n                        gutterWidth: number): void;\n\n  /**\n   * Calculates the computed height and returns the correct style property to set.\n   * This method can be implemented by each type of TileStyler.\n   * @docs-private\n   */\n  getComputedHeight(): [string, string] | null { return null; }\n\n  /**\n   * Called when the tile styler is swapped out with a different one. To be used for cleanup.\n   * @param list Grid list that the styler was attached to.\n   * @docs-private\n   */\n  abstract reset(list: MatGridList): void;\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a fixed row height.\n * Example `<mat-grid-list cols=\"3\" rowHeight=\"100px\">`\n * @docs-private\n */\nexport class FixedTileStyler extends TileStyler {\n\n  constructor(public fixedRowHeight: string) { super(); }\n\n  init(gutterSize: string, tracker: TileCoordinator, cols: number, direction: string) {\n    super.init(gutterSize, tracker, cols, direction);\n    this.fixedRowHeight = normalizeUnits(this.fixedRowHeight);\n\n    if (!cssCalcAllowedValue.test(this.fixedRowHeight)) {\n      throw Error(`Invalid value \"${this.fixedRowHeight}\" set as rowHeight.`);\n    }\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    tile._setStyle('top', this.getTilePosition(this.fixedRowHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(this.fixedRowHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'height', calc(`${this.getTileSpan(this.fixedRowHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['height', null]);\n\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/**\n * This type of styler is instantiated when the user passes in a width:height ratio\n * for the row height.  Example `<mat-grid-list cols=\"3\" rowHeight=\"3:1\">`\n * @docs-private\n */\nexport class RatioTileStyler extends TileStyler {\n\n  /** Ratio width:height given by user to determine row height. */\n  rowHeightRatio: number;\n  baseTileHeight: string;\n\n  constructor(value: string) {\n    super();\n    this._parseRatio(value);\n  }\n\n  setRowStyles(tile: MatGridTile, rowIndex: number, percentWidth: number,\n               gutterWidth: number): void {\n    let percentHeightPerTile = percentWidth / this.rowHeightRatio;\n    this.baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterWidth);\n\n    // Use padding-top and margin-top to maintain the given aspect ratio, as\n    // a percentage-based value for these properties is applied versus the *width* of the\n    // containing block. See http://www.w3.org/TR/CSS2/box.html#margin-properties\n    tile._setStyle('marginTop', this.getTilePosition(this.baseTileHeight, rowIndex));\n    tile._setStyle('paddingTop', calc(this.getTileSize(this.baseTileHeight, tile.rowspan)));\n  }\n\n  getComputedHeight(): [string, string] {\n    return [\n      'paddingBottom', calc(`${this.getTileSpan(this.baseTileHeight)} + ${this.getGutterSpan()}`)\n    ];\n  }\n\n  reset(list: MatGridList) {\n    list._setListStyle(['paddingBottom', null]);\n\n    list._tiles.forEach(tile => {\n      tile._setStyle('marginTop', null);\n      tile._setStyle('paddingTop', null);\n    });\n  }\n\n  private _parseRatio(value: string): void {\n    const ratioParts = value.split(':');\n\n    if (ratioParts.length !== 2) {\n      throw Error(`mat-grid-list: invalid ratio given for row-height: \"${value}\"`);\n    }\n\n    this.rowHeightRatio = parseFloat(ratioParts[0]) / parseFloat(ratioParts[1]);\n  }\n}\n\n/**\n * This type of styler is instantiated when the user selects a \"fit\" row height mode.\n * In other words, the row height will reflect the total height of the container divided\n * by the number of rows.  Example `<mat-grid-list cols=\"3\" rowHeight=\"fit\">`\n *\n * @docs-private\n */\nexport class FitTileStyler extends TileStyler {\n  setRowStyles(tile: MatGridTile, rowIndex: number): void {\n    // Percent of the available vertical space that one row takes up.\n    let percentHeightPerTile = 100 / this._rowspan;\n\n    // Fraction of the horizontal gutter size that each column takes up.\n    let gutterHeightPerTile = (this._rows - 1) / this._rows;\n\n    // Base vertical size of a column.\n    let baseTileHeight = this.getBaseTileSize(percentHeightPerTile, gutterHeightPerTile);\n\n    tile._setStyle('top', this.getTilePosition(baseTileHeight, rowIndex));\n    tile._setStyle('height', calc(this.getTileSize(baseTileHeight, tile.rowspan)));\n  }\n\n  reset(list: MatGridList) {\n    if (list._tiles) {\n      list._tiles.forEach(tile => {\n        tile._setStyle('top', null);\n        tile._setStyle('height', null);\n      });\n    }\n  }\n}\n\n\n/** Wraps a CSS string in a calc function */\nfunction calc(exp: string): string { return `calc(${exp})`; }\n\n\n/** Appends pixels to a CSS string if no units are given. */\nfunction normalizeUnits(value: string): string {\n  return (value.match(/px|em|rem/)) ? value : value + 'px';\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  AfterContentChecked,\n  OnInit,\n  Input,\n  ContentChildren,\n  QueryList,\n  ElementRef,\n  Optional,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {MatGridTile} from './grid-tile';\nimport {TileCoordinator} from './tile-coordinator';\nimport {TileStyler, FitTileStyler, RatioTileStyler, FixedTileStyler} from './tile-styler';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceNumberProperty} from '@angular/cdk/coercion';\nimport {MAT_GRID_LIST, MatGridListBase} from './grid-list-base';\n\n\n// TODO(kara): Conditional (responsive) column count / row size.\n// TODO(kara): Re-layout on window resize / media change (debounced).\n// TODO(kara): gridTileHeader and gridTileFooter.\n\nconst MAT_FIT_MODE = 'fit';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-grid-list',\n  exportAs: 'matGridList',\n  templateUrl: 'grid-list.html',\n  styleUrls: ['grid-list.css'],\n  host: {\n    'class': 'mat-grid-list',\n  },\n  providers: [{\n    provide: MAT_GRID_LIST,\n    useExisting: MatGridList\n  }],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatGridList implements MatGridListBase, OnInit, AfterContentChecked {\n  /** Number of columns being rendered. */\n  private _cols: number;\n\n  /** Used for determiningthe position of each tile in the grid. */\n  private _tileCoordinator: TileCoordinator;\n\n  /**\n   * Row height value passed in by user. This can be one of three types:\n   * - Number value (ex: \"100px\"):  sets a fixed row height to that value\n   * - Ratio value (ex: \"4:3\"): sets the row height based on width:height ratio\n   * - \"Fit\" mode (ex: \"fit\"): sets the row height to total height divided by number of rows\n   */\n  private _rowHeight: string;\n\n  /** The amount of space between tiles. This will be something like '5px' or '2em'. */\n  private _gutter: string = '1px';\n\n  /** Sets position and size styles for a tile */\n  private _tileStyler: TileStyler;\n\n  /** Query list of tiles that are being rendered. */\n  @ContentChildren(MatGridTile, {descendants: true}) _tiles: QueryList<MatGridTile>;\n\n  constructor(private _element: ElementRef<HTMLElement>,\n              @Optional() private _dir: Directionality) {}\n\n  /** Amount of columns in the grid list. */\n  @Input()\n  get cols(): number { return this._cols; }\n  set cols(value: number) {\n    this._cols = Math.max(1, Math.round(coerceNumberProperty(value)));\n  }\n\n  /** Size of the grid list's gutter in pixels. */\n  @Input()\n  get gutterSize(): string { return this._gutter; }\n  set gutterSize(value: string) { this._gutter = `${value == null ? '' : value}`; }\n\n  /** Set internal representation of row height from the user-provided value. */\n  @Input()\n  get rowHeight(): string | number { return this._rowHeight; }\n  set rowHeight(value: string | number) {\n    const newValue = `${value == null ? '' : value}`;\n\n    if (newValue !== this._rowHeight) {\n      this._rowHeight = newValue;\n      this._setTileStyler(this._rowHeight);\n    }\n  }\n\n  ngOnInit() {\n    this._checkCols();\n    this._checkRowHeight();\n  }\n\n  /**\n   * The layout calculation is fairly cheap if nothing changes, so there's little cost\n   * to run it frequently.\n   */\n  ngAfterContentChecked() {\n    this._layoutTiles();\n  }\n\n  /** Throw a friendly error if cols property is missing */\n  private _checkCols() {\n    if (!this.cols) {\n      throw Error(`mat-grid-list: must pass in number of columns. ` +\n                  `Example: <mat-grid-list cols=\"3\">`);\n    }\n  }\n\n  /** Default to equal width:height if rowHeight property is missing */\n  private _checkRowHeight(): void {\n    if (!this._rowHeight) {\n      this._setTileStyler('1:1');\n    }\n  }\n\n  /** Creates correct Tile Styler subtype based on rowHeight passed in by user */\n  private _setTileStyler(rowHeight: string): void {\n    if (this._tileStyler) {\n      this._tileStyler.reset(this);\n    }\n\n    if (rowHeight === MAT_FIT_MODE) {\n      this._tileStyler = new FitTileStyler();\n    } else if (rowHeight && rowHeight.indexOf(':') > -1) {\n      this._tileStyler = new RatioTileStyler(rowHeight);\n    } else {\n      this._tileStyler = new FixedTileStyler(rowHeight);\n    }\n  }\n\n  /** Computes and applies the size and position for all children grid tiles. */\n  private _layoutTiles(): void {\n    if (!this._tileCoordinator) {\n      this._tileCoordinator = new TileCoordinator();\n    }\n\n\n    const tracker = this._tileCoordinator;\n    const tiles = this._tiles.filter(tile => !tile._gridList || tile._gridList === this);\n    const direction = this._dir ? this._dir.value : 'ltr';\n\n    this._tileCoordinator.update(this.cols, tiles);\n    this._tileStyler.init(this.gutterSize, tracker, this.cols, direction);\n\n    tiles.forEach((tile, index) => {\n      const pos = tracker.positions[index];\n      this._tileStyler.setStyle(tile, pos.row, pos.col);\n    });\n\n    this._setListStyle(this._tileStyler.getComputedHeight());\n  }\n\n  /** Sets style on the main grid-list element, given the style name and value. */\n  _setListStyle(style: [string, string | null] | null): void {\n    if (style) {\n      (this._element.nativeElement.style as any)[style[0]] = style[1];\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatLineModule, MatCommonModule} from '@angular/material/core';\nimport {\n  MatGridTile, MatGridTileText, MatGridTileFooterCssMatStyler,\n  MatGridTileHeaderCssMatStyler, MatGridAvatarCssMatStyler\n} from './grid-tile';\nimport {MatGridList} from './grid-list';\n\n\n@NgModule({\n  imports: [MatLineModule, MatCommonModule],\n  exports: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatLineModule,\n    MatCommonModule,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n  declarations: [\n    MatGridList,\n    MatGridTile,\n    MatGridTileText,\n    MatGridTileHeaderCssMatStyler,\n    MatGridTileFooterCssMatStyler,\n    MatGridAvatarCssMatStyler\n  ],\n})\nexport class MatGridListModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Optional,\n  SecurityContext,\n  SkipSelf,\n} from '@angular/core';\nimport {DomSanitizer, SafeResourceUrl, SafeHtml} from '@angular/platform-browser';\nimport {forkJoin, Observable, of as observableOf, throwError as observableThrow} from 'rxjs';\nimport {catchError, finalize, map, share, tap} from 'rxjs/operators';\n\n\n/**\n * Returns an exception to be thrown in the case when attempting to\n * load an icon with a name that cannot be found.\n * @docs-private\n */\nexport function getMatIconNameNotFoundError(iconName: string): Error {\n  return Error(`Unable to find icon with the name \"${iconName}\"`);\n}\n\n\n/**\n * Returns an exception to be thrown when the consumer attempts to use\n * `<mat-icon>` without including @angular/http.\n * @docs-private\n */\nexport function getMatIconNoHttpProviderError(): Error {\n  return Error('Could not find HttpClient provider for use with Angular Material icons. ' +\n               'Please include the HttpClientModule from @angular/common/http in your ' +\n               'app imports.');\n}\n\n\n/**\n * Returns an exception to be thrown when a URL couldn't be sanitized.\n * @param url URL that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeUrlError(url: SafeResourceUrl): Error {\n  return Error(`The URL provided to MatIconRegistry was not trusted as a resource URL ` +\n               `via Angular's DomSanitizer. Attempted URL was \"${url}\".`);\n}\n\n/**\n * Returns an exception to be thrown when a HTML string couldn't be sanitized.\n * @param literal HTML that was attempted to be sanitized.\n * @docs-private\n */\nexport function getMatIconFailedToSanitizeLiteralError(literal: SafeHtml): Error {\n  return Error(`The literal provided to MatIconRegistry was not trusted as safe HTML by ` +\n               `Angular's DomSanitizer. Attempted literal was \"${literal}\".`);\n}\n\n\n/**\n * Configuration for an icon, including the URL and possibly the cached SVG element.\n * @docs-private\n */\nclass SvgIconConfig {\n  url: SafeResourceUrl | null;\n  svgElement: SVGElement | null;\n\n  constructor(url: SafeResourceUrl);\n  constructor(svgElement: SVGElement);\n  constructor(data: SafeResourceUrl | SVGElement) {\n    // Note that we can't use `instanceof SVGElement` here,\n    // because it'll break during server-side rendering.\n    if (!!(data as any).nodeName) {\n      this.svgElement = data as SVGElement;\n    } else {\n      this.url = data as SafeResourceUrl;\n    }\n  }\n}\n\n/**\n * Service to register and display icons used by the `<mat-icon>` component.\n * - Registers icon URLs by namespace and name.\n * - Registers icon set URLs by namespace.\n * - Registers aliases for CSS classes, for use with icon fonts.\n * - Loads icons from URLs and extracts individual icons from icon sets.\n */\n@Injectable({providedIn: 'root'})\nexport class MatIconRegistry {\n  private _document: Document;\n\n  /**\n   * URLs and cached SVG elements for individual icons. Keys are of the format \"[namespace]:[icon]\".\n   */\n  private _svgIconConfigs = new Map<string, SvgIconConfig>();\n\n  /**\n   * SvgIconConfig objects and cached SVG elements for icon sets, keyed by namespace.\n   * Multiple icon sets can be registered under the same namespace.\n   */\n  private _iconSetConfigs = new Map<string, SvgIconConfig[]>();\n\n  /** Cache for icons loaded by direct URLs. */\n  private _cachedIconsByUrl = new Map<string, SVGElement>();\n\n  /** In-progress icon fetches. Used to coalesce multiple requests to the same URL. */\n  private _inProgressUrlFetches = new Map<string, Observable<string>>();\n\n  /** Map from font identifiers to their CSS class names. Used for icon fonts. */\n  private _fontCssClassesByAlias = new Map<string, string>();\n\n  /**\n   * The CSS class to apply when an `<mat-icon>` component has no icon name, url, or font specified.\n   * The default 'material-icons' value assumes that the material icon font has been loaded as\n   * described at http://google.github.io/material-design-icons/#icon-font-for-the-web\n   */\n  private _defaultFontSetClass = 'material-icons';\n\n  constructor(\n    @Optional() private _httpClient: HttpClient,\n    private _sanitizer: DomSanitizer,\n    @Optional() @Inject(DOCUMENT) document: any) {\n      this._document = document;\n    }\n\n  /**\n   * Registers an icon by URL in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIcon(iconName: string, url: SafeResourceUrl): this {\n    return this.addSvgIconInNamespace('', iconName, url);\n  }\n\n  /**\n   * Registers an icon using an HTML string in the default namespace.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteral(iconName: string, literal: SafeHtml): this {\n    return this.addSvgIconLiteralInNamespace('', iconName, literal);\n  }\n\n  /**\n   * Registers an icon by URL in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param url\n   */\n  addSvgIconInNamespace(namespace: string, iconName: string, url: SafeResourceUrl): this {\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon using an HTML string in the specified namespace.\n   * @param namespace Namespace in which the icon should be registered.\n   * @param iconName Name under which the icon should be registered.\n   * @param literal SVG source of the icon.\n   */\n  addSvgIconLiteralInNamespace(namespace: string, iconName: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._createSvgElementForSingleIcon(sanitizedLiteral);\n    return this._addSvgIconConfig(namespace, iconName, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Registers an icon set by URL in the default namespace.\n   * @param url\n   */\n  addSvgIconSet(url: SafeResourceUrl): this {\n    return this.addSvgIconSetInNamespace('', url);\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the default namespace.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteral(literal: SafeHtml): this {\n    return this.addSvgIconSetLiteralInNamespace('', literal);\n  }\n\n  /**\n   * Registers an icon set by URL in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param url\n   */\n  addSvgIconSetInNamespace(namespace: string, url: SafeResourceUrl): this {\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(url));\n  }\n\n  /**\n   * Registers an icon set using an HTML string in the specified namespace.\n   * @param namespace Namespace in which to register the icon set.\n   * @param literal SVG source of the icon set.\n   */\n  addSvgIconSetLiteralInNamespace(namespace: string, literal: SafeHtml): this {\n    const sanitizedLiteral = this._sanitizer.sanitize(SecurityContext.HTML, literal);\n\n    if (!sanitizedLiteral) {\n      throw getMatIconFailedToSanitizeLiteralError(literal);\n    }\n\n    const svgElement = this._svgElementFromString(sanitizedLiteral);\n    return this._addSvgIconSetConfig(namespace, new SvgIconConfig(svgElement));\n  }\n\n  /**\n   * Defines an alias for a CSS class name to be used for icon fonts. Creating an matIcon\n   * component with the alias as the fontSet input will cause the class name to be applied\n   * to the `<mat-icon>` element.\n   *\n   * @param alias Alias for the font.\n   * @param className Class name override to be used instead of the alias.\n   */\n  registerFontClassAlias(alias: string, className: string = alias): this {\n    this._fontCssClassesByAlias.set(alias, className);\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name associated with the alias by a previous call to\n   * registerFontClassAlias. If no CSS class has been associated, returns the alias unmodified.\n   */\n  classNameForFontAlias(alias: string): string {\n    return this._fontCssClassesByAlias.get(alias) || alias;\n  }\n\n  /**\n   * Sets the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   *\n   * @param className\n   */\n  setDefaultFontSetClass(className: string): this {\n    this._defaultFontSetClass = className;\n    return this;\n  }\n\n  /**\n   * Returns the CSS class name to be used for icon fonts when an `<mat-icon>` component does not\n   * have a fontSet input value, and is not loading an icon by name or URL.\n   */\n  getDefaultFontSetClass(): string {\n    return this._defaultFontSetClass;\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) from the given URL.\n   * The response from the URL may be cached so this will not always cause an HTTP request, but\n   * the produced element will always be a new copy of the originally fetched icon. (That is,\n   * it will not contain any modifications made to elements previously returned).\n   *\n   * @param safeUrl URL from which to fetch the SVG icon.\n   */\n  getSvgIconFromUrl(safeUrl: SafeResourceUrl): Observable<SVGElement> {\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    const cachedIcon = this._cachedIconsByUrl.get(url);\n\n    if (cachedIcon) {\n      return observableOf(cloneSvg(cachedIcon));\n    }\n\n    return this._loadSvgIconFromConfig(new SvgIconConfig(safeUrl)).pipe(\n      tap(svg => this._cachedIconsByUrl.set(url!, svg)),\n      map(svg => cloneSvg(svg)),\n    );\n  }\n\n  /**\n   * Returns an Observable that produces the icon (as an `<svg>` DOM element) with the given name\n   * and namespace. The icon must have been previously registered with addIcon or addIconSet;\n   * if not, the Observable will throw an error.\n   *\n   * @param name Name of the icon to be retrieved.\n   * @param namespace Namespace in which to look for the icon.\n   */\n  getNamedSvgIcon(name: string, namespace: string = ''): Observable<SVGElement> {\n    // Return (copy of) cached icon if possible.\n    const key = iconKey(namespace, name);\n    const config = this._svgIconConfigs.get(key);\n\n    if (config) {\n      return this._getSvgFromConfig(config);\n    }\n\n    // See if we have any icon sets registered for the namespace.\n    const iconSetConfigs = this._iconSetConfigs.get(namespace);\n\n    if (iconSetConfigs) {\n      return this._getSvgFromIconSetConfigs(name, iconSetConfigs);\n    }\n\n    return observableThrow(getMatIconNameNotFoundError(key));\n  }\n\n  /**\n   * Returns the cached icon for a SvgIconConfig if available, or fetches it from its URL if not.\n   */\n  private _getSvgFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    if (config.svgElement) {\n      // We already have the SVG element for this icon, return a copy.\n      return observableOf(cloneSvg(config.svgElement));\n    } else {\n      // Fetch the icon from the config's URL, cache it, and return a copy.\n      return this._loadSvgIconFromConfig(config).pipe(\n        tap(svg => config.svgElement = svg),\n        map(svg => cloneSvg(svg)),\n      );\n    }\n  }\n\n  /**\n   * Attempts to find an icon with the specified name in any of the SVG icon sets.\n   * First searches the available cached icons for a nested element with a matching name, and\n   * if found copies the element to a new `<svg>` element. If not found, fetches all icon sets\n   * that have not been cached, and searches again after all fetches are completed.\n   * The returned Observable produces the SVG element if possible, and throws\n   * an error if no icon with the specified name can be found.\n   */\n  private _getSvgFromIconSetConfigs(name: string, iconSetConfigs: SvgIconConfig[]):\n      Observable<SVGElement> {\n    // For all the icon set SVG elements we've fetched, see if any contain an icon with the\n    // requested name.\n    const namedIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n    if (namedIcon) {\n      // We could cache namedIcon in _svgIconConfigs, but since we have to make a copy every\n      // time anyway, there's probably not much advantage compared to just always extracting\n      // it from the icon set.\n      return observableOf(namedIcon);\n    }\n\n    // Not found in any cached icon sets. If there are icon sets with URLs that we haven't\n    // fetched, fetch them now and look for iconName in the results.\n    const iconSetFetchRequests: Observable<SVGElement | null>[] = iconSetConfigs\n      .filter(iconSetConfig => !iconSetConfig.svgElement)\n      .map(iconSetConfig => {\n        return this._loadSvgIconSetFromConfig(iconSetConfig).pipe(\n          catchError((err: HttpErrorResponse): Observable<SVGElement | null> => {\n            const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, iconSetConfig.url);\n\n            // Swallow errors fetching individual URLs so the\n            // combined Observable won't necessarily fail.\n            console.error(`Loading icon set URL: ${url} failed: ${err.message}`);\n            return observableOf(null);\n          })\n        );\n      });\n\n    // Fetch all the icon set URLs. When the requests complete, every IconSet should have a\n    // cached SVG element (unless the request failed), and we can check again for the icon.\n    return forkJoin(iconSetFetchRequests).pipe(map(() => {\n      const foundIcon = this._extractIconWithNameFromAnySet(name, iconSetConfigs);\n\n      if (!foundIcon) {\n        throw getMatIconNameNotFoundError(name);\n      }\n\n      return foundIcon;\n    }));\n  }\n\n  /**\n   * Searches the cached SVG elements for the given icon sets for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractIconWithNameFromAnySet(iconName: string, iconSetConfigs: SvgIconConfig[]):\n      SVGElement | null {\n    // Iterate backwards, so icon sets added later have precedence.\n    for (let i = iconSetConfigs.length - 1; i >= 0; i--) {\n      const config = iconSetConfigs[i];\n      if (config.svgElement) {\n        const foundIcon = this._extractSvgIconFromSet(config.svgElement, iconName);\n        if (foundIcon) {\n          return foundIcon;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Loads the content of the icon URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    return this._fetchUrl(config.url)\n        .pipe(map(svgText => this._createSvgElementForSingleIcon(svgText)));\n  }\n\n  /**\n   * Loads the content of the icon set URL specified in the SvgIconConfig and creates an SVG element\n   * from it.\n   */\n  private _loadSvgIconSetFromConfig(config: SvgIconConfig): Observable<SVGElement> {\n    // If the SVG for this icon set has already been parsed, do nothing.\n    if (config.svgElement) {\n      return observableOf(config.svgElement);\n    }\n\n    return this._fetchUrl(config.url).pipe(map(svgText => {\n      // It is possible that the icon set was parsed and cached by an earlier request, so parsing\n      // only needs to occur if the cache is yet unset.\n      if (!config.svgElement) {\n        config.svgElement = this._svgElementFromString(svgText);\n      }\n\n      return config.svgElement;\n    }));\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string, and adds default attributes.\n   */\n  private _createSvgElementForSingleIcon(responseText: string): SVGElement {\n    const svg = this._svgElementFromString(responseText);\n    this._setSvgAttributes(svg);\n    return svg;\n  }\n\n  /**\n   * Searches the cached element of the given SvgIconConfig for a nested icon element whose \"id\"\n   * tag matches the specified name. If found, copies the nested element to a new SVG element and\n   * returns it. Returns null if no matching element is found.\n   */\n  private _extractSvgIconFromSet(iconSet: SVGElement, iconName: string): SVGElement | null {\n    const iconSource = iconSet.querySelector('#' + iconName);\n\n    if (!iconSource) {\n      return null;\n    }\n\n    // Clone the element and remove the ID to prevent multiple elements from being added\n    // to the page with the same ID.\n    const iconElement = iconSource.cloneNode(true) as Element;\n    iconElement.removeAttribute('id');\n\n    // If the icon node is itself an <svg> node, clone and return it directly. If not, set it as\n    // the content of a new <svg> node.\n    if (iconElement.nodeName.toLowerCase() === 'svg') {\n      return this._setSvgAttributes(iconElement as SVGElement);\n    }\n\n    // If the node is a <symbol>, it won't be rendered so we have to convert it into <svg>. Note\n    // that the same could be achieved by referring to it via <use href=\"#id\">, however the <use>\n    // tag is problematic on Firefox, because it needs to include the current page path.\n    if (iconElement.nodeName.toLowerCase() === 'symbol') {\n      return this._setSvgAttributes(this._toSvgElement(iconElement));\n    }\n\n    // createElement('SVG') doesn't work as expected; the DOM ends up with\n    // the correct nodes, but the SVG content doesn't render. Instead we\n    // have to create an empty SVG node using innerHTML and append its content.\n    // Elements created using DOMParser.parseFromString have the same problem.\n    // http://stackoverflow.com/questions/23003278/svg-innerhtml-in-firefox-can-not-display\n    const svg = this._svgElementFromString('<svg></svg>');\n    // Clone the node so we don't remove it from the parent icon set element.\n    svg.appendChild(iconElement);\n\n    return this._setSvgAttributes(svg);\n  }\n\n  /**\n   * Creates a DOM element from the given SVG string.\n   */\n  private _svgElementFromString(str: string): SVGElement {\n    const div = this._document.createElement('DIV');\n    div.innerHTML = str;\n    const svg = div.querySelector('svg') as SVGElement;\n\n    if (!svg) {\n      throw Error('<svg> tag not found');\n    }\n\n    return svg;\n  }\n\n  /**\n   * Converts an element into an SVG node by cloning all of its children.\n   */\n  private _toSvgElement(element: Element): SVGElement {\n    let svg = this._svgElementFromString('<svg></svg>');\n\n    for (let i = 0; i < element.childNodes.length; i++) {\n      if (element.childNodes[i].nodeType === this._document.ELEMENT_NODE) {\n        svg.appendChild(element.childNodes[i].cloneNode(true));\n      }\n    }\n\n    return svg;\n  }\n\n  /**\n   * Sets the default attributes for an SVG element to be used as an icon.\n   */\n  private _setSvgAttributes(svg: SVGElement): SVGElement {\n    svg.setAttribute('fit', '');\n    svg.setAttribute('height', '100%');\n    svg.setAttribute('width', '100%');\n    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n    svg.setAttribute('focusable', 'false'); // Disable IE11 default behavior to make SVGs focusable.\n    return svg;\n  }\n\n  /**\n   * Returns an Observable which produces the string contents of the given URL. Results may be\n   * cached, so future calls with the same URL may not cause another HTTP request.\n   */\n  private _fetchUrl(safeUrl: SafeResourceUrl | null): Observable<string> {\n    if (!this._httpClient) {\n      throw getMatIconNoHttpProviderError();\n    }\n\n    if (safeUrl == null) {\n      throw Error(`Cannot fetch icon from URL \"${safeUrl}\".`);\n    }\n\n    const url = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);\n\n    if (!url) {\n      throw getMatIconFailedToSanitizeUrlError(safeUrl);\n    }\n\n    // Store in-progress fetches to avoid sending a duplicate request for a URL when there is\n    // already a request in progress for that URL. It's necessary to call share() on the\n    // Observable returned by http.get() so that multiple subscribers don't cause multiple XHRs.\n    const inProgressFetch = this._inProgressUrlFetches.get(url);\n\n    if (inProgressFetch) {\n      return inProgressFetch;\n    }\n\n    // TODO(jelbourn): for some reason, the `finalize` operator \"loses\" the generic type on the\n    // Observable. Figure out why and fix it.\n    const req = this._httpClient.get(url, {responseType: 'text'}).pipe(\n      finalize(() => this._inProgressUrlFetches.delete(url)),\n      share(),\n    );\n\n    this._inProgressUrlFetches.set(url, req);\n    return req;\n  }\n\n  /**\n   * Registers an icon config by name in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param iconName Name under which to register the config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconConfig(namespace: string, iconName: string, config: SvgIconConfig): this {\n    this._svgIconConfigs.set(iconKey(namespace, iconName), config);\n    return this;\n  }\n\n  /**\n   * Registers an icon set config in the specified namespace.\n   * @param namespace Namespace in which to register the icon config.\n   * @param config Config to be registered.\n   */\n  private _addSvgIconSetConfig(namespace: string, config: SvgIconConfig): this {\n    const configNamespace = this._iconSetConfigs.get(namespace);\n\n    if (configNamespace) {\n      configNamespace.push(config);\n    } else {\n      this._iconSetConfigs.set(namespace, [config]);\n    }\n\n    return this;\n  }\n}\n\n/** @docs-private */\nexport function ICON_REGISTRY_PROVIDER_FACTORY(\n  parentRegistry: MatIconRegistry,\n  httpClient: HttpClient,\n  sanitizer: DomSanitizer,\n  document?: any) {\n  return parentRegistry || new MatIconRegistry(httpClient, sanitizer, document);\n}\n\n/** @docs-private */\nexport const ICON_REGISTRY_PROVIDER = {\n  // If there is already an MatIconRegistry available, use that. Otherwise, provide a new one.\n  provide: MatIconRegistry,\n  deps: [\n    [new Optional(), new SkipSelf(), MatIconRegistry],\n    [new Optional(), HttpClient],\n    DomSanitizer,\n    [new Optional(), DOCUMENT as InjectionToken<any>],\n  ],\n  useFactory: ICON_REGISTRY_PROVIDER_FACTORY,\n};\n\n/** Clones an SVGElement while preserving type information. */\nfunction cloneSvg(svg: SVGElement): SVGElement {\n  return svg.cloneNode(true) as SVGElement;\n}\n\n/** Returns the cache key to use for an icon namespace and name. */\nfunction iconKey(namespace: string, name: string) {\n  return namespace + ':' + name;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {take} from 'rxjs/operators';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  Input,\n  OnChanges,\n  OnInit,\n  SimpleChanges,\n  ViewEncapsulation,\n  Optional,\n  InjectionToken,\n  inject,\n  Inject,\n  OnDestroy,\n  AfterViewChecked,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {CanColor, CanColorCtor, mixinColor} from '@angular/material/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {MatIconRegistry} from './icon-registry';\n\n\n// Boilerplate for applying mixins to MatIcon.\n/** @docs-private */\nexport class MatIconBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatIconMixinBase: CanColorCtor & typeof MatIconBase =\n    mixinColor(MatIconBase);\n\n/**\n * Injection token used to provide the current location to `MatIcon`.\n * Used to handle server-side rendering and to stub out during unit tests.\n * @docs-private\n */\nexport const MAT_ICON_LOCATION = new InjectionToken<MatIconLocation>('mat-icon-location', {\n  providedIn: 'root',\n  factory: MAT_ICON_LOCATION_FACTORY\n});\n\n/**\n * Stubbed out location for `MatIcon`.\n * @docs-private\n */\nexport interface MatIconLocation {\n  getPathname: () => string;\n}\n\n/** @docs-private */\nexport function MAT_ICON_LOCATION_FACTORY(): MatIconLocation {\n  const _document = inject(DOCUMENT);\n  const _location = _document ? _document.location : null;\n\n  return {\n    // Note that this needs to be a function, rather than a property, because Angular\n    // will only resolve it once, but we want the current path on each call.\n    getPathname: () => _location ? (_location.pathname + _location.search) : ''\n  };\n}\n\n\n/** SVG attributes that accept a FuncIRI (e.g. `url(<something>)`). */\nconst funcIriAttributes = [\n  'clip-path',\n  'color-profile',\n  'src',\n  'cursor',\n  'fill',\n  'filter',\n  'marker',\n  'marker-start',\n  'marker-mid',\n  'marker-end',\n  'mask',\n  'stroke'\n];\n\n/** Selector that can be used to find all elements that are using a `FuncIRI`. */\nconst funcIriAttributeSelector = funcIriAttributes.map(attr => `[${attr}]`).join(', ');\n\n/** Regex that can be used to extract the id out of a FuncIRI. */\nconst funcIriPattern = /^url\\(['\"]?#(.*?)['\"]?\\)$/;\n\n/**\n * Component to display an icon. It can be used in the following ways:\n *\n * - Specify the svgIcon input to load an SVG icon from a URL previously registered with the\n *   addSvgIcon, addSvgIconInNamespace, addSvgIconSet, or addSvgIconSetInNamespace methods of\n *   MatIconRegistry. If the svgIcon value contains a colon it is assumed to be in the format\n *   \"[namespace]:[name]\", if not the value will be the name of an icon in the default namespace.\n *   Examples:\n *     `<mat-icon svgIcon=\"left-arrow\"></mat-icon>\n *     <mat-icon svgIcon=\"animals:cat\"></mat-icon>`\n *\n * - Use a font ligature as an icon by putting the ligature text in the content of the `<mat-icon>`\n *   component. By default the Material icons font is used as described at\n *   http://google.github.io/material-design-icons/#icon-font-for-the-web. You can specify an\n *   alternate font by setting the fontSet input to either the CSS class to apply to use the\n *   desired font, or to an alias previously registered with MatIconRegistry.registerFontClassAlias.\n *   Examples:\n *     `<mat-icon>home</mat-icon>\n *     <mat-icon fontSet=\"myfont\">sun</mat-icon>`\n *\n * - Specify a font glyph to be included via CSS rules by setting the fontSet input to specify the\n *   font, and the fontIcon input to specify the icon. Typically the fontIcon will specify a\n *   CSS class which causes the glyph to be displayed via a :before selector, as in\n *   https://fortawesome.github.io/Font-Awesome/examples/\n *   Example:\n *     `<mat-icon fontSet=\"fa\" fontIcon=\"alarm\"></mat-icon>`\n */\n@Component({\n  moduleId: module.id,\n  template: '<ng-content></ng-content>',\n  selector: 'mat-icon',\n  exportAs: 'matIcon',\n  styleUrls: ['icon.css'],\n  inputs: ['color'],\n  host: {\n    'role': 'img',\n    'class': 'mat-icon',\n    '[class.mat-icon-inline]': 'inline',\n  },\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatIcon extends _MatIconMixinBase implements OnChanges, OnInit, AfterViewChecked,\n  CanColor, OnDestroy {\n\n  /**\n   * Whether the icon should be inlined, automatically sizing the icon to match the font size of\n   * the element the icon is contained in.\n   */\n  @Input()\n  get inline(): boolean {\n    return this._inline;\n  }\n  set inline(inline: boolean) {\n    this._inline = coerceBooleanProperty(inline);\n  }\n  private _inline: boolean = false;\n\n  /** Name of the icon in the SVG icon set. */\n  @Input() svgIcon: string;\n\n  /** Font set that the icon is a part of. */\n  @Input()\n  get fontSet(): string { return this._fontSet; }\n  set fontSet(value: string) {\n    this._fontSet = this._cleanupFontValue(value);\n  }\n  private _fontSet: string;\n\n  /** Name of an icon within a font set. */\n  @Input()\n  get fontIcon(): string { return this._fontIcon; }\n  set fontIcon(value: string) {\n    this._fontIcon = this._cleanupFontValue(value);\n  }\n  private _fontIcon: string;\n\n  private _previousFontSetClass: string;\n  private _previousFontIconClass: string;\n\n  /** Keeps track of the current page path. */\n  private _previousPath?: string;\n\n  /** Keeps track of the elements and attributes that we've prefixed with the current path. */\n  private _elementsWithExternalReferences?: Map<Element, {name: string, value: string}[]>;\n\n  constructor(\n      elementRef: ElementRef<HTMLElement>,\n      private _iconRegistry: MatIconRegistry,\n      @Attribute('aria-hidden') ariaHidden: string,\n      /**\n       * @deprecated `location` parameter to be made required.\n       * @breaking-change 8.0.0\n       */\n      @Optional() @Inject(MAT_ICON_LOCATION) private _location?: MatIconLocation) {\n    super(elementRef);\n\n    // If the user has not explicitly set aria-hidden, mark the icon as hidden, as this is\n    // the right thing to do for the majority of icon use-cases.\n    if (!ariaHidden) {\n      elementRef.nativeElement.setAttribute('aria-hidden', 'true');\n    }\n  }\n\n  /**\n   * Splits an svgIcon binding value into its icon set and icon name components.\n   * Returns a 2-element array of [(icon set), (icon name)].\n   * The separator for the two fields is ':'. If there is no separator, an empty\n   * string is returned for the icon set and the entire value is returned for\n   * the icon name. If the argument is falsy, returns an array of two empty strings.\n   * Throws an error if the name contains two or more ':' separators.\n   * Examples:\n   *   `'social:cake' -> ['social', 'cake']\n   *   'penguin' -> ['', 'penguin']\n   *   null -> ['', '']\n   *   'a:b:c' -> (throws Error)`\n   */\n  private _splitIconName(iconName: string): [string, string] {\n    if (!iconName) {\n      return ['', ''];\n    }\n    const parts = iconName.split(':');\n    switch (parts.length) {\n      case 1: return ['', parts[0]]; // Use default namespace.\n      case 2: return <[string, string]>parts;\n      default: throw Error(`Invalid icon name: \"${iconName}\"`);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // Only update the inline SVG icon if the inputs changed, to avoid unnecessary DOM operations.\n    if (changes.svgIcon) {\n      if (this.svgIcon) {\n        const [namespace, iconName] = this._splitIconName(this.svgIcon);\n\n        this._iconRegistry.getNamedSvgIcon(iconName, namespace).pipe(take(1)).subscribe(\n          svg => this._setSvgElement(svg),\n          (err: Error) => console.log(`Error retrieving icon: ${err.message}`)\n        );\n      } else {\n        this._clearSvgElement();\n      }\n    }\n\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngOnInit() {\n    // Update font classes because ngOnChanges won't be called if none of the inputs are present,\n    // e.g. <mat-icon>arrow</mat-icon> In this case we need to add a CSS class for the default font.\n    if (this._usingFontIcon()) {\n      this._updateFontIconClasses();\n    }\n  }\n\n  ngAfterViewChecked() {\n    const cachedElements = this._elementsWithExternalReferences;\n\n    if (cachedElements && this._location && cachedElements.size) {\n      const newPath = this._location.getPathname();\n\n      // We need to check whether the URL has changed on each change detection since\n      // the browser doesn't have an API that will let us react on link clicks and\n      // we can't depend on the Angular router. The references need to be updated,\n      // because while most browsers don't care whether the URL is correct after\n      // the first render, Safari will break if the user navigates to a different\n      // page and the SVG isn't re-rendered.\n      if (newPath !== this._previousPath) {\n        this._previousPath = newPath;\n        this._prependPathToReferences(newPath);\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n  }\n\n  private _usingFontIcon(): boolean {\n    return !this.svgIcon;\n  }\n\n  private _setSvgElement(svg: SVGElement) {\n    this._clearSvgElement();\n\n    // Workaround for IE11 and Edge ignoring `style` tags inside dynamically-created SVGs.\n    // See: https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10898469/\n    // Do this before inserting the element into the DOM, in order to avoid a style recalculation.\n    const styleTags = svg.querySelectorAll('style') as NodeListOf<HTMLStyleElement>;\n\n    for (let i = 0; i < styleTags.length; i++) {\n      styleTags[i].textContent += ' ';\n    }\n\n    // Note: we do this fix here, rather than the icon registry, because the\n    // references have to point to the URL at the time that the icon was created.\n    if (this._location) {\n      const path = this._location.getPathname();\n      this._previousPath = path;\n      this._cacheChildrenWithExternalReferences(svg);\n      this._prependPathToReferences(path);\n    }\n\n    this._elementRef.nativeElement.appendChild(svg);\n  }\n\n  private _clearSvgElement() {\n    const layoutElement: HTMLElement = this._elementRef.nativeElement;\n    let childCount = layoutElement.childNodes.length;\n\n    if (this._elementsWithExternalReferences) {\n      this._elementsWithExternalReferences.clear();\n    }\n\n    // Remove existing non-element child nodes and SVGs, and add the new SVG element. Note that\n    // we can't use innerHTML, because IE will throw if the element has a data binding.\n    while (childCount--) {\n      const child = layoutElement.childNodes[childCount];\n\n      // 1 corresponds to Node.ELEMENT_NODE. We remove all non-element nodes in order to get rid\n      // of any loose text nodes, as well as any SVG elements in order to remove any old icons.\n      if (child.nodeType !== 1 || child.nodeName.toLowerCase() === 'svg') {\n        layoutElement.removeChild(child);\n      }\n    }\n  }\n\n  private _updateFontIconClasses() {\n    if (!this._usingFontIcon()) {\n      return;\n    }\n\n    const elem: HTMLElement = this._elementRef.nativeElement;\n    const fontSetClass = this.fontSet ?\n        this._iconRegistry.classNameForFontAlias(this.fontSet) :\n        this._iconRegistry.getDefaultFontSetClass();\n\n    if (fontSetClass != this._previousFontSetClass) {\n      if (this._previousFontSetClass) {\n        elem.classList.remove(this._previousFontSetClass);\n      }\n      if (fontSetClass) {\n        elem.classList.add(fontSetClass);\n      }\n      this._previousFontSetClass = fontSetClass;\n    }\n\n    if (this.fontIcon != this._previousFontIconClass) {\n      if (this._previousFontIconClass) {\n        elem.classList.remove(this._previousFontIconClass);\n      }\n      if (this.fontIcon) {\n        elem.classList.add(this.fontIcon);\n      }\n      this._previousFontIconClass = this.fontIcon;\n    }\n  }\n\n  /**\n   * Cleans up a value to be used as a fontIcon or fontSet.\n   * Since the value ends up being assigned as a CSS class, we\n   * have to trim the value and omit space-separated values.\n   */\n  private _cleanupFontValue(value: string) {\n    return typeof value === 'string' ? value.trim().split(' ')[0] : value;\n  }\n\n  /**\n   * Prepends the current path to all elements that have an attribute pointing to a `FuncIRI`\n   * reference. This is required because WebKit browsers require references to be prefixed with\n   * the current path, if the page has a `base` tag.\n   */\n  private _prependPathToReferences(path: string) {\n    const elements = this._elementsWithExternalReferences;\n\n    if (elements) {\n      elements.forEach((attrs, element) => {\n        attrs.forEach(attr => {\n          element.setAttribute(attr.name, `url('${path}#${attr.value}')`);\n        });\n      });\n    }\n  }\n\n  /**\n   * Caches the children of an SVG element that have `url()`\n   * references that we need to prefix with the current path.\n   */\n  private _cacheChildrenWithExternalReferences(element: SVGElement) {\n    const elementsWithFuncIri = element.querySelectorAll(funcIriAttributeSelector);\n    const elements = this._elementsWithExternalReferences =\n        this._elementsWithExternalReferences || new Map();\n\n    for (let i = 0; i < elementsWithFuncIri.length; i++) {\n      funcIriAttributes.forEach(attr => {\n        const elementWithReference = elementsWithFuncIri[i];\n        const value = elementWithReference.getAttribute(attr);\n        const match = value ? value.match(funcIriPattern) : null;\n\n        if (match) {\n          let attributes = elements.get(elementWithReference);\n\n          if (!attributes) {\n            attributes = [];\n            elements.set(elementWithReference, attributes);\n          }\n\n          attributes!.push({name: attr, value: match[1]});\n        }\n      });\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatIcon} from './icon';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatIcon, MatCommonModule],\n  declarations: [MatIcon],\n})\nexport class MatIconModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ESCAPE, UP_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayRef,\n  PositionStrategy,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ComponentRef,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  DateAdapter,\n  mixinColor,\n  ThemePalette,\n} from '@angular/material/core';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {merge, Subject, Subscription} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatCalendar} from './calendar';\nimport {matDatepickerAnimations} from './datepicker-animations';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/** Used to generate a unique ID for each datepicker instance. */\nlet datepickerUid = 0;\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-datepicker-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.reposition();\n}\n\n/** @docs-private */\nexport const MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY,\n};\n\n// Boilerplate for applying mixins to MatDatepickerContent.\n/** @docs-private */\nexport class MatDatepickerContentBase {\n  constructor(public _elementRef: ElementRef) { }\n}\nexport const _MatDatepickerContentMixinBase: CanColorCtor & typeof MatDatepickerContentBase =\n    mixinColor(MatDatepickerContentBase);\n\n/**\n * Component used as the content for the datepicker dialog and popup. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the popup that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-content',\n  templateUrl: 'datepicker-content.html',\n  styleUrls: ['datepicker-content.css'],\n  host: {\n    'class': 'mat-datepicker-content',\n    '[@transformPanel]': '\"enter\"',\n    '[class.mat-datepicker-content-touch]': 'datepicker.touchUi',\n  },\n  animations: [\n    matDatepickerAnimations.transformPanel,\n    matDatepickerAnimations.fadeInCalendar,\n  ],\n  exportAs: 'matDatepickerContent',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['color'],\n})\nexport class MatDatepickerContent<D> extends _MatDatepickerContentMixinBase\n  implements AfterViewInit, CanColor {\n\n  /** Reference to the internal calendar component. */\n  @ViewChild(MatCalendar) _calendar: MatCalendar<D>;\n\n  /** Reference to the datepicker that created the overlay. */\n  datepicker: MatDatepicker<D>;\n\n  /** Whether the datepicker is above or below the input. */\n  _isAbove: boolean;\n\n  constructor(elementRef: ElementRef) {\n    super(elementRef);\n  }\n\n  ngAfterViewInit() {\n    this._calendar.focusActiveCell();\n  }\n}\n\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker',\n  template: '',\n  exportAs: 'matDatepicker',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n})\nexport class MatDatepicker<D> implements OnDestroy, CanColor {\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** An input indicating the type of the custom header component for the calendar, if set. */\n  @Input() calendarHeaderComponent: ComponentType<any>;\n\n  /** The date to open the calendar to initially. */\n  @Input()\n  get startAt(): D | null {\n    // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n    // selected value is.\n    return this._startAt || (this._datepickerInput ? this._datepickerInput.value : null);\n  }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** The view that the calendar should start in. */\n  @Input() startView: 'month' | 'year' | 'multi-year' = 'month';\n\n  /** Color palette to use on the datepicker's calendar. */\n  @Input()\n  get color(): ThemePalette {\n    return this._color ||\n        (this._datepickerInput ? this._datepickerInput._getThemePalette() : undefined);\n  }\n  set color(value: ThemePalette) {\n    this._color = value;\n  }\n  _color: ThemePalette;\n\n  /**\n   * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n   * than a popup and elements have more padding to allow for bigger touch targets.\n   */\n  @Input()\n  get touchUi(): boolean { return this._touchUi; }\n  set touchUi(value: boolean) {\n    this._touchUi = coerceBooleanProperty(value);\n  }\n  private _touchUi = false;\n\n  /** Whether the datepicker pop-up should be disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined && this._datepickerInput ?\n        this._datepickerInput.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._disabledChange.next(newValue);\n    }\n  }\n  private _disabled: boolean;\n\n  /**\n   * Emits selected year in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits selected month in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Classes to be passed to the date picker panel. Supports the same syntax as `ngClass`. */\n  @Input() panelClass: string | string[];\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the datepicker has been opened. */\n  @Output('opened') openedStream: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when the datepicker has been closed. */\n  @Output('closed') closedStream: EventEmitter<void> = new EventEmitter<void>();\n\n\n  /** Whether the calendar is open. */\n  @Input()\n  get opened(): boolean { return this._opened; }\n  set opened(value: boolean) { value ? this.open() : this.close(); }\n  private _opened = false;\n\n  /** The id for the datepicker calendar. */\n  id: string = `mat-datepicker-${datepickerUid++}`;\n\n  /** The currently selected date. */\n  get _selected(): D | null { return this._validSelected; }\n  set _selected(value: D | null) { this._validSelected = value; }\n  private _validSelected: D | null = null;\n\n  /** The minimum selectable date. */\n  get _minDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.min;\n  }\n\n  /** The maximum selectable date. */\n  get _maxDate(): D | null {\n    return this._datepickerInput && this._datepickerInput.max;\n  }\n\n  get _dateFilter(): (date: D | null) => boolean {\n    return this._datepickerInput && this._datepickerInput._dateFilter;\n  }\n\n  /** A reference to the overlay when the calendar is opened as a popup. */\n  _popupRef: OverlayRef;\n\n  /** A reference to the dialog when the calendar is opened as a dialog. */\n  private _dialogRef: MatDialogRef<MatDatepickerContent<D>> | null;\n\n  /** A portal containing the calendar for this datepicker. */\n  private _calendarPortal: ComponentPortal<MatDatepickerContent<D>>;\n\n  /** Reference to the component instantiated in popup mode. */\n  private _popupComponentRef: ComponentRef<MatDatepickerContent<D>> | null;\n\n  /** The element that was focused before the datepicker was opened. */\n  private _focusedElementBeforeOpen: HTMLElement | null = null;\n\n  /** Subscription to value changes in the associated input element. */\n  private _inputSubscription = Subscription.EMPTY;\n\n  /** The input element this datepicker is associated with. */\n  _datepickerInput: MatDatepickerInput<D>;\n\n  /** Emits when the datepicker is disabled. */\n  readonly _disabledChange = new Subject<boolean>();\n\n  /** Emits new selected date when selected date changes. */\n  readonly _selectedChanged = new Subject<D>();\n\n  constructor(private _dialog: MatDialog,\n              private _overlay: Overlay,\n              private _ngZone: NgZone,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(MAT_DATEPICKER_SCROLL_STRATEGY) scrollStrategy: any,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir: Directionality,\n              @Optional() @Inject(DOCUMENT) private _document: any) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  ngOnDestroy() {\n    this.close();\n    this._inputSubscription.unsubscribe();\n    this._disabledChange.complete();\n\n    if (this._popupRef) {\n      this._popupRef.dispose();\n      this._popupComponentRef = null;\n    }\n  }\n\n  /** Selects the given date */\n  select(date: D): void {\n    let oldValue = this._selected;\n    this._selected = date;\n    if (!this._dateAdapter.sameDate(oldValue, this._selected)) {\n      this._selectedChanged.next(date);\n    }\n  }\n\n  /** Emits the selected year in multiyear view */\n  _selectYear(normalizedYear: D): void {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Emits selected month in year view */\n  _selectMonth(normalizedMonth: D): void {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  /**\n   * Register an input with this datepicker.\n   * @param input The datepicker input to register with this datepicker.\n   */\n  _registerInput(input: MatDatepickerInput<D>): void {\n    if (this._datepickerInput) {\n      throw Error('A MatDatepicker can only be associated with a single input.');\n    }\n    this._datepickerInput = input;\n    this._inputSubscription =\n        this._datepickerInput._valueChange.subscribe((value: D | null) => this._selected = value);\n  }\n\n  /** Open the calendar. */\n  open(): void {\n    if (this._opened || this.disabled) {\n      return;\n    }\n    if (!this._datepickerInput) {\n      throw Error('Attempted to open an MatDatepicker with no associated input.');\n    }\n    if (this._document) {\n      this._focusedElementBeforeOpen = this._document.activeElement;\n    }\n\n    this.touchUi ? this._openAsDialog() : this._openAsPopup();\n    this._opened = true;\n    this.openedStream.emit();\n  }\n\n  /** Close the calendar. */\n  close(): void {\n    if (!this._opened) {\n      return;\n    }\n    if (this._popupRef && this._popupRef.hasAttached()) {\n      this._popupRef.detach();\n    }\n    if (this._dialogRef) {\n      this._dialogRef.close();\n      this._dialogRef = null;\n    }\n    if (this._calendarPortal && this._calendarPortal.isAttached) {\n      this._calendarPortal.detach();\n    }\n\n    const completeClose = () => {\n      // The `_opened` could've been reset already if\n      // we got two events in quick succession.\n      if (this._opened) {\n        this._opened = false;\n        this.closedStream.emit();\n        this._focusedElementBeforeOpen = null;\n      }\n    };\n\n    if (this._focusedElementBeforeOpen &&\n      typeof this._focusedElementBeforeOpen.focus === 'function') {\n      // Because IE moves focus asynchronously, we can't count on it being restored before we've\n      // marked the datepicker as closed. If the event fires out of sequence and the element that\n      // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n      // able to close the calendar at all. We work around it by making the logic, that marks\n      // the datepicker as closed, async as well.\n      this._focusedElementBeforeOpen.focus();\n      setTimeout(completeClose);\n    } else {\n      completeClose();\n    }\n  }\n\n  /** Open the calendar as a dialog. */\n  private _openAsDialog(): void {\n    // Usually this would be handled by `open` which ensures that we can only have one overlay\n    // open at a time, however since we reset the variables in async handlers some overlays\n    // may slip through if the user opens and closes multiple times in quick succession (e.g.\n    // by holding down the enter key).\n    if (this._dialogRef) {\n      this._dialogRef.close();\n    }\n\n    this._dialogRef = this._dialog.open<MatDatepickerContent<D>>(MatDatepickerContent, {\n      direction: this._dir ? this._dir.value : 'ltr',\n      viewContainerRef: this._viewContainerRef,\n      panelClass: 'mat-datepicker-dialog',\n    });\n\n    this._dialogRef.afterClosed().subscribe(() => this.close());\n    this._dialogRef.componentInstance.datepicker = this;\n    this._setColor();\n  }\n\n  /** Open the calendar as a popup. */\n  private _openAsPopup(): void {\n    if (!this._calendarPortal) {\n      this._calendarPortal = new ComponentPortal<MatDatepickerContent<D>>(MatDatepickerContent,\n                                                                          this._viewContainerRef);\n    }\n\n    if (!this._popupRef) {\n      this._createPopup();\n    }\n\n    if (!this._popupRef.hasAttached()) {\n      this._popupComponentRef = this._popupRef.attach(this._calendarPortal);\n      this._popupComponentRef.instance.datepicker = this;\n      this._setColor();\n\n      // Update the position once the calendar has rendered.\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        this._popupRef.updatePosition();\n      });\n    }\n  }\n\n  /** Create the popup. */\n  private _createPopup(): void {\n    const overlayConfig = new OverlayConfig({\n      positionStrategy: this._createPopupPositionStrategy(),\n      hasBackdrop: true,\n      backdropClass: 'mat-overlay-transparent-backdrop',\n      direction: this._dir,\n      scrollStrategy: this._scrollStrategy(),\n      panelClass: 'mat-datepicker-popup',\n    });\n\n    this._popupRef = this._overlay.create(overlayConfig);\n    this._popupRef.overlayElement.setAttribute('role', 'dialog');\n\n    merge(\n      this._popupRef.backdropClick(),\n      this._popupRef.detachments(),\n      this._popupRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE ||\n               (this._datepickerInput && event.altKey && event.keyCode === UP_ARROW);\n      }))\n    ).subscribe(() => this.close());\n  }\n\n  /** Create the popup PositionStrategy. */\n  private _createPopupPositionStrategy(): PositionStrategy {\n    return this._overlay.position()\n      .flexibleConnectedTo(this._datepickerInput.getConnectedOverlayOrigin())\n      .withTransformOriginOn('.mat-datepicker-content')\n      .withFlexibleDimensions(false)\n      .withViewportMargin(8)\n      .withLockedPosition()\n      .withPositions([\n        {\n          originX: 'start',\n          originY: 'bottom',\n          overlayX: 'start',\n          overlayY: 'top'\n        },\n        {\n          originX: 'start',\n          originY: 'top',\n          overlayX: 'start',\n          overlayY: 'bottom'\n        },\n        {\n          originX: 'end',\n          originY: 'bottom',\n          overlayX: 'end',\n          overlayY: 'top'\n        },\n        {\n          originX: 'end',\n          originY: 'top',\n          overlayX: 'end',\n          overlayY: 'bottom'\n        }\n      ]);\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Passes the current theme color along to the calendar overlay. */\n  private _setColor(): void {\n    const color = this.color;\n    if (this._popupComponentRef) {\n      this._popupComponentRef.instance.color = color;\n    }\n    if (this._dialogRef) {\n      this._dialogRef.componentInstance.color = color;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOWN_ARROW} from '@angular/cdk/keycodes';\nimport {\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  AbstractControl,\n  ControlValueAccessor,\n  NG_VALIDATORS,\n  NG_VALUE_ACCESSOR,\n  ValidationErrors,\n  Validator,\n  ValidatorFn,\n  Validators,\n} from '@angular/forms';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats, ThemePalette} from '@angular/material/core';\nimport {MatFormField} from '@angular/material/form-field';\nimport {MAT_INPUT_VALUE_ACCESSOR} from '@angular/material/input';\nimport {Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n/** @docs-private */\nexport const MAT_DATEPICKER_VALIDATORS: any = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nexport class MatDatepickerInputEvent<D> {\n  /** The new value for the target datepicker input. */\n  value: D | null;\n\n  constructor(\n    /** Reference to the datepicker input component that emitted the event. */\n    public target: MatDatepickerInput<D>,\n    /** Reference to the native input element associated with the datepicker input. */\n    public targetElement: HTMLElement) {\n    this.value = this.target.value;\n  }\n}\n\n\n/** Directive used to connect an input to a MatDatepicker. */\n@Directive({\n  selector: 'input[matDatepicker]',\n  providers: [\n    MAT_DATEPICKER_VALUE_ACCESSOR,\n    MAT_DATEPICKER_VALIDATORS,\n    {provide: MAT_INPUT_VALUE_ACCESSOR, useExisting: MatDatepickerInput},\n  ],\n  host: {\n    '[attr.aria-haspopup]': 'true',\n    '[attr.aria-owns]': '(_datepicker?.opened && _datepicker.id) || null',\n    '[attr.min]': 'min ? _dateAdapter.toIso8601(min) : null',\n    '[attr.max]': 'max ? _dateAdapter.toIso8601(max) : null',\n    '[disabled]': 'disabled',\n    '(input)': '_onInput($event.target.value)',\n    '(change)': '_onChange()',\n    '(blur)': '_onBlur()',\n    '(keydown)': '_onKeydown($event)',\n  },\n  exportAs: 'matDatepickerInput',\n})\nexport class MatDatepickerInput<D> implements ControlValueAccessor, OnDestroy, Validator {\n  /** The datepicker that this input is associated with. */\n  @Input()\n  set matDatepicker(value: MatDatepicker<D>) {\n    if (!value) {\n      return;\n    }\n\n    this._datepicker = value;\n    this._datepicker._registerInput(this);\n    this._datepickerSubscription.unsubscribe();\n\n    this._datepickerSubscription = this._datepicker._selectedChanged.subscribe((selected: D) => {\n      this.value = selected;\n      this._cvaOnChange(selected);\n      this._onTouched();\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    });\n  }\n  _datepicker: MatDatepicker<D>;\n\n  /** Function that can be used to filter out dates within the datepicker. */\n  @Input()\n  set matDatepickerFilter(value: (date: D | null) => boolean) {\n    this._dateFilter = value;\n    this._validatorOnChange();\n  }\n  _dateFilter: (date: D | null) => boolean;\n\n  /** The value of the input. */\n  @Input()\n  get value(): D | null { return this._value; }\n  set value(value: D | null) {\n    value = this._dateAdapter.deserialize(value);\n    this._lastValueValid = !value || this._dateAdapter.isValid(value);\n    value = this._getValidDateOrNull(value);\n    const oldDate = this.value;\n    this._value = value;\n    this._formatValue(value);\n\n    if (!this._dateAdapter.sameDate(oldDate, value)) {\n      this._valueChange.emit(value);\n    }\n  }\n  private _value: D | null;\n\n  /** The minimum valid date. */\n  @Input()\n  get min(): D | null { return this._min; }\n  set min(value: D | null) {\n    this._min = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _min: D | null;\n\n  /** The maximum valid date. */\n  @Input()\n  get max(): D | null { return this._max; }\n  set max(value: D | null) {\n    this._max = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._validatorOnChange();\n  }\n  private _max: D | null;\n\n  /** Whether the datepicker-input is disabled. */\n  @Input()\n  get disabled(): boolean { return !!this._disabled; }\n  set disabled(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n    const element = this._elementRef.nativeElement;\n\n    if (this._disabled !== newValue) {\n      this._disabled = newValue;\n      this._disabledChange.emit(newValue);\n    }\n\n    // We need to null check the `blur` method, because it's undefined during SSR.\n    if (newValue && element.blur) {\n      // Normally, native input elements automatically blur if they turn disabled. This behavior\n      // is problematic, because it would mean that it triggers another change detection cycle,\n      // which then causes a changed after checked error if the input element was focused before.\n      element.blur();\n    }\n  }\n  private _disabled: boolean;\n\n  /** Emits when a `change` event is fired on this `<input>`. */\n  @Output() readonly dateChange: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when an `input` event is fired on this `<input>`. */\n  @Output() readonly dateInput: EventEmitter<MatDatepickerInputEvent<D>> =\n      new EventEmitter<MatDatepickerInputEvent<D>>();\n\n  /** Emits when the value changes (either due to user input or programmatic change). */\n  _valueChange = new EventEmitter<D | null>();\n\n  /** Emits when the disabled state has changed */\n  _disabledChange = new EventEmitter<boolean>();\n\n  _onTouched = () => {};\n\n  private _cvaOnChange: (value: any) => void = () => {};\n\n  private _validatorOnChange = () => {};\n\n  private _datepickerSubscription = Subscription.EMPTY;\n\n  private _localeSubscription = Subscription.EMPTY;\n\n  /** The form control validator for whether the input parses. */\n  private _parseValidator: ValidatorFn = (): ValidationErrors | null => {\n    return this._lastValueValid ?\n        null : {'matDatepickerParse': {'text': this._elementRef.nativeElement.value}};\n  }\n\n  /** The form control validator for the min date. */\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.min || !controlValue ||\n        this._dateAdapter.compareDate(this.min, controlValue) <= 0) ?\n        null : {'matDatepickerMin': {'min': this.min, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the max date. */\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return (!this.max || !controlValue ||\n        this._dateAdapter.compareDate(this.max, controlValue) >= 0) ?\n        null : {'matDatepickerMax': {'max': this.max, 'actual': controlValue}};\n  }\n\n  /** The form control validator for the date filter. */\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\n    const controlValue = this._getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n    return !this._dateFilter || !controlValue || this._dateFilter(controlValue) ?\n        null : {'matDatepickerFilter': true};\n  }\n\n  /** The combined form control validator for this input. */\n  private _validator: ValidatorFn | null =\n      Validators.compose(\n          [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator]);\n\n  /** Whether the last value set on the input was valid. */\n  private _lastValueValid = false;\n\n  constructor(\n      private _elementRef: ElementRef<HTMLInputElement>,\n      @Optional() public _dateAdapter: DateAdapter<D>,\n      @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n      @Optional() private _formField: MatFormField) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    // Update the displayed date when the locale changes.\n    this._localeSubscription = _dateAdapter.localeChanges.subscribe(() => {\n      this.value = this.value;\n    });\n  }\n\n  ngOnDestroy() {\n    this._datepickerSubscription.unsubscribe();\n    this._localeSubscription.unsubscribe();\n    this._valueChange.complete();\n    this._disabledChange.complete();\n  }\n\n  /** @docs-private */\n  registerOnValidatorChange(fn: () => void): void {\n    this._validatorOnChange = fn;\n  }\n\n  /** @docs-private */\n  validate(c: AbstractControl): ValidationErrors | null {\n    return this._validator ? this._validator(c) : null;\n  }\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0 Use `getConnectedOverlayOrigin` instead\n   */\n  getPopupConnectionElementRef(): ElementRef {\n    return this.getConnectedOverlayOrigin();\n  }\n\n  /**\n   * Gets the element that the datepicker popup should be connected to.\n   * @return The element to connect the popup to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: D): void {\n    this.value = value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._cvaOnChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  _onKeydown(event: KeyboardEvent) {\n    const isAltDownArrow = event.altKey && event.keyCode === DOWN_ARROW;\n\n    if (this._datepicker && isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n      this._datepicker.open();\n      event.preventDefault();\n    }\n  }\n\n  _onInput(value: string) {\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n    this._lastValueValid = !date || this._dateAdapter.isValid(date);\n    date = this._getValidDateOrNull(date);\n\n    if (!this._dateAdapter.sameDate(date, this._value)) {\n      this._value = date;\n      this._cvaOnChange(date);\n      this._valueChange.emit(date);\n      this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n  }\n\n  _onChange() {\n    this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n  }\n\n  /** Returns the palette used by the input's form field, if any. */\n  _getThemePalette(): ThemePalette {\n    return this._formField ? this._formField.color : undefined;\n  }\n\n  /** Handles blur events on the input. */\n  _onBlur() {\n    // Reformat the input only if we have a valid value.\n    if (this.value) {\n      this._formatValue(this.value);\n    }\n\n    this._onTouched();\n  }\n\n  /** Formats a value and sets it on the input element. */\n  private _formatValue(value: D | null) {\n    this._elementRef.nativeElement.value =\n        value ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {MatButton} from '@angular/material/button';\nimport {merge, of as observableOf, Subscription} from 'rxjs';\nimport {MatDatepicker} from './datepicker';\nimport {MatDatepickerIntl} from './datepicker-intl';\n\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\n@Directive({\n  selector: '[matDatepickerToggleIcon]'\n})\nexport class MatDatepickerToggleIcon {}\n\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-datepicker-toggle',\n  templateUrl: 'datepicker-toggle.html',\n  styleUrls: ['datepicker-toggle.css'],\n  host: {\n    'class': 'mat-datepicker-toggle',\n    // Always set the tabindex to -1 so that it doesn't overlap with any custom tabindex the\n    // consumer may have provided, while still being able to receive focus.\n    '[attr.tabindex]': '-1',\n    '[class.mat-datepicker-toggle-active]': 'datepicker && datepicker.opened',\n    '[class.mat-accent]': 'datepicker && datepicker.color === \"accent\"',\n    '[class.mat-warn]': 'datepicker && datepicker.color === \"warn\"',\n    '(focus)': '_button.focus()',\n  },\n  exportAs: 'matDatepickerToggle',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDatepickerToggle<D> implements AfterContentInit, OnChanges, OnDestroy {\n  private _stateChanges = Subscription.EMPTY;\n\n  /** Datepicker instance that the button will toggle. */\n  @Input('for') datepicker: MatDatepicker<D>;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** Whether the toggle button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled === undefined ? this.datepicker.disabled : !!this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  private _disabled: boolean;\n\n  /** Whether ripples on the toggle should be disabled. */\n  @Input() disableRipple: boolean;\n\n  /** Custom icon set by the consumer. */\n  @ContentChild(MatDatepickerToggleIcon) _customIcon: MatDatepickerToggleIcon;\n\n  /** Underlying button element. */\n  @ViewChild('button') _button: MatButton;\n\n  constructor(\n    public _intl: MatDatepickerIntl,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Attribute('tabindex') defaultTabIndex: string) {\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.datepicker) {\n      this._watchStateChanges();\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.unsubscribe();\n  }\n\n  ngAfterContentInit() {\n    this._watchStateChanges();\n  }\n\n  _open(event: Event): void {\n    if (this.datepicker && !this.disabled) {\n      this.datepicker.open();\n      event.stopPropagation();\n    }\n  }\n\n  private _watchStateChanges() {\n    const datepickerDisabled = this.datepicker ? this.datepicker._disabledChange : observableOf();\n    const inputDisabled = this.datepicker && this.datepicker._datepickerInput ?\n        this.datepicker._datepickerInput._disabledChange : observableOf();\n    const datepickerToggled = this.datepicker ?\n        merge(this.datepicker.openedStream, this.datepicker.closedStream) :\n        observableOf();\n\n    this._stateChanges.unsubscribe();\n    this._stateChanges = merge(\n      this._intl.changes,\n      datepickerDisabled,\n      inputDisabled,\n      datepickerToggled\n    ).subscribe(() => this._changeDetectorRef.markForCheck());\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatCalendar, MatCalendarHeader} from './calendar';\nimport {MatCalendarBody} from './calendar-body';\nimport {\n  MatDatepicker,\n  MatDatepickerContent,\n  MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './datepicker';\nimport {MatDatepickerInput} from './datepicker-input';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatDatepickerToggle, MatDatepickerToggleIcon} from './datepicker-toggle';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView} from './multi-year-view';\nimport {MatYearView} from './year-view';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatDialogModule,\n    OverlayModule,\n    A11yModule,\n    PortalModule,\n  ],\n  exports: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  declarations: [\n    MatCalendar,\n    MatCalendarBody,\n    MatDatepicker,\n    MatDatepickerContent,\n    MatDatepickerInput,\n    MatDatepickerToggle,\n    MatDatepickerToggleIcon,\n    MatMonthView,\n    MatYearView,\n    MatMultiYearView,\n    MatCalendarHeader,\n  ],\n  providers: [\n    MatDatepickerIntl,\n    MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER,\n  ],\n  entryComponents: [\n    MatDatepickerContent,\n    MatCalendarHeader,\n  ]\n})\nexport class MatDatepickerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-divider',\n  host: {\n    'role': 'separator',\n    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n    '[class.mat-divider-vertical]': 'vertical',\n    '[class.mat-divider-horizontal]': '!vertical',\n    '[class.mat-divider-inset]': 'inset',\n    'class': 'mat-divider'\n  },\n  template: '',\n  styleUrls: ['divider.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatDivider {\n  /** Whether the divider is vertically aligned. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) { this._vertical = coerceBooleanProperty(value); }\n  private _vertical: boolean = false;\n\n  /** Whether the divider is an inset divider. */\n  @Input()\n  get inset(): boolean { return this._inset; }\n  set inset(value: boolean) { this._inset = coerceBooleanProperty(value); }\n  private _inset: boolean = false;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatDivider} from './divider';\n\n\n@NgModule({\n  imports: [MatCommonModule, CommonModule],\n  exports: [MatDivider, MatCommonModule],\n  declarations: [MatDivider],\n})\nexport class MatDividerModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  EventEmitter,\n  ElementRef,\n  Input,\n  Inject,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewContainerRef,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {filter, startWith, take, distinctUntilChanged} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {MAT_ACCORDION, MatAccordionBase} from './accordion-base';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  moduleId: module.id,\n  styleUrls: ['./expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: './expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n\n  // @breaking-change 8.0.0 Remove `| undefined` from here\n  // when the `_document` constructor param is required.\n  private _document: Document | undefined;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n  private _hideToggle = false;\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              // @breaking-change 8.0.0 _document and _animationMode to be made required\n              @Inject(DOCUMENT) _document?: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      // We don't need to subscribe to the `stateChanges` of the parent accordion because each time\n      // the [displayMode] input changes, the change detection will also cover the host bindings\n      // of this expansion panel.\n      return (this.expanded ? this.accordion.displayMode : this._getExpandedState()) === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith<void>(null!),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body && this._document) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n}\n\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor, FocusableOption, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, SPACE, hasModifierKey} from '@angular/cdk/keycodes';\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Input,\n  OnDestroy,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {merge, Subscription, EMPTY} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanel} from './expansion-panel';\n\n\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['./expansion-panel-header.css'],\n  templateUrl: './expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n    matExpansionAnimations.expansionHeaderHeight\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n    '[@expansionHeight]': `{\n        value: _getExpandedState(),\n        params: {\n          collapsedHeight: collapsedHeight,\n          expandedHeight: expandedHeight\n        }\n    }`,\n  },\n})\nexport class MatExpansionPanelHeader implements OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef) {\n\n    const accordionHideToggleChange = panel.accordion ?\n      panel.accordion._stateChanges.pipe(filter(changes => !!changes.hideToggle)) : EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription = merge(\n      panel.opened,\n      panel.closed,\n      accordionHideToggleChange,\n      panel._inputChanges.pipe(filter(changes => !!(changes.hideToggle || changes.disabled)))\n    )\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    _focusMonitor.monitor(_element).subscribe(origin => {\n      if (origin && panel.accordion) {\n        panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    this.panel.toggle();\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin: FocusOrigin = 'program') {\n    this._focusMonitor.focusVia(this._element, origin);\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input, ContentChildren, QueryList, AfterContentInit} from '@angular/core';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {HOME, END} from '@angular/cdk/keycodes';\nimport {MAT_ACCORDION, MatAccordionBase, MatAccordionDisplayMode} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion'\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase, AfterContentInit {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager(this._headers).withWrap();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    const {keyCode} = event;\n    const manager = this._keyManager;\n\n    if (keyCode === HOME) {\n      manager.setFirstItemActive();\n      event.preventDefault();\n    } else if (keyCode === END) {\n      manager.setLastItemActive();\n      event.preventDefault();\n    } else {\n      this._keyManager.onKeydown(event);\n    }\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/**\n * Injection token used to provide a grid list to a tile and to avoid circular imports.\n * @docs-private\n */\nexport const MAT_GRID_LIST = new InjectionToken<MatGridListBase>('MAT_GRID_LIST');\n\n/**\n * Base interface for a `MatGridList`.\n * @docs-private\n */\nexport interface MatGridListBase {\n  cols: number;\n  gutterSize: string;\n  rowHeight: number | string;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Input,\n  Output,\n  ViewEncapsulation,\n  NgZone,\n} from '@angular/core';\nimport {take} from 'rxjs/operators';\n\n/**\n * Extra CSS classes that can be associated with a calendar cell.\n */\nexport type MatCalendarCellCssClasses = string | string[] | Set<string> | {[key: string]: any};\n\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nexport class MatCalendarCell {\n  constructor(public value: number,\n              public displayValue: string,\n              public ariaLabel: string,\n              public enabled: boolean,\n              public cssClasses?: MatCalendarCellCssClasses) {}\n}\n\n\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: '[mat-calendar-body]',\n  templateUrl: 'calendar-body.html',\n  styleUrls: ['calendar-body.css'],\n  host: {\n    'class': 'mat-calendar-body',\n    'role': 'grid',\n    'aria-readonly': 'true'\n  },\n  exportAs: 'matCalendarBody',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarBody {\n  /** The label for the table. (e.g. \"Jan 2017\"). */\n  @Input() label: string;\n\n  /** The cells to display in the table. */\n  @Input() rows: MatCalendarCell[][];\n\n  /** The value in the table that corresponds to today. */\n  @Input() todayValue: number;\n\n  /** The value in the table that is currently selected. */\n  @Input() selectedValue: number;\n\n  /** The minimum number of free cells needed to fit the label in the first row. */\n  @Input() labelMinRequiredCells: number;\n\n  /** The number of columns in the table. */\n  @Input() numCols = 7;\n\n  /** The cell number of the active cell in the table. */\n  @Input() activeCell = 0;\n\n  /**\n   * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n   * maintained even as the table resizes.\n   */\n  @Input() cellAspectRatio = 1;\n\n  /** Emits when a new value is selected. */\n  @Output() readonly selectedValueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  constructor(private _elementRef: ElementRef<HTMLElement>, private _ngZone: NgZone) { }\n\n  _cellClicked(cell: MatCalendarCell): void {\n    if (cell.enabled) {\n      this.selectedValueChange.emit(cell.value);\n    }\n  }\n\n  /** The number of blank cells to put at the beginning for the first row. */\n  get _firstRowOffset(): number {\n    return this.rows && this.rows.length && this.rows[0].length ?\n        this.numCols - this.rows[0].length : 0;\n  }\n\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\n    let cellNumber = rowIndex * this.numCols + colIndex;\n\n    // Account for the fact that the first row may not have as many cells.\n    if (rowIndex) {\n      cellNumber -= this._firstRowOffset;\n    }\n\n    return cellNumber == this.activeCell;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._ngZone.runOutsideAngular(() => {\n      this._ngZone.onStable.asObservable().pipe(take(1)).subscribe(() => {\n        const activeCell: HTMLElement | null =\n            this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n\n        if (activeCell) {\n          activeCell.focus();\n        }\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewEncapsulation,\n  ViewChild,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell, MatCalendarCellCssClasses} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n\nconst DAYS_PER_WEEK = 7;\n\n\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-month-view',\n  templateUrl: 'month-view.html',\n  exportAs: 'matMonthView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMonthView<D> implements AfterContentInit {\n  /**\n   * The date to display in this month view (everything other than the month and year is ignored).\n   */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    const oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedDate = this._getDateInCurrentMonth(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when a new date is selected. */\n  @Output() readonly selectedChange: EventEmitter<D | null> = new EventEmitter<D | null>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** The label for this month (e.g. \"January 2017\"). */\n  _monthLabel: string;\n\n  /** Grid of calendar cells representing the dates of the month. */\n  _weeks: MatCalendarCell[][];\n\n  /** The number of blank cells in the first row before the 1st of the month. */\n  _firstWeekOffset: number;\n\n  /**\n   * The date of the month that the currently selected Date falls on.\n   * Null if the currently selected Date is in another month.\n   */\n  _selectedDate: number | null;\n\n  /** The date of the month that today falls on. Null if today is in another month. */\n  _todayDate: number | null;\n\n  /** The names of the weekdays. */\n  _weekdays: {long: string, narrow: string}[];\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n    const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n    const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n\n    // Rotate the labels for days of the week based on the configured first day of the week.\n    let weekdays = longWeekdays.map((long, i) => {\n      return {long, narrow: narrowWeekdays[i]};\n    });\n    this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new date is selected. */\n  _dateSelected(date: number) {\n    if (this._selectedDate != date) {\n      const selectedYear = this._dateAdapter.getYear(this.activeDate);\n      const selectedMonth = this._dateAdapter.getMonth(this.activeDate);\n      const selectedDate = this._dateAdapter.createDate(selectedYear, selectedMonth, date);\n\n      this.selectedChange.emit(selectedDate);\n    }\n\n    this._userSelection.emit();\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in month view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            1 - this._dateAdapter.getDate(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate,\n            (this._dateAdapter.getNumDaysInMonth(this._activeDate) -\n              this._dateAdapter.getDate(this._activeDate)));\n        break;\n      case PAGE_UP:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, -1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate = event.altKey ?\n            this._dateAdapter.addCalendarYears(this._activeDate, 1) :\n            this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n        break;\n      case ENTER:\n      case SPACE:\n        if (!this.dateFilter || this.dateFilter(this._activeDate)) {\n          this._dateSelected(this._dateAdapter.getDate(this._activeDate));\n          this._userSelection.emit();\n          // Prevent unexpected default actions such as form submission.\n          event.preventDefault();\n        }\n        return;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this month view. */\n  _init() {\n    this._selectedDate = this._getDateInCurrentMonth(this.selected);\n    this._todayDate = this._getDateInCurrentMonth(this._dateAdapter.today());\n    this._monthLabel =\n        this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)]\n            .toLocaleUpperCase();\n\n    let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate),\n        this._dateAdapter.getMonth(this.activeDate), 1);\n    this._firstWeekOffset =\n        (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) -\n         this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n\n    this._createWeekCells();\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates MatCalendarCells for the dates in this month. */\n  private _createWeekCells() {\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n    const dateNames = this._dateAdapter.getDateNames();\n    this._weeks = [[]];\n    for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n      if (cell == DAYS_PER_WEEK) {\n        this._weeks.push([]);\n        cell = 0;\n      }\n      const date = this._dateAdapter.createDate(\n            this._dateAdapter.getYear(this.activeDate),\n            this._dateAdapter.getMonth(this.activeDate), i + 1);\n      const enabled = this._shouldEnableDate(date);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date) : undefined;\n\n      this._weeks[this._weeks.length - 1]\n          .push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses));\n    }\n  }\n\n  /** Date filter for the month */\n  private _shouldEnableDate(date: D): boolean {\n    return !!date &&\n        (!this.dateFilter || this.dateFilter(date)) &&\n        (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) &&\n        (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0);\n  }\n\n  /**\n   * Gets the date in this month that the given Date falls on.\n   * Returns null if the given Date is in another month.\n   */\n  private _getDateInCurrentMonth(date: D | null): number | null {\n    return date && this._hasSameMonthAndYear(date, this.activeDate) ?\n        this._dateAdapter.getDate(date) : null;\n  }\n\n  /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n  private _hasSameMonthAndYear(d1: D | null, d2: D | null): boolean {\n    return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) &&\n              this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\nexport const yearsPerPage = 24;\n\nexport const yearsPerRow = 4;\n\n\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-multi-year-view',\n  templateUrl: 'multi-year-view.html',\n  exportAs: 'matMultiYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatMultiYearView<D> implements AfterContentInit {\n  /** The date to display in this multi-year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (Math.floor(this._dateAdapter.getYear(oldActiveDate) / yearsPerPage) !=\n        Math.floor(this._dateAdapter.getYear(this._activeDate) / yearsPerPage)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedYear = this._selected && this._dateAdapter.getYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new year is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected year. This doesn't imply a change on the selected date */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the currently displayed years. */\n  _years: MatCalendarCell[][];\n\n  /** The year that today falls on. */\n  _todayYear: number;\n\n  /** The year of the selected date. Null if the selected date is null. */\n  _selectedYear: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Initializes this multi-year view. */\n  _init() {\n    this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n    let activeYear = this._dateAdapter.getYear(this._activeDate);\n    let activeOffset = activeYear % yearsPerPage;\n    this._years = [];\n    for (let i = 0, row: number[] = []; i < yearsPerPage; i++) {\n      row.push(activeYear - activeOffset + i);\n      if (row.length == yearsPerRow) {\n        this._years.push(row.map(year => this._createCellForYear(year)));\n        row = [];\n      }\n    }\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Handles when a new year is selected. */\n  _yearSelected(year: number) {\n    this.yearSelected.emit(this._dateAdapter.createDate(year, 0, 1));\n    let month = this._dateAdapter.getMonth(this.activeDate);\n    let daysInMonth =\n        this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, month, 1));\n    this.selectedChange.emit(this._dateAdapter.createDate(year, month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            -this._dateAdapter.getYear(this._activeDate) % yearsPerPage);\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate,\n            yearsPerPage - this._dateAdapter.getYear(this._activeDate) % yearsPerPage - 1);\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(\n                this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n        break;\n      case ENTER:\n      case SPACE:\n        this._yearSelected(this._dateAdapter.getYear(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  _getActiveCell(): number {\n    return this._dateAdapter.getYear(this.activeDate) % yearsPerPage;\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /** Creates an MatCalendarCell for the given year. */\n  private _createCellForYear(year: number) {\n    let yearName = this._dateAdapter.getYearName(this._dateAdapter.createDate(year, 0, 1));\n    return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year));\n  }\n\n  /** Whether the given year is enabled. */\n  private _shouldEnableYear(year: number) {\n    // disable if the year is greater than maxDate lower than minDate\n    if (year === undefined || year === null ||\n        (this.maxDate && year > this._dateAdapter.getYear(this.maxDate)) ||\n        (this.minDate && year < this._dateAdapter.getYear(this.minDate))) {\n      return false;\n    }\n\n    // enable if it reaches here and there's no filter defined\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n\n    // If any date in the year is enabled count the year as enabled.\n    for (let date = firstOfYear; this._dateAdapter.getYear(date) == year;\n      date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  DOWN_ARROW,\n  END,\n  ENTER,\n  HOME,\n  LEFT_ARROW,\n  PAGE_DOWN,\n  PAGE_UP,\n  RIGHT_ARROW,\n  UP_ARROW,\n  SPACE,\n} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  Inject,\n  Input,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {MatCalendarBody, MatCalendarCell} from './calendar-body';\nimport {createMissingDateImplError} from './datepicker-errors';\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-year-view',\n  templateUrl: 'year-view.html',\n  exportAs: 'matYearView',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatYearView<D> implements AfterContentInit {\n  /** The date to display in this year view (everything other than the year is ignored). */\n  @Input()\n  get activeDate(): D { return this._activeDate; }\n  set activeDate(value: D) {\n    let oldActiveDate = this._activeDate;\n    const validDate =\n        this._getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n    this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n    if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n      this._init();\n    }\n  }\n  private _activeDate: D;\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n    this._selectedMonth = this._getMonthInCurrentYear(this._selected);\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** A function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Emits when a new month is selected. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits the selected month. This doesn't imply a change on the selected date */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is activated. */\n  @Output() readonly activeDateChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /** The body of calendar table */\n  @ViewChild(MatCalendarBody) _matCalendarBody: MatCalendarBody;\n\n  /** Grid of calendar cells representing the months of the year. */\n  _months: MatCalendarCell[][];\n\n  /** The label for this year (e.g. \"2017\"). */\n  _yearLabel: string;\n\n  /** The month in this year that today falls on. Null if today is in a different year. */\n  _todayMonth: number | null;\n\n  /**\n   * The month in this year that the selected Date falls on.\n   * Null if the selected Date is in a different year.\n   */\n  _selectedMonth: number | null;\n\n  constructor(private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              @Optional() public _dateAdapter: DateAdapter<D>,\n              @Optional() private _dir?: Directionality) {\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._activeDate = this._dateAdapter.today();\n  }\n\n  ngAfterContentInit() {\n    this._init();\n  }\n\n  /** Handles when a new month is selected. */\n  _monthSelected(month: number) {\n    const normalizedDate =\n          this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n\n    this.monthSelected.emit(normalizedDate);\n\n    const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n\n    this.selectedChange.emit(this._dateAdapter.createDate(\n        this._dateAdapter.getYear(this.activeDate), month,\n        Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth)));\n  }\n\n  /** Handles keydown events on the calendar body when calendar is in year view. */\n  _handleCalendarBodyKeydown(event: KeyboardEvent): void {\n    // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n    // disabled ones from being selected. This may not be ideal, we should look into whether\n    // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n\n    const oldActiveDate = this._activeDate;\n    const isRtl = this._isRtl();\n\n    switch (event.keyCode) {\n      case LEFT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n        break;\n      case RIGHT_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n        break;\n      case UP_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n        break;\n      case DOWN_ARROW:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n        break;\n      case HOME:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            -this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case END:\n        this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate,\n            11 - this._dateAdapter.getMonth(this._activeDate));\n        break;\n      case PAGE_UP:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n        break;\n      case PAGE_DOWN:\n        this.activeDate =\n            this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n        break;\n      case ENTER:\n      case SPACE:\n        this._monthSelected(this._dateAdapter.getMonth(this._activeDate));\n        break;\n      default:\n        // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n        return;\n    }\n\n    if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n      this.activeDateChange.emit(this.activeDate);\n    }\n\n    this._focusActiveCell();\n    // Prevent unexpected default actions such as form submission.\n    event.preventDefault();\n  }\n\n  /** Initializes this year view. */\n  _init() {\n    this._selectedMonth = this._getMonthInCurrentYear(this.selected);\n    this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n    this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n\n    let monthNames = this._dateAdapter.getMonthNames('short');\n    // First row of months only contains 5 elements so we can fit the year label on the same row.\n    this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(\n        month => this._createCellForMonth(month, monthNames[month])));\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Focuses the active cell after the microtask queue is empty. */\n  _focusActiveCell() {\n    this._matCalendarBody._focusActiveCell();\n  }\n\n  /**\n   * Gets the month in this year that the given Date falls on.\n   * Returns null if the given Date is in another year.\n   */\n  private _getMonthInCurrentYear(date: D | null) {\n    return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ?\n        this._dateAdapter.getMonth(date) : null;\n  }\n\n  /** Creates an MatCalendarCell for the given month. */\n  private _createCellForMonth(month: number, monthName: string) {\n    let ariaLabel = this._dateAdapter.format(\n        this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1),\n        this._dateFormats.display.monthYearA11yLabel);\n    return new MatCalendarCell(\n        month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month));\n  }\n\n  /** Whether the given month is enabled. */\n  private _shouldEnableMonth(month: number) {\n\n    const activeYear = this._dateAdapter.getYear(this.activeDate);\n\n    if (month === undefined || month === null ||\n        this._isYearAndMonthAfterMaxDate(activeYear, month) ||\n        this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n      return false;\n    }\n\n    if (!this.dateFilter) {\n      return true;\n    }\n\n    const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n\n    // If any date in the month is enabled count the month as enabled.\n    for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month;\n         date = this._dateAdapter.addCalendarDays(date, 1)) {\n      if (this.dateFilter(date)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is after this.maxDate, considering\n   * just the month and year of this.maxDate\n   */\n  private _isYearAndMonthAfterMaxDate(year: number, month: number) {\n    if (this.maxDate) {\n      const maxYear = this._dateAdapter.getYear(this.maxDate);\n      const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n\n      return year > maxYear || (year === maxYear && month > maxMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * Tests whether the combination month/year is before this.minDate, considering\n   * just the month and year of this.minDate\n   */\n  private _isYearAndMonthBeforeMinDate(year: number, month: number) {\n    if (this.minDate) {\n      const minYear = this._dateAdapter.getYear(this.minDate);\n      const minMonth = this._dateAdapter.getMonth(this.minDate);\n\n      return year < minYear || (year === minYear && month < minMonth);\n    }\n\n    return false;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Determines whether the user has the RTL layout direction. */\n  private _isRtl() {\n    return this._dir && this._dir.value === 'rtl';\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ComponentPortal, ComponentType, Portal} from '@angular/cdk/portal';\nimport {\n  AfterContentInit,\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {DateAdapter, MAT_DATE_FORMATS, MatDateFormats} from '@angular/material/core';\nimport {Subject, Subscription} from 'rxjs';\nimport {createMissingDateImplError} from './datepicker-errors';\nimport {MatDatepickerIntl} from './datepicker-intl';\nimport {MatMonthView} from './month-view';\nimport {MatMultiYearView, yearsPerPage} from './multi-year-view';\nimport {MatYearView} from './year-view';\nimport {MatCalendarCellCssClasses} from './calendar-body';\n\n/**\n * Possible views for the calendar.\n * @docs-private\n */\nexport type MatCalendarView = 'month' | 'year' | 'multi-year';\n\n/** Default header for MatCalendar */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar-header',\n  templateUrl: 'calendar-header.html',\n  exportAs: 'matCalendarHeader',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendarHeader<D> {\n  constructor(private _intl: MatDatepickerIntl,\n              @Inject(forwardRef(() => MatCalendar)) public calendar: MatCalendar<D>,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              changeDetectorRef: ChangeDetectorRef) {\n\n    this.calendar.stateChanges.subscribe(() => changeDetectorRef.markForCheck());\n  }\n\n  /** The label for the current calendar view. */\n  get periodButtonText(): string {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter\n          .format(this.calendar.activeDate, this._dateFormats.display.monthYearLabel)\n              .toLocaleUpperCase();\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYearName(this.calendar.activeDate);\n    }\n    const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n    const firstYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear - activeYear % 24, 0, 1));\n    const lastYearInView = this._dateAdapter.getYearName(\n        this._dateAdapter.createDate(activeYear + yearsPerPage - 1 - activeYear % 24, 0, 1));\n    return `${firstYearInView} \\u2013 ${lastYearInView}`;\n  }\n\n  get periodButtonLabel(): string {\n    return this.calendar.currentView == 'month' ?\n        this._intl.switchToMultiYearViewLabel : this._intl.switchToMonthViewLabel;\n  }\n\n  /** The label for the the previous button. */\n  get prevButtonLabel(): string {\n    return {\n      'month': this._intl.prevMonthLabel,\n      'year': this._intl.prevYearLabel,\n      'multi-year': this._intl.prevMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** The label for the the next button. */\n  get nextButtonLabel(): string {\n    return {\n      'month': this._intl.nextMonthLabel,\n      'year': this._intl.nextYearLabel,\n      'multi-year': this._intl.nextMultiYearLabel\n    }[this.calendar.currentView];\n  }\n\n  /** Handles user clicks on the period label. */\n  currentPeriodClicked(): void {\n    this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n  }\n\n  /** Handles user clicks on the previous button. */\n  previousClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage\n            );\n  }\n\n  /** Handles user clicks on the next button. */\n  nextClicked(): void {\n    this.calendar.activeDate = this.calendar.currentView == 'month' ?\n        this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) :\n            this._dateAdapter.addCalendarYears(\n                this.calendar.activeDate,\n                    this.calendar.currentView == 'year' ? 1 : yearsPerPage\n            );\n  }\n\n  /** Whether the previous period button is enabled. */\n  previousEnabled(): boolean {\n    if (!this.calendar.minDate) {\n      return true;\n    }\n    return !this.calendar.minDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n  }\n\n  /** Whether the next period button is enabled. */\n  nextEnabled(): boolean {\n    return !this.calendar.maxDate ||\n        !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n  }\n\n  /** Whether the two dates represent the same view in the current view mode (month or year). */\n  private _isSameView(date1: D, date2: D): boolean {\n    if (this.calendar.currentView == 'month') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) &&\n          this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n    }\n    if (this.calendar.currentView == 'year') {\n      return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n    }\n    // Otherwise we are in 'multi-year' view.\n    return Math.floor(this._dateAdapter.getYear(date1) / yearsPerPage) ==\n        Math.floor(this._dateAdapter.getYear(date2) / yearsPerPage);\n  }\n}\n\n/**\n * A calendar that is used as part of the datepicker.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-calendar',\n  templateUrl: 'calendar.html',\n  styleUrls: ['calendar.css'],\n  host: {\n    'class': 'mat-calendar',\n  },\n  exportAs: 'matCalendar',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatCalendar<D> implements AfterContentInit, AfterViewChecked, OnDestroy, OnChanges {\n  /** An input indicating the type of the header component, if set. */\n  @Input() headerComponent: ComponentType<any>;\n\n  /** A portal containing the header component type for this calendar. */\n  _calendarHeaderPortal: Portal<any>;\n\n  private _intlChanges: Subscription;\n\n  /**\n   * Used for scheduling that focus should be moved to the active cell on the next tick.\n   * We need to schedule it, rather than do it immediately, because we have to wait\n   * for Angular to re-evaluate the view children.\n   */\n  private _moveFocusOnNextTick = false;\n\n  /** A date representing the period (month or year) to start the calendar in. */\n  @Input()\n  get startAt(): D | null { return this._startAt; }\n  set startAt(value: D | null) {\n    this._startAt = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _startAt: D | null;\n\n  /** Whether the calendar should be started in month or year view. */\n  @Input() startView: MatCalendarView = 'month';\n\n  /** The currently selected date. */\n  @Input()\n  get selected(): D | null { return this._selected; }\n  set selected(value: D | null) {\n    this._selected = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _selected: D | null;\n\n  /** The minimum selectable date. */\n  @Input()\n  get minDate(): D | null { return this._minDate; }\n  set minDate(value: D | null) {\n    this._minDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _minDate: D | null;\n\n  /** The maximum selectable date. */\n  @Input()\n  get maxDate(): D | null { return this._maxDate; }\n  set maxDate(value: D | null) {\n    this._maxDate = this._getValidDateOrNull(this._dateAdapter.deserialize(value));\n  }\n  private _maxDate: D | null;\n\n  /** Function used to filter which dates are selectable. */\n  @Input() dateFilter: (date: D) => boolean;\n\n  /** Function that can be used to add custom CSS classes to dates. */\n  @Input() dateClass: (date: D) => MatCalendarCellCssClasses;\n\n  /** Emits when the currently selected date changes. */\n  @Output() readonly selectedChange: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the year chosen in multiyear view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly yearSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /**\n   * Emits the month chosen in year view.\n   * This doesn't imply a change on the selected date.\n   */\n  @Output() readonly monthSelected: EventEmitter<D> = new EventEmitter<D>();\n\n  /** Emits when any date is selected. */\n  @Output() readonly _userSelection: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Reference to the current month view component. */\n  @ViewChild(MatMonthView) monthView: MatMonthView<D>;\n\n  /** Reference to the current year view component. */\n  @ViewChild(MatYearView) yearView: MatYearView<D>;\n\n  /** Reference to the current multi-year view component. */\n  @ViewChild(MatMultiYearView) multiYearView: MatMultiYearView<D>;\n\n  /**\n   * The current active date. This determines which time period is shown and which date is\n   * highlighted when using keyboard navigation.\n   */\n  get activeDate(): D { return this._clampedActiveDate; }\n  set activeDate(value: D) {\n    this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n    this.stateChanges.next();\n  }\n  private _clampedActiveDate: D;\n\n  /** Whether the calendar is in month view. */\n  get currentView(): MatCalendarView { return this._currentView; }\n  set currentView(value: MatCalendarView) {\n    this._currentView = value;\n    this._moveFocusOnNextTick = true;\n  }\n  private _currentView: MatCalendarView;\n\n  /**\n   * Emits whenever there is a state change that the header may need to respond to.\n   */\n  stateChanges = new Subject<void>();\n\n  constructor(_intl: MatDatepickerIntl,\n              @Optional() private _dateAdapter: DateAdapter<D>,\n              @Optional() @Inject(MAT_DATE_FORMATS) private _dateFormats: MatDateFormats,\n              private _changeDetectorRef: ChangeDetectorRef) {\n\n    if (!this._dateAdapter) {\n      throw createMissingDateImplError('DateAdapter');\n    }\n\n    if (!this._dateFormats) {\n      throw createMissingDateImplError('MAT_DATE_FORMATS');\n    }\n\n    this._intlChanges = _intl.changes.subscribe(() => {\n      _changeDetectorRef.markForCheck();\n      this.stateChanges.next();\n    });\n  }\n\n  ngAfterContentInit() {\n    this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n    this.activeDate = this.startAt || this._dateAdapter.today();\n\n    // Assign to the private property since we don't want to move focus on init.\n    this._currentView = this.startView;\n  }\n\n  ngAfterViewChecked() {\n    if (this._moveFocusOnNextTick) {\n      this._moveFocusOnNextTick = false;\n      this.focusActiveCell();\n    }\n  }\n\n  ngOnDestroy() {\n    this._intlChanges.unsubscribe();\n    this.stateChanges.complete();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const change = changes.minDate || changes.maxDate || changes.dateFilter;\n\n    if (change && !change.firstChange) {\n      const view = this._getCurrentViewComponent();\n\n      if (view) {\n        // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n        // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n        this._changeDetectorRef.detectChanges();\n        view._init();\n      }\n    }\n\n    this.stateChanges.next();\n  }\n\n  focusActiveCell() {\n    this._getCurrentViewComponent()._focusActiveCell();\n  }\n\n  /** Updates today's date after an update of the active date */\n  updateTodaysDate() {\n    let view = this.currentView == 'month' ? this.monthView :\n            (this.currentView == 'year' ? this.yearView : this.multiYearView);\n\n    view.ngAfterContentInit();\n  }\n\n  /** Handles date selection in the month view. */\n  _dateSelected(date: D): void {\n    if (!this._dateAdapter.sameDate(date, this.selected)) {\n      this.selectedChange.emit(date);\n    }\n  }\n\n  /** Handles year selection in the multiyear view. */\n  _yearSelectedInMultiYearView(normalizedYear: D) {\n    this.yearSelected.emit(normalizedYear);\n  }\n\n  /** Handles month selection in the year view. */\n  _monthSelectedInYearView(normalizedMonth: D) {\n    this.monthSelected.emit(normalizedMonth);\n  }\n\n  _userSelected(): void {\n    this._userSelection.emit();\n  }\n\n  /** Handles year/month selection in the multi-year/year views. */\n  _goToDateInView(date: D, view: 'month' | 'year' | 'multi-year'): void {\n    this.activeDate = date;\n    this.currentView = view;\n  }\n\n  /**\n   * @param obj The object to check.\n   * @returns The given object if it is both a date instance and valid, otherwise null.\n   */\n  private _getValidDateOrNull(obj: any): D | null {\n    return (this._dateAdapter.isDateInstance(obj) && this._dateAdapter.isValid(obj)) ? obj : null;\n  }\n\n  /** Returns the component instance that corresponds to the current calendar view. */\n  private _getCurrentViewComponent() {\n    return this.monthView || this.yearView || this.multiYearView;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n */\nexport const matDatepickerAnimations: {\n  readonly transformPanel: AnimationTriggerMetadata;\n  readonly fadeInCalendar: AnimationTriggerMetadata;\n} = {\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: trigger('transformPanel', [\n    state('void', style({\n      opacity: 0,\n      transform: 'scale(1, 0.8)'\n    })),\n    transition('void => enter',  animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n      opacity: 1,\n      transform: 'scale(1, 1)'\n    }))),\n    transition('* => void', animate('100ms linear', style({opacity: 0})))\n  ]),\n\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: trigger('fadeInCalendar', [\n    state('void', style({opacity: 0})),\n    state('enter', style({opacity: 1})),\n\n    // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n    // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n    transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'))\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {BACKSPACE, END, HOME} from '@angular/cdk/keycodes';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  DoCheck,\n  ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  Self,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ControlValueAccessor, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {merge, Observable, Subject, Subscription} from 'rxjs';\nimport {startWith, takeUntil} from 'rxjs/operators';\nimport {MatChip, MatChipEvent, MatChipSelectionChange} from './chip';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n// Boilerplate for applying mixins to MatChipList.\n/** @docs-private */\nexport class MatChipListBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatChipListMixinBase: CanUpdateErrorStateCtor & typeof MatChipListBase =\n    mixinErrorState(MatChipListBase);\n\n\n// Increasing integer for generating unique ids for chip-list components.\nlet nextUniqueId = 0;\n\n/** Change event object that is emitted when the chip list value has changed. */\nexport class MatChipListChange {\n  constructor(\n    /** Chip list that emitted the event. */\n    public source: MatChipList,\n    /** Value of the chip list when the event was emitted. */\n    public value: any) { }\n}\n\n\n/**\n * A material design chips component (named ChipList for it's similarity to the List component).\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-chip-list',\n  template: `<div class=\"mat-chip-list-wrapper\"><ng-content></ng-content></div>`,\n  exportAs: 'matChipList',\n  host: {\n    '[attr.tabindex]': 'disabled ? null : _tabIndex',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-required]': 'required.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-multiselectable]': 'multiple',\n    '[attr.role]': 'role',\n    '[class.mat-chip-list-disabled]': 'disabled',\n    '[class.mat-chip-list-invalid]': 'errorState',\n    '[class.mat-chip-list-required]': 'required',\n    '[attr.aria-orientation]': 'ariaOrientation',\n    'class': 'mat-chip-list',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n    '(keydown)': '_keydown($event)',\n    '[id]': '_uid',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatChipList}],\n  styleUrls: ['chips.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatChipList extends _MatChipListMixinBase implements MatFormFieldControl<any>,\n  ControlValueAccessor, AfterContentInit, DoCheck, OnInit, OnDestroy, CanUpdateErrorState {\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly controlType: string = 'mat-chip-list';\n\n  /**\n   * When a chip is destroyed, we store the index of the destroyed chip until the chips\n   * query list notifies about the update. This is necessary because we cannot determine an\n   * appropriate chip that should receive focus until the array of chips updated completely.\n   */\n  private _lastDestroyedChipIndex: number | null = null;\n\n  /** Subject that emits when the component has been destroyed. */\n  private _destroyed = new Subject<void>();\n\n  /** Subscription to focus changes in the chips. */\n  private _chipFocusSubscription: Subscription | null;\n\n  /** Subscription to blur changes in the chips. */\n  private _chipBlurSubscription: Subscription | null;\n\n  /** Subscription to selection changes in chips. */\n  private _chipSelectionSubscription: Subscription | null;\n\n  /** Subscription to remove changes in chips. */\n  private _chipRemoveSubscription: Subscription | null;\n\n  /** The chip input to add more chips */\n  protected _chipInput: MatChipTextControl;\n\n  /** Uid of the chip list */\n  _uid: string = `mat-chip-list-${nextUniqueId++}`;\n\n  /** The aria-describedby attribute on the chip list for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Tab index for the chip list. */\n  _tabIndex = 0;\n\n  /**\n   * User defined tab index.\n   * When it is not null, use user defined tab index. Otherwise use _tabIndex\n   */\n  _userTabIndex: number | null = null;\n\n  /** The FocusKeyManager which handles focus. */\n  _keyManager: FocusKeyManager<MatChip>;\n\n  /** Function when touched */\n  _onTouched = () => {};\n\n  /** Function when changed */\n  _onChange: (value: any) => void = () => {};\n\n  _selectionModel: SelectionModel<MatChip>;\n\n  /** The array of selected chips inside chip list. */\n  get selected(): MatChip[] | MatChip {\n    return this.multiple ? this._selectionModel.selected : this._selectionModel.selected[0];\n  }\n\n  /** The ARIA role applied to the chip list. */\n  get role(): string | null { return this.empty ? null : 'listbox'; }\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /** Whether the user should be allowed to select multiple chips. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n  private _multiple: boolean = false;\n\n  /**\n   * A function to compare the option values with the selected values. The first argument\n   * is a value from an option. The second is a value from the selection. A boolean\n   * should be returned.\n   */\n  @Input()\n  get compareWith(): (o1: any, o2: any) => boolean { return this._compareWith; }\n  set compareWith(fn: (o1: any, o2: any) => boolean) {\n    this._compareWith = fn;\n    if (this._selectionModel) {\n      // A different comparator means the selection could change.\n      this._initializeSelection();\n    }\n  }\n  private _compareWith = (o1: any, o2: any) => o1 === o2;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): any { return this._value; }\n  set value(value: any) {\n    this.writeValue(value);\n    this._value = value;\n  }\n  protected _value: any;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get id(): string {\n    return this._chipInput ? this._chipInput.id : this._uid;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) {\n    this._required = coerceBooleanProperty(value);\n    this.stateChanges.next();\n  }\n  protected _required: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get placeholder(): string {\n    return this._chipInput ? this._chipInput.placeholder : this._placeholder;\n  }\n  set placeholder(value: string) {\n    this._placeholder = value;\n    this.stateChanges.next();\n  }\n  protected _placeholder: string;\n\n  /** Whether any chips or the matChipInput inside of this chip-list has focus. */\n  get focused(): boolean {\n    return (this._chipInput && this._chipInput.focused) || this._hasFocusedChip();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return (!this._chipInput || this._chipInput.empty) && this.chips.length === 0;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean { return !this.empty || this.focused; }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean { return this.ngControl ? !!this.ngControl.disabled : this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.disabled = this._disabled);\n    }\n  }\n  protected _disabled: boolean = false;\n\n  /** Orientation of the chip list. */\n  @Input('aria-orientation') ariaOrientation: 'horizontal' | 'vertical' = 'horizontal';\n\n  /**\n   * Whether or not this chip list is selectable. When a chip list is not selectable,\n   * the selected states for all the chips inside the chip list are always ignored.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n\n    if (this.chips) {\n      this.chips.forEach(chip => chip.chipListSelectable = this._selectable);\n    }\n  }\n  protected _selectable: boolean = true;\n\n  @Input()\n  set tabIndex(value: number) {\n    this._userTabIndex = value;\n    this._tabIndex = value;\n  }\n\n  /** Combined stream of all of the child chips' selection change events. */\n  get chipSelectionChanges(): Observable<MatChipSelectionChange> {\n    return merge(...this.chips.map(chip => chip.selectionChange));\n  }\n\n  /** Combined stream of all of the child chips' focus change events. */\n  get chipFocusChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onFocus));\n  }\n\n  /** Combined stream of all of the child chips' blur change events. */\n  get chipBlurChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip._onBlur));\n  }\n\n  /** Combined stream of all of the child chips' remove change events. */\n  get chipRemoveChanges(): Observable<MatChipEvent> {\n    return merge(...this.chips.map(chip => chip.destroyed));\n  }\n\n  /** Event emitted when the selected chip list value has been changed by the user. */\n  @Output() readonly change: EventEmitter<MatChipListChange> =\n      new EventEmitter<MatChipListChange>();\n\n  /**\n   * Event that emits whenever the raw value of the chip-list changes. This is here primarily\n   * to facilitate the two-way binding for the `value` input.\n   * @docs-private\n   */\n  @Output() readonly valueChange: EventEmitter<any> = new EventEmitter<any>();\n\n  /** The chip components contained within this chip list. */\n  @ContentChildren(MatChip) chips: QueryList<MatChip>;\n\n  constructor(protected _elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              @Optional() private _dir: Directionality,\n              @Optional() _parentForm: NgForm,\n              @Optional() _parentFormGroup: FormGroupDirective,\n              _defaultErrorStateMatcher: ErrorStateMatcher,\n              /** @docs-private */\n              @Optional() @Self() public ngControl: NgControl) {\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n    if (this.ngControl) {\n      this.ngControl.valueAccessor = this;\n    }\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new FocusKeyManager<MatChip>(this.chips)\n      .withWrap()\n      .withVerticalOrientation()\n      .withHorizontalOrientation(this._dir ? this._dir.value : 'ltr');\n\n    // Prevents the chip list from capturing focus and redirecting\n    // it back to the first chip when the user tabs out.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._tabIndex = -1;\n      setTimeout(() => this._tabIndex = this._userTabIndex || 0);\n    });\n\n    // When the list changes, re-subscribe\n    this.chips.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._resetChips();\n\n      // Reset chips selected/deselected status\n      this._initializeSelection();\n\n      // Check to see if we need to update our tab index\n      this._updateTabIndex();\n\n      // Check to see if we have a destroyed chip and need to refocus\n      this._updateFocusForDestroyedChips();\n\n      this.stateChanges.next();\n    });\n  }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatChip>(this.multiple, undefined, false);\n    this.stateChanges.next();\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n  }\n\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n    this.stateChanges.complete();\n\n    this._dropSubscriptions();\n  }\n\n\n  /** Associates an HTML input element with this chip list. */\n  registerInput(inputElement: MatChipTextControl): void {\n    this._chipInput = inputElement;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any): void {\n    if (this.chips) {\n      this._setSelectionByValue(value, false);\n    }\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void): void {\n    this._onChange = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: () => void): void {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n    this.stateChanges.next();\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick(event: MouseEvent) {\n    if (!this._originatesFromChip(event)) {\n      this.focus();\n    }\n  }\n\n  /**\n   * Focuses the the first non-disabled chip in this chip list, or the associated input when there\n   * are no eligible chips.\n   */\n  focus(): void {\n    if (this.disabled) {\n      return;\n    }\n\n    // TODO: ARIA says this should focus the first `selected` chip if any are selected.\n    // Focus on first element if there's no chipInput inside chip-list\n    if (this._chipInput && this._chipInput.focused) {\n      // do nothing\n    } else if (this.chips.length > 0) {\n      this._keyManager.setFirstItemActive();\n      this.stateChanges.next();\n    } else {\n      this._focusInput();\n      this.stateChanges.next();\n    }\n  }\n\n  /** Attempt to focus an input if we have one. */\n  _focusInput() {\n    if (this._chipInput) {\n      this._chipInput.focus();\n    }\n  }\n\n  /**\n   * Pass events to the keyboard manager. Available here for tests.\n   */\n  _keydown(event: KeyboardEvent) {\n    const target = event.target as HTMLElement;\n\n    // If they are on an empty input and hit backspace, focus the last chip\n    if (event.keyCode === BACKSPACE && this._isInputEmpty(target)) {\n      this._keyManager.setLastItemActive();\n      event.preventDefault();\n    } else if (target && target.classList.contains('mat-chip')) {\n      if (event.keyCode === HOME) {\n        this._keyManager.setFirstItemActive();\n        event.preventDefault();\n      } else if (event.keyCode === END) {\n        this._keyManager.setLastItemActive();\n        event.preventDefault();\n      } else {\n        this._keyManager.onKeydown(event);\n      }\n\n      this.stateChanges.next();\n    }\n  }\n\n\n  /**\n   * Check the tab index as you should not be allowed to focus an empty list.\n   */\n  protected _updateTabIndex(): void {\n    // If we have 0 chips, we should not allow keyboard focus\n    this._tabIndex = this._userTabIndex || (this.chips.length === 0 ? -1 : 0);\n  }\n\n  /**\n   * If the amount of chips changed, we need to update the\n   * key manager state and focus the next closest chip.\n   */\n  protected _updateFocusForDestroyedChips() {\n    if (this._lastDestroyedChipIndex != null && this.chips.length) {\n      const newChipIndex = Math.min(this._lastDestroyedChipIndex, this.chips.length - 1);\n      this._keyManager.setActiveItem(newChipIndex);\n    }\n\n    this._lastDestroyedChipIndex = null;\n  }\n\n  /**\n   * Utility to ensure all indexes are valid.\n   *\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of chips.\n   */\n  private _isValidIndex(index: number): boolean {\n    return index >= 0 && index < this.chips.length;\n  }\n\n  private _isInputEmpty(element: HTMLElement): boolean {\n    if (element && element.nodeName.toLowerCase() === 'input') {\n      let input = element as HTMLInputElement;\n      return !input.value;\n    }\n\n    return false;\n  }\n\n  _setSelectionByValue(value: any, isUserInput: boolean = true) {\n    this._clearSelection();\n    this.chips.forEach(chip => chip.deselect());\n\n    if (Array.isArray(value)) {\n      value.forEach(currentValue => this._selectValue(currentValue, isUserInput));\n      this._sortValues();\n    } else {\n      const correspondingChip = this._selectValue(value, isUserInput);\n\n      // Shift focus to the active item. Note that we shouldn't do this in multiple\n      // mode, because we don't know what chip the user interacted with last.\n      if (correspondingChip) {\n        if (isUserInput) {\n          this._keyManager.setActiveItem(correspondingChip);\n        }\n      }\n    }\n  }\n\n  /**\n   * Finds and selects the chip based on its value.\n   * @returns Chip that has the corresponding value.\n   */\n  private _selectValue(value: any, isUserInput: boolean = true): MatChip | undefined {\n\n    const correspondingChip = this.chips.find(chip => {\n      return chip.value != null && this._compareWith(chip.value,  value);\n    });\n\n    if (correspondingChip) {\n      isUserInput ? correspondingChip.selectViaInteraction() : correspondingChip.select();\n      this._selectionModel.select(correspondingChip);\n    }\n\n    return correspondingChip;\n  }\n\n  private _initializeSelection(): void {\n    // Defer setting the value in order to avoid the \"Expression\n    // has changed after it was checked\" errors from Angular.\n    Promise.resolve().then(() => {\n      if (this.ngControl || this._value) {\n        this._setSelectionByValue(this.ngControl ? this.ngControl.value : this._value, false);\n        this.stateChanges.next();\n      }\n    });\n  }\n\n  /**\n   * Deselects every chip in the list.\n   * @param skip Chip that should not be deselected.\n   */\n  private _clearSelection(skip?: MatChip): void {\n    this._selectionModel.clear();\n    this.chips.forEach(chip => {\n      if (chip !== skip) {\n        chip.deselect();\n      }\n    });\n    this.stateChanges.next();\n  }\n\n  /**\n   * Sorts the model values, ensuring that they keep the same\n   * order that they have in the panel.\n   */\n  private _sortValues(): void {\n    if (this._multiple) {\n      this._selectionModel.clear();\n\n      this.chips.forEach(chip => {\n        if (chip.selected) {\n          this._selectionModel.select(chip);\n        }\n      });\n      this.stateChanges.next();\n    }\n  }\n\n  /** Emits change event to set the model value. */\n  private _propagateChanges(fallbackValue?: any): void {\n    let valueToEmit: any = null;\n\n    if (Array.isArray(this.selected)) {\n      valueToEmit = this.selected.map(chip => chip.value);\n    } else {\n      valueToEmit = this.selected ? this.selected.value : fallbackValue;\n    }\n    this._value = valueToEmit;\n    this.change.emit(new MatChipListChange(this, valueToEmit));\n    this.valueChange.emit(valueToEmit);\n    this._onChange(valueToEmit);\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** When blurred, mark the field as touched when focus moved outside the chip list. */\n  _blur() {\n    if (!this._hasFocusedChip()) {\n      this._keyManager.setActiveItem(-1);\n    }\n\n    if (!this.disabled) {\n      if (this._chipInput) {\n        // If there's a chip input, we should check whether the focus moved to chip input.\n        // If the focus is not moved to chip input, mark the field as touched. If the focus moved\n        // to chip input, do nothing.\n        // Timeout is needed to wait for the focus() event trigger on chip input.\n        setTimeout(() => {\n          if (!this.focused) {\n            this._markAsTouched();\n          }\n        });\n      } else {\n        // If there's no chip input, then mark the field as touched.\n        this._markAsTouched();\n      }\n    }\n  }\n\n  /** Mark the field as touched */\n  _markAsTouched() {\n    this._onTouched();\n    this._changeDetectorRef.markForCheck();\n    this.stateChanges.next();\n  }\n\n  private _resetChips() {\n    this._dropSubscriptions();\n    this._listenToChipsFocus();\n    this._listenToChipsSelection();\n    this._listenToChipsRemoved();\n  }\n\n  private _dropSubscriptions() {\n    if (this._chipFocusSubscription) {\n      this._chipFocusSubscription.unsubscribe();\n      this._chipFocusSubscription = null;\n    }\n\n    if (this._chipBlurSubscription) {\n      this._chipBlurSubscription.unsubscribe();\n      this._chipBlurSubscription = null;\n    }\n\n    if (this._chipSelectionSubscription) {\n      this._chipSelectionSubscription.unsubscribe();\n      this._chipSelectionSubscription = null;\n    }\n\n    if (this._chipRemoveSubscription) {\n      this._chipRemoveSubscription.unsubscribe();\n      this._chipRemoveSubscription = null;\n    }\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsSelection(): void {\n    this._chipSelectionSubscription = this.chipSelectionChanges.subscribe(event => {\n      event.source.selected\n        ? this._selectionModel.select(event.source)\n        : this._selectionModel.deselect(event.source);\n\n      // For single selection chip list, make sure the deselected value is unselected.\n      if (!this.multiple) {\n        this.chips.forEach(chip => {\n          if (!this._selectionModel.isSelected(chip) && chip.selected) {\n            chip.deselect();\n          }\n        });\n      }\n\n      if (event.isUserInput) {\n        this._propagateChanges();\n      }\n    });\n  }\n\n  /** Listens to user-generated selection events on each chip. */\n  private _listenToChipsFocus(): void {\n    this._chipFocusSubscription = this.chipFocusChanges.subscribe(event => {\n      let chipIndex: number = this.chips.toArray().indexOf(event.chip);\n\n      if (this._isValidIndex(chipIndex)) {\n        this._keyManager.updateActiveItemIndex(chipIndex);\n      }\n      this.stateChanges.next();\n    });\n\n    this._chipBlurSubscription = this.chipBlurChanges.subscribe(() => {\n      this._blur();\n      this.stateChanges.next();\n    });\n  }\n\n  private _listenToChipsRemoved(): void {\n    this._chipRemoveSubscription = this.chipRemoveChanges.subscribe(event => {\n      const chip = event.chip;\n      const chipIndex = this.chips.toArray().indexOf(event.chip);\n\n      // In case the chip that will be removed is currently focused, we temporarily store\n      // the index in order to be able to determine an appropriate sibling chip that will\n      // receive focus.\n      if (this._isValidIndex(chipIndex) && chip._hasFocus) {\n        this._lastDestroyedChipIndex = chipIndex;\n      }\n    });\n  }\n\n  /** Checks whether an event comes from inside a chip element. */\n  private _originatesFromChip(event: Event): boolean {\n    let currentElement = event.target as HTMLElement | null;\n\n    while (currentElement && currentElement !== this._elementRef.nativeElement) {\n      if (currentElement.classList.contains('mat-chip')) {\n        return true;\n      }\n\n      currentElement = currentElement.parentElement;\n    }\n\n    return false;\n  }\n\n  /** Checks whether any of the chips is focused. */\n  private _hasFocusedChip() {\n    return this.chips.some(chip => chip._hasFocus);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, ElementRef, EventEmitter, Inject, Input, OnChanges, Output} from '@angular/core';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipList} from './chip-list';\nimport {MatChipTextControl} from './chip-text-control';\n\n\n/** Represents an input event on a `matChipInput`. */\nexport interface MatChipInputEvent {\n  /** The native `<input>` element that the event is being fired for. */\n  input: HTMLInputElement;\n\n  /** The value of the input. */\n  value: string;\n}\n\n// Increasing integer for generating unique ids.\nlet nextUniqueId = 0;\n\n/**\n * Directive that adds chip-specific behaviors to an input element inside `<mat-form-field>`.\n * May be placed inside or outside of an `<mat-chip-list>`.\n */\n@Directive({\n  selector: 'input[matChipInputFor]',\n  exportAs: 'matChipInput, matChipInputFor',\n  host: {\n    'class': 'mat-chip-input mat-input-element',\n    '(keydown)': '_keydown($event)',\n    '(blur)': '_blur()',\n    '(focus)': '_focus()',\n    '(input)': '_onInput()',\n    '[id]': 'id',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.placeholder]': 'placeholder || null',\n    '[attr.aria-invalid]': '_chipList && _chipList.ngControl ? _chipList.ngControl.invalid : null',\n  }\n})\nexport class MatChipInput implements MatChipTextControl, OnChanges {\n  /** Whether the control is focused. */\n  focused: boolean = false;\n  _chipList: MatChipList;\n\n  /** Register input for chip list */\n  @Input('matChipInputFor')\n  set chipList(value: MatChipList) {\n    if (value) {\n      this._chipList = value;\n      this._chipList.registerInput(this);\n    }\n  }\n\n  /**\n   * Whether or not the chipEnd event will be emitted when the input is blurred.\n   */\n  @Input('matChipInputAddOnBlur')\n  get addOnBlur(): boolean { return this._addOnBlur; }\n  set addOnBlur(value: boolean) { this._addOnBlur = coerceBooleanProperty(value); }\n  _addOnBlur: boolean = false;\n\n  /**\n   * The list of key codes that will trigger a chipEnd event.\n   *\n   * Defaults to `[ENTER]`.\n   */\n  @Input('matChipInputSeparatorKeyCodes')\n  separatorKeyCodes: number[] | Set<number> = this._defaultOptions.separatorKeyCodes;\n\n  /** Emitted when a chip is to be added. */\n  @Output('matChipInputTokenEnd')\n  chipEnd: EventEmitter<MatChipInputEvent> = new EventEmitter<MatChipInputEvent>();\n\n  /** The input's placeholder text. */\n  @Input() placeholder: string = '';\n\n  /** Unique id for the input. */\n  @Input() id: string = `mat-chip-list-input-${nextUniqueId++}`;\n\n  /** Whether the input is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled || (this._chipList && this._chipList.disabled); }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Whether the input is empty. */\n  get empty(): boolean { return !this._inputElement.value; }\n\n  /** The native input element to which this directive is attached. */\n  protected _inputElement: HTMLInputElement;\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement>,\n    @Inject(MAT_CHIPS_DEFAULT_OPTIONS) private _defaultOptions: MatChipsDefaultOptions) {\n    this._inputElement = this._elementRef.nativeElement as HTMLInputElement;\n  }\n\n  ngOnChanges() {\n    this._chipList.stateChanges.next();\n  }\n\n  /** Utility method to make host definition/tests more clear. */\n  _keydown(event?: KeyboardEvent) {\n    this._emitChipEnd(event);\n  }\n\n  /** Checks to see if the blur should emit the (chipEnd) event. */\n  _blur() {\n    if (this.addOnBlur) {\n      this._emitChipEnd();\n    }\n    this.focused = false;\n    // Blur the chip list if it is not focused\n    if (!this._chipList.focused) {\n      this._chipList._blur();\n    }\n    this._chipList.stateChanges.next();\n  }\n\n  _focus() {\n    this.focused = true;\n    this._chipList.stateChanges.next();\n  }\n\n  /** Checks to see if the (chipEnd) event needs to be emitted. */\n  _emitChipEnd(event?: KeyboardEvent) {\n    if (!this._inputElement.value && !!event) {\n      this._chipList._keydown(event);\n    }\n    if (!event || this._isSeparatorKey(event.keyCode)) {\n      this.chipEnd.emit({ input: this._inputElement, value: this._inputElement.value });\n\n      if (event) {\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onInput() {\n    // Let chip list know whenever the value changes.\n    this._chipList.stateChanges.next();\n  }\n\n  /** Focuses the input. */\n  focus(): void {\n    this._inputElement.focus();\n  }\n\n  /** Checks whether a keycode is one of the configured separators. */\n  private _isSeparatorKey(keyCode: number) {\n    const separators = this.separatorKeyCodes;\n    return Array.isArray(separators) ? separators.indexOf(keyCode) > -1 : separators.has(keyCode);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ENTER} from '@angular/cdk/keycodes';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatChip, MatChipAvatar, MatChipRemove, MatChipTrailingIcon} from './chip';\nimport {MAT_CHIPS_DEFAULT_OPTIONS, MatChipsDefaultOptions} from './chip-default-options';\nimport {MatChipInput} from './chip-input';\nimport {MatChipList} from './chip-list';\n\nconst CHIP_DECLARATIONS = [\n  MatChipList,\n  MatChip,\n  MatChipInput,\n  MatChipRemove,\n  MatChipAvatar,\n  MatChipTrailingIcon,\n];\n\n@NgModule({\n  exports: CHIP_DECLARATIONS,\n  declarations: CHIP_DECLARATIONS,\n  providers: [\n    ErrorStateMatcher,\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER]\n      } as MatChipsDefaultOptions\n    }\n  ]\n})\nexport class MatChipsModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\nimport {ScrollStrategy} from '@angular/cdk/overlay';\n\n/** Valid ARIA roles for a dialog element. */\nexport type DialogRole = 'dialog' | 'alertdialog';\n\n/** Possible overrides for a dialog's position. */\nexport interface DialogPosition {\n  /** Override for the dialog's top position. */\n  top?: string;\n\n  /** Override for the dialog's bottom position. */\n  bottom?: string;\n\n  /** Override for the dialog's left position. */\n  left?: string;\n\n  /** Override for the dialog's right position. */\n  right?: string;\n}\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nexport class MatDialogConfig<D = any> {\n\n  /**\n   * Where the attached component should live in Angular's *logical* component tree.\n   * This affects what is available for injection and the change detection order for the\n   * component instantiated inside of the dialog. This does not affect where the dialog\n   * content will be rendered.\n   */\n  viewContainerRef?: ViewContainerRef;\n\n  /** ID for the dialog. If omitted, a unique one will be generated. */\n  id?: string;\n\n  /** The ARIA role of the dialog element. */\n  role?: DialogRole = 'dialog';\n\n  /** Custom class for the overlay pane. */\n  panelClass?: string | string[] = '';\n\n  /** Whether the dialog has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop, */\n  backdropClass?: string = '';\n\n  /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n  disableClose?: boolean = false;\n\n  /** Width of the dialog. */\n  width?: string = '';\n\n  /** Height of the dialog. */\n  height?: string = '';\n\n  /** Min-width of the dialog. If a number is provided, pixel units are assumed. */\n  minWidth?: number | string;\n\n  /** Min-height of the dialog. If a number is provided, pixel units are assumed. */\n  minHeight?: number | string;\n\n  /** Max-width of the dialog. If a number is provided, pixel units are assumed. Defaults to 80vw */\n  maxWidth?: number | string = '80vw';\n\n  /** Max-height of the dialog. If a number is provided, pixel units are assumed. */\n  maxHeight?: number | string;\n\n  /** Position overrides. */\n  position?: DialogPosition;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Layout direction for the dialog's content. */\n  direction?: Direction;\n\n  /** ID of the element that describes the dialog. */\n  ariaDescribedBy?: string | null = null;\n\n  /** Aria label to assign to the dialog element */\n  ariaLabel?: string | null = null;\n\n  /** Whether the dialog should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the dialog should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n\n  /** Scroll strategy to be used for the dialog. */\n  scrollStrategy?: ScrollStrategy;\n\n  /**\n   * Whether the dialog should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\nconst animationBody = [\n  // Note: The `enter` animation transitions to `transform: none`, because for some reason\n  // specifying the transform explicitly, causes IE both to blur the dialog content and\n  // decimate the animation performance. Leaving it as `none` solves both issues.\n  state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n  state('enter', style({transform: 'none'})),\n  transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)',\n      style({transform: 'none', opacity: 1}))),\n  transition('* => void, * => exit',\n      animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0}))),\n];\n\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nexport const matDialogAnimations: {\n  readonly dialogContainer: AnimationTriggerMetadata;\n  readonly slideDialog: AnimationTriggerMetadata;\n} = {\n  /** Animation that is applied on the dialog container by defalt. */\n  dialogContainer: trigger('dialogContainer', animationBody),\n\n  /** @deprecated @breaking-change 8.0.0 Use `matDialogAnimations.dialogContainer` instead. */\n  slideDialog: trigger('slideDialog', animationBody)\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  ElementRef,\n  EmbeddedViewRef,\n  EventEmitter,\n  Inject,\n  Optional,\n  ChangeDetectorRef,\n  ViewChild,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/common';\nimport {AnimationEvent} from '@angular/animations';\nimport {matDialogAnimations} from './dialog-animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  CdkPortalOutlet,\n  TemplatePortal\n} from '@angular/cdk/portal';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\nimport {MatDialogConfig} from './dialog-config';\n\n\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nexport function throwMatDialogContentAlreadyAttachedError() {\n  throw Error('Attempting to attach dialog content after content is already attached');\n}\n\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-dialog-container',\n  templateUrl: 'dialog-container.html',\n  styleUrls: ['dialog.css'],\n  encapsulation: ViewEncapsulation.None,\n  // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n  // tslint:disable-next-line:validate-decorators\n  changeDetection: ChangeDetectionStrategy.Default,\n  animations: [matDialogAnimations.dialogContainer],\n  host: {\n    'class': 'mat-dialog-container',\n    'tabindex': '-1',\n    'aria-modal': 'true',\n    '[attr.id]': '_id',\n    '[attr.role]': '_config.role',\n    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n    '[attr.aria-label]': '_config.ariaLabel',\n    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n    '[@dialogContainer]': '_state',\n    '(@dialogContainer.start)': '_onAnimationStart($event)',\n    '(@dialogContainer.done)': '_onAnimationDone($event)',\n  },\n})\nexport class MatDialogContainer extends BasePortalOutlet {\n  /** The portal outlet inside of this container into which the dialog content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The class that traps and manages focus within the dialog. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n  private _elementFocusedBeforeDialogWasOpened: HTMLElement | null = null;\n\n  /** State of the dialog animation. */\n  _state: 'void' | 'enter' | 'exit' = 'enter';\n\n  /** Emits when an animation state changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** ID of the element that should be considered as the dialog's label. */\n  _ariaLabelledBy: string | null = null;\n\n  /** ID for the container DOM element. */\n  _id: string;\n\n  constructor(\n    private _elementRef: ElementRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(DOCUMENT) private _document: any,\n    /** The dialog configuration. */\n    public _config: MatDialogConfig) {\n\n    super();\n  }\n\n  /**\n   * Attach a ComponentPortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /**\n   * Attach a TemplatePortal as content to this dialog container.\n   * @param portal Portal to be attached as the dialog content.\n   */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    if (this._portalOutlet.hasAttached()) {\n      throwMatDialogContentAlreadyAttachedError();\n    }\n\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    // If were to attempt to focus immediately, then the content of the dialog would not yet be\n    // ready in instances where change detection has to run first. To deal with this, we simply\n    // wait for the microtask queue to be empty.\n    if (this._config.autoFocus) {\n      this._focusTrap.focusInitialElementWhenReady();\n    }\n  }\n\n  /** Restores focus to the element that was focused before the dialog opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeDialogWasOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the dialog was opened. */\n  private _savePreviouslyFocusedElement() {\n    if (this._document) {\n      this._elementFocusedBeforeDialogWasOpened = this._document.activeElement as HTMLElement;\n\n      // Note that there is no focus method when rendering on the server.\n      if (this._elementRef.nativeElement.focus) {\n        // Move focus onto the dialog immediately in order to prevent the user from accidentally\n        // opening multiple dialogs at the same time. Needs to be async, because the element\n        // may not be focusable immediately.\n        Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n      }\n    }\n  }\n\n  /** Callback, invoked whenever an animation on the host completes. */\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'enter') {\n      this._trapFocus();\n    } else if (event.toState === 'exit') {\n      this._restoreFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Callback, invoked when an animation on the host starts. */\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  /** Starts the dialog exit animation. */\n  _startExitAnimation(): void {\n    this._state = 'exit';\n\n    // Mark the container for check so it can react if the\n    // view container is using OnPush change detection.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {GlobalPositionStrategy, OverlayRef} from '@angular/cdk/overlay';\nimport {Location} from '@angular/common';\nimport {Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {DialogPosition} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\n\n\n// TODO(jelbourn): resizing\n\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nexport class MatDialogRef<T, R = any> {\n  /** The instance of component opened into the dialog. */\n  componentInstance: T;\n\n  /** Whether the user is allowed to close the dialog. */\n  disableClose: boolean | undefined = this._containerInstance._config.disableClose;\n\n  /** Subject for notifying the user that the dialog has finished opening. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Subject for notifying the user that the dialog has finished closing. */\n  private readonly _afterClosed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the dialog has started closing. */\n  private readonly _beforeClosed = new Subject<R | undefined>();\n\n  /** Result to be passed to afterClosed. */\n  private _result: R | undefined;\n\n  constructor(\n    private _overlayRef: OverlayRef,\n    public _containerInstance: MatDialogContainer,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location,\n    readonly id: string = `mat-dialog-${uniqueId++}`) {\n\n    // Pass the id along to the container.\n    _containerInstance._id = id;\n\n    // Emit when opening animation completes\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'enter'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    _containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'exit'),\n      take(1)\n    ).subscribe(() => this._overlayRef.dispose());\n\n    _overlayRef.detachments().subscribe(() => {\n      this._beforeClosed.next(this._result);\n      this._beforeClosed.complete();\n      this._afterClosed.next(this._result);\n      this._afterClosed.complete();\n      this.componentInstance = null!;\n      this._overlayRef.dispose();\n    });\n\n    _overlayRef.keydownEvents()\n      .pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose))\n      .subscribe(() => this.close());\n  }\n\n  /**\n   * Close the dialog.\n   * @param dialogResult Optional result to return to the dialog opener.\n   */\n  close(dialogResult?: R): void {\n    this._result = dialogResult;\n\n    // Transition the backdrop in parallel to the dialog.\n    this._containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'start'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._beforeClosed.next(dialogResult);\n      this._beforeClosed.complete();\n      this._overlayRef.detachBackdrop();\n    });\n\n    this._containerInstance._startExitAnimation();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished closing.\n   */\n  afterClosed(): Observable<R | undefined> {\n    return this._afterClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   */\n  beforeClosed(): Observable<R | undefined> {\n    return this._beforeClosed.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n\n  /**\n   * Updates the dialog's position.\n   * @param position New dialog position.\n   */\n  updatePosition(position?: DialogPosition): this {\n    let strategy = this._getPositionStrategy();\n\n    if (position && (position.left || position.right)) {\n      position.left ? strategy.left(position.left) : strategy.right(position.right);\n    } else {\n      strategy.centerHorizontally();\n    }\n\n    if (position && (position.top || position.bottom)) {\n      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n    } else {\n      strategy.centerVertically();\n    }\n\n    this._overlayRef.updatePosition();\n\n    return this;\n  }\n\n  /**\n   * Updates the dialog's width and height.\n   * @param width New width of the dialog.\n   * @param height New height of the dialog.\n   */\n  updateSize(width: string = '', height: string = ''): this {\n    this._getPositionStrategy().width(width).height(height);\n    this._overlayRef.updatePosition();\n    return this;\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog is finished opening.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  afterOpen(): Observable<void> {\n    return this.afterOpened();\n  }\n\n  /**\n   * Gets an observable that is notified when the dialog has started closing.\n   * @deprecated Use `beforeClosed` instead.\n   * @breaking-change 8.0.0\n   */\n  beforeClose(): Observable<R | undefined> {\n    return this.beforeClosed();\n  }\n\n  /** Fetches the position strategy object from the overlay ref. */\n  private _getPositionStrategy(): GlobalPositionStrategy {\n    return this._overlayRef.getConfig().positionStrategy as GlobalPositionStrategy;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {\n  Overlay,\n  OverlayConfig,\n  OverlayContainer,\n  OverlayRef,\n  ScrollStrategy,\n} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {Location} from '@angular/common';\nimport {\n  Inject,\n  Injectable,\n  InjectionToken,\n  Injector,\n  OnDestroy,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n} from '@angular/core';\nimport {defer, Observable, of as observableOf, Subject} from 'rxjs';\nimport {startWith} from 'rxjs/operators';\nimport {MatDialogConfig} from './dialog-config';\nimport {MatDialogContainer} from './dialog-container';\nimport {MatDialogRef} from './dialog-ref';\n\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nexport const MAT_DIALOG_DATA = new InjectionToken<any>('MatDialogData');\n\n/** Injection token that can be used to specify default dialog options. */\nexport const MAT_DIALOG_DEFAULT_OPTIONS =\n    new InjectionToken<MatDialogConfig>('mat-dialog-default-options');\n\n/** Injection token that determines the scroll handling while the dialog is open. */\nexport const MAT_DIALOG_SCROLL_STRATEGY =\n    new InjectionToken<() => ScrollStrategy>('mat-dialog-scroll-strategy');\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay: Overlay): () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport function MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay: Overlay):\n  () => ScrollStrategy {\n  return () => overlay.scrollStrategies.block();\n}\n\n/** @docs-private */\nexport const MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n  provide: MAT_DIALOG_SCROLL_STRATEGY,\n  deps: [Overlay],\n  useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n\n/**\n * Service to open Material Design modal dialogs.\n */\n@Injectable()\nexport class MatDialog implements OnDestroy {\n  private _openDialogsAtThisLevel: MatDialogRef<any>[] = [];\n  private readonly _afterAllClosedAtThisLevel = new Subject<void>();\n  private readonly _afterOpenedAtThisLevel = new Subject<MatDialogRef<any>>();\n  private _ariaHiddenElements = new Map<Element, string|null>();\n  private _scrollStrategy: () => ScrollStrategy;\n\n  /** Keeps track of the currently-open dialogs. */\n  get openDialogs(): MatDialogRef<any>[] {\n    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n  }\n\n  /** Stream that emits when a dialog has been opened. */\n  get afterOpened(): Subject<MatDialogRef<any>> {\n    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when a dialog has been opened.\n   * @deprecated Use `afterOpened` instead.\n   * @breaking-change 8.0.0\n   */\n  get afterOpen(): Subject<MatDialogRef<any>> {\n    return this.afterOpened;\n  }\n\n  get _afterAllClosed(): Subject<void> {\n    const parent = this._parentDialog;\n    return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n  }\n\n  /**\n   * Stream that emits when all open dialog have finished closing.\n   * Will emit on subscribe if there are no open dialogs to begin with.\n   */\n  readonly afterAllClosed: Observable<void> = defer<void>(() => this.openDialogs.length ?\n      this._afterAllClosed :\n      this._afterAllClosed.pipe(startWith(undefined)));\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() private _location: Location,\n      @Optional() @Inject(MAT_DIALOG_DEFAULT_OPTIONS) private _defaultOptions: MatDialogConfig,\n      @Inject(MAT_DIALOG_SCROLL_STRATEGY) scrollStrategy: any,\n      @Optional() @SkipSelf() private _parentDialog: MatDialog,\n      private _overlayContainer: OverlayContainer) {\n    this._scrollStrategy = scrollStrategy;\n  }\n\n  /**\n   * Opens a modal dialog containing the given component.\n   * @param componentOrTemplateRef Type of the component to load into the dialog,\n   *     or a TemplateRef to instantiate as the dialog content.\n   * @param config Extra configuration options.\n   * @returns Reference to the newly-opened dialog.\n   */\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n          config?: MatDialogConfig<D>): MatDialogRef<T, R> {\n\n    config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n\n    if (config.id && this.getDialogById(config.id)) {\n      throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n    }\n\n    const overlayRef = this._createOverlay(config);\n    const dialogContainer = this._attachDialogContainer(overlayRef, config);\n    const dialogRef = this._attachDialogContent<T, R>(componentOrTemplateRef,\n                                                      dialogContainer,\n                                                      overlayRef,\n                                                      config);\n\n    // If this is the first dialog that we're opening, hide all the non-overlay content.\n    if (!this.openDialogs.length) {\n      this._hideNonDialogContentFromAssistiveTechnology();\n    }\n\n    this.openDialogs.push(dialogRef);\n    dialogRef.afterClosed().subscribe(() => this._removeOpenDialog(dialogRef));\n    this.afterOpened.next(dialogRef);\n\n    return dialogRef;\n  }\n\n  /**\n   * Closes all of the currently-open dialogs.\n   */\n  closeAll(): void {\n    this._closeDialogs(this.openDialogs);\n  }\n\n  /**\n   * Finds an open dialog by its id.\n   * @param id ID to use when looking up the dialog.\n   */\n  getDialogById(id: string): MatDialogRef<any> | undefined {\n    return this.openDialogs.find(dialog => dialog.id === id);\n  }\n\n  ngOnDestroy() {\n    // Only close the dialogs at this level on destroy\n    // since the parent service may still be active.\n    this._closeDialogs(this._openDialogsAtThisLevel);\n  }\n\n  /**\n   * Creates the overlay into which the dialog will be loaded.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the OverlayRef for the created overlay.\n   */\n  private _createOverlay(config: MatDialogConfig): OverlayRef {\n    const overlayConfig = this._getOverlayConfig(config);\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an overlay config from a dialog config.\n   * @param dialogConfig The dialog configuration.\n   * @returns The overlay configuration.\n   */\n  private _getOverlayConfig(dialogConfig: MatDialogConfig): OverlayConfig {\n    const state = new OverlayConfig({\n      positionStrategy: this._overlay.position().global(),\n      scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n      panelClass: dialogConfig.panelClass,\n      hasBackdrop: dialogConfig.hasBackdrop,\n      direction: dialogConfig.direction,\n      minWidth: dialogConfig.minWidth,\n      minHeight: dialogConfig.minHeight,\n      maxWidth: dialogConfig.maxWidth,\n      maxHeight: dialogConfig.maxHeight,\n      disposeOnNavigation: dialogConfig.closeOnNavigation\n    });\n\n    if (dialogConfig.backdropClass) {\n      state.backdropClass = dialogConfig.backdropClass;\n    }\n\n    return state;\n  }\n\n  /**\n   * Attaches an MatDialogContainer to a dialog's already-created overlay.\n   * @param overlay Reference to the dialog's underlying overlay.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to a ComponentRef for the attached container.\n   */\n  private _attachDialogContainer(overlay: OverlayRef, config: MatDialogConfig): MatDialogContainer {\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatDialogConfig, config]\n    ]));\n    const containerPortal =\n        new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector);\n    const containerRef = overlay.attach<MatDialogContainer>(containerPortal);\n\n    return containerRef.instance;\n  }\n\n  /**\n   * Attaches the user-provided component to the already-created MatDialogContainer.\n   * @param componentOrTemplateRef The type of component being loaded into the dialog,\n   *     or a TemplateRef to instantiate as the content.\n   * @param dialogContainer Reference to the wrapping MatDialogContainer.\n   * @param overlayRef Reference to the overlay in which the dialog resides.\n   * @param config The dialog configuration.\n   * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n   */\n  private _attachDialogContent<T, R>(\n      componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n      dialogContainer: MatDialogContainer,\n      overlayRef: OverlayRef,\n      config: MatDialogConfig): MatDialogRef<T, R> {\n\n    // Create a reference to the dialog we're creating in order to give the user a handle\n    // to modify and close it.\n    const dialogRef =\n        new MatDialogRef<T, R>(overlayRef, dialogContainer, this._location, config.id);\n\n    // When the dialog backdrop is clicked, we want to close it.\n    if (config.hasBackdrop) {\n      overlayRef.backdropClick().subscribe(() => {\n        if (!dialogRef.disableClose) {\n          dialogRef.close();\n        }\n      });\n    }\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      dialogContainer.attachTemplatePortal(\n        new TemplatePortal<T>(componentOrTemplateRef, null!,\n          <any>{ $implicit: config.data, dialogRef }));\n    } else {\n      const injector = this._createInjector<T>(config, dialogRef, dialogContainer);\n      const contentRef = dialogContainer.attachComponentPortal<T>(\n          new ComponentPortal(componentOrTemplateRef, undefined, injector));\n      dialogRef.componentInstance = contentRef.instance;\n    }\n\n    dialogRef\n      .updateSize(config.width, config.height)\n      .updatePosition(config.position);\n\n    return dialogRef;\n  }\n\n  /**\n   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n   * of a dialog to close itself and, optionally, to return a value.\n   * @param config Config object that is used to construct the dialog.\n   * @param dialogRef Reference to the dialog.\n   * @param container Dialog container element that wraps all of the contents.\n   * @returns The custom injector that can be used inside the dialog.\n   */\n  private _createInjector<T>(\n      config: MatDialogConfig,\n      dialogRef: MatDialogRef<T>,\n      dialogContainer: MatDialogContainer): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n\n    // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n    // content are created out of the same ViewContainerRef and as such, are siblings for injector\n    // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n    // added to the injection tokens.\n    const injectionTokens = new WeakMap<any, any>([\n      [MatDialogContainer, dialogContainer],\n      [MAT_DIALOG_DATA, config.data],\n      [MatDialogRef, dialogRef]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n\n  /**\n   * Removes a dialog from the array of open dialogs.\n   * @param dialogRef Dialog to be removed.\n   */\n  private _removeOpenDialog(dialogRef: MatDialogRef<any>) {\n    const index = this.openDialogs.indexOf(dialogRef);\n\n    if (index > -1) {\n      this.openDialogs.splice(index, 1);\n\n      // If all the dialogs were closed, remove/restore the `aria-hidden`\n      // to a the siblings and emit to the `afterAllClosed` stream.\n      if (!this.openDialogs.length) {\n        this._ariaHiddenElements.forEach((previousValue, element) => {\n          if (previousValue) {\n            element.setAttribute('aria-hidden', previousValue);\n          } else {\n            element.removeAttribute('aria-hidden');\n          }\n        });\n\n        this._ariaHiddenElements.clear();\n        this._afterAllClosed.next();\n      }\n    }\n  }\n\n  /**\n   * Hides all of the content that isn't an overlay from assistive technology.\n   */\n  private _hideNonDialogContentFromAssistiveTechnology() {\n    const overlayContainer = this._overlayContainer.getContainerElement();\n\n    // Ensure that the overlay container is attached to the DOM.\n    if (overlayContainer.parentElement) {\n      const siblings = overlayContainer.parentElement.children;\n\n      for (let i = siblings.length - 1; i > -1; i--) {\n        let sibling = siblings[i];\n\n        if (sibling !== overlayContainer &&\n          sibling.nodeName !== 'SCRIPT' &&\n          sibling.nodeName !== 'STYLE' &&\n          !sibling.hasAttribute('aria-live')) {\n\n          this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n          sibling.setAttribute('aria-hidden', 'true');\n        }\n      }\n    }\n  }\n\n  /** Closes all of the dialogs in an array. */\n  private _closeDialogs(dialogs: MatDialogRef<any>[]) {\n    let i = dialogs.length;\n\n    while (i--) {\n      // The `_openDialogs` property isn't updated after close until the rxjs subscription\n      // runs on the next microtask, in addition to modifying the array as we're going\n      // through it. We loop through all of them and call close without assuming that\n      // they'll be removed from the list instantaneously.\n      dialogs[i].close();\n    }\n  }\n\n}\n\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(\n    config?: MatDialogConfig, defaultOptions?: MatDialogConfig): MatDialogConfig {\n  return {...defaultOptions, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  OnChanges,\n  OnInit,\n  Optional,\n  SimpleChanges,\n  ElementRef,\n} from '@angular/core';\nimport {MatDialog} from './dialog';\nimport {MatDialogRef} from './dialog-ref';\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n\n/**\n * Button that will close the current dialog.\n */\n@Directive({\n  selector: `button[mat-dialog-close], button[matDialogClose]`,\n  exportAs: 'matDialogClose',\n  host: {\n    '(click)': 'dialogRef.close(dialogResult)',\n    '[attr.aria-label]': 'ariaLabel',\n    'type': 'button', // Prevents accidental form submits.\n  }\n})\nexport class MatDialogClose implements OnInit, OnChanges {\n  /** Screenreader label for the button. */\n  @Input('aria-label') ariaLabel: string = 'Close dialog';\n\n  /** Dialog close input. */\n  @Input('mat-dialog-close') dialogResult: any;\n\n  @Input('matDialogClose') _matDialogClose: any;\n\n  constructor(\n    @Optional() public dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this.dialogRef) {\n      // When this directive is included in a dialog via TemplateRef (rather than being\n      // in a Component), the DialogRef isn't available via injection because embedded\n      // views cannot be given a custom injector. Instead, we look up the DialogRef by\n      // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n      // be resolved at constructor time.\n      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    const proxiedChange = changes._matDialogClose || changes._matDialogCloseResult;\n\n    if (proxiedChange) {\n      this.dialogResult = proxiedChange.currentValue;\n    }\n  }\n}\n\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\n@Directive({\n  selector: '[mat-dialog-title], [matDialogTitle]',\n  exportAs: 'matDialogTitle',\n  host: {\n    'class': 'mat-dialog-title',\n    '[id]': 'id',\n  },\n})\nexport class MatDialogTitle implements OnInit {\n  @Input() id = `mat-dialog-title-${dialogElementUid++}`;\n\n  constructor(\n    @Optional() private _dialogRef: MatDialogRef<any>,\n    private _elementRef: ElementRef<HTMLElement>,\n    private _dialog: MatDialog) {}\n\n  ngOnInit() {\n    if (!this._dialogRef) {\n      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs)!;\n    }\n\n    if (this._dialogRef) {\n      Promise.resolve().then(() => {\n        const container = this._dialogRef._containerInstance;\n\n        if (container && !container._ariaLabelledBy) {\n          container._ariaLabelledBy = this.id;\n        }\n      });\n    }\n  }\n}\n\n\n/**\n * Scrollable content container of a dialog.\n */\n@Directive({\n  selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n  host: {'class': 'mat-dialog-content'}\n})\nexport class MatDialogContent {}\n\n\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\n@Directive({\n  selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n  host: {'class': 'mat-dialog-actions'}\n})\nexport class MatDialogActions {}\n\n\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element: ElementRef<HTMLElement>, openDialogs: MatDialogRef<any>[]) {\n  let parent: HTMLElement | null = element.nativeElement.parentElement;\n\n  while (parent && !parent.classList.contains('mat-dialog-container')) {\n    parent = parent.parentElement;\n  }\n\n  return parent ? openDialogs.find(dialog => dialog.id === parent!.id) : null;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MatDialog} from './dialog';\nimport {MatDialogContainer} from './dialog-container';\nimport {\n  MatDialogActions,\n  MatDialogClose,\n  MatDialogContent,\n  MatDialogTitle,\n} from './dialog-content-directives';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    PortalModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogContent,\n    MatDialogActions,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n  ],\n  providers: [\n    MatDialog,\n    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n  ],\n  entryComponents: [MatDialogContainer],\n})\nexport class MatDialogModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkTextareaAutosize} from '@angular/cdk/text-field';\nimport {Directive, Input} from '@angular/core';\n\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n  exportAs: 'matTextareaAutosize',\n  inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n  host: {\n    'class': 'cdk-textarea-autosize mat-autosize',\n    // Textarea elements that have the directive applied should have a single row by default.\n    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n    'rows': '1',\n    '(input)': '_noopInputHandler()',\n  },\n})\nexport class MatTextareaAutosize extends CdkTextareaAutosize {\n  @Input()\n  get matAutosizeMinRows(): number { return this.minRows; }\n  set matAutosizeMinRows(value: number) { this.minRows = value; }\n\n  @Input()\n  get matAutosizeMaxRows(): number { return this.maxRows; }\n  set matAutosizeMaxRows(value: number) { this.maxRows = value; }\n\n  @Input('mat-autosize')\n  get matAutosize(): boolean { return this.enabled; }\n  set matAutosize(value: boolean) { this.enabled = value; }\n\n  @Input()\n  get matTextareaAutosize(): boolean { return this.enabled; }\n  set matTextareaAutosize(value: boolean) { this.enabled = value; }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nexport const MAT_INPUT_VALUE_ACCESSOR =\n    new InjectionToken<{value: any}>('MAT_INPUT_VALUE_ACCESSOR');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {getSupportedInputTypes, Platform} from '@angular/cdk/platform';\nimport {AutofillMonitor} from '@angular/cdk/text-field';\nimport {\n  Directive,\n  DoCheck,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Self,\n} from '@angular/core';\nimport {FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {\n  CanUpdateErrorState,\n  CanUpdateErrorStateCtor,\n  ErrorStateMatcher,\n  mixinErrorState,\n} from '@angular/material/core';\nimport {MatFormFieldControl} from '@angular/material/form-field';\nimport {Subject} from 'rxjs';\nimport {getMatInputUnsupportedTypeError} from './input-errors';\nimport {MAT_INPUT_VALUE_ACCESSOR} from './input-value-accessor';\n\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n  'button',\n  'checkbox',\n  'file',\n  'hidden',\n  'image',\n  'radio',\n  'range',\n  'reset',\n  'submit'\n];\n\nlet nextUniqueId = 0;\n\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nexport class MatInputBase {\n  constructor(public _defaultErrorStateMatcher: ErrorStateMatcher,\n              public _parentForm: NgForm,\n              public _parentFormGroup: FormGroupDirective,\n              /** @docs-private */\n              public ngControl: NgControl) {}\n}\nexport const _MatInputMixinBase: CanUpdateErrorStateCtor & typeof MatInputBase =\n    mixinErrorState(MatInputBase);\n\n/** Directive that allows a native input to work inside a `MatFormField`. */\n@Directive({\n  selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n  exportAs: 'matInput',\n  host: {\n    /**\n     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n     */\n    'class': 'mat-input-element mat-form-field-autofill-control',\n    '[class.mat-input-server]': '_isServer',\n    // Native input properties that are overwritten by Angular inputs need to be synced with\n    // the native input element. Otherwise property bindings for those don't work.\n    '[attr.id]': 'id',\n    '[attr.placeholder]': 'placeholder',\n    '[disabled]': 'disabled',\n    '[required]': 'required',\n    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n    '[attr.aria-describedby]': '_ariaDescribedby || null',\n    '[attr.aria-invalid]': 'errorState',\n    '[attr.aria-required]': 'required.toString()',\n    '(blur)': '_focusChanged(false)',\n    '(focus)': '_focusChanged(true)',\n    '(input)': '_onInput()',\n  },\n  providers: [{provide: MatFormFieldControl, useExisting: MatInput}],\n})\nexport class MatInput extends _MatInputMixinBase implements MatFormFieldControl<any>, OnChanges,\n    OnDestroy, OnInit, DoCheck, CanUpdateErrorState {\n  protected _uid = `mat-input-${nextUniqueId++}`;\n  protected _previousNativeValue: any;\n  private _inputValueAccessor: {value: any};\n  /** The aria-describedby attribute on the input for improved a11y. */\n  _ariaDescribedby: string;\n\n  /** Whether the component is being rendered on the server. */\n  _isServer = false;\n\n  /** Whether the component is a native html select. */\n  _isNativeSelect = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  focused: boolean = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  readonly stateChanges: Subject<void> = new Subject<void>();\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  controlType: string = 'mat-input';\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  autofilled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get disabled(): boolean {\n    if (this.ngControl && this.ngControl.disabled !== null) {\n      return this.ngControl.disabled;\n    }\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    // Browsers may not fire the blur event if the input is disabled too quickly.\n    // Reset from here to ensure that the element doesn't become stuck.\n    if (this.focused) {\n      this.focused = false;\n      this.stateChanges.next();\n    }\n  }\n  protected _disabled = false;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get id(): string { return this._id; }\n  set id(value: string) { this._id = value || this._uid; }\n  protected _id: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input() placeholder: string;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  protected _required = false;\n\n  /** Input type of the element. */\n  @Input()\n  get type(): string { return this._type; }\n  set type(value: string) {\n    this._type = value || 'text';\n    this._validateType();\n\n    // When using Angular inputs, developers are no longer able to set the properties on the native\n    // input element. To ensure that bindings for `type` work, we need to sync the setter\n    // with the native property. Textarea elements don't support the type property or attribute.\n    if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n      (this._elementRef.nativeElement as HTMLInputElement).type = this._type;\n    }\n  }\n  protected _type = 'text';\n\n  /** An object used to control when error messages are shown. */\n  @Input() errorStateMatcher: ErrorStateMatcher;\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  @Input()\n  get value(): string { return this._inputValueAccessor.value; }\n  set value(value: string) {\n    if (value !== this.value) {\n      this._inputValueAccessor.value = value;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Whether the element is readonly. */\n  @Input()\n  get readonly(): boolean { return this._readonly; }\n  set readonly(value: boolean) { this._readonly = coerceBooleanProperty(value); }\n  private _readonly = false;\n\n  protected _neverEmptyInputTypes = [\n    'date',\n    'datetime',\n    'datetime-local',\n    'month',\n    'time',\n    'week'\n  ].filter(t => getSupportedInputTypes().has(t));\n\n  constructor(\n    protected _elementRef: ElementRef<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>,\n    protected _platform: Platform,\n    /** @docs-private */\n    @Optional() @Self() public ngControl: NgControl,\n    @Optional() _parentForm: NgForm,\n    @Optional() _parentFormGroup: FormGroupDirective,\n    _defaultErrorStateMatcher: ErrorStateMatcher,\n    @Optional() @Self() @Inject(MAT_INPUT_VALUE_ACCESSOR) inputValueAccessor: any,\n    private _autofillMonitor: AutofillMonitor,\n    ngZone: NgZone) {\n\n    super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n\n    const element = this._elementRef.nativeElement;\n\n    // If no input value accessor was explicitly specified, use the element as the input value\n    // accessor.\n    this._inputValueAccessor = inputValueAccessor || element;\n\n    this._previousNativeValue = this.value;\n\n    // Force setter to be called in case id was not specified.\n    this.id = this.id;\n\n    // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n    // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n    // exists on iOS, we only bother to install the listener on iOS.\n    if (_platform.IOS) {\n      ngZone.runOutsideAngular(() => {\n        _elementRef.nativeElement.addEventListener('keyup', (event: Event) => {\n          let el = event.target as HTMLInputElement;\n          if (!el.value && !el.selectionStart && !el.selectionEnd) {\n            // Note: Just setting `0, 0` doesn't fix the issue. Setting\n            // `1, 1` fixes it for the first time that you type text and\n            // then hold delete. Toggling to `1, 1` and then back to\n            // `0, 0` seems to completely fix it.\n            el.setSelectionRange(1, 1);\n            el.setSelectionRange(0, 0);\n          }\n        });\n      });\n    }\n\n    this._isServer = !this._platform.isBrowser;\n    this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n\n    if (this._isNativeSelect) {\n      this.controlType = (element as HTMLSelectElement).multiple ? 'mat-native-select-multiple' :\n                                                                   'mat-native-select';\n    }\n  }\n\n  ngOnInit() {\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n        this.autofilled = event.isAutofilled;\n        this.stateChanges.next();\n      });\n    }\n  }\n\n  ngOnChanges() {\n    this.stateChanges.next();\n  }\n\n  ngOnDestroy() {\n    this.stateChanges.complete();\n\n    if (this._platform.isBrowser) {\n      this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n    }\n  }\n\n  ngDoCheck() {\n    if (this.ngControl) {\n      // We need to re-evaluate this on every change detection cycle, because there are some\n      // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n      // that whatever logic is in here has to be super lean or we risk destroying the performance.\n      this.updateErrorState();\n    }\n\n    // We need to dirty-check the native element's value, because there are some cases where\n    // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n    // updating the value using `emitEvent: false`).\n    this._dirtyCheckNativeValue();\n  }\n\n  /** Focuses the input. */\n  focus(): void { this._elementRef.nativeElement.focus(); }\n\n  /** Callback for the cases where the focused state of the input changes. */\n  _focusChanged(isFocused: boolean) {\n    if (isFocused !== this.focused && !this.readonly) {\n      this.focused = isFocused;\n      this.stateChanges.next();\n    }\n  }\n\n  _onInput() {\n    // This is a noop function and is used to let Angular know whenever the value changes.\n    // Angular will run a new change detection each time the `input` event has been dispatched.\n    // It's necessary that Angular recognizes the value change, because when floatingLabel\n    // is set to false and Angular forms aren't used, the placeholder won't recognize the\n    // value changes and will not disappear.\n    // Listening to the input event wouldn't be necessary when the input is using the\n    // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n  }\n\n  /** Does some manual dirty checking on the native input `value` property. */\n  protected _dirtyCheckNativeValue() {\n    const newValue = this._elementRef.nativeElement.value;\n\n    if (this._previousNativeValue !== newValue) {\n      this._previousNativeValue = newValue;\n      this.stateChanges.next();\n    }\n  }\n\n  /** Make sure the input is a supported type. */\n  protected _validateType() {\n    if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n      throw getMatInputUnsupportedTypeError(this._type);\n    }\n  }\n\n  /** Checks whether the input type is one of the types that are never empty. */\n  protected _isNeverEmpty() {\n    return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n  }\n\n  /** Checks whether the input is invalid based on the native validation. */\n  protected _isBadInput() {\n    // The `validity` property won't be present on platform-server.\n    let validity = (this._elementRef.nativeElement as HTMLInputElement).validity;\n    return validity && validity.badInput;\n  }\n\n  /** Determines if the component host is a textarea. */\n  protected _isTextarea() {\n    return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get empty(): boolean {\n    return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n        !this.autofilled;\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  get shouldLabelFloat(): boolean {\n    if (this._isNativeSelect) {\n      // For a single-selection `<select>`, the label should float when the selected option has\n      // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n      // overlapping the label with the options.\n      const selectElement = this._elementRef.nativeElement as HTMLSelectElement;\n\n      return selectElement.multiple || !this.empty || !!selectElement.options[0].label ||\n          this.focused;\n    } else {\n      return this.focused || !this.empty;\n    }\n  }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  setDescribedByIds(ids: string[]) { this._ariaDescribedby = ids.join(' '); }\n\n  /**\n   * Implemented as part of MatFormFieldControl.\n   * @docs-private\n   */\n  onContainerClick() {\n    // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n    // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n    // \"minutes\" field was actually clicked. See: https://github.com/angular/material2/issues/12849\n    if (!this.focused) {\n      this.focus();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {TextFieldModule} from '@angular/cdk/text-field';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatTextareaAutosize} from './autosize';\nimport {MatInput} from './input';\n\n\n@NgModule({\n  declarations: [MatInput, MatTextareaAutosize],\n  imports: [\n    CommonModule,\n    TextFieldModule,\n    MatFormFieldModule,\n  ],\n  exports: [\n    TextFieldModule,\n    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n    // be used together with `MatFormField`.\n    MatFormFieldModule,\n    MatInput,\n    MatTextareaAutosize,\n  ],\n  providers: [ErrorStateMatcher],\n})\nexport class MatInputModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n\n/** Datepicker data that requires internationalization. */\n@Injectable({providedIn: 'root'})\nexport class MatDatepickerIntl {\n  /**\n   * Stream that emits whenever the labels here are changed. Use this to notify\n   * components if the labels have changed after initialization.\n   */\n  readonly changes: Subject<void> = new Subject<void>();\n\n  /** A label for the calendar popup (used by screen readers). */\n  calendarLabel: string = 'Calendar';\n\n  /** A label for the button used to open the calendar popup (used by screen readers). */\n  openCalendarLabel: string = 'Open calendar';\n\n  /** A label for the previous month button (used by screen readers). */\n  prevMonthLabel: string = 'Previous month';\n\n  /** A label for the next month button (used by screen readers). */\n  nextMonthLabel: string = 'Next month';\n\n  /** A label for the previous year button (used by screen readers). */\n  prevYearLabel: string = 'Previous year';\n\n  /** A label for the next year button (used by screen readers). */\n  nextYearLabel: string = 'Next year';\n\n  /** A label for the previous multi-year button (used by screen readers). */\n  prevMultiYearLabel: string = 'Previous 20 years';\n\n  /** A label for the next multi-year button (used by screen readers). */\n  nextMultiYearLabel: string = 'Next 20 years';\n\n  /** A label for the 'switch to month view' button (used by screen readers). */\n  switchToMonthViewLabel: string = 'Choose date';\n\n  /** A label for the 'switch to year view' button (used by screen readers). */\n  switchToMultiYearViewLabel: string = 'Choose month and year';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewChecked,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {MAT_CHECKBOX_CLICK_ACTION, MatCheckboxClickAction} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n// landed.\n// The radius for the checkbox's ripple, in pixels.\nlet calculatedRippleRadius = 0;\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nexport class MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nexport const _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase)), 'accent'));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(MAT_CHECKBOX_CLICK_ACTION)\n                  private _clickAction: MatCheckboxClickAction,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    this.tabIndex = parseInt(tabIndex) || 0;\n\n    this._focusMonitor.monitor(elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => this._onTouched());\n      }\n    });\n  }\n\n  ngAfterViewChecked() {\n    this._calculateRippleRadius();\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = value;\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and it's children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    return this.checked ? 'true' : (this.indeterminate ? 'mixed' : 'false');\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && this._clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && this._clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && this._clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(): void {\n    this._focusMonitor.focusVia(this._inputElement, 'keyboard');\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  // TODO(josephperrott): Revert to constants for ripple radius once 2018 Checkbox updates have\n  // landed.\n  /**\n   * Calculate the radius for the ripple based on the ripple elements width.  Only calculated once\n   * for the application.\n   */\n  private _calculateRippleRadius() {\n    if (!calculatedRippleRadius) {\n      const rippleWidth =\n          this._elementRef.nativeElement.querySelector('.mat-checkbox-ripple').clientWidth || 0;\n      calculatedRippleRadius = rippleWidth / 2;\n    }\n    this.ripple.radius = calculatedRippleRadius;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n  host: {'[attr.required]': 'required ? \"\" : null'}\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n\n@NgModule({\n  imports: [CommonModule, MatRippleModule, MatCommonModule, ObserversModule],\n  exports: [MatCheckbox, MatCheckboxRequiredValidator, MatCommonModule],\n  declarations: [MatCheckbox, MatCheckboxRequiredValidator],\n})\nexport class MatCheckboxModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {BACKSPACE, DELETE, SPACE} from '@angular/cdk/keycodes';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_RIPPLE_GLOBAL_OPTIONS,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  RippleConfig,\n  RippleGlobalOptions,\n  RippleRenderer,\n  RippleTarget,\n} from '@angular/material/core';\nimport {Subject} from 'rxjs';\nimport {take} from 'rxjs/operators';\n\n\n/** Represents an event fired on an individual `mat-chip`. */\nexport interface MatChipEvent {\n  /** The chip the event was fired on. */\n  chip: MatChip;\n}\n\n/** Event object emitted by MatChip when selected or deselected. */\nexport class MatChipSelectionChange {\n  constructor(\n    /** Reference to the chip that emitted the event. */\n    public source: MatChip,\n    /** Whether the chip that emitted the event is selected. */\n    public selected: boolean,\n    /** Whether the selection change was a result of a user interaction. */\n    public isUserInput = false) { }\n}\n\n\n// Boilerplate for applying mixins to MatChip.\n/** @docs-private */\nexport class MatChipBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatChipMixinBase:\n    CanColorCtor & CanDisableRippleCtor & CanDisableCtor & typeof MatChipBase =\n        mixinColor(mixinDisableRipple(mixinDisabled(MatChipBase)), 'primary');\n\nconst CHIP_ATTRIBUTE_NAMES = ['mat-basic-chip'];\n\n/**\n * Dummy directive to add CSS class to chip avatar.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-avatar, [matChipAvatar]',\n  host: {'class': 'mat-chip-avatar'}\n})\nexport class MatChipAvatar {}\n\n/**\n * Dummy directive to add CSS class to chip trailing icon.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-chip-trailing-icon, [matChipTrailingIcon]',\n  host: {'class': 'mat-chip-trailing-icon'}\n})\nexport class MatChipTrailingIcon {}\n\n/**\n * Material design styled Chip component. Used inside the MatChipList component.\n */\n@Directive({\n  selector: `mat-basic-chip, [mat-basic-chip], mat-chip, [mat-chip]`,\n  inputs: ['color', 'disabled', 'disableRipple'],\n  exportAs: 'matChip',\n  host: {\n    'class': 'mat-chip',\n    '[attr.tabindex]': 'disabled ? null : -1',\n    'role': 'option',\n    '[class.mat-chip-selected]': 'selected',\n    '[class.mat-chip-with-avatar]': 'avatar',\n    '[class.mat-chip-with-trailing-icon]': 'trailingIcon || removeIcon',\n    '[class.mat-chip-disabled]': 'disabled',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-selected]': 'ariaSelected',\n    '(click)': '_handleClick($event)',\n    '(keydown)': '_handleKeydown($event)',\n    '(focus)': 'focus()',\n    '(blur)': '_blur()',\n  },\n})\nexport class MatChip extends _MatChipMixinBase implements FocusableOption, OnDestroy, CanColor,\n    CanDisable, CanDisableRipple, RippleTarget {\n\n  /** Reference to the RippleRenderer for the chip. */\n  private _chipRipple: RippleRenderer;\n\n  /** Whether the ripples are globally disabled through the RippleGlobalOptions */\n  private _ripplesGloballyDisabled = false;\n\n  /**\n   * Ripple configuration for ripples that are launched on pointer down.\n   * @docs-private\n   */\n  rippleConfig: RippleConfig = {};\n\n  /**\n   * Whether ripples are disabled on interaction\n   * @docs-private\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || this.disableRipple || this._ripplesGloballyDisabled;\n  }\n\n  /** Whether the chip has focus. */\n  _hasFocus: boolean = false;\n\n  /** Whether the chip list is selectable */\n  chipListSelectable: boolean = true;\n\n  /** The chip avatar */\n  @ContentChild(MatChipAvatar) avatar: MatChipAvatar;\n\n  /** The chip's trailing icon. */\n  @ContentChild(MatChipTrailingIcon) trailingIcon: MatChipTrailingIcon;\n\n  /** The chip's remove toggler. */\n  @ContentChild(forwardRef(() => MatChipRemove)) removeIcon: MatChipRemove;\n\n  /** Whether the chip is selected. */\n  @Input()\n  get selected(): boolean { return this._selected; }\n  set selected(value: boolean) {\n    const coercedValue = coerceBooleanProperty(value);\n\n    if (coercedValue !== this._selected) {\n      this._selected = coercedValue;\n      this._dispatchSelectionChange();\n    }\n  }\n  protected _selected: boolean = false;\n\n  /** The value of the chip. Defaults to the content inside `<mat-chip>` tags. */\n  @Input()\n  get value(): any {\n    return this._value != undefined\n      ? this._value\n      : this._elementRef.nativeElement.textContent;\n  }\n  set value(value: any) { this._value = value; }\n  protected _value: any;\n\n  /**\n   * Whether or not the chip is selectable. When a chip is not selectable,\n   * changes to it's selected state are always ignored. By default a chip is\n   * selectable, and it becomes non-selectable if it's parent chip list is\n   * not selectable.\n   */\n  @Input()\n  get selectable(): boolean { return this._selectable && this.chipListSelectable; }\n  set selectable(value: boolean) {\n    this._selectable = coerceBooleanProperty(value);\n  }\n  protected _selectable: boolean = true;\n\n  /**\n   * Determines whether or not the chip displays the remove styling and emits (removed) events.\n   */\n  @Input()\n  get removable(): boolean { return this._removable; }\n  set removable(value: boolean) {\n    this._removable = coerceBooleanProperty(value);\n  }\n  protected _removable: boolean = true;\n\n  /** Emits when the chip is focused. */\n  readonly _onFocus = new Subject<MatChipEvent>();\n\n  /** Emits when the chip is blured. */\n  readonly _onBlur = new Subject<MatChipEvent>();\n\n  /** Emitted when the chip is selected or deselected. */\n  @Output() readonly selectionChange: EventEmitter<MatChipSelectionChange> =\n      new EventEmitter<MatChipSelectionChange>();\n\n  /** Emitted when the chip is destroyed. */\n  @Output() readonly destroyed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** Emitted when a chip is to be removed. */\n  @Output() readonly removed: EventEmitter<MatChipEvent> = new EventEmitter<MatChipEvent>();\n\n  /** The ARIA selected applied to the chip. */\n  get ariaSelected(): string | null {\n    return this.selectable ? this.selected.toString() : null;\n  }\n\n  constructor(public _elementRef: ElementRef,\n              private _ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions) {\n    super(_elementRef);\n\n    this._addHostClassName();\n\n    this._chipRipple = new RippleRenderer(this, _ngZone, _elementRef, platform);\n    this._chipRipple.setupTriggerEvents(_elementRef.nativeElement);\n\n    if (globalOptions) {\n      // TODO(paul): Do not copy each option manually. Allow dynamic global option changes: #9729\n      this._ripplesGloballyDisabled = !!globalOptions.disabled;\n      this.rippleConfig = {\n        animation: globalOptions.animation,\n        terminateOnPointerUp: globalOptions.terminateOnPointerUp,\n      };\n    }\n  }\n\n  _addHostClassName() {\n    // Add class for the different chips\n    for (const attr of CHIP_ATTRIBUTE_NAMES) {\n      if (this._elementRef.nativeElement.hasAttribute(attr) ||\n        this._elementRef.nativeElement.tagName.toLowerCase() === attr) {\n        (this._elementRef.nativeElement as HTMLElement).classList.add(attr);\n        return;\n      }\n    }\n    (this._elementRef.nativeElement as HTMLElement).classList.add('mat-standard-chip');\n  }\n\n  ngOnDestroy() {\n    this.destroyed.emit({chip: this});\n    this._chipRipple._removeTriggerEvents();\n  }\n\n  /** Selects the chip. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Deselects the chip. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._dispatchSelectionChange();\n    }\n  }\n\n  /** Select this chip and emit selected event */\n  selectViaInteraction(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._dispatchSelectionChange(true);\n    }\n  }\n\n  /** Toggles the current selected state of this chip. */\n  toggleSelected(isUserInput: boolean = false): boolean {\n    this._selected = !this.selected;\n    this._dispatchSelectionChange(isUserInput);\n    return this.selected;\n  }\n\n  /** Allows for programmatic focusing of the chip. */\n  focus(): void {\n    if (!this._hasFocus) {\n      this._elementRef.nativeElement.focus();\n      this._onFocus.next({chip: this});\n    }\n    this._hasFocus = true;\n  }\n\n  /**\n   * Allows for programmatic removal of the chip. Called by the MatChipList when the DELETE or\n   * BACKSPACE keys are pressed.\n   *\n   * Informs any listeners of the removal request. Does not remove the chip from the DOM.\n   */\n  remove(): void {\n    if (this.removable) {\n      this.removed.emit({chip: this});\n    }\n  }\n\n  /** Handles click events on the chip. */\n  _handleClick(event: Event) {\n    if (this.disabled) {\n      event.preventDefault();\n    } else {\n      event.stopPropagation();\n    }\n  }\n\n  /** Handle custom key presses. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (this.disabled) {\n      return;\n    }\n\n    switch (event.keyCode) {\n      case DELETE:\n      case BACKSPACE:\n        // If we are removable, remove the focused chip\n        this.remove();\n        // Always prevent so page navigation does not occur\n        event.preventDefault();\n        break;\n      case SPACE:\n        // If we are selectable, toggle the focused chip\n        if (this.selectable) {\n          this.toggleSelected(true);\n        }\n\n        // Always prevent space from scrolling the page since the list has focus\n        event.preventDefault();\n        break;\n    }\n  }\n\n  _blur(): void {\n    // When animations are enabled, Angular may end up removing the chip from the DOM a little\n    // earlier than usual, causing it to be blurred and throwing off the logic in the chip list\n    // that moves focus not the next item. To work around the issue, we defer marking the chip\n    // as not focused until the next time the zone stabilizes.\n    this._ngZone.onStable\n      .asObservable()\n      .pipe(take(1))\n      .subscribe(() => {\n        this._ngZone.run(() => {\n          this._hasFocus = false;\n          this._onBlur.next({chip: this});\n        });\n      });\n  }\n\n  private _dispatchSelectionChange(isUserInput = false) {\n    this.selectionChange.emit({\n      source: this,\n      isUserInput,\n      selected: this._selected\n    });\n  }\n}\n\n\n/**\n * Applies proper (click) support and adds styling for use with the Material Design \"cancel\" icon\n * available at https://material.io/icons/#ic_cancel.\n *\n * Example:\n *\n *     `<mat-chip>\n *       <mat-icon matChipRemove>cancel</mat-icon>\n *     </mat-chip>`\n *\n * You *may* use a custom icon, but you may need to override the `mat-chip-remove` positioning\n * styles to properly center the icon within the chip.\n */\n@Directive({\n  selector: '[matChipRemove]',\n  host: {\n    'class': 'mat-chip-remove mat-chip-trailing-icon',\n    '(click)': '_handleClick($event)',\n  }\n})\nexport class MatChipRemove {\n  constructor(protected _parentChip: MatChip) {}\n\n  /** Calls the parent chip's public `remove()` method if applicable. */\n  _handleClick(event: Event): void {\n    if (this._parentChip.removable) {\n      this._parentChip.remove();\n    }\n\n    // We need to stop event propagation because otherwise the event will bubble up to the\n    // form field and cause the `onContainerClick` method to be invoked. This method would then\n    // reset the focused chip that has been focused after chip removal. Usually the parent\n    // the parent click listener of the `MatChip` would prevent propagation, but it can happen\n    // that the chip is being removed before the event bubbles up.\n    event.stopPropagation();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** Default options, for the chips module, that can be overridden. */\nexport interface MatChipsDefaultOptions {\n  /** The list of key codes that will trigger a chipEnd event. */\n  separatorKeyCodes: number[] | Set<number>;\n}\n\n/** Injection token to be used to override the default options for the chips module. */\nexport const MAT_CHIPS_DEFAULT_OPTIONS =\n    new InjectionToken<MatChipsDefaultOptions>('mat-chips-default-options');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  OnDestroy,\n  ViewChild,\n  ViewEncapsulation,\n  Optional,\n  Inject,\n  Input,\n} from '@angular/core';\nimport {\n  CanColor,\n  CanDisable,\n  CanDisableRipple,\n  CanColorCtor,\n  CanDisableCtor,\n  CanDisableRippleCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Default color palette for round buttons (mat-fab and mat-mini-fab) */\nconst DEFAULT_ROUND_BUTTON_COLOR = 'accent';\n\n/**\n * List of classes to add to MatButton instances based on host attributes to\n * style as different variants.\n */\nconst BUTTON_HOST_ATTRIBUTES = [\n  'mat-button',\n  'mat-flat-button',\n  'mat-icon-button',\n  'mat-raised-button',\n  'mat-stroked-button',\n  'mat-mini-fab',\n  'mat-fab',\n];\n\n// Boilerplate for applying mixins to MatButton.\n/** @docs-private */\nexport class MatButtonBase {\n  constructor(public _elementRef: ElementRef) {}\n}\n\nexport const _MatButtonMixinBase:\n    CanDisableRippleCtor & CanDisableCtor & CanColorCtor & typeof MatButtonBase =\n        mixinColor(mixinDisabled(mixinDisableRipple(MatButtonBase)));\n\n/**\n * Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `button[mat-button], button[mat-raised-button], button[mat-icon-button],\n             button[mat-fab], button[mat-mini-fab], button[mat-stroked-button],\n             button[mat-flat-button]`,\n  exportAs: 'matButton',\n  host: {\n    '[disabled]': 'disabled || null',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  inputs: ['disabled', 'disableRipple', 'color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatButton extends _MatButtonMixinBase\n    implements OnDestroy, CanDisable, CanColor, CanDisableRipple {\n\n  /** Whether the button is round. */\n  readonly isRoundButton: boolean = this._hasHostAttributes('mat-fab', 'mat-mini-fab');\n\n  /** Whether the button is icon button. */\n  readonly isIconButton: boolean = this._hasHostAttributes('mat-icon-button');\n\n  /** Reference to the MatRipple instance of the button. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  constructor(elementRef: ElementRef,\n              /**\n               * @deprecated Platform checks for SSR are no longer needed\n               * @breaking-change 8.0.0\n               */\n              // tslint:disable-next-line:no-unused-variable\n              private _platform: Platform,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `_animationMode` parameter to be made required.\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    super(elementRef);\n\n    // For each of the variant selectors that is prevent in the button's host\n    // attributes, add the correct corresponding class.\n    for (const attr of BUTTON_HOST_ATTRIBUTES) {\n      if (this._hasHostAttributes(attr)) {\n        (elementRef.nativeElement as HTMLElement).classList.add(attr);\n      }\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n\n    if (this.isRoundButton) {\n      this.color = DEFAULT_ROUND_BUTTON_COLOR;\n    }\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._getHostElement().focus();\n  }\n\n  _getHostElement() {\n    return this._elementRef.nativeElement;\n  }\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Gets whether the button has one of the given attributes. */\n  _hasHostAttributes(...attributes: string[]) {\n    return attributes.some(attribute => this._getHostElement().hasAttribute(attribute));\n  }\n}\n\n/**\n * Raised Material design button.\n */\n@Component({\n  moduleId: module.id,\n  selector: `a[mat-button], a[mat-raised-button], a[mat-icon-button], a[mat-fab],\n             a[mat-mini-fab], a[mat-stroked-button], a[mat-flat-button]`,\n  exportAs: 'matButton, matAnchor',\n  host: {\n    // Note that we ignore the user-specified tabindex when it's disabled for\n    // consistency with the `mat-button` applied on native buttons where even\n    // though they have an index, they're not tabbable.\n    '[attr.tabindex]': 'disabled ? -1 : (tabIndex || 0)',\n    '[attr.disabled]': 'disabled || null',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '(click)': '_haltDisabledEvents($event)',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n  inputs: ['disabled', 'disableRipple', 'color'],\n  templateUrl: 'button.html',\n  styleUrls: ['button.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatAnchor extends MatButton {\n  /** Tabindex of the button. */\n  @Input() tabIndex: number;\n\n  constructor(\n    platform: Platform,\n    focusMonitor: FocusMonitor,\n    elementRef: ElementRef,\n    // @breaking-change 8.0.0 `animationMode` parameter to be made required.\n    @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n    super(elementRef, platform, focusMonitor, animationMode);\n  }\n\n  _haltDisabledEvents(event: Event) {\n    // A disabled button shouldn't apply any actions\n    if (this.disabled) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatAnchor, MatButton} from './button';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatRippleModule,\n    MatCommonModule,\n  ],\n  exports: [\n    MatButton,\n    MatAnchor,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatButton,\n    MatAnchor,\n  ],\n})\nexport class MatButtonModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusMonitor} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {SelectionModel} from '@angular/cdk/collections';\nimport {\n  AfterContentInit,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n  InjectionToken,\n  Inject,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanDisableRipple,\n  mixinDisableRipple,\n  CanDisableRippleCtor,\n} from '@angular/material/core';\n\n\n/** Acceptable types for a button toggle. */\nexport type ToggleType = 'checkbox' | 'radio';\n\n/** Possible appearance styles for the button toggle. */\nexport type MatButtonToggleAppearance = 'legacy' | 'standard';\n\n/**\n * Represents the default options for the button toggle that can be configured\n * using the `MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatButtonToggleDefaultOptions {\n  appearance?: MatButtonToggleAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all button toggles within an app.\n */\nexport const MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS =\n    new InjectionToken<MatButtonToggleDefaultOptions>('MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS');\n\n\n\n/**\n * Provider Expression that allows mat-button-toggle-group to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatButtonToggleGroup),\n  multi: true\n};\n\n/**\n * @deprecated Use `MatButtonToggleGroup` instead.\n * @breaking-change 8.0.0\n */\nexport class MatButtonToggleGroupMultiple {}\n\nlet _uniqueIdCounter = 0;\n\n/** Change event object emitted by MatButtonToggle. */\nexport class MatButtonToggleChange {\n  constructor(\n    /** The MatButtonToggle that emits the event. */\n    public source: MatButtonToggle,\n\n    /** The value assigned to the MatButtonToggle. */\n    public value: any) {}\n}\n\n/** Exclusive selection button toggle group that behaves like a radio-button group. */\n@Directive({\n  selector: 'mat-button-toggle-group',\n  providers: [\n    MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR,\n    {provide: MatButtonToggleGroupMultiple, useExisting: MatButtonToggleGroup},\n  ],\n  host: {\n    'role': 'group',\n    'class': 'mat-button-toggle-group',\n    '[attr.aria-disabled]': 'disabled',\n    '[class.mat-button-toggle-vertical]': 'vertical',\n    '[class.mat-button-toggle-group-appearance-standard]': 'appearance === \"standard\"',\n  },\n  exportAs: 'matButtonToggleGroup',\n})\nexport class MatButtonToggleGroup implements ControlValueAccessor, OnInit, AfterContentInit {\n  private _vertical = false;\n  private _multiple = false;\n  private _disabled = false;\n  private _selectionModel: SelectionModel<MatButtonToggle>;\n\n  /**\n   * Reference to the raw value that the consumer tried to assign. The real\n   * value will exclude any values from this one that don't correspond to a\n   * toggle. Useful for the cases where the value is assigned before the toggles\n   * have been initialized or at the same that they're being swapped out.\n   */\n  private _rawValue: any;\n\n  /**\n   * The method to be called in order to update ngModel.\n   * Now `ngModel` binding is not supported in multiple selection mode.\n   */\n  _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n  _onTouched: () => any = () => {};\n\n  /** Child button toggle buttons. */\n  @ContentChildren(forwardRef(() => MatButtonToggle)) _buttonToggles: QueryList<MatButtonToggle>;\n\n  /** The appearance for all the buttons in the group. */\n  @Input() appearance: MatButtonToggleAppearance;\n\n  /** `name` attribute for the underlying `input` element. */\n  @Input()\n  get name(): string { return this._name; }\n  set name(value: string) {\n    this._name = value;\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle.name = this._name);\n    }\n  }\n  private _name = `mat-button-toggle-group-${_uniqueIdCounter++}`;\n\n  /** Whether the toggle group is vertical. */\n  @Input()\n  get vertical(): boolean { return this._vertical; }\n  set vertical(value: boolean) {\n    this._vertical = coerceBooleanProperty(value);\n  }\n\n  /** Value of the toggle group. */\n  @Input()\n  get value(): any {\n    const selected = this._selectionModel ? this._selectionModel.selected : [];\n\n    if (this.multiple) {\n      return selected.map(toggle => toggle.value);\n    }\n\n    return selected[0] ? selected[0].value : undefined;\n  }\n  set value(newValue: any) {\n    this._setSelectionByValue(newValue);\n    this.valueChange.emit(this.value);\n  }\n\n  /**\n   * Event that emits whenever the value of the group changes.\n   * Used to facilitate two-way data binding.\n   * @docs-private\n   */\n  @Output() readonly valueChange = new EventEmitter<any>();\n\n  /** Selected button toggles in the group. */\n  get selected() {\n    const selected = this._selectionModel.selected;\n    return this.multiple ? selected : (selected[0] || null);\n  }\n\n  /** Whether multiple button toggles can be selected. */\n  @Input()\n  get multiple(): boolean { return this._multiple; }\n  set multiple(value: boolean) {\n    this._multiple = coerceBooleanProperty(value);\n  }\n\n  /** Whether multiple button toggle group is disabled. */\n  @Input()\n  get disabled(): boolean { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = coerceBooleanProperty(value);\n\n    if (this._buttonToggles) {\n      this._buttonToggles.forEach(toggle => toggle._markForCheck());\n    }\n  }\n\n  /** Event emitted when the group's value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(\n    private _changeDetector: ChangeDetectorRef,\n    @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n        defaultOptions?: MatButtonToggleDefaultOptions) {\n\n      this.appearance =\n          defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n    }\n\n  ngOnInit() {\n    this._selectionModel = new SelectionModel<MatButtonToggle>(this.multiple, undefined, false);\n  }\n\n  ngAfterContentInit() {\n    this._selectionModel.select(...this._buttonToggles.filter(toggle => toggle.checked));\n  }\n\n  /**\n   * Sets the model value. Implemented as part of ControlValueAccessor.\n   * @param value Value to be set to the model.\n   */\n  writeValue(value: any) {\n    this.value = value;\n    this._changeDetector.markForCheck();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  /** Dispatch change event with current selection and group value. */\n  _emitChangeEvent(): void {\n    const selected = this.selected;\n    const source = Array.isArray(selected) ? selected[selected.length - 1] : selected;\n    const event = new MatButtonToggleChange(source!, this.value);\n    this._controlValueAccessorChangeFn(event.value);\n    this.change.emit(event);\n  }\n\n  /**\n   * Syncs a button toggle's selected state with the model value.\n   * @param toggle Toggle to be synced.\n   * @param select Whether the toggle should be selected.\n   * @param isUserInput Whether the change was a result of a user interaction.\n   */\n  _syncButtonToggle(toggle: MatButtonToggle, select: boolean, isUserInput = false) {\n    // Deselect the currently-selected toggle, if we're in single-selection\n    // mode and the button being toggled isn't selected at the moment.\n    if (!this.multiple && this.selected && !toggle.checked) {\n      (this.selected as MatButtonToggle).checked = false;\n    }\n\n    if (select) {\n      this._selectionModel.select(toggle);\n    } else {\n      this._selectionModel.deselect(toggle);\n    }\n\n    // Only emit the change event for user input.\n    if (isUserInput) {\n      this._emitChangeEvent();\n    }\n\n    // Note: we emit this one no matter whether it was a user interaction, because\n    // it is used by Angular to sync up the two-way data binding.\n    this.valueChange.emit(this.value);\n  }\n\n  /** Checks whether a button toggle is selected. */\n  _isSelected(toggle: MatButtonToggle) {\n    return this._selectionModel.isSelected(toggle);\n  }\n\n  /** Determines whether a button toggle should be checked on init. */\n  _isPrechecked(toggle: MatButtonToggle) {\n    if (typeof this._rawValue === 'undefined') {\n      return false;\n    }\n\n    if (this.multiple && Array.isArray(this._rawValue)) {\n      return this._rawValue.some(value => toggle.value != null && value === toggle.value);\n    }\n\n    return toggle.value === this._rawValue;\n  }\n\n  /** Updates the selection state of the toggles in the group based on a value. */\n  private _setSelectionByValue(value: any|any[]) {\n    this._rawValue = value;\n\n    if (!this._buttonToggles) {\n      return;\n    }\n\n    if (this.multiple && value) {\n      if (!Array.isArray(value)) {\n        throw Error('Value must be an array in multiple-selection mode.');\n      }\n\n      this._clearSelection();\n      value.forEach((currentValue: any) => this._selectValue(currentValue));\n    } else {\n      this._clearSelection();\n      this._selectValue(value);\n    }\n  }\n\n  /** Clears the selected toggles. */\n  private _clearSelection() {\n    this._selectionModel.clear();\n    this._buttonToggles.forEach(toggle => toggle.checked = false);\n  }\n\n  /** Selects a value if there's a toggle that corresponds to it. */\n  private _selectValue(value: any) {\n    const correspondingOption = this._buttonToggles.find(toggle => {\n      return toggle.value != null && toggle.value === value;\n    });\n\n    if (correspondingOption) {\n      correspondingOption.checked = true;\n      this._selectionModel.select(correspondingOption);\n    }\n  }\n}\n\n// Boilerplate for applying mixins to the MatButtonToggle class.\n/** @docs-private */\nexport class MatButtonToggleBase {}\nexport const _MatButtonToggleMixinBase: CanDisableRippleCtor & typeof MatButtonToggleBase =\n    mixinDisableRipple(MatButtonToggleBase);\n\n/** Single button inside of a toggle group. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-button-toggle',\n  templateUrl: 'button-toggle.html',\n  styleUrls: ['button-toggle.css'],\n  encapsulation: ViewEncapsulation.None,\n  exportAs: 'matButtonToggle',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disableRipple'],\n  host: {\n    '[class.mat-button-toggle-standalone]': '!buttonToggleGroup',\n    '[class.mat-button-toggle-checked]': 'checked',\n    '[class.mat-button-toggle-disabled]': 'disabled',\n    '[class.mat-button-toggle-appearance-standard]': 'appearance === \"standard\"',\n    'class': 'mat-button-toggle',\n    // Always reset the tabindex to -1 so it doesn't conflict with the one on the `button`,\n    // but can still receive focus from things like cdkFocusInitial.\n    '[attr.tabindex]': '-1',\n    '[attr.id]': 'id',\n    '(focus)': 'focus()',\n  }\n})\nexport class MatButtonToggle extends _MatButtonToggleMixinBase implements OnInit,\n  CanDisableRipple, OnDestroy {\n\n  private _isSingleSelector = false;\n  private _checked = false;\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, arial-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string;\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** Type of the button toggle. Either 'radio' or 'checkbox'. */\n  _type: ToggleType;\n\n  @ViewChild('button') _buttonElement: ElementRef<HTMLButtonElement>;\n\n  /** The parent button toggle group (exclusive selection). Optional. */\n  buttonToggleGroup: MatButtonToggleGroup;\n\n  /** Unique ID for the underlying `button` element. */\n  get buttonId(): string { return `${this.id}-button`; }\n\n  /** The unique ID for this button toggle. */\n  @Input() id: string;\n\n  /** HTML's 'name' attribute used to group radios for unique selection. */\n  @Input() name: string;\n\n  /** MatButtonToggleGroup reads this to assign its own value. */\n  @Input() value: any;\n\n  /** Tabindex for the toggle. */\n  @Input() tabIndex: number | null;\n\n  /** The appearance style of the button. */\n  @Input()\n  get appearance(): MatButtonToggleAppearance {\n    return this.buttonToggleGroup ? this.buttonToggleGroup.appearance : this._appearance;\n  }\n  set appearance(value: MatButtonToggleAppearance) {\n    this._appearance = value;\n  }\n  private _appearance: MatButtonToggleAppearance;\n\n  /** Whether the button is checked. */\n  @Input()\n  get checked(): boolean {\n    return this.buttonToggleGroup ? this.buttonToggleGroup._isSelected(this) : this._checked;\n  }\n  set checked(value: boolean) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this._checked) {\n      this._checked = newValue;\n\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked);\n      }\n\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Whether the button is disabled. */\n  @Input()\n  get disabled(): boolean {\n    return this._disabled || (this.buttonToggleGroup && this.buttonToggleGroup.disabled);\n  }\n  set disabled(value: boolean) { this._disabled = coerceBooleanProperty(value); }\n  private _disabled: boolean = false;\n\n  /** Event emitted when the group value changes. */\n  @Output() readonly change: EventEmitter<MatButtonToggleChange> =\n      new EventEmitter<MatButtonToggleChange>();\n\n  constructor(@Optional() toggleGroup: MatButtonToggleGroup,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _elementRef: ElementRef<HTMLElement>,\n              private _focusMonitor: FocusMonitor,\n              // @breaking-change 8.0.0 `defaultTabIndex` to be made a required parameter.\n              @Attribute('tabindex') defaultTabIndex: string,\n              @Optional() @Inject(MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS)\n                  defaultOptions?: MatButtonToggleDefaultOptions) {\n    super();\n\n    const parsedTabIndex = Number(defaultTabIndex);\n    this.tabIndex = (parsedTabIndex || parsedTabIndex === 0) ? parsedTabIndex : null;\n    this.buttonToggleGroup = toggleGroup;\n    this.appearance =\n        defaultOptions && defaultOptions.appearance ? defaultOptions.appearance : 'standard';\n  }\n\n  ngOnInit() {\n    this._isSingleSelector = this.buttonToggleGroup && !this.buttonToggleGroup.multiple;\n    this._type = this._isSingleSelector ? 'radio' : 'checkbox';\n    this.id = this.id || `mat-button-toggle-${_uniqueIdCounter++}`;\n\n    if (this._isSingleSelector) {\n      this.name = this.buttonToggleGroup.name;\n    }\n\n    if (this.buttonToggleGroup && this.buttonToggleGroup._isPrechecked(this)) {\n      this.checked = true;\n    }\n\n    this._focusMonitor.monitor(this._elementRef, true);\n  }\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /** Focuses the button. */\n  focus(): void {\n    this._buttonElement.nativeElement.focus();\n  }\n\n  /** Checks the button toggle due to an interaction with the underlying native button. */\n  _onButtonClick() {\n    const newChecked = this._isSingleSelector ? true : !this._checked;\n\n    if (newChecked !== this._checked) {\n      this._checked = newChecked;\n      if (this.buttonToggleGroup) {\n        this.buttonToggleGroup._syncButtonToggle(this, this._checked, true);\n        this.buttonToggleGroup._onTouched();\n      }\n    }\n    // Emit a change event when it's the single selector\n    this.change.emit(new MatButtonToggleChange(this, this.value));\n  }\n\n  /**\n   * Marks the button toggle as needing checking for change detection.\n   * This method is exposed because the parent button toggle group will directly\n   * update bound properties of the radio button.\n   */\n  _markForCheck() {\n    // When the group value changes, the button will not be notified.\n    // Use `markForCheck` to explicit update button toggle's status.\n    this._changeDetectorRef.markForCheck();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatButtonToggle, MatButtonToggleGroup} from './button-toggle';\n\n\n@NgModule({\n  imports: [MatCommonModule, MatRippleModule],\n  exports: [MatCommonModule, MatButtonToggleGroup, MatButtonToggle],\n  declarations: [MatButtonToggleGroup, MatButtonToggle],\n})\nexport class MatButtonToggleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  ChangeDetectionStrategy,\n  Directive,\n  Input,\n} from '@angular/core';\n\n\n/**\n * Content of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-content',\n  host: {'class': 'mat-card-content'}\n})\nexport class MatCardContent {}\n\n/**\n * Title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-title, [mat-card-title], [matCardTitle]`,\n  host: {\n    'class': 'mat-card-title'\n  }\n})\nexport class MatCardTitle {}\n\n/**\n * Sub-title of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: `mat-card-subtitle, [mat-card-subtitle], [matCardSubtitle]`,\n  host: {\n    'class': 'mat-card-subtitle'\n  }\n})\nexport class MatCardSubtitle {}\n\n/**\n * Action section of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-actions',\n  exportAs: 'matCardActions',\n  host: {\n    'class': 'mat-card-actions',\n    '[class.mat-card-actions-align-end]': 'align === \"end\"',\n  }\n})\nexport class MatCardActions {\n  /** Position of the actions inside the card. */\n  @Input() align: 'start' | 'end' = 'start';\n}\n\n/**\n * Footer of a card, needed as it's used as a selector in the API.\n * @docs-private\n */\n@Directive({\n  selector: 'mat-card-footer',\n  host: {'class': 'mat-card-footer'}\n})\nexport class MatCardFooter {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-image], [matCardImage]',\n  host: {'class': 'mat-card-image'}\n})\nexport class MatCardImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-sm-image], [matCardImageSmall]',\n  host: {'class': 'mat-card-sm-image'}\n})\nexport class MatCardSmImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-md-image], [matCardImageMedium]',\n  host: {'class': 'mat-card-md-image'}\n})\nexport class MatCardMdImage {}\n\n/**\n * Image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-lg-image], [matCardImageLarge]',\n  host: {'class': 'mat-card-lg-image'}\n})\nexport class MatCardLgImage {}\n\n/**\n * Large image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-xl-image], [matCardImageXLarge]',\n  host: {'class': 'mat-card-xl-image'}\n})\nexport class MatCardXlImage {}\n\n/**\n * Avatar image used in a card, needed to add the mat- CSS styling.\n * @docs-private\n */\n@Directive({\n  selector: '[mat-card-avatar], [matCardAvatar]',\n  host: {'class': 'mat-card-avatar'}\n})\nexport class MatCardAvatar {}\n\n\n/**\n * A basic content container component that adds the styles of a Material design card.\n *\n * While this component can be used alone, it also provides a number\n * of preset styles for common card sections, including:\n * - mat-card-title\n * - mat-card-subtitle\n * - mat-card-content\n * - mat-card-actions\n * - mat-card-footer\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card',\n  exportAs: 'matCard',\n  templateUrl: 'card.html',\n  styleUrls: ['card.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card'}\n})\nexport class MatCard {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a\n * preset header section (i.e. a title, subtitle, and avatar layout).\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-header',\n  templateUrl: 'card-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-header'}\n})\nexport class MatCardHeader {}\n\n\n/**\n * Component intended to be used within the `<mat-card>` component. It adds styles for a preset\n * layout that groups an image with a title section.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-card-title-group',\n  templateUrl: 'card-title-group.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  host: {'class': 'mat-card-title-group'}\n})\nexport class MatCardTitleGroup {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {\n  MatCard,\n  MatCardActions,\n  MatCardAvatar,\n  MatCardContent,\n  MatCardFooter,\n  MatCardHeader,\n  MatCardImage,\n  MatCardLgImage,\n  MatCardMdImage,\n  MatCardSmImage,\n  MatCardSubtitle,\n  MatCardTitle,\n  MatCardTitleGroup,\n  MatCardXlImage,\n} from './card';\n\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [\n    MatCard,\n    MatCardHeader,\n    MatCardTitleGroup,\n    MatCardContent,\n    MatCardTitle,\n    MatCardSubtitle,\n    MatCardActions,\n    MatCardFooter,\n    MatCardSmImage,\n    MatCardMdImage,\n    MatCardLgImage,\n    MatCardImage,\n    MatCardXlImage,\n    MatCardAvatar,\n    MatCommonModule,\n  ],\n  declarations: [\n    MatCard, MatCardHeader, MatCardTitleGroup, MatCardContent, MatCardTitle, MatCardSubtitle,\n    MatCardActions, MatCardFooter, MatCardSmImage, MatCardMdImage, MatCardLgImage, MatCardImage,\n    MatCardXlImage, MatCardAvatar,\n  ],\n})\nexport class MatCardModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n\n/**\n * Injection token that can be used to specify the checkbox click behavior.\n */\nexport const MAT_CHECKBOX_CLICK_ACTION =\n    new InjectionToken<MatCheckboxClickAction>('mat-checkbox-click-action');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ActiveDescendantKeyManager} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  Output,\n  QueryList,\n  TemplateRef,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  MAT_OPTION_PARENT_COMPONENT,\n  MatOptgroup,\n  MatOption,\n  mixinDisableRipple,\n} from '@angular/material/core';\n\n\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n\n/** Event object that is emitted when an autocomplete option is selected. */\nexport class MatAutocompleteSelectedEvent {\n  constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    public source: MatAutocomplete,\n    /** Option that was selected. */\n    public option: MatOption) { }\n}\n\n\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nexport class MatAutocompleteBase {}\nexport const _MatAutocompleteMixinBase: CanDisableRippleCtor & typeof MatAutocompleteBase =\n    mixinDisableRipple(MatAutocompleteBase);\n\n/** Default `mat-autocomplete` options that can be overridden. */\nexport interface MatAutocompleteDefaultOptions {\n  /** Whether the first option should be highlighted when an autocomplete panel is opened. */\n  autoActiveFirstOption?: boolean;\n}\n\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nexport const MAT_AUTOCOMPLETE_DEFAULT_OPTIONS =\n    new InjectionToken<MatAutocompleteDefaultOptions>('mat-autocomplete-default-options', {\n      providedIn: 'root',\n      factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n    });\n\n/** @docs-private */\nexport function MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY(): MatAutocompleteDefaultOptions {\n  return {autoActiveFirstOption: false};\n}\n\n@Component({\n  moduleId: module.id,\n  selector: 'mat-autocomplete',\n  templateUrl: 'autocomplete.html',\n  styleUrls: ['autocomplete.css'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  exportAs: 'matAutocomplete',\n  inputs: ['disableRipple'],\n  host: {\n    'class': 'mat-autocomplete'\n  },\n  providers: [\n    {provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete}\n  ]\n})\nexport class MatAutocomplete extends _MatAutocompleteMixinBase implements AfterContentInit,\n  CanDisableRipple {\n\n  /** Manages active item in option list based on key events. */\n  _keyManager: ActiveDescendantKeyManager<MatOption>;\n\n  /** Whether the autocomplete panel should be visible, depending on option length. */\n  showPanel: boolean = false;\n\n  /** Whether the autocomplete panel is open. */\n  get isOpen(): boolean { return this._isOpen && this.showPanel; }\n  _isOpen: boolean = false;\n\n  /** @docs-private */\n  @ViewChild(TemplateRef) template: TemplateRef<any>;\n\n  /** Element for the panel containing the autocomplete options. */\n  @ViewChild('panel') panel: ElementRef;\n\n  /** @docs-private */\n  @ContentChildren(MatOption, { descendants: true }) options: QueryList<MatOption>;\n\n  /** @docs-private */\n  @ContentChildren(MatOptgroup) optionGroups: QueryList<MatOptgroup>;\n\n  /** Function that maps an option's control value to its display value in the trigger. */\n  @Input() displayWith: ((value: any) => string) | null = null;\n\n  /**\n   * Whether the first option should be highlighted when the autocomplete panel is opened.\n   * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n   */\n  @Input()\n  get autoActiveFirstOption(): boolean { return this._autoActiveFirstOption; }\n  set autoActiveFirstOption(value: boolean) {\n    this._autoActiveFirstOption = coerceBooleanProperty(value);\n  }\n  private _autoActiveFirstOption: boolean;\n\n  /**\n   * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n   * match the width of its host.\n   */\n  @Input() panelWidth: string | number;\n\n  /** Event that is emitted whenever an option from the list is selected. */\n  @Output() readonly optionSelected: EventEmitter<MatAutocompleteSelectedEvent> =\n      new EventEmitter<MatAutocompleteSelectedEvent>();\n\n  /** Event that is emitted when the autocomplete panel is opened. */\n  @Output() readonly opened: EventEmitter<void> = new EventEmitter<void>();\n\n  /** Event that is emitted when the autocomplete panel is closed. */\n  @Output() readonly closed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Takes classes set on the host mat-autocomplete element and applies them to the panel\n   * inside the overlay container to allow for easy styling.\n   */\n  @Input('class')\n  set classList(value: string) {\n    if (value && value.length) {\n      value.split(' ').forEach(className => this._classList[className.trim()] = true);\n      this._elementRef.nativeElement.className = '';\n    }\n  }\n  _classList: {[key: string]: boolean} = {};\n\n  /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n  id: string = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n\n  constructor(\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _elementRef: ElementRef<HTMLElement>,\n    @Inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS) defaults: MatAutocompleteDefaultOptions) {\n    super();\n\n    this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n  }\n\n  ngAfterContentInit() {\n    this._keyManager = new ActiveDescendantKeyManager<MatOption>(this.options).withWrap();\n    // Set the initial visibility state.\n    this._setVisibility();\n  }\n\n  /**\n   * Sets the panel scrollTop. This allows us to manually scroll to display options\n   * above or below the fold, as they are not actually being focused when active.\n   */\n  _setScrollTop(scrollTop: number): void {\n    if (this.panel) {\n      this.panel.nativeElement.scrollTop = scrollTop;\n    }\n  }\n\n  /** Returns the panel's scrollTop. */\n  _getScrollTop(): number {\n    return this.panel ? this.panel.nativeElement.scrollTop : 0;\n  }\n\n  /** Panel should hide itself when the option list is empty. */\n  _setVisibility() {\n    this.showPanel = !!this.options.length;\n    this._classList['mat-autocomplete-visible'] = this.showPanel;\n    this._classList['mat-autocomplete-hidden'] = !this.showPanel;\n    this._changeDetectorRef.markForCheck();\n  }\n\n  /** Emits the `select` event. */\n  _emitSelectEvent(option: MatOption): void {\n    const event = new MatAutocompleteSelectedEvent(this, option);\n    this.optionSelected.emit(event);\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, ElementRef} from '@angular/core';\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\n@Directive({\n  selector: '[matAutocompleteOrigin]',\n  exportAs: 'matAutocompleteOrigin',\n})\nexport class MatAutocompleteOrigin {\n  constructor(\n      /** Reference to the element on which the directive is applied. */\n      public elementRef: ElementRef<HTMLElement>) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {MatOptionModule, MatCommonModule} from '@angular/material/core';\nimport {MatAutocomplete} from './autocomplete';\nimport {\n  MatAutocompleteTrigger,\n  MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER,\n} from './autocomplete-trigger';\nimport {MatAutocompleteOrigin} from './autocomplete-origin';\n\n@NgModule({\n  imports: [MatOptionModule, OverlayModule, MatCommonModule, CommonModule],\n  exports: [\n    MatAutocomplete,\n    MatOptionModule,\n    MatAutocompleteTrigger,\n    MatAutocompleteOrigin,\n    MatCommonModule\n  ],\n  declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n  providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n})\nexport class MatAutocompleteModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AriaDescriber} from '@angular/cdk/a11y';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Renderer2,\n} from '@angular/core';\nimport {ThemePalette, mixinDisabled, CanDisableCtor, CanDisable} from '@angular/material/core';\n\n\nlet nextId = 0;\n\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nexport class MatBadgeBase {}\n\nexport const _MatBadgeMixinBase:\n    CanDisableCtor & typeof MatBadgeBase = mixinDisabled(MatBadgeBase);\n\nexport type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after';\nexport type MatBadgeSize = 'small' | 'medium' | 'large';\n\n/** Directive to display a text badge. */\n@Directive({\n  selector: '[matBadge]',\n  inputs: ['disabled: matBadgeDisabled'],\n  host: {\n    'class': 'mat-badge',\n    '[class.mat-badge-overlap]': 'overlap',\n    '[class.mat-badge-above]': 'isAbove()',\n    '[class.mat-badge-below]': '!isAbove()',\n    '[class.mat-badge-before]': '!isAfter()',\n    '[class.mat-badge-after]': 'isAfter()',\n    '[class.mat-badge-small]': 'size === \"small\"',\n    '[class.mat-badge-medium]': 'size === \"medium\"',\n    '[class.mat-badge-large]': 'size === \"large\"',\n    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n    '[class.mat-badge-disabled]': 'disabled',\n  },\n})\nexport class MatBadge extends _MatBadgeMixinBase implements OnDestroy, CanDisable {\n  /** Whether the badge has any content. */\n  _hasContent = false;\n\n  /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n  @Input('matBadgeColor')\n  get color(): ThemePalette { return this._color; }\n  set color(value: ThemePalette) {\n    this._setColor(value);\n    this._color = value;\n  }\n  private _color: ThemePalette = 'primary';\n\n  /** Whether the badge should overlap its contents or not */\n  @Input('matBadgeOverlap')\n  get overlap(): boolean { return this._overlap; }\n  set overlap(val: boolean) {\n    this._overlap = coerceBooleanProperty(val);\n  }\n  private _overlap: boolean = true;\n\n  /**\n   * Position the badge should reside.\n   * Accepts any combination of 'above'|'below' and 'before'|'after'\n   */\n  @Input('matBadgePosition') position: MatBadgePosition = 'above after';\n\n  /** The content for the badge */\n  @Input('matBadge')\n  get content(): string { return this._content; }\n  set content(value: string) {\n    this._content = value;\n    this._hasContent = value != null && `${value}`.trim().length > 0;\n    this._updateTextContent();\n  }\n  private _content: string;\n\n  /** Message used to describe the decorated element via aria-describedby */\n  @Input('matBadgeDescription')\n  get description(): string { return this._description; }\n  set description(newDescription: string) {\n    if (newDescription !== this._description) {\n      this._updateHostAriaDescription(newDescription, this._description);\n      this._description = newDescription;\n    }\n  }\n  private _description: string;\n\n  /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n  @Input('matBadgeSize') size: MatBadgeSize = 'medium';\n\n  /** Whether the badge is hidden. */\n  @Input('matBadgeHidden')\n  get hidden(): boolean { return this._hidden; }\n  set hidden(val: boolean) {\n    this._hidden = coerceBooleanProperty(val);\n  }\n  private _hidden: boolean;\n\n  /** Unique id for the badge */\n  _id: number = nextId++;\n\n  private _badgeElement: HTMLElement;\n\n  constructor(\n      @Optional() @Inject(DOCUMENT) private _document: any,\n      private _ngZone: NgZone,\n      private _elementRef: ElementRef<HTMLElement>,\n      private _ariaDescriber: AriaDescriber,\n      /** @breaking-change 8.0.0 Make _renderer a required param and remove _document. */\n      private _renderer?: Renderer2) {\n        super();\n      }\n\n  /** Whether the badge is above the host or not */\n  isAbove(): boolean {\n    return this.position.indexOf('below') === -1;\n  }\n\n  /** Whether the badge is after the host or not */\n  isAfter(): boolean {\n    return this.position.indexOf('before') === -1;\n  }\n\n  ngOnDestroy() {\n    if (this.description && this._badgeElement) {\n      this._ariaDescriber.removeDescription(this._badgeElement, this.description);\n    }\n  }\n\n  /** Injects a span element into the DOM with the content. */\n  private _updateTextContent(): HTMLSpanElement {\n    if (!this._badgeElement) {\n      this._badgeElement = this._createBadgeElement();\n    } else {\n      this._badgeElement.textContent = this.content;\n    }\n    return this._badgeElement;\n  }\n\n  /** Creates the badge element */\n  private _createBadgeElement(): HTMLElement {\n    // @breaking-change 8.0.0 Remove null check for _renderer\n    const rootNode = this._renderer || this._document;\n    const badgeElement = rootNode.createElement('span');\n    const activeClass = 'mat-badge-active';\n\n    badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n    badgeElement.classList.add('mat-badge-content');\n    badgeElement.textContent = this.content;\n\n    if (this.description) {\n      badgeElement.setAttribute('aria-label', this.description);\n    }\n\n    this._elementRef.nativeElement.appendChild(badgeElement);\n\n    // animate in after insertion\n    if (typeof requestAnimationFrame === 'function') {\n      this._ngZone.runOutsideAngular(() => {\n        requestAnimationFrame(() => {\n          badgeElement.classList.add(activeClass);\n        });\n      });\n    } else {\n      badgeElement.classList.add(activeClass);\n    }\n\n    return badgeElement;\n  }\n\n  /** Sets the aria-label property on the element */\n  private _updateHostAriaDescription(newDescription: string, oldDescription: string): void {\n    // ensure content available before setting label\n    const content = this._updateTextContent();\n\n    if (oldDescription) {\n      this._ariaDescriber.removeDescription(content, oldDescription);\n    }\n\n    if (newDescription) {\n      this._ariaDescriber.describe(content, newDescription);\n    }\n  }\n\n  /** Adds css theme class given the color to the component host */\n  private _setColor(colorPalette: ThemePalette) {\n    if (colorPalette !== this._color) {\n      if (this._color) {\n        this._elementRef.nativeElement.classList.remove(`mat-badge-${this._color}`);\n      }\n      if (colorPalette) {\n        this._elementRef.nativeElement.classList.add(`mat-badge-${colorPalette}`);\n      }\n    }\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {A11yModule} from '@angular/cdk/a11y';\nimport {MatBadge} from './badge';\n\n\n@NgModule({\n  imports: [\n    A11yModule,\n    MatCommonModule\n  ],\n  exports: [MatBadge],\n  declarations: [MatBadge],\n})\nexport class MatBadgeModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ViewContainerRef, InjectionToken} from '@angular/core';\nimport {Direction} from '@angular/cdk/bidi';\n\n/** Injection token that can be used to access the data that was passed in to a bottom sheet. */\nexport const MAT_BOTTOM_SHEET_DATA = new InjectionToken<any>('MatBottomSheetData');\n\n/**\n * Configuration used when opening a bottom sheet.\n */\nexport class MatBottomSheetConfig<D = any> {\n  /** The view container to place the overlay for the bottom sheet into. */\n  viewContainerRef?: ViewContainerRef;\n\n  /** Extra CSS classes to be added to the bottom sheet container. */\n  panelClass?: string | string[];\n\n  /** Text layout direction for the bottom sheet. */\n  direction?: Direction;\n\n  /** Data being injected into the child component. */\n  data?: D | null = null;\n\n  /** Whether the bottom sheet has a backdrop. */\n  hasBackdrop?: boolean = true;\n\n  /** Custom class for the backdrop. */\n  backdropClass?: string;\n\n  /** Whether the user can use escape or clicking outside to close the bottom sheet. */\n  disableClose?: boolean = false;\n\n  /** Aria label to assign to the bottom sheet element. */\n  ariaLabel?: string | null = null;\n\n  /**\n   * Whether the bottom sheet should close when the user goes backwards/forwards in history.\n   * Note that this usually doesn't include clicking on links (unless the user is using\n   * the `HashLocationStrategy`).\n   */\n  closeOnNavigation?: boolean = true;\n\n  /** Whether the bottom sheet should focus the first focusable element on open. */\n  autoFocus?: boolean = true;\n\n  /**\n   * Whether the bottom sheet should restore focus to the\n   * previously-focused element, after it's closed.\n   */\n  restoreFocus?: boolean = true;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\nimport {AnimationCurves, AnimationDurations} from '@angular/material/core';\n\n/** Animations used by the Material bottom sheet. */\nexport const matBottomSheetAnimations: {\n  readonly bottomSheetState: AnimationTriggerMetadata;\n} = {\n  /** Animation that shows and hides a bottom sheet. */\n  bottomSheetState: trigger('state', [\n    state('void, hidden', style({transform: 'translateY(100%)'})),\n    state('visible', style({transform: 'translateY(0%)'})),\n    transition('visible => void, visible => hidden',\n        animate(`${AnimationDurations.COMPLEX} ${AnimationCurves.ACCELERATION_CURVE}`)),\n    transition('void => visible',\n        animate(`${AnimationDurations.EXITING} ${AnimationCurves.DECELERATION_CURVE}`)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ComponentRef,\n  EmbeddedViewRef,\n  ViewChild,\n  OnDestroy,\n  ElementRef,\n  ChangeDetectionStrategy,\n  ViewEncapsulation,\n  ChangeDetectorRef,\n  EventEmitter,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {AnimationEvent} from '@angular/animations';\nimport {\n  BasePortalOutlet,\n  ComponentPortal,\n  TemplatePortal,\n  CdkPortalOutlet,\n} from '@angular/cdk/portal';\nimport {BreakpointObserver, Breakpoints} from '@angular/cdk/layout';\nimport {MatBottomSheetConfig} from './bottom-sheet-config';\nimport {matBottomSheetAnimations} from './bottom-sheet-animations';\nimport {Subscription} from 'rxjs';\nimport {DOCUMENT} from '@angular/common';\nimport {FocusTrap, FocusTrapFactory} from '@angular/cdk/a11y';\n\n// TODO(crisbeto): consolidate some logic between this, MatDialog and MatSnackBar\n\n/**\n * Internal component that wraps user-provided bottom sheet content.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-bottom-sheet-container',\n  templateUrl: 'bottom-sheet-container.html',\n  styleUrls: ['bottom-sheet-container.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  animations: [matBottomSheetAnimations.bottomSheetState],\n  host: {\n    'class': 'mat-bottom-sheet-container',\n    'tabindex': '-1',\n    'role': 'dialog',\n    'aria-modal': 'true',\n    '[attr.aria-label]': 'bottomSheetConfig?.ariaLabel',\n    '[@state]': '_animationState',\n    '(@state.start)': '_onAnimationStart($event)',\n    '(@state.done)': '_onAnimationDone($event)'\n  },\n})\nexport class MatBottomSheetContainer extends BasePortalOutlet implements OnDestroy {\n  private _breakpointSubscription: Subscription;\n\n  /** The portal outlet inside of this container into which the content will be loaded. */\n  @ViewChild(CdkPortalOutlet) _portalOutlet: CdkPortalOutlet;\n\n  /** The state of the bottom sheet animations. */\n  _animationState: 'void' | 'visible' | 'hidden' = 'void';\n\n  /** Emits whenever the state of the animation changes. */\n  _animationStateChanged = new EventEmitter<AnimationEvent>();\n\n  /** The class that traps and manages focus within the bottom sheet. */\n  private _focusTrap: FocusTrap;\n\n  /** Element that was focused before the bottom sheet was opened. */\n  private _elementFocusedBeforeOpened: HTMLElement | null = null;\n\n  /** Server-side rendering-compatible reference to the global document object. */\n  private _document: Document;\n\n  /** Whether the component has been destroyed. */\n  private _destroyed: boolean;\n\n  constructor(\n    private _elementRef: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    private _focusTrapFactory: FocusTrapFactory,\n    breakpointObserver: BreakpointObserver,\n    @Optional() @Inject(DOCUMENT) document: any,\n    /** The bottom sheet configuration. */\n    public bottomSheetConfig: MatBottomSheetConfig) {\n    super();\n\n    this._document = document;\n    this._breakpointSubscription = breakpointObserver\n      .observe([Breakpoints.Medium, Breakpoints.Large, Breakpoints.XLarge])\n      .subscribe(() => {\n        this._toggleClass('mat-bottom-sheet-container-medium',\n            breakpointObserver.isMatched(Breakpoints.Medium));\n        this._toggleClass('mat-bottom-sheet-container-large',\n            breakpointObserver.isMatched(Breakpoints.Large));\n        this._toggleClass('mat-bottom-sheet-container-xlarge',\n            breakpointObserver.isMatched(Breakpoints.XLarge));\n      });\n  }\n\n  /** Attach a component portal as content to this bottom sheet container. */\n  attachComponentPortal<T>(portal: ComponentPortal<T>): ComponentRef<T> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachComponentPortal(portal);\n  }\n\n  /** Attach a template portal as content to this bottom sheet container. */\n  attachTemplatePortal<C>(portal: TemplatePortal<C>): EmbeddedViewRef<C> {\n    this._validatePortalAttached();\n    this._setPanelClass();\n    this._savePreviouslyFocusedElement();\n    return this._portalOutlet.attachTemplatePortal(portal);\n  }\n\n  /** Begin animation of bottom sheet entrance into view. */\n  enter(): void {\n    if (!this._destroyed) {\n      this._animationState = 'visible';\n      this._changeDetectorRef.detectChanges();\n    }\n  }\n\n  /** Begin animation of the bottom sheet exiting from view. */\n  exit(): void {\n    if (!this._destroyed) {\n      this._animationState = 'hidden';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  ngOnDestroy() {\n    this._breakpointSubscription.unsubscribe();\n    this._destroyed = true;\n  }\n\n  _onAnimationDone(event: AnimationEvent) {\n    if (event.toState === 'hidden') {\n      this._restoreFocus();\n    } else if (event.toState === 'visible' && this.bottomSheetConfig.autoFocus) {\n      this._trapFocus();\n    }\n\n    this._animationStateChanged.emit(event);\n  }\n\n  _onAnimationStart(event: AnimationEvent) {\n    this._animationStateChanged.emit(event);\n  }\n\n  private _toggleClass(cssClass: string, add: boolean) {\n    const classList = this._elementRef.nativeElement.classList;\n    add ? classList.add(cssClass) : classList.remove(cssClass);\n  }\n\n  private _validatePortalAttached() {\n    if (this._portalOutlet.hasAttached()) {\n      throw Error('Attempting to attach bottom sheet content after content is already attached');\n    }\n  }\n\n  private _setPanelClass() {\n    const element: HTMLElement = this._elementRef.nativeElement;\n    const panelClass = this.bottomSheetConfig.panelClass;\n\n    if (Array.isArray(panelClass)) {\n      // Note that we can't use a spread here, because IE doesn't support multiple arguments.\n      panelClass.forEach(cssClass => element.classList.add(cssClass));\n    } else if (panelClass) {\n      element.classList.add(panelClass);\n    }\n  }\n\n\n  /** Moves the focus inside the focus trap. */\n  private _trapFocus() {\n    if (!this._focusTrap) {\n      this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n    }\n\n    this._focusTrap.focusInitialElementWhenReady();\n  }\n\n  /** Restores focus to the element that was focused before the bottom sheet was opened. */\n  private _restoreFocus() {\n    const toFocus = this._elementFocusedBeforeOpened;\n\n    // We need the extra check, because IE can set the `activeElement` to null in some cases.\n    if (this.bottomSheetConfig.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n      toFocus.focus();\n    }\n\n    if (this._focusTrap) {\n      this._focusTrap.destroy();\n    }\n  }\n\n  /** Saves a reference to the element that was focused before the bottom sheet was opened. */\n  private _savePreviouslyFocusedElement() {\n    this._elementFocusedBeforeOpened = this._document.activeElement as HTMLElement;\n\n    // The `focus` method isn't available during server-side rendering.\n    if (this._elementRef.nativeElement.focus) {\n      Promise.resolve().then(() => this._elementRef.nativeElement.focus());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    OverlayModule,\n    MatCommonModule,\n    PortalModule,\n  ],\n  exports: [MatBottomSheetContainer, MatCommonModule],\n  declarations: [MatBottomSheetContainer],\n  entryComponents: [MatBottomSheetContainer],\n})\nexport class MatBottomSheetModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Location} from '@angular/common';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {OverlayRef} from '@angular/cdk/overlay';\nimport {merge, Observable, Subject} from 'rxjs';\nimport {filter, take} from 'rxjs/operators';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\n\n\n/**\n * Reference to a bottom sheet dispatched from the bottom sheet service.\n */\nexport class MatBottomSheetRef<T = any, R = any> {\n  /** Instance of the component making up the content of the bottom sheet. */\n  instance: T;\n\n  /**\n   * Instance of the component into which the bottom sheet content is projected.\n   * @docs-private\n   */\n  containerInstance: MatBottomSheetContainer;\n\n  /** Subject for notifying the user that the bottom sheet has been dismissed. */\n  private readonly _afterDismissed = new Subject<R | undefined>();\n\n  /** Subject for notifying the user that the bottom sheet has opened and appeared. */\n  private readonly _afterOpened = new Subject<void>();\n\n  /** Result to be passed down to the `afterDismissed` stream. */\n  private _result: R | undefined;\n\n  constructor(\n    containerInstance: MatBottomSheetContainer,\n    private _overlayRef: OverlayRef,\n    // @breaking-change 8.0.0 `_location` parameter to be removed.\n    _location?: Location) {\n    this.containerInstance = containerInstance;\n\n    // Emit when opening animation completes\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'visible'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._afterOpened.next();\n      this._afterOpened.complete();\n    });\n\n    // Dispose overlay when closing animation is complete\n    containerInstance._animationStateChanged.pipe(\n      filter(event => event.phaseName === 'done' && event.toState === 'hidden'),\n      take(1)\n    )\n    .subscribe(() => {\n      this._overlayRef.dispose();\n      this._afterDismissed.next(this._result);\n      this._afterDismissed.complete();\n    });\n\n    if (!containerInstance.bottomSheetConfig.disableClose) {\n      merge(\n        _overlayRef.backdropClick(),\n        _overlayRef.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE))\n      ).subscribe(() => this.dismiss());\n    }\n  }\n\n  /**\n   * Dismisses the bottom sheet.\n   * @param result Data to be passed back to the bottom sheet opener.\n   */\n  dismiss(result?: R): void {\n    if (!this._afterDismissed.closed) {\n      // Transition the backdrop in parallel to the bottom sheet.\n      this.containerInstance._animationStateChanged.pipe(\n        filter(event => event.phaseName === 'start'),\n        take(1)\n      ).subscribe(() => this._overlayRef.detachBackdrop());\n\n      this._result = result;\n      this.containerInstance.exit();\n    }\n  }\n\n  /** Gets an observable that is notified when the bottom sheet is finished closing. */\n  afterDismissed(): Observable<R | undefined> {\n    return this._afterDismissed.asObservable();\n  }\n\n  /** Gets an observable that is notified when the bottom sheet has opened and appeared. */\n  afterOpened(): Observable<void> {\n    return this._afterOpened.asObservable();\n  }\n\n  /**\n   * Gets an observable that emits when the overlay's backdrop has been clicked.\n   */\n  backdropClick(): Observable<MouseEvent> {\n    return this._overlayRef.backdropClick();\n  }\n\n  /**\n   * Gets an observable that emits when keydown events are targeted on the overlay.\n   */\n  keydownEvents(): Observable<KeyboardEvent> {\n    return this._overlayRef.keydownEvents();\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {Overlay, OverlayConfig, OverlayRef} from '@angular/cdk/overlay';\nimport {ComponentPortal, ComponentType, PortalInjector, TemplatePortal} from '@angular/cdk/portal';\nimport {\n  ComponentRef,\n  Injectable,\n  Injector,\n  Optional,\n  SkipSelf,\n  TemplateRef,\n  InjectionToken,\n  Inject,\n  OnDestroy,\n} from '@angular/core';\nimport {Location} from '@angular/common';\nimport {of as observableOf} from 'rxjs';\nimport {MAT_BOTTOM_SHEET_DATA, MatBottomSheetConfig} from './bottom-sheet-config';\nimport {MatBottomSheetContainer} from './bottom-sheet-container';\nimport {MatBottomSheetModule} from './bottom-sheet-module';\nimport {MatBottomSheetRef} from './bottom-sheet-ref';\n\n\n/** Injection token that can be used to specify default bottom sheet options. */\nexport const MAT_BOTTOM_SHEET_DEFAULT_OPTIONS =\n    new InjectionToken<MatBottomSheetConfig>('mat-bottom-sheet-default-options');\n\n/**\n * Service to trigger Material Design bottom sheets.\n */\n@Injectable({providedIn: MatBottomSheetModule})\nexport class MatBottomSheet implements OnDestroy {\n  private _bottomSheetRefAtThisLevel: MatBottomSheetRef<any> | null = null;\n\n  /** Reference to the currently opened bottom sheet. */\n  get _openedBottomSheetRef(): MatBottomSheetRef<any> | null {\n    const parent = this._parentBottomSheet;\n    return parent ? parent._openedBottomSheetRef : this._bottomSheetRefAtThisLevel;\n  }\n\n  set _openedBottomSheetRef(value: MatBottomSheetRef<any> | null) {\n    if (this._parentBottomSheet) {\n      this._parentBottomSheet._openedBottomSheetRef = value;\n    } else {\n      this._bottomSheetRefAtThisLevel = value;\n    }\n  }\n\n  constructor(\n      private _overlay: Overlay,\n      private _injector: Injector,\n      @Optional() @SkipSelf() private _parentBottomSheet: MatBottomSheet,\n      @Optional() private _location?: Location,\n      @Optional() @Inject(MAT_BOTTOM_SHEET_DEFAULT_OPTIONS)\n          private _defaultOptions?: MatBottomSheetConfig) {}\n\n  open<T, D = any, R = any>(component: ComponentType<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n  open<T, D = any, R = any>(template: TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R>;\n\n  open<T, D = any, R = any>(componentOrTemplateRef: ComponentType<T> | TemplateRef<T>,\n                   config?: MatBottomSheetConfig<D>): MatBottomSheetRef<T, R> {\n\n    const _config =\n        _applyConfigDefaults(this._defaultOptions || new MatBottomSheetConfig(), config);\n    const overlayRef = this._createOverlay(_config);\n    const container = this._attachContainer(overlayRef, _config);\n    const ref = new MatBottomSheetRef<T, R>(container, overlayRef, this._location);\n\n    if (componentOrTemplateRef instanceof TemplateRef) {\n      container.attachTemplatePortal(new TemplatePortal<T>(componentOrTemplateRef, null!, {\n        $implicit: _config.data,\n        bottomSheetRef: ref\n      } as any));\n    } else {\n      const portal = new ComponentPortal(componentOrTemplateRef, undefined,\n            this._createInjector(_config, ref));\n      const contentRef = container.attachComponentPortal(portal);\n      ref.instance = contentRef.instance;\n    }\n\n    // When the bottom sheet is dismissed, clear the reference to it.\n    ref.afterDismissed().subscribe(() => {\n      // Clear the bottom sheet ref if it hasn't already been replaced by a newer one.\n      if (this._openedBottomSheetRef == ref) {\n        this._openedBottomSheetRef = null;\n      }\n    });\n\n    if (this._openedBottomSheetRef) {\n      // If a bottom sheet is already in view, dismiss it and enter the\n      // new bottom sheet after exit animation is complete.\n      this._openedBottomSheetRef.afterDismissed().subscribe(() => ref.containerInstance.enter());\n      this._openedBottomSheetRef.dismiss();\n    } else {\n      // If no bottom sheet is in view, enter the new bottom sheet.\n      ref.containerInstance.enter();\n    }\n\n    this._openedBottomSheetRef = ref;\n\n    return ref;\n  }\n\n  /**\n   * Dismisses the currently-visible bottom sheet.\n   */\n  dismiss(): void {\n    if (this._openedBottomSheetRef) {\n      this._openedBottomSheetRef.dismiss();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._bottomSheetRefAtThisLevel) {\n      this._bottomSheetRefAtThisLevel.dismiss();\n    }\n  }\n\n  /**\n   * Attaches the bottom sheet container component to the overlay.\n   */\n  private _attachContainer(overlayRef: OverlayRef,\n                           config: MatBottomSheetConfig): MatBottomSheetContainer {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injector = new PortalInjector(userInjector || this._injector, new WeakMap([\n      [MatBottomSheetConfig, config]\n    ]));\n\n    const containerPortal =\n        new ComponentPortal(MatBottomSheetContainer, config.viewContainerRef, injector);\n    const containerRef: ComponentRef<MatBottomSheetContainer> = overlayRef.attach(containerPortal);\n    return containerRef.instance;\n  }\n\n  /**\n   * Creates a new overlay and places it in the correct location.\n   * @param config The user-specified bottom sheet config.\n   */\n  private _createOverlay(config: MatBottomSheetConfig): OverlayRef {\n    const overlayConfig = new OverlayConfig({\n      direction: config.direction,\n      hasBackdrop: config.hasBackdrop,\n      disposeOnNavigation: config.closeOnNavigation,\n      maxWidth: '100%',\n      scrollStrategy: this._overlay.scrollStrategies.block(),\n      positionStrategy: this._overlay.position()\n        .global()\n        .centerHorizontally()\n        .bottom('0')\n    });\n\n    if (config.backdropClass) {\n      overlayConfig.backdropClass = config.backdropClass;\n    }\n\n    return this._overlay.create(overlayConfig);\n  }\n\n  /**\n   * Creates an injector to be used inside of a bottom sheet component.\n   * @param config Config that was used to create the bottom sheet.\n   * @param bottomSheetRef Reference to the bottom sheet.\n   */\n  private _createInjector<T>(config: MatBottomSheetConfig,\n                             bottomSheetRef: MatBottomSheetRef<T>): PortalInjector {\n\n    const userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n    const injectionTokens = new WeakMap<any, any>([\n      [MatBottomSheetRef, bottomSheetRef],\n      [MAT_BOTTOM_SHEET_DATA, config.data]\n    ]);\n\n    if (config.direction &&\n        (!userInjector || !userInjector.get<Directionality | null>(Directionality, null))) {\n      injectionTokens.set(Directionality, {\n        value: config.direction,\n        change: observableOf()\n      });\n    }\n\n    return new PortalInjector(userInjector || this._injector, injectionTokens);\n  }\n}\n\n/**\n * Applies default options to the bottom sheet config.\n * @param defaults Object containing the default values to which to fall back.\n * @param config The configuration to which the defaults will be applied.\n * @returns The new configuration object with defaults applied.\n */\nfunction _applyConfigDefaults(defaults: MatBottomSheetConfig,\n                              config?: MatBottomSheetConfig): MatBottomSheetConfig {\n  return {...defaults, ...config};\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {ENTER, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewChecked,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnDestroy,\n  Optional,\n  Output,\n  QueryList,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {Subject} from 'rxjs';\nimport {MatOptgroup} from './optgroup';\n\n/**\n * Option IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueIdCounter = 0;\n\n/** Event object emitted by MatOption when selected or deselected. */\nexport class MatOptionSelectionChange {\n  constructor(\n    /** Reference to the option that emitted the event. */\n    public source: MatOption,\n    /** Whether the change in the option's value was a result of a user action. */\n    public isUserInput = false) { }\n}\n\n/**\n * Describes a parent component that manages a list of options.\n * Contains properties that the options can inherit.\n * @docs-private\n */\nexport interface MatOptionParentComponent {\n  disableRipple?: boolean;\n  multiple?: boolean;\n}\n\n/**\n * Injection token used to provide the parent component to options.\n */\nexport const MAT_OPTION_PARENT_COMPONENT =\n    new InjectionToken<MatOptionParentComponent>('MAT_OPTION_PARENT_COMPONENT');\n\n/**\n * Single option inside of a `<mat-select>` element.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-option',\n  exportAs: 'matOption',\n  host: {\n    'role': 'option',\n    '[attr.tabindex]': '_getTabIndex()',\n    '[class.mat-selected]': 'selected',\n    '[class.mat-option-multiple]': 'multiple',\n    '[class.mat-active]': 'active',\n    '[id]': 'id',\n    '[attr.aria-selected]': 'selected.toString()',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[class.mat-option-disabled]': 'disabled',\n    '(click)': '_selectViaInteraction()',\n    '(keydown)': '_handleKeydown($event)',\n    'class': 'mat-option',\n  },\n  styleUrls: ['option.css'],\n  templateUrl: 'option.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MatOption implements AfterViewChecked, OnDestroy {\n  private _selected = false;\n  private _active = false;\n  private _disabled = false;\n  private _mostRecentViewValue = '';\n\n  /** Whether the wrapping component is in multiple selection mode. */\n  get multiple() { return this._parent && this._parent.multiple; }\n\n  /** Whether or not the option is currently selected. */\n  get selected(): boolean { return this._selected; }\n\n  /** The form value of the option. */\n  @Input() value: any;\n\n  /** The unique ID of the option. */\n  @Input() id: string = `mat-option-${_uniqueIdCounter++}`;\n\n  /** Whether the option is disabled. */\n  @Input()\n  get disabled() { return (this.group && this.group.disabled) || this._disabled; }\n  set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n  /** Whether ripples for the option are disabled. */\n  get disableRipple() { return this._parent && this._parent.disableRipple; }\n\n  /** Event emitted when the option is selected or deselected. */\n  // tslint:disable-next-line:no-output-on-prefix\n  @Output() readonly onSelectionChange = new EventEmitter<MatOptionSelectionChange>();\n\n  /** Emits when the state of the option changes and any parents have to be notified. */\n  readonly _stateChanges = new Subject<void>();\n\n  constructor(\n    private _element: ElementRef<HTMLElement>,\n    private _changeDetectorRef: ChangeDetectorRef,\n    @Optional() @Inject(MAT_OPTION_PARENT_COMPONENT) private _parent: MatOptionParentComponent,\n    @Optional() readonly group: MatOptgroup) {}\n\n  /**\n   * Whether or not the option is currently active and ready to be selected.\n   * An active option displays styles as if it is focused, but the\n   * focus is actually retained somewhere else. This comes in handy\n   * for components like autocomplete where focus must remain on the input.\n   */\n  get active(): boolean {\n    return this._active;\n  }\n\n  /**\n   * The displayed value of the option. It is necessary to show the selected option in the\n   * select's trigger.\n   */\n  get viewValue(): string {\n    // TODO(kara): Add input property alternative for node envs.\n    return (this._getHostElement().textContent || '').trim();\n  }\n\n  /** Selects the option. */\n  select(): void {\n    if (!this._selected) {\n      this._selected = true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Deselects the option. */\n  deselect(): void {\n    if (this._selected) {\n      this._selected = false;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent();\n    }\n  }\n\n  /** Sets focus onto this option. */\n  focus(): void {\n    const element = this._getHostElement();\n\n    if (typeof element.focus === 'function') {\n      element.focus();\n    }\n  }\n\n  /**\n   * This method sets display styles on the option to make it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setActiveStyles(): void {\n    if (!this._active) {\n      this._active = true;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * This method removes display styles on the option that made it appear\n   * active. This is used by the ActiveDescendantKeyManager so key\n   * events will display the proper options as active on arrow key events.\n   */\n  setInactiveStyles(): void {\n    if (this._active) {\n      this._active = false;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /** Gets the label to be used when determining whether the option should be focused. */\n  getLabel(): string {\n    return this.viewValue;\n  }\n\n  /** Ensures the option is selected when activated from the keyboard. */\n  _handleKeydown(event: KeyboardEvent): void {\n    if (event.keyCode === ENTER || event.keyCode === SPACE) {\n      this._selectViaInteraction();\n\n      // Prevent the page from scrolling down and form submits.\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * `Selects the option while indicating the selection came from the user. Used to\n   * determine if the select's view -> model callback should be invoked.`\n   */\n  _selectViaInteraction(): void {\n    if (!this.disabled) {\n      this._selected = this.multiple ? !this._selected : true;\n      this._changeDetectorRef.markForCheck();\n      this._emitSelectionChangeEvent(true);\n    }\n  }\n\n  /** Returns the correct tabindex for the option depending on disabled state. */\n  _getTabIndex(): string {\n    return this.disabled ? '-1' : '0';\n  }\n\n  /** Gets the host DOM element. */\n  _getHostElement(): HTMLElement {\n    return this._element.nativeElement;\n  }\n\n  ngAfterViewChecked() {\n    // Since parent components could be using the option's label to display the selected values\n    // (e.g. `mat-select`) and they don't have a way of knowing if the option's label has changed\n    // we have to check for changes in the DOM ourselves and dispatch an event. These checks are\n    // relatively cheap, however we still limit them only to selected options in order to avoid\n    // hitting the DOM too often.\n    if (this._selected) {\n      const viewValue = this.viewValue;\n\n      if (viewValue !== this._mostRecentViewValue) {\n        this._mostRecentViewValue = viewValue;\n        this._stateChanges.next();\n      }\n    }\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n\n  /** Emits the selection change event. */\n  private _emitSelectionChangeEvent(isUserInput = false): void {\n    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));\n  }\n}\n\n/**\n * Counts the amount of option group labels that precede the specified option.\n * @param optionIndex Index of the option at which to start counting.\n * @param options Flat list of all of the options.\n * @param optionGroups Flat list of all of the option groups.\n * @docs-private\n */\nexport function _countGroupLabelsBeforeOption(optionIndex: number, options: QueryList<MatOption>,\n  optionGroups: QueryList<MatOptgroup>): number {\n\n  if (optionGroups.length) {\n    let optionsArray = options.toArray();\n    let groups = optionGroups.toArray();\n    let groupCounter = 0;\n\n    for (let i = 0; i < optionIndex + 1; i++) {\n      if (optionsArray[i].group && optionsArray[i].group === groups[groupCounter]) {\n        groupCounter++;\n      }\n    }\n\n    return groupCounter;\n  }\n\n  return 0;\n}\n\n/**\n * Determines the position to which to scroll a panel in order for an option to be into view.\n * @param optionIndex Index of the option to be scrolled into the view.\n * @param optionHeight Height of the options.\n * @param currentScrollPosition Current scroll position of the panel.\n * @param panelHeight Height of the panel.\n * @docs-private\n */\nexport function _getOptionScrollPosition(optionIndex: number, optionHeight: number,\n    currentScrollPosition: number, panelHeight: number): number {\n  const optionOffset = optionIndex * optionHeight;\n\n  if (optionOffset < currentScrollPosition) {\n    return optionOffset;\n  }\n\n  if (optionOffset + optionHeight > currentScrollPosition + panelHeight) {\n    return Math.max(0, optionOffset - panelHeight + optionHeight);\n  }\n\n  return currentScrollPosition;\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatRippleModule} from '../ripple/index';\nimport {MatPseudoCheckboxModule} from '../selection/index';\nimport {MatOption} from './option';\nimport {MatOptgroup} from './optgroup';\n\n\n@NgModule({\n  imports: [MatRippleModule, CommonModule, MatPseudoCheckboxModule],\n  exports: [MatOption, MatOptgroup],\n  declarations: [MatOption, MatOptgroup]\n})\nexport class MatOptionModule {}\n\n\nexport * from './option';\nexport * from './optgroup';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n/** InjectionToken that can be used to specify the global label options. */\nexport const MAT_LABEL_GLOBAL_OPTIONS =\n  new InjectionToken<LabelOptions>('mat-label-global-options');\n\n/** Type for the available floatLabel values. */\nexport type FloatLabelType = 'always' | 'never' | 'auto';\n\n/** Configurable options for floating labels. */\nexport interface LabelOptions {\n  /**\n   * Whether the label should float `always`, `never`, or `auto` (only when necessary).\n   * Default behavior is assumed to be `auto`.\n   */\n  float?: FloatLabelType;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Single error message to be shown underneath the form field. */\n@Directive({\n  selector: 'mat-error',\n  host: {\n    'class': 'mat-error',\n    'role': 'alert',\n    '[attr.id]': 'id',\n  }\n})\nexport class MatError {\n  @Input() id: string = `mat-error-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  state,\n  style,\n  transition,\n  trigger,\n  AnimationTriggerMetadata,\n} from '@angular/animations';\n\n/**\n * Animations used by the MatFormField.\n * @docs-private\n */\nexport const matFormFieldAnimations: {\n  readonly transitionMessages: AnimationTriggerMetadata\n} = {\n  /** Animation that transitions the form field's error and hint messages. */\n  transitionMessages: trigger('transitionMessages', [\n    // TODO(mmalerba): Use angular animations for label animation as well.\n    state('enter', style({ opacity: 1, transform: 'translateY(0%)' })),\n    transition('void => enter', [\n      style({ opacity: 0, transform: 'translateY(-100%)' }),\n      animate('300ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    ]),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {NgControl} from '@angular/forms';\n\n\n/** An interface which allows a control to work inside of a `MatFormField`. */\nexport abstract class MatFormFieldControl<T> {\n  /** The value of the control. */\n  value: T | null;\n\n  /**\n   * Stream that emits whenever the state of the control changes such that the parent `MatFormField`\n   * needs to run change detection.\n   */\n  readonly stateChanges: Observable<void>;\n\n  /** The element ID for this control. */\n  readonly id: string;\n\n  /** The placeholder for this control. */\n  readonly placeholder: string;\n\n  /** Gets the NgControl for this control. */\n  readonly ngControl: NgControl | null;\n\n  /** Whether the control is focused. */\n  readonly focused: boolean;\n\n  /** Whether the control is empty. */\n  readonly empty: boolean;\n\n  /** Whether the `MatFormField` label should try to float. */\n  readonly shouldLabelFloat: boolean;\n\n  /** Whether the control is required. */\n  readonly required: boolean;\n\n  /** Whether the control is disabled. */\n  readonly disabled: boolean;\n\n  /** Whether the control is in an error state. */\n  readonly errorState: boolean;\n\n  /**\n   * An optional name for the control type that can be used to distinguish `mat-form-field` elements\n   * based on their control type. The form field will add a class,\n   * `mat-form-field-type-{{controlType}}` to its root element.\n   */\n  readonly controlType?: string;\n\n  /**\n   * Whether the input is currently in an autofilled state. If property is not present on the\n   * control it is assumed to be false.\n   */\n  readonly autofilled?: boolean;\n\n  /** Sets the list of element IDs that currently describe this control. */\n  abstract setDescribedByIds(ids: string[]): void;\n\n  /** Handles a click on the control's container. */\n  abstract onContainerClick(event: MouseEvent): void;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, Input} from '@angular/core';\n\n\nlet nextUniqueId = 0;\n\n\n/** Hint text to be shown underneath the form field control. */\n@Directive({\n  selector: 'mat-hint',\n  host: {\n    'class': 'mat-hint',\n    '[class.mat-right]': 'align == \"end\"',\n    '[attr.id]': 'id',\n    // Remove align attribute to prevent it from interfering with layout.\n    '[attr.align]': 'null',\n  }\n})\nexport class MatHint {\n  /** Whether to align the hint label at the start or end of the line. */\n  @Input() align: 'start' | 'end' = 'start';\n\n  /** Unique ID for the hint. Used for the aria-describedby on the form field control. */\n  @Input() id: string = `mat-hint-${nextUniqueId++}`;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** The floating label for a `mat-form-field`. */\n@Directive({\n  selector: 'mat-label'\n})\nexport class MatLabel {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/**\n * The placeholder text for an `MatFormField`.\n * @deprecated Use `<mat-label>` to specify the label and the `placeholder` attribute to specify the\n *     placeholder.\n * @breaking-change 8.0.0\n */\n@Directive({\n  selector: 'mat-placeholder'\n})\nexport class MatPlaceholder {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Prefix to be placed the the front of the form field. */\n@Directive({\n  selector: '[matPrefix]',\n})\nexport class MatPrefix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive} from '@angular/core';\n\n\n/** Suffix to be placed at the end of the form field. */\n@Directive({\n  selector: '[matSuffix]',\n})\nexport class MatSuffix {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directionality} from '@angular/cdk/bidi';\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {\n  AfterContentChecked,\n  AfterContentInit,\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ContentChildren,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  Optional,\n  QueryList,\n  ViewChild,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {\n  CanColor, CanColorCtor,\n  FloatLabelType,\n  LabelOptions,\n  MAT_LABEL_GLOBAL_OPTIONS,\n  mixinColor,\n} from '@angular/material/core';\nimport {fromEvent, merge} from 'rxjs';\nimport {startWith, take} from 'rxjs/operators';\nimport {MatError} from './error';\nimport {matFormFieldAnimations} from './form-field-animations';\nimport {MatFormFieldControl} from './form-field-control';\nimport {\n  getMatFormFieldDuplicatedHintError,\n  getMatFormFieldMissingControlError,\n  getMatFormFieldPlaceholderConflictError,\n} from './form-field-errors';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\nimport {Platform} from '@angular/cdk/platform';\nimport {NgControl} from '@angular/forms';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n\nlet nextUniqueId = 0;\nconst floatingLabelScale = 0.75;\nconst outlineGapPadding = 5;\n\n\n/**\n * Boilerplate for applying mixins to MatFormField.\n * @docs-private\n */\nexport class MatFormFieldBase {\n  constructor(public _elementRef: ElementRef) { }\n}\n\n/**\n * Base class to which we're applying the form field mixins.\n * @docs-private\n */\nexport const _MatFormFieldMixinBase: CanColorCtor & typeof MatFormFieldBase =\n    mixinColor(MatFormFieldBase, 'primary');\n\n/** Possible appearance styles for the form field. */\nexport type MatFormFieldAppearance = 'legacy' | 'standard' | 'fill' | 'outline';\n\n/**\n * Represents the default options form the form field that can be configured\n * using the `MAT_FORM_FIELD_DEFAULT_OPTIONS` injection token.\n */\nexport interface MatFormFieldDefaultOptions {\n  appearance?: MatFormFieldAppearance;\n}\n\n/**\n * Injection token that can be used to configure the\n * default options for all form field within an app.\n */\nexport const MAT_FORM_FIELD_DEFAULT_OPTIONS =\n    new InjectionToken<MatFormFieldDefaultOptions>('MAT_FORM_FIELD_DEFAULT_OPTIONS');\n\n\n/** Container for form controls that applies Material Design styling and behavior. */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-form-field',\n  exportAs: 'matFormField',\n  templateUrl: 'form-field.html',\n  // MatInput is a directive and can't have styles, so we need to include its styles here\n  // in form-field-input.css. The MatInput styles are fairly minimal so it shouldn't be a\n  // big deal for people who aren't using MatInput.\n  styleUrls: [\n    'form-field.css',\n    'form-field-fill.css',\n    'form-field-input.css',\n    'form-field-legacy.css',\n    'form-field-outline.css',\n    'form-field-standard.css',\n  ],\n  animations: [matFormFieldAnimations.transitionMessages],\n  host: {\n    'class': 'mat-form-field',\n    '[class.mat-form-field-appearance-standard]': 'appearance == \"standard\"',\n    '[class.mat-form-field-appearance-fill]': 'appearance == \"fill\"',\n    '[class.mat-form-field-appearance-outline]': 'appearance == \"outline\"',\n    '[class.mat-form-field-appearance-legacy]': 'appearance == \"legacy\"',\n    '[class.mat-form-field-invalid]': '_control.errorState',\n    '[class.mat-form-field-can-float]': '_canLabelFloat',\n    '[class.mat-form-field-should-float]': '_shouldLabelFloat()',\n    '[class.mat-form-field-hide-placeholder]': '_hideControlPlaceholder()',\n    '[class.mat-form-field-disabled]': '_control.disabled',\n    '[class.mat-form-field-autofilled]': '_control.autofilled',\n    '[class.mat-focused]': '_control.focused',\n    '[class.mat-accent]': 'color == \"accent\"',\n    '[class.mat-warn]': 'color == \"warn\"',\n    '[class.ng-untouched]': '_shouldForward(\"untouched\")',\n    '[class.ng-touched]': '_shouldForward(\"touched\")',\n    '[class.ng-pristine]': '_shouldForward(\"pristine\")',\n    '[class.ng-dirty]': '_shouldForward(\"dirty\")',\n    '[class.ng-valid]': '_shouldForward(\"valid\")',\n    '[class.ng-invalid]': '_shouldForward(\"invalid\")',\n    '[class.ng-pending]': '_shouldForward(\"pending\")',\n    '[class._mat-animation-noopable]': '!_animationsEnabled',\n  },\n  inputs: ['color'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\n\nexport class MatFormField extends _MatFormFieldMixinBase\n    implements AfterContentInit, AfterContentChecked, AfterViewInit, CanColor {\n  private _labelOptions: LabelOptions;\n  private _outlineGapCalculationNeeded = false;\n\n  /** The form-field appearance style. */\n  @Input()\n  get appearance(): MatFormFieldAppearance { return this._appearance; }\n  set appearance(value: MatFormFieldAppearance) {\n    const oldValue = this._appearance;\n\n    this._appearance = value || (this._defaults && this._defaults.appearance) || 'legacy';\n\n    if (this._appearance === 'outline' && oldValue !== value) {\n      this._updateOutlineGapOnStable();\n    }\n  }\n  _appearance: MatFormFieldAppearance;\n\n  /** Whether the required marker should be hidden. */\n  @Input()\n  get hideRequiredMarker(): boolean { return this._hideRequiredMarker; }\n  set hideRequiredMarker(value: boolean) {\n    this._hideRequiredMarker = coerceBooleanProperty(value);\n  }\n  private _hideRequiredMarker: boolean;\n\n  /** Override for the logic that disables the label animation in certain cases. */\n  private _showAlwaysAnimate = false;\n\n  /** Whether the floating label should always float or not. */\n  get _shouldAlwaysFloat(): boolean {\n    return this.floatLabel === 'always' && !this._showAlwaysAnimate;\n  }\n\n  /** Whether the label can float or not. */\n  get _canLabelFloat(): boolean { return this.floatLabel !== 'never'; }\n\n  /** State of the mat-hint and mat-error animations. */\n  _subscriptAnimationState: string = '';\n\n  /** Text for the form field hint. */\n  @Input()\n  get hintLabel(): string { return this._hintLabel; }\n  set hintLabel(value: string) {\n    this._hintLabel = value;\n    this._processHints();\n  }\n  private _hintLabel = '';\n\n  // Unique id for the hint label.\n  _hintLabelId: string = `mat-hint-${nextUniqueId++}`;\n\n  // Unique id for the internal form field label.\n  _labelId = `mat-form-field-label-${nextUniqueId++}`;\n\n  /**\n   * Whether the label should always float, never float or float as the user types.\n   *\n   * Note: only the legacy appearance supports the `never` option. `never` was originally added as a\n   * way to make the floating label emulate the behavior of a standard input placeholder. However\n   * the form field now supports both floating labels and placeholders. Therefore in the non-legacy\n   * appearances the `never` option has been disabled in favor of just using the placeholder.\n   */\n  @Input()\n  get floatLabel(): FloatLabelType {\n    return this.appearance !== 'legacy' && this._floatLabel === 'never' ? 'auto' : this._floatLabel;\n  }\n  set floatLabel(value: FloatLabelType) {\n    if (value !== this._floatLabel) {\n      this._floatLabel = value || this._labelOptions.float || 'auto';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _floatLabel: FloatLabelType;\n\n  /** Whether the Angular animations are enabled. */\n  _animationsEnabled: boolean;\n\n  /**\n   * @deprecated\n   * @breaking-change 8.0.0\n   */\n  @ViewChild('underline') underlineRef: ElementRef;\n\n  @ViewChild('connectionContainer') _connectionContainerRef: ElementRef;\n  @ViewChild('inputContainer') _inputContainerRef: ElementRef;\n  @ViewChild('label') private _label: ElementRef;\n  @ContentChild(MatFormFieldControl) _control: MatFormFieldControl<any>;\n  @ContentChild(MatPlaceholder) _placeholderChild: MatPlaceholder;\n  @ContentChild(MatLabel) _labelChild: MatLabel;\n  @ContentChildren(MatError) _errorChildren: QueryList<MatError>;\n  @ContentChildren(MatHint) _hintChildren: QueryList<MatHint>;\n  @ContentChildren(MatPrefix) _prefixChildren: QueryList<MatPrefix>;\n  @ContentChildren(MatSuffix) _suffixChildren: QueryList<MatSuffix>;\n\n  constructor(\n      public _elementRef: ElementRef,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Optional() @Inject(MAT_LABEL_GLOBAL_OPTIONS) labelOptions: LabelOptions,\n      @Optional() private _dir: Directionality,\n      @Optional() @Inject(MAT_FORM_FIELD_DEFAULT_OPTIONS)\n          private _defaults: MatFormFieldDefaultOptions,\n      // @breaking-change 8.0.0 _platform, _ngZone and _animationMode to be made required.\n      private _platform?: Platform,\n      private _ngZone?: NgZone,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) _animationMode?: string) {\n    super(_elementRef);\n\n    this._labelOptions = labelOptions ? labelOptions : {};\n    this.floatLabel = this._labelOptions.float || 'auto';\n    this._animationsEnabled = _animationMode !== 'NoopAnimations';\n\n    // Set the default through here so we invoke the setter on the first run.\n    this.appearance = (_defaults && _defaults.appearance) ? _defaults.appearance : 'legacy';\n  }\n\n  /**\n   * Gets an ElementRef for the element that a overlay attached to the form-field should be\n   * positioned relative to.\n   */\n  getConnectedOverlayOrigin(): ElementRef {\n    return this._connectionContainerRef || this._elementRef;\n  }\n\n  ngAfterContentInit() {\n    this._validateControlChild();\n\n    const control = this._control;\n\n    if (control.controlType) {\n      this._elementRef.nativeElement.classList.add(`mat-form-field-type-${control.controlType}`);\n    }\n\n    // Subscribe to changes in the child control state in order to update the form field UI.\n    control.stateChanges.pipe(startWith<void>(null!)).subscribe(() => {\n      this._validatePlaceholders();\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Run change detection if the value changes.\n    if (control.ngControl && control.ngControl.valueChanges) {\n      control.ngControl.valueChanges.subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n\n    // Run change detection and update the outline if the suffix or prefix changes.\n    merge(this._prefixChildren.changes, this._suffixChildren.changes).subscribe(() => {\n      this._updateOutlineGapOnStable();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Re-validate when the number of hints changes.\n    this._hintChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._processHints();\n      this._changeDetectorRef.markForCheck();\n    });\n\n    // Update the aria-described by when the number of errors changes.\n    this._errorChildren.changes.pipe(startWith(null)).subscribe(() => {\n      this._syncDescribedByIds();\n      this._changeDetectorRef.markForCheck();\n    });\n  }\n\n  ngAfterContentChecked() {\n    this._validateControlChild();\n    if (this._outlineGapCalculationNeeded) {\n      this.updateOutlineGap();\n    }\n  }\n\n  ngAfterViewInit() {\n    // Avoid animations on load.\n    this._subscriptAnimationState = 'enter';\n    this._changeDetectorRef.detectChanges();\n  }\n\n  /** Determines whether a class from the NgControl should be forwarded to the host element. */\n  _shouldForward(prop: keyof NgControl): boolean {\n    const ngControl = this._control ? this._control.ngControl : null;\n    return ngControl && ngControl[prop];\n  }\n\n  _hasPlaceholder() {\n    return !!(this._control && this._control.placeholder || this._placeholderChild);\n  }\n\n  _hasLabel() {\n    return !!this._labelChild;\n  }\n\n  _shouldLabelFloat() {\n    return this._canLabelFloat && (this._control.shouldLabelFloat || this._shouldAlwaysFloat);\n  }\n\n  _hideControlPlaceholder() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this.appearance === 'legacy' && !this._hasLabel() ||\n        this._hasLabel() && !this._shouldLabelFloat();\n  }\n\n  _hasFloatingLabel() {\n    // In the legacy appearance the placeholder is promoted to a label if no label is given.\n    return this._hasLabel() || this.appearance === 'legacy' && this._hasPlaceholder();\n  }\n\n  /** Determines whether to display hints or errors. */\n  _getDisplayedMessages(): 'error' | 'hint' {\n    return (this._errorChildren && this._errorChildren.length > 0 &&\n        this._control.errorState) ? 'error' : 'hint';\n  }\n\n  /** Animates the placeholder up and locks it in position. */\n  _animateAndLockLabel(): void {\n    if (this._hasFloatingLabel() && this._canLabelFloat) {\n      // If animations are disabled, we shouldn't go in here,\n      // because the `transitionend` will never fire.\n      if (this._animationsEnabled) {\n        this._showAlwaysAnimate = true;\n\n        fromEvent(this._label.nativeElement, 'transitionend').pipe(take(1)).subscribe(() => {\n          this._showAlwaysAnimate = false;\n        });\n      }\n\n      this.floatLabel = 'always';\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Ensure that there is only one placeholder (either `placeholder` attribute on the child control\n   * or child element with the `mat-placeholder` directive).\n   */\n  private _validatePlaceholders() {\n    if (this._control.placeholder && this._placeholderChild) {\n      throw getMatFormFieldPlaceholderConflictError();\n    }\n  }\n\n  /** Does any extra processing that is required when handling the hints. */\n  private _processHints() {\n    this._validateHints();\n    this._syncDescribedByIds();\n  }\n\n  /**\n   * Ensure that there is a maximum of one of each `<mat-hint>` alignment specified, with the\n   * attribute being considered as `align=\"start\"`.\n   */\n  private _validateHints() {\n    if (this._hintChildren) {\n      let startHint: MatHint;\n      let endHint: MatHint;\n      this._hintChildren.forEach((hint: MatHint) => {\n        if (hint.align === 'start') {\n          if (startHint || this.hintLabel) {\n            throw getMatFormFieldDuplicatedHintError('start');\n          }\n          startHint = hint;\n        } else if (hint.align === 'end') {\n          if (endHint) {\n            throw getMatFormFieldDuplicatedHintError('end');\n          }\n          endHint = hint;\n        }\n      });\n    }\n  }\n\n  /**\n   * Sets the list of element IDs that describe the child control. This allows the control to update\n   * its `aria-describedby` attribute accordingly.\n   */\n  private _syncDescribedByIds() {\n    if (this._control) {\n      let ids: string[] = [];\n\n      if (this._getDisplayedMessages() === 'hint') {\n        const startHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'start') : null;\n        const endHint = this._hintChildren ?\n            this._hintChildren.find(hint => hint.align === 'end') : null;\n\n        if (startHint) {\n          ids.push(startHint.id);\n        } else if (this._hintLabel) {\n          ids.push(this._hintLabelId);\n        }\n\n        if (endHint) {\n          ids.push(endHint.id);\n        }\n      } else if (this._errorChildren) {\n        ids = this._errorChildren.map(error => error.id);\n      }\n\n      this._control.setDescribedByIds(ids);\n    }\n  }\n\n  /** Throws an error if the form field's control is missing. */\n  protected _validateControlChild() {\n    if (!this._control) {\n      throw getMatFormFieldMissingControlError();\n    }\n  }\n\n  /**\n   * Updates the width and position of the gap in the outline. Only relevant for the outline\n   * appearance.\n   */\n  updateOutlineGap() {\n    const labelEl = this._label ? this._label.nativeElement : null;\n\n    if (this.appearance !== 'outline' || !labelEl || !labelEl.children.length ||\n        !labelEl.textContent.trim()) {\n      return;\n    }\n\n    if (this._platform && !this._platform.isBrowser) {\n      // getBoundingClientRect isn't available on the server.\n      return;\n    }\n    // If the element is not present in the DOM, the outline gap will need to be calculated\n    // the next time it is checked and in the DOM.\n    if (!document.documentElement!.contains(this._elementRef.nativeElement)) {\n      this._outlineGapCalculationNeeded = true;\n      return;\n    }\n\n    let startWidth = 0;\n    let gapWidth = 0;\n    const startEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n      '.mat-form-field-outline-start');\n    const gapEls = this._connectionContainerRef.nativeElement.querySelectorAll(\n        '.mat-form-field-outline-gap');\n    if (this._label && this._label.nativeElement.children.length) {\n      const containerStart = this._getStartEnd(\n          this._connectionContainerRef.nativeElement.getBoundingClientRect());\n      const labelStart = this._getStartEnd(labelEl.children[0].getBoundingClientRect());\n      let labelWidth = 0;\n\n      for (const child of labelEl.children) {\n        labelWidth += child.offsetWidth;\n      }\n      startWidth = labelStart - containerStart - outlineGapPadding;\n      gapWidth = labelWidth > 0 ? labelWidth * floatingLabelScale + outlineGapPadding * 2 : 0;\n    }\n\n    for (let i = 0; i < startEls.length; i++) {\n      startEls.item(i).style.width = `${startWidth}px`;\n    }\n    for (let i = 0; i < gapEls.length; i++) {\n      gapEls.item(i).style.width = `${gapWidth}px`;\n    }\n\n    this._outlineGapCalculationNeeded = false;\n  }\n\n  /** Gets the start end of the rect considering the current directionality. */\n  private _getStartEnd(rect: ClientRect): number {\n    return this._dir && this._dir.value === 'rtl' ? rect.right : rect.left;\n  }\n\n  /** Updates the outline gap the new time the zone stabilizes. */\n  private _updateOutlineGapOnStable() {\n    // @breaking-change 8.0.0 Remove this check and else block once _ngZone is required.\n    if (this._ngZone) {\n      this._ngZone.onStable.pipe(take(1)).subscribe(() => this.updateOutlineGap());\n    } else {\n      Promise.resolve().then(() => this.updateOutlineGap());\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {MatError} from './error';\nimport {MatFormField} from './form-field';\nimport {MatHint} from './hint';\nimport {MatLabel} from './label';\nimport {MatPlaceholder} from './placeholder';\nimport {MatPrefix} from './prefix';\nimport {MatSuffix} from './suffix';\n\n\n@NgModule({\n  declarations: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n  imports: [\n    CommonModule,\n    ObserversModule,\n  ],\n  exports: [\n    MatError,\n    MatFormField,\n    MatHint,\n    MatLabel,\n    MatPlaceholder,\n    MatPrefix,\n    MatSuffix,\n  ],\n})\nexport class MatFormFieldModule {}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule, InjectionToken, Optional, Inject, isDevMode} from '@angular/core';\nimport {HammerLoader, HAMMER_LOADER} from '@angular/platform-browser';\nimport {BidiModule} from '@angular/cdk/bidi';\n\n\n/** Injection token that configures whether the Material sanity checks are enabled. */\nexport const MATERIAL_SANITY_CHECKS = new InjectionToken<boolean>('mat-sanity-checks', {\n  providedIn: 'root',\n  factory: MATERIAL_SANITY_CHECKS_FACTORY,\n});\n\n/** @docs-private */\nexport function MATERIAL_SANITY_CHECKS_FACTORY(): boolean {\n  return true;\n}\n\n/**\n * Module that captures anything that should be loaded and/or run for *all* Angular Material\n * components. This includes Bidi, etc.\n *\n * This module should be imported to each top-level component module (e.g., MatTabsModule).\n */\n@NgModule({\n  imports: [BidiModule],\n  exports: [BidiModule],\n})\nexport class MatCommonModule {\n  /** Whether we've done the global sanity checks (e.g. a theme is loaded, there is a doctype). */\n  private _hasDoneGlobalChecks = false;\n\n  /** Whether we've already checked for HammerJs availability. */\n  private _hasCheckedHammer = false;\n\n  /** Reference to the global `document` object. */\n  private _document = typeof document === 'object' && document ? document : null;\n\n  /** Reference to the global 'window' object. */\n  private _window = typeof window === 'object' && window ? window : null;\n\n  constructor(\n    @Optional() @Inject(MATERIAL_SANITY_CHECKS) private _sanityChecksEnabled: boolean,\n    @Optional() @Inject(HAMMER_LOADER) private _hammerLoader?: HammerLoader) {\n\n    if (this._areChecksEnabled() && !this._hasDoneGlobalChecks) {\n      this._checkDoctypeIsDefined();\n      this._checkThemeIsPresent();\n      this._hasDoneGlobalChecks = true;\n    }\n  }\n\n  /** Whether any sanity checks are enabled */\n  private _areChecksEnabled(): boolean {\n    return this._sanityChecksEnabled && isDevMode() && !this._isTestEnv();\n  }\n\n  /** Whether the code is running in tests. */\n  private _isTestEnv() {\n    const window = this._window as any;\n    return window && (window.__karma__ || window.jasmine);\n  }\n\n  private _checkDoctypeIsDefined(): void {\n    if (this._document && !this._document.doctype) {\n      console.warn(\n        'Current document does not have a doctype. This may cause ' +\n        'some Angular Material components not to behave as expected.'\n      );\n    }\n  }\n\n  private _checkThemeIsPresent(): void {\n    // We need to assert that the `body` is defined, because these checks run very early\n    // and the `body` won't be defined if the consumer put their scripts in the `head`.\n    if (!this._document || !this._document.body || typeof getComputedStyle !== 'function') {\n      return;\n    }\n\n    const testElement = this._document.createElement('div');\n\n    testElement.classList.add('mat-theme-loaded-marker');\n    this._document.body.appendChild(testElement);\n\n    const computedStyle = getComputedStyle(testElement);\n\n    // In some situations the computed style of the test element can be null. For example in\n    // Firefox, the computed style is null if an application is running inside of a hidden iframe.\n    // See: https://bugzilla.mozilla.org/show_bug.cgi?id=548397\n    if (computedStyle && computedStyle.display !== 'none') {\n      console.warn(\n        'Could not find Angular Material core theme. Most Material ' +\n        'components may not work as expected. For more info refer ' +\n        'to the theming guide: https://material.angular.io/guide/theming'\n      );\n    }\n\n    this._document.body.removeChild(testElement);\n  }\n\n  /** Checks whether HammerJS is available. */\n  _checkHammerIsAvailable(): void {\n    if (this._hasCheckedHammer || !this._window) {\n      return;\n    }\n\n    if (this._areChecksEnabled() && !(this._window as any)['Hammer'] && !this._hammerLoader) {\n      console.warn(\n        'Could not find HammerJS. Certain Angular Material components may not work correctly.');\n    }\n    this._hasCheckedHammer = true;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisable {\n  /** Whether the component is disabled. */\n  disabled: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableCtor = Constructor<CanDisable>;\n\n/** Mixin to augment a directive with a `disabled` property. */\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): CanDisableCtor & T {\n  return class extends base {\n    private _disabled: boolean = false;\n\n    get disabled() { return this._disabled; }\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {ElementRef} from '@angular/core';\n\n/** @docs-private */\nexport interface CanColor {\n  /** Theme color palette for the component. */\n  color: ThemePalette;\n}\n\n/** @docs-private */\nexport type CanColorCtor = Constructor<CanColor>;\n\n/** @docs-private */\nexport interface HasElementRef {\n  _elementRef: ElementRef;\n}\n\n/** Possible color palette values. */\nexport type ThemePalette = 'primary' | 'accent' | 'warn' | undefined;\n\n/** Mixin to augment a directive with a `color` property. */\nexport function mixinColor<T extends Constructor<HasElementRef>>(\n    base: T, defaultColor?: ThemePalette): CanColorCtor & T {\n  return class extends base {\n    private _color: ThemePalette;\n\n    get color(): ThemePalette { return this._color; }\n    set color(value: ThemePalette) {\n      const colorPalette = value || defaultColor;\n\n      if (colorPalette !== this._color) {\n        if (this._color) {\n          this._elementRef.nativeElement.classList.remove(`mat-${this._color}`);\n        }\n        if (colorPalette) {\n          this._elementRef.nativeElement.classList.add(`mat-${colorPalette}`);\n        }\n\n        this._color = colorPalette;\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n\n      // Set the default color that can be specified from the mixin.\n      this.color = defaultColor;\n    }\n  };\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Constructor} from './constructor';\n\n/** @docs-private */\nexport interface CanDisableRipple {\n  /** Whether ripples are disabled. */\n  disableRipple: boolean;\n}\n\n/** @docs-private */\nexport type CanDisableRippleCtor = Constructor<CanDisableRipple>;\n\n/** Mixin to augment a directive with a `disableRipple` property. */\nexport function mixinDisableRipple<T extends Constructor<{}>>(base: T): CanDisableRippleCtor & T {\n  return class extends base {\n    private _disableRipple: boolean = false;\n\n    /** Whether the ripple effect is disabled or not. */\n    get disableRipple() { return this._disableRipple; }\n    set disableRipple(value: any) { this._disableRipple = coerceBooleanProperty(value); }\n\n    constructor(...args: any[]) { super(...args); }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Constructor} from './constructor';\nimport {CanDisable} from './disabled';\n\n\n/** @docs-private */\nexport interface HasTabIndex {\n  /** Tabindex of the component. */\n  tabIndex: number;\n}\n\n/** @docs-private */\nexport type HasTabIndexCtor = Constructor<HasTabIndex>;\n\n/** Mixin to augment a directive with a `tabIndex` property. */\nexport function mixinTabIndex<T extends Constructor<CanDisable>>(base: T, defaultTabIndex = 0)\n    : HasTabIndexCtor & T {\n  return class extends base {\n    private _tabIndex: number = defaultTabIndex;\n\n    get tabIndex(): number { return this.disabled ? -1 : this._tabIndex; }\n    set tabIndex(value: number) {\n      // If the specified tabIndex value is null or undefined, fall back to the default value.\n      this._tabIndex = value != null ? value : defaultTabIndex;\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FormControl, FormGroupDirective, NgControl, NgForm} from '@angular/forms';\nimport {Subject} from 'rxjs';\nimport {ErrorStateMatcher} from '../error/error-options';\nimport {Constructor} from './constructor';\n\n\n/** @docs-private */\nexport interface CanUpdateErrorState {\n  updateErrorState(): void;\n  readonly stateChanges: Subject<void>;\n  errorState: boolean;\n  errorStateMatcher: ErrorStateMatcher;\n}\n\n/** @docs-private */\nexport type CanUpdateErrorStateCtor = Constructor<CanUpdateErrorState>;\n\n/** @docs-private */\nexport interface HasErrorState {\n  _parentFormGroup: FormGroupDirective;\n  _parentForm: NgForm;\n  _defaultErrorStateMatcher: ErrorStateMatcher;\n  ngControl: NgControl;\n}\n\n/**\n * Mixin to augment a directive with updateErrorState method.\n * For component with `errorState` and need to update `errorState`.\n */\nexport function mixinErrorState<T extends Constructor<HasErrorState>>(base: T)\n: CanUpdateErrorStateCtor & T {\n  return class extends base {\n    /** Whether the component is in an error state. */\n    errorState: boolean = false;\n\n    /**\n     * Stream that emits whenever the state of the input changes such that the wrapping\n     * `MatFormField` needs to run change detection.\n     */\n    readonly stateChanges = new Subject<void>();\n\n    errorStateMatcher: ErrorStateMatcher;\n\n    updateErrorState() {\n      const oldState = this.errorState;\n      const parent = this._parentFormGroup || this._parentForm;\n      const matcher = this.errorStateMatcher || this._defaultErrorStateMatcher;\n      const control = this.ngControl ? this.ngControl.control as FormControl : null;\n      const newState = matcher.isErrorState(control, parent);\n\n      if (newState !== oldState) {\n        this.errorState = newState;\n        this.stateChanges.next();\n      }\n    }\n\n    constructor(...args: any[]) {\n      super(...args);\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable, Subscriber} from 'rxjs';\nimport {Constructor} from './constructor';\n\n\n/**\n * Mixin that adds an initialized property to a directive which, when subscribed to, will emit a\n * value once markInitialized has been called, which should be done during the ngOnInit function.\n * If the subscription is made after it has already been marked as initialized, then it will trigger\n * an emit immediately.\n * @docs-private\n */\nexport interface HasInitialized {\n  /** Stream that emits once during the directive/component's ngOnInit. */\n  initialized: Observable<void>;\n\n  /**\n   * Sets the state as initialized and must be called during ngOnInit to notify subscribers that\n   * the directive has been initialized.\n   * @docs-private\n   */\n  _markInitialized: () => void;\n}\n\n/** @docs-private */\nexport type HasInitializedCtor = Constructor<HasInitialized>;\n\n/** Mixin to augment a directive with an initialized property that will emits when ngOnInit ends. */\nexport function mixinInitialized<T extends Constructor<{}>>(base: T):\n    HasInitializedCtor & T {\n  return class extends base {\n    /** Whether this directive has been marked as initialized. */\n    _isInitialized = false;\n\n    /**\n     * List of subscribers that subscribed before the directive was initialized. Should be notified\n     * during _markInitialized. Set to null after pending subscribers are notified, and should\n     * not expect to be populated after.\n     */\n    _pendingSubscribers: Subscriber<void>[] | null = [];\n\n    /**\n     * Observable stream that emits when the directive initializes. If already initialized, the\n     * subscriber is stored to be notified once _markInitialized is called.\n     */\n    initialized = new Observable<void>(subscriber => {\n      // If initialized, immediately notify the subscriber. Otherwise store the subscriber to notify\n      // when _markInitialized is called.\n      if (this._isInitialized) {\n        this._notifySubscriber(subscriber);\n      } else {\n        this._pendingSubscribers!.push(subscriber);\n      }\n    });\n\n    constructor(...args: any[]) { super(...args); }\n\n    /**\n     * Marks the state as initialized and notifies pending subscribers. Should be called at the end\n     * of ngOnInit.\n     * @docs-private\n     */\n    _markInitialized(): void {\n      if (this._isInitialized) {\n        throw Error('This directive has already been marked as initialized and ' +\n            'should not be called twice.');\n      }\n\n      this._isInitialized = true;\n\n      this._pendingSubscribers!.forEach(this._notifySubscriber);\n      this._pendingSubscribers = null;\n    }\n\n    /** Emits and completes the subscriber stream (should only emit once). */\n    _notifySubscriber(subscriber: Subscriber<void>): void {\n      subscriber.next();\n      subscriber.complete();\n    }\n  };\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {inject, InjectionToken, LOCALE_ID} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nexport const MAT_DATE_LOCALE = new InjectionToken<string>('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY,\n});\n\n/** @docs-private */\nexport function MAT_DATE_LOCALE_FACTORY(): string {\n  return inject(LOCALE_ID);\n}\n\n/**\n * No longer needed since MAT_DATE_LOCALE has been changed to a scoped injectable.\n * If you are importing and providing this in your code you can simply remove it.\n * @deprecated\n * @breaking-change 8.0.0\n */\nexport const MAT_DATE_LOCALE_PROVIDER = {provide: MAT_DATE_LOCALE, useExisting: LOCALE_ID};\n\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nexport abstract class DateAdapter<D> {\n  /** The locale to use for all dates. */\n  protected locale: any;\n\n  /** A stream that emits when the locale changes. */\n  get localeChanges(): Observable<void> { return this._localeChanges; }\n  protected _localeChanges = new Subject<void>();\n\n  /**\n   * Gets the year component of the given date.\n   * @param date The date to extract the year from.\n   * @returns The year component.\n   */\n  abstract getYear(date: D): number;\n\n  /**\n   * Gets the month component of the given date.\n   * @param date The date to extract the month from.\n   * @returns The month component (0-indexed, 0 = January).\n   */\n  abstract getMonth(date: D): number;\n\n  /**\n   * Gets the date of the month component of the given date.\n   * @param date The date to extract the date of the month from.\n   * @returns The month component (1-indexed, 1 = first of month).\n   */\n  abstract getDate(date: D): number;\n\n  /**\n   * Gets the day of the week component of the given date.\n   * @param date The date to extract the day of the week from.\n   * @returns The month component (0-indexed, 0 = Sunday).\n   */\n  abstract getDayOfWeek(date: D): number;\n\n  /**\n   * Gets a list of names for the months.\n   * @param style The naming style (e.g. long = 'January', short = 'Jan', narrow = 'J').\n   * @returns An ordered list of all month names, starting with January.\n   */\n  abstract getMonthNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets a list of names for the dates of the month.\n   * @returns An ordered list of all date of the month names, starting with '1'.\n   */\n  abstract getDateNames(): string[];\n\n  /**\n   * Gets a list of names for the days of the week.\n   * @param style The naming style (e.g. long = 'Sunday', short = 'Sun', narrow = 'S').\n   * @returns An ordered list of all weekday names, starting with Sunday.\n   */\n  abstract getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[];\n\n  /**\n   * Gets the name for the year of the given date.\n   * @param date The date to get the year name for.\n   * @returns The name of the given year (e.g. '2017').\n   */\n  abstract getYearName(date: D): string;\n\n  /**\n   * Gets the first day of the week.\n   * @returns The first day of the week (0-indexed, 0 = Sunday).\n   */\n  abstract getFirstDayOfWeek(): number;\n\n  /**\n   * Gets the number of days in the month of the given date.\n   * @param date The date whose month should be checked.\n   * @returns The number of days in the month of the given date.\n   */\n  abstract getNumDaysInMonth(date: D): number;\n\n  /**\n   * Clones the given date.\n   * @param date The date to clone\n   * @returns A new date equal to the given date.\n   */\n  abstract clone(date: D): D;\n\n  /**\n   * Creates a date with the given year, month, and date. Does not allow over/under-flow of the\n   * month and date.\n   * @param year The full year of the date. (e.g. 89 means the year 89, not the year 1989).\n   * @param month The month of the date (0-indexed, 0 = January). Must be an integer 0 - 11.\n   * @param date The date of month of the date. Must be an integer 1 - length of the given month.\n   * @returns The new date, or null if invalid.\n   */\n  abstract createDate(year: number, month: number, date: number): D;\n\n  /**\n   * Gets today's date.\n   * @returns Today's date.\n   */\n  abstract today(): D;\n\n  /**\n   * Parses a date from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   * @returns The parsed date.\n   */\n  abstract parse(value: any, parseFormat: any): D | null;\n\n  /**\n   * Formats a date as a string according to the given format.\n   * @param date The value to format.\n   * @param displayFormat The format to use to display the date as a string.\n   * @returns The formatted date string.\n   */\n  abstract format(date: D, displayFormat: any): string;\n\n  /**\n   * Adds the given number of years to the date. Years are counted as if flipping 12 pages on the\n   * calendar for each year and then finding the closest date in the new month. For example when\n   * adding 1 year to Feb 29, 2016, the resulting date will be Feb 28, 2017.\n   * @param date The date to add years to.\n   * @param years The number of years to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of years added.\n   */\n  abstract addCalendarYears(date: D, years: number): D;\n\n  /**\n   * Adds the given number of months to the date. Months are counted as if flipping a page on the\n   * calendar for each month and then finding the closest date in the new month. For example when\n   * adding 1 month to Jan 31, 2017, the resulting date will be Feb 28, 2017.\n   * @param date The date to add months to.\n   * @param months The number of months to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of months added.\n   */\n  abstract addCalendarMonths(date: D, months: number): D;\n\n  /**\n   * Adds the given number of days to the date. Days are counted as if moving one cell on the\n   * calendar for each day.\n   * @param date The date to add days to.\n   * @param days The number of days to add (may be negative).\n   * @returns A new date equal to the given one with the specified number of days added.\n   */\n  abstract addCalendarDays(date: D, days: number): D;\n\n  /**\n   * Gets the RFC 3339 compatible string (https://tools.ietf.org/html/rfc3339) for the given date.\n   * This method is used to generate date strings that are compatible with native HTML attributes\n   * such as the `min` or `max` attribute of an `<input>`.\n   * @param date The date to get the ISO date string for.\n   * @returns The ISO date string date string.\n   */\n  abstract toIso8601(date: D): string;\n\n  /**\n   * Checks whether the given object is considered a date instance by this DateAdapter.\n   * @param obj The object to check\n   * @returns Whether the object is a date instance.\n   */\n  abstract isDateInstance(obj: any): boolean;\n\n  /**\n   * Checks whether the given date is valid.\n   * @param date The date to check.\n   * @returns Whether the date is valid.\n   */\n  abstract isValid(date: D): boolean;\n\n  /**\n   * Gets date instance that is not valid.\n   * @returns An invalid date.\n   */\n  abstract invalid(): D;\n\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of it's `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value: any): D | null {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale: any) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first: D, second: D): number {\n    return this.getYear(first) - this.getYear(second) ||\n        this.getMonth(first) - this.getMonth(second) ||\n        this.getDate(first) - this.getDate(second);\n  }\n\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first: D | null, second: D | null): boolean {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date: D, min?: D | null, max?: D | null): D {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {Inject, Injectable, Optional} from '@angular/core';\nimport {DateAdapter, MAT_DATE_LOCALE} from './date-adapter';\n\n// TODO(mmalerba): Remove when we no longer support safari 9.\n/** Whether the browser supports the Intl API. */\nconst SUPPORTS_INTL_API = typeof Intl != 'undefined';\n\n\n/** The default month names to use if Intl API is not available. */\nconst DEFAULT_MONTH_NAMES = {\n  'long': [\n    'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n    'October', 'November', 'December'\n  ],\n  'short': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  'narrow': ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D']\n};\n\n\n/** The default date names to use if Intl API is not available. */\nconst DEFAULT_DATE_NAMES = range(31, i => String(i + 1));\n\n\n/** The default day of the week names to use if Intl API is not available. */\nconst DEFAULT_DAY_OF_WEEK_NAMES = {\n  'long': ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n  'short': ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  'narrow': ['S', 'M', 'T', 'W', 'T', 'F', 'S']\n};\n\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings an with out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX =\n    /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n\n\n/** Creates an array and fills it with values. */\nfunction range<T>(length: number, valueFunction: (index: number) => T): T[] {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\n@Injectable()\nexport class NativeDateAdapter extends DateAdapter<Date> {\n  /** Whether to clamp the date between 1 and 9999 to avoid IE and Edge errors. */\n  private readonly _clampDate: boolean;\n\n  /**\n   * Whether to use `timeZone: 'utc'` with `Intl.DateTimeFormat` when formatting dates.\n   * Without this `Intl.DateTimeFormat` sometimes chooses the wrong timeZone, which can throw off\n   * the result. (e.g. in the en-US locale `new Date(1800, 7, 14).toLocaleDateString()`\n   * will produce `'8/13/1800'`.\n   *\n   * TODO(mmalerba): drop this variable. It's not being used in the code right now. We're now\n   * getting the string representation of a Date object from it's utc representation. We're keeping\n   * it here for sometime, just for precaution, in case we decide to revert some of these changes\n   * though.\n   */\n  useUtcForDisplay: boolean = true;\n\n  constructor(@Optional() @Inject(MAT_DATE_LOCALE) matDateLocale: string, platform: Platform) {\n    super();\n    super.setLocale(matDateLocale);\n\n    // IE does its own time zone correction, so we disable this on IE.\n    this.useUtcForDisplay = !platform.TRIDENT;\n    this._clampDate = platform.TRIDENT || platform.EDGE;\n  }\n\n  getYear(date: Date): number {\n    return date.getFullYear();\n  }\n\n  getMonth(date: Date): number {\n    return date.getMonth();\n  }\n\n  getDate(date: Date): number {\n    return date.getDate();\n  }\n\n  getDayOfWeek(date: Date): number {\n    return date.getDay();\n  }\n\n  getMonthNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {month: style, timeZone: 'utc'});\n      return range(12, i =>\n          this._stripDirectionalityCharacters(this._format(dtf, new Date(2017, i, 1))));\n    }\n    return DEFAULT_MONTH_NAMES[style];\n  }\n\n  getDateNames(): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {day: 'numeric', timeZone: 'utc'});\n      return range(31, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DATE_NAMES;\n  }\n\n  getDayOfWeekNames(style: 'long' | 'short' | 'narrow'): string[] {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {weekday: style, timeZone: 'utc'});\n      return range(7, i => this._stripDirectionalityCharacters(\n          this._format(dtf, new Date(2017, 0, i + 1))));\n    }\n    return DEFAULT_DAY_OF_WEEK_NAMES[style];\n  }\n\n  getYearName(date: Date): string {\n    if (SUPPORTS_INTL_API) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {year: 'numeric', timeZone: 'utc'});\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return String(this.getYear(date));\n  }\n\n  getFirstDayOfWeek(): number {\n    // We can't tell using native JS Date what the first day of the week is, we default to Sunday.\n    return 0;\n  }\n\n  getNumDaysInMonth(date: Date): number {\n    return this.getDate(this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + 1, 0));\n  }\n\n  clone(date: Date): Date {\n    return this.createDate(this.getYear(date), this.getMonth(date), this.getDate(date));\n  }\n\n  createDate(year: number, month: number, date: number): Date {\n    // Check for invalid month and date (except upper bound on date which we have to check after\n    // creating the Date).\n    if (month < 0 || month > 11) {\n      throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n    }\n\n    if (date < 1) {\n      throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n    }\n\n    let result = this._createDateWithOverflow(year, month, date);\n    // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n    if (result.getMonth() != month) {\n      throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n    }\n\n    return result;\n  }\n\n  today(): Date {\n    return new Date();\n  }\n\n  parse(value: any): Date | null {\n    // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n    // parameters.\n    if (typeof value == 'number') {\n      return new Date(value);\n    }\n    return value ? new Date(Date.parse(value)) : null;\n  }\n\n  format(date: Date, displayFormat: Object): string {\n    if (!this.isValid(date)) {\n      throw Error('NativeDateAdapter: Cannot format invalid date.');\n    }\n\n    if (SUPPORTS_INTL_API) {\n      // On IE and Edge the i18n API will throw a hard error that can crash the entire app\n      // if we attempt to format a date whose year is less than 1 or greater than 9999.\n      if (this._clampDate && (date.getFullYear() < 1 || date.getFullYear() > 9999)) {\n        date = this.clone(date);\n        date.setFullYear(Math.max(1, Math.min(9999, date.getFullYear())));\n      }\n\n      displayFormat = {...displayFormat, timeZone: 'utc'};\n\n      const dtf = new Intl.DateTimeFormat(this.locale, displayFormat);\n      return this._stripDirectionalityCharacters(this._format(dtf, date));\n    }\n    return this._stripDirectionalityCharacters(date.toDateString());\n  }\n\n  addCalendarYears(date: Date, years: number): Date {\n    return this.addCalendarMonths(date, years * 12);\n  }\n\n  addCalendarMonths(date: Date, months: number): Date {\n    let newDate = this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n\n    // It's possible to wind up in the wrong month if the original month has more days than the new\n    // month. In this case we want to go to the last day of the desired month.\n    // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n    // guarantee this.\n    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n    }\n\n    return newDate;\n  }\n\n  addCalendarDays(date: Date, days: number): Date {\n    return this._createDateWithOverflow(\n        this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n  }\n\n  toIso8601(date: Date): string {\n    return [\n      date.getUTCFullYear(),\n      this._2digit(date.getUTCMonth() + 1),\n      this._2digit(date.getUTCDate())\n    ].join('-');\n  }\n\n  /**\n   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n   * invalid date for all other values.\n   */\n  deserialize(value: any): Date | null {\n    if (typeof value === 'string') {\n      if (!value) {\n        return null;\n      }\n      // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n      // string is the right format first.\n      if (ISO_8601_REGEX.test(value)) {\n        let date = new Date(value);\n        if (this.isValid(date)) {\n          return date;\n        }\n      }\n    }\n    return super.deserialize(value);\n  }\n\n  isDateInstance(obj: any) {\n    return obj instanceof Date;\n  }\n\n  isValid(date: Date) {\n    return !isNaN(date.getTime());\n  }\n\n  invalid(): Date {\n    return new Date(NaN);\n  }\n\n  /** Creates a date but allows the month and date to overflow. */\n  private _createDateWithOverflow(year: number, month: number, date: number) {\n    const result = new Date(year, month, date);\n\n    // We need to correct for the fact that JS native Date treats years in range [0, 99] as\n    // abbreviations for 19xx.\n    if (year >= 0 && year < 100) {\n      result.setFullYear(this.getYear(result) - 1900);\n    }\n    return result;\n  }\n\n  /**\n   * Pads a number to make it two digits.\n   * @param n The number to pad.\n   * @returns The padded number.\n   */\n  private _2digit(n: number) {\n    return ('00' + n).slice(-2);\n  }\n\n  /**\n   * Strip out unicode LTR and RTL characters. Edge and IE insert these into formatted dates while\n   * other browsers do not. We remove them to make output consistent and because they interfere with\n   * date parsing.\n   * @param str The string to strip direction characters from.\n   * @returns The stripped string.\n   */\n  private _stripDirectionalityCharacters(str: string) {\n    return str.replace(/[\\u200e\\u200f]/g, '');\n  }\n\n  /**\n   * When converting Date object to string, javascript built-in functions may return wrong\n   * results because it applies its internal DST rules. The DST rules around the world change\n   * very frequently, and the current valid rule is not always valid in previous years though.\n   * We work around this problem building a new Date object which has its internal UTC\n   * representation with the local date and time.\n   * @param dtf Intl.DateTimeFormat object, containg the desired string format. It must have\n   *    timeZone set to 'utc' to work fine.\n   * @param date Date from which we want to get the string representation according to dtf\n   * @returns A Date object with its UTC representation based on the passed in date info\n   */\n  private _format(dtf: Intl.DateTimeFormat, date: Date) {\n    const d = new Date(Date.UTC(\n        date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(),\n        date.getMinutes(), date.getSeconds(), date.getMilliseconds()));\n    return dtf.format(d);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  NgModule,\n  Directive,\n  ElementRef,\n  QueryList,\n} from '@angular/core';\nimport {startWith} from 'rxjs/operators';\nimport {MatCommonModule} from '../common-behaviors/common-module';\n\n\n/**\n * Shared directive to count lines inside a text area, such as a list item.\n * Line elements can be extracted with a @ContentChildren(MatLine) query, then\n * counted by checking the query list's length.\n */\n@Directive({\n  selector: '[mat-line], [matLine]',\n  host: {'class': 'mat-line'}\n})\nexport class MatLine {}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n */\nexport function setLines(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n  // Note: doesn't need to unsubscribe, because `changes`\n  // gets completed by Angular when the view is destroyed.\n  lines.changes.pipe(startWith<QueryList<MatLine>>(lines)).subscribe(({length}) => {\n    setClass(element, 'mat-2-line', false);\n    setClass(element, 'mat-3-line', false);\n    setClass(element, 'mat-multi-line', false);\n\n    if (length === 2 || length === 3) {\n      setClass(element, `mat-${length}-line`, true);\n    } else if (length > 3) {\n      setClass(element, `mat-multi-line`, true);\n    }\n  });\n}\n\n/** Adds or removes a class from an element. */\nfunction setClass(element: ElementRef<HTMLElement>, className: string, isAdd: boolean): void {\n  const classList = element.nativeElement.classList;\n  isAdd ? classList.add(className) : classList.remove(className);\n}\n\n/**\n * Helper that takes a query list of lines and sets the correct class on the host.\n * @docs-private\n * @deprecated Use `setLines` instead.\n * @breaking-change 8.0.0\n */\nexport class MatLineSetter {\n  constructor(lines: QueryList<MatLine>, element: ElementRef<HTMLElement>) {\n    setLines(lines, element);\n  }\n}\n\n@NgModule({\n  imports: [MatCommonModule],\n  exports: [MatLine, MatCommonModule],\n  declarations: [MatLine],\n})\nexport class MatLineModule { }\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ElementRef, NgZone} from '@angular/core';\nimport {Platform, normalizePassiveListenerOptions} from '@angular/cdk/platform';\nimport {isFakeMousedownFromScreenReader} from '@angular/cdk/a11y';\nimport {RippleRef, RippleState} from './ripple-ref';\n\nexport type RippleConfig = {\n  color?: string;\n  centered?: boolean;\n  radius?: number;\n  persistent?: boolean;\n  animation?: RippleAnimationConfig;\n  terminateOnPointerUp?: boolean;\n};\n\n/**\n * Interface that describes the configuration for the animation of a ripple.\n * There are two animation phases with different durations for the ripples.\n */\nexport interface RippleAnimationConfig {\n  /** Duration in milliseconds for the enter animation (expansion from point of contact). */\n  enterDuration?: number;\n  /** Duration in milliseconds for the exit animation (fade-out). */\n  exitDuration?: number;\n}\n\n/**\n * Interface that describes the target for launching ripples.\n * It defines the ripple configuration and disabled state for interaction ripples.\n * @docs-private\n */\nexport interface RippleTarget {\n  /** Configuration for ripples that are launched on pointer down. */\n  rippleConfig: RippleConfig;\n  /** Whether ripples on pointer down should be disabled. */\n  rippleDisabled: boolean;\n}\n\n/**\n * Default ripple animation configuration for ripples without an explicit\n * animation config specified.\n */\nexport const defaultRippleAnimationConfig = {\n  enterDuration: 450,\n  exitDuration: 400\n};\n\n/**\n * Timeout for ignoring mouse events. Mouse events will be temporary ignored after touch\n * events to avoid synthetic mouse events.\n */\nconst ignoreMouseEventsTimeout = 800;\n\n/** Options that apply to all the event listeners that are bound by the ripple renderer. */\nconst passiveEventOptions = normalizePassiveListenerOptions({passive: true});\n\n/**\n * Helper service that performs DOM manipulations. Not intended to be used outside this module.\n * The constructor takes a reference to the ripple directive's host element and a map of DOM\n * event handlers to be installed on the element that triggers ripple animations.\n * This will eventually become a custom renderer once Angular support exists.\n * @docs-private\n */\nexport class RippleRenderer {\n  /** Element where the ripples are being added to. */\n  private _containerElement: HTMLElement;\n\n  /** Element which triggers the ripple elements on mouse events. */\n  private _triggerElement: HTMLElement | null;\n\n  /** Whether the pointer is currently down or not. */\n  private _isPointerDown = false;\n\n  /** Events to be registered on the trigger element. */\n  private _triggerEvents = new Map<string, any>();\n\n  /** Set of currently active ripple references. */\n  private _activeRipples = new Set<RippleRef>();\n\n  /** Latest non-persistent ripple that was triggered. */\n  private _mostRecentTransientRipple: RippleRef | null;\n\n  /** Time in milliseconds when the last touchstart event happened. */\n  private _lastTouchStartEvent: number;\n\n  /**\n   * Cached dimensions of the ripple container. Set when the first\n   * ripple is shown and cleared once no more ripples are visible.\n   */\n  private _containerRect: ClientRect | null;\n\n  constructor(private _target: RippleTarget,\n              private _ngZone: NgZone,\n              elementRef: ElementRef<HTMLElement>,\n              platform: Platform) {\n\n    // Only do anything if we're on the browser.\n    if (platform.isBrowser) {\n      this._containerElement = elementRef.nativeElement;\n\n      // Specify events which need to be registered on the trigger.\n      this._triggerEvents\n        .set('mousedown', this.onMousedown)\n        .set('mouseup', this.onPointerUp)\n        .set('mouseleave', this.onPointerUp)\n\n        .set('touchstart', this.onTouchStart)\n        .set('touchend', this.onPointerUp)\n        .set('touchcancel', this.onPointerUp);\n    }\n  }\n\n  /**\n   * Fades in a ripple at the given coordinates.\n   * @param x Coordinate within the element, along the X axis at which to start the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to start the ripple.\n   * @param config Extra ripple options.\n   */\n  fadeInRipple(x: number, y: number, config: RippleConfig = {}): RippleRef {\n    const containerRect = this._containerRect =\n                          this._containerRect || this._containerElement.getBoundingClientRect();\n    const animationConfig = {...defaultRippleAnimationConfig, ...config.animation};\n\n    if (config.centered) {\n      x = containerRect.left + containerRect.width / 2;\n      y = containerRect.top + containerRect.height / 2;\n    }\n\n    const radius = config.radius || distanceToFurthestCorner(x, y, containerRect);\n    const offsetX = x - containerRect.left;\n    const offsetY = y - containerRect.top;\n    const duration = animationConfig.enterDuration;\n\n    const ripple = document.createElement('div');\n    ripple.classList.add('mat-ripple-element');\n\n    ripple.style.left = `${offsetX - radius}px`;\n    ripple.style.top = `${offsetY - radius}px`;\n    ripple.style.height = `${radius * 2}px`;\n    ripple.style.width = `${radius * 2}px`;\n\n    // If the color is not set, the default CSS color will be used.\n    ripple.style.backgroundColor = config.color || null;\n    ripple.style.transitionDuration = `${duration}ms`;\n\n    this._containerElement.appendChild(ripple);\n\n    // By default the browser does not recalculate the styles of dynamically created\n    // ripple elements. This is critical because then the `scale` would not animate properly.\n    enforceStyleRecalculation(ripple);\n\n    ripple.style.transform = 'scale(1)';\n\n    // Exposed reference to the ripple that will be returned.\n    const rippleRef = new RippleRef(this, ripple, config);\n\n    rippleRef.state = RippleState.FADING_IN;\n\n    // Add the ripple reference to the list of all active ripples.\n    this._activeRipples.add(rippleRef);\n\n    if (!config.persistent) {\n      this._mostRecentTransientRipple = rippleRef;\n    }\n\n    // Wait for the ripple element to be completely faded in.\n    // Once it's faded in, the ripple can be hidden immediately if the mouse is released.\n    this.runTimeoutOutsideZone(() => {\n      const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;\n\n      rippleRef.state = RippleState.VISIBLE;\n\n      // When the timer runs out while the user has kept their pointer down, we want to\n      // keep only the persistent ripples and the latest transient ripple. We do this,\n      // because we don't want stacked transient ripples to appear after their enter\n      // animation has finished.\n      if (!config.persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {\n        rippleRef.fadeOut();\n      }\n    }, duration);\n\n    return rippleRef;\n  }\n\n  /** Fades out a ripple reference. */\n  fadeOutRipple(rippleRef: RippleRef) {\n    const wasActive = this._activeRipples.delete(rippleRef);\n\n    if (rippleRef === this._mostRecentTransientRipple) {\n      this._mostRecentTransientRipple = null;\n    }\n\n    // Clear out the cached bounding rect if we have no more ripples.\n    if (!this._activeRipples.size) {\n      this._containerRect = null;\n    }\n\n    // For ripples that are not active anymore, don't re-un the fade-out animation.\n    if (!wasActive) {\n      return;\n    }\n\n    const rippleEl = rippleRef.element;\n    const animationConfig = {...defaultRippleAnimationConfig, ...rippleRef.config.animation};\n\n    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;\n    rippleEl.style.opacity = '0';\n    rippleRef.state = RippleState.FADING_OUT;\n\n    // Once the ripple faded out, the ripple can be safely removed from the DOM.\n    this.runTimeoutOutsideZone(() => {\n      rippleRef.state = RippleState.HIDDEN;\n      rippleEl.parentNode!.removeChild(rippleEl);\n    }, animationConfig.exitDuration);\n  }\n\n  /** Fades out all currently active ripples. */\n  fadeOutAll() {\n    this._activeRipples.forEach(ripple => ripple.fadeOut());\n  }\n\n  /** Sets up the trigger event listeners */\n  setupTriggerEvents(element: HTMLElement) {\n    if (!element || element === this._triggerElement) {\n      return;\n    }\n\n    // Remove all previously registered event listeners from the trigger element.\n    this._removeTriggerEvents();\n\n    this._ngZone.runOutsideAngular(() => {\n      this._triggerEvents.forEach((fn, type) => {\n        element.addEventListener(type, fn, passiveEventOptions);\n      });\n    });\n\n    this._triggerElement = element;\n  }\n\n  /** Function being called whenever the trigger is being pressed using mouse. */\n  private onMousedown = (event: MouseEvent) => {\n    // Screen readers will fire fake mouse events for space/enter. Skip launching a\n    // ripple in this case for consistency with the non-screen-reader experience.\n    const isFakeMousedown = isFakeMousedownFromScreenReader(event);\n    const isSyntheticEvent = this._lastTouchStartEvent &&\n        Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;\n\n    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {\n      this._isPointerDown = true;\n      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);\n    }\n  }\n\n  /** Function being called whenever the trigger is being pressed using touch. */\n  private onTouchStart = (event: TouchEvent) => {\n    if (!this._target.rippleDisabled) {\n      // Some browsers fire mouse events after a `touchstart` event. Those synthetic mouse\n      // events will launch a second ripple if we don't ignore mouse events for a specific\n      // time after a touchstart event.\n      this._lastTouchStartEvent = Date.now();\n      this._isPointerDown = true;\n\n      // Use `changedTouches` so we skip any touches where the user put\n      // their finger down, but used another finger to tap the element again.\n      const touches = event.changedTouches;\n\n      for (let i = 0; i < touches.length; i++) {\n        this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);\n      }\n    }\n  }\n\n  /** Function being called whenever the trigger is being released. */\n  private onPointerUp = () => {\n    if (!this._isPointerDown) {\n      return;\n    }\n\n    this._isPointerDown = false;\n\n    // Fade-out all ripples that are visible and not persistent.\n    this._activeRipples.forEach(ripple => {\n      // By default, only ripples that are completely visible will fade out on pointer release.\n      // If the `terminateOnPointerUp` option is set, ripples that still fade in will also fade out.\n      const isVisible = ripple.state === RippleState.VISIBLE ||\n        ripple.config.terminateOnPointerUp && ripple.state === RippleState.FADING_IN;\n\n      if (!ripple.config.persistent && isVisible) {\n        ripple.fadeOut();\n      }\n    });\n  }\n\n  /** Runs a timeout outside of the Angular zone to avoid triggering the change detection. */\n  private runTimeoutOutsideZone(fn: Function, delay = 0) {\n    this._ngZone.runOutsideAngular(() => setTimeout(fn, delay));\n  }\n\n  /** Removes previously registered event listeners from the trigger element. */\n  _removeTriggerEvents() {\n    if (this._triggerElement) {\n      this._triggerEvents.forEach((fn, type) => {\n        this._triggerElement!.removeEventListener(type, fn, passiveEventOptions);\n      });\n    }\n  }\n}\n\n/** Enforces a style recalculation of a DOM element by computing its styles. */\nfunction enforceStyleRecalculation(element: HTMLElement) {\n  // Enforce a style recalculation by calling `getComputedStyle` and accessing any property.\n  // Calling `getPropertyValue` is important to let optimizers know that this is not a noop.\n  // See: https://gist.github.com/paulirish/5d52fb081b3570c81e3a\n  window.getComputedStyle(element).getPropertyValue('opacity');\n}\n\n/**\n * Returns the distance from the point (x, y) to the furthest corner of a rectangle.\n */\nfunction distanceToFurthestCorner(x: number, y: number, rect: ClientRect) {\n  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));\n  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));\n  return Math.sqrt(distX * distX + distY * distY);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatFormFieldPlaceholderConflictError(): Error {\n  return Error('Placeholder attribute and child element were both specified.');\n}\n\n/** @docs-private */\nexport function getMatFormFieldDuplicatedHintError(align: string): Error {\n  return Error(`A hint was already declared for 'align=\"${align}\"'.`);\n}\n\n/** @docs-private */\nexport function getMatFormFieldMissingControlError(): Error {\n  return Error('mat-form-field must contain a MatFormFieldControl.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getMatInputUnsupportedTypeError(type: string): Error {\n  return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function createMissingDateImplError(provider: string) {\n  return Error(\n      `MatDatepicker: No provider found for ${provider}. You must import one of the following ` +\n      `modules at your application root: MatNativeDateModule, MatMomentDateModule, or provide a ` +\n      `custom implementation.`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nexport function throwMatMenuMissingError() {\n  throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionX() {\n  throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nexport function throwMatMenuInvalidPositionY() {\n  throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nexport function getMatSelectDynamicMultipleError(): Error {\n  return Error('Cannot change `multiple` mode of select after initialization.');\n}\n\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nexport function getMatSelectNonArrayValueError(): Error {\n  return Error('Value must be an array in multiple-selection mode.');\n}\n\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nexport function getMatSelectNonFunctionValueError(): Error {\n  return Error('`compareWith` must be a function.');\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport function getSortDuplicateSortableIdError(id: string): Error {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n\n/** @docs-private */\nexport function getSortHeaderNotContainedWithinSortError(): Error {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n\n/** @docs-private */\nexport function getSortHeaderMissingIdError(): Error {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n\n/** @docs-private */\nexport function getSortInvalidDirectionError(direction: string): Error {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/** @docs-private */\nexport class AnimationCurves {\n  static STANDARD_CURVE = 'cubic-bezier(0.4,0.0,0.2,1)';\n  static DECELERATION_CURVE = 'cubic-bezier(0.0,0.0,0.2,1)';\n  static ACCELERATION_CURVE = 'cubic-bezier(0.4,0.0,1,1)';\n  static SHARP_CURVE = 'cubic-bezier(0.4,0.0,0.6,1)';\n}\n\n\n/** @docs-private */\nexport class AnimationDurations {\n  static COMPLEX = '375ms';\n  static ENTERING = '225ms';\n  static EXITING = '195ms';\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\n\nexport type MatDateFormats = {\n  parse: {\n    dateInput: any\n  },\n  display: {\n    dateInput: any,\n    monthYearLabel: any,\n    dateA11yLabel: any,\n    monthYearA11yLabel: any,\n  }\n};\n\n\nexport const MAT_DATE_FORMATS = new InjectionToken<MatDateFormats>('mat-date-formats');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {MatDateFormats} from './date-formats';\n\n\nexport const MAT_NATIVE_DATE_FORMATS: MatDateFormats = {\n  parse: {\n    dateInput: null,\n  },\n  display: {\n    dateInput: {year: 'numeric', month: 'numeric', day: 'numeric'},\n    monthYearLabel: {year: 'numeric', month: 'short'},\n    dateA11yLabel: {year: 'numeric', month: 'long', day: 'numeric'},\n    monthYearA11yLabel: {year: 'numeric', month: 'long'},\n  }\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {NgModule} from '@angular/core';\nimport {DateAdapter} from './date-adapter';\nimport {MAT_DATE_FORMATS} from './date-formats';\nimport {NativeDateAdapter} from './native-date-adapter';\nimport {MAT_NATIVE_DATE_FORMATS} from './native-date-formats';\n\nexport * from './date-adapter';\nexport * from './date-formats';\nexport * from './native-date-adapter';\nexport * from './native-date-formats';\n\n\n@NgModule({\n  imports: [PlatformModule],\n  providers: [\n    {provide: DateAdapter, useClass: NativeDateAdapter},\n  ],\n})\nexport class NativeDateModule {}\n\n\n@NgModule({\n  imports: [NativeDateModule],\n  providers: [{provide: MAT_DATE_FORMATS, useValue: MAT_NATIVE_DATE_FORMATS}],\n})\nexport class MatNativeDateModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {FormGroupDirective, NgForm, FormControl} from '@angular/forms';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\n@Injectable()\nexport class ShowOnDirtyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n  }\n}\n\n/** Provider that defines how form controls behave with regards to displaying error messages. */\n@Injectable({providedIn: 'root'})\nexport class ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken, Inject, Optional} from '@angular/core';\nimport {HammerGestureConfig} from '@angular/platform-browser';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {\n  HammerStatic,\n  HammerInstance,\n  Recognizer,\n  RecognizerStatic,\n  HammerOptions,\n} from './gesture-annotations';\n\n/**\n * Injection token that can be used to provide options to the Hammerjs instance.\n * More info at http://hammerjs.github.io/api/.\n */\nexport const MAT_HAMMER_OPTIONS = new InjectionToken<HammerOptions>('MAT_HAMMER_OPTIONS');\n\nconst ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES = [\n  'longpress',\n  'slide',\n  'slidestart',\n  'slideend',\n  'slideright',\n  'slideleft'\n];\n\n/**\n * Fake HammerInstance that is used when a Hammer instance is requested when HammerJS has not\n * been loaded on the page.\n */\nconst noopHammerInstance: HammerInstance = {\n  on: () => {},\n  off: () => {},\n};\n\n/** Adjusts configuration of our gesture library, Hammer. */\n@Injectable()\nexport class GestureConfig extends HammerGestureConfig {\n  /** List of new event names to add to the gesture support list */\n  events = ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES;\n\n  constructor(\n    @Optional() @Inject(MAT_HAMMER_OPTIONS) private _hammerOptions?: HammerOptions,\n    @Optional() commonModule?: MatCommonModule) {\n    super();\n    if (commonModule) {\n      commonModule._checkHammerIsAvailable();\n    }\n  }\n\n  /**\n   * Builds Hammer instance manually to add custom recognizers that match the Material Design spec.\n   *\n   * Our gesture names come from the Material Design gestures spec:\n   * https://material.io/design/#gestures-touch-mechanics\n   *\n   * More information on default recognizers can be found in Hammer docs:\n   * http://hammerjs.github.io/recognizer-pan/\n   * http://hammerjs.github.io/recognizer-press/\n   *\n   * @param element Element to which to assign the new HammerJS gestures.\n   * @returns Newly-created HammerJS instance.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const hammer: HammerStatic = typeof window !== 'undefined' ? (window as any).Hammer : null;\n\n    if (!hammer) {\n      // If HammerJS is not loaded here, return the noop HammerInstance. This is necessary to\n      // ensure that omitting HammerJS completely will not cause any errors while *also* supporting\n      // the lazy-loading of HammerJS via the HAMMER_LOADER token introduced in Angular 6.1.\n      // Because we can't depend on HAMMER_LOADER's existance until 7.0, we have to always set\n      // `this.events` to the set we support, instead of conditionally setting it to `[]` if\n      // `HAMMER_LOADER` is present (and then throwing an Error here if `window.Hammer` is\n      // undefined).\n      // @breaking-change 8.0.0\n      return noopHammerInstance;\n    }\n\n    const mc = new hammer(element, this._hammerOptions || undefined);\n\n    // Default Hammer Recognizers.\n    const pan = new hammer.Pan();\n    const swipe = new hammer.Swipe();\n    const press = new hammer.Press();\n\n    // Notice that a HammerJS recognizer can only depend on one other recognizer once.\n    // Otherwise the previous `recognizeWith` will be dropped.\n    // TODO: Confirm threshold numbers with Material Design UX Team\n    const slide = this._createRecognizer(pan, {event: 'slide', threshold: 0}, swipe);\n    const longpress = this._createRecognizer(press, {event: 'longpress', time: 500});\n\n    // Overwrite the default `pan` event to use the swipe event.\n    pan.recognizeWith(swipe);\n\n    // Since the slide event threshold is set to zero, the slide recognizer can fire and\n    // accidentally reset the longpress recognizer. In order to make sure that the two\n    // recognizers can run simultaneously but don't affect each other, we allow the slide\n    // recognizer to recognize while a longpress is being processed.\n    // See: https://github.com/hammerjs/hammer.js/blob/master/src/manager.js#L123-L124\n    longpress.recognizeWith(slide);\n\n    // Add customized gestures to Hammer manager\n    mc.add([swipe, press, pan, slide, longpress]);\n\n    return mc as HammerInstance;\n  }\n\n  /** Creates a new recognizer, without affecting the default recognizers of HammerJS */\n  private _createRecognizer(base: Recognizer, options: any, ...inheritances: Recognizer[]) {\n    let recognizer = new (base.constructor as RecognizerStatic)(options);\n\n    inheritances.push(base);\n    inheritances.forEach(item => recognizer.recognizeWith(item));\n\n    return recognizer;\n  }\n\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\n\n/** Possible states for a ripple element. */\nexport enum RippleState {\n  FADING_IN, VISIBLE, FADING_OUT, HIDDEN\n}\n\n/**\n * Reference to a previously launched ripple element.\n */\nexport class RippleRef {\n\n  /** Current state of the ripple. */\n  state: RippleState = RippleState.HIDDEN;\n\n  constructor(\n    private _renderer: RippleRenderer,\n    /** Reference to the ripple HTML element. */\n    public element: HTMLElement,\n    /** Ripple configuration used for the ripple. */\n    public config: RippleConfig) {\n  }\n\n  /** Fades out the ripple element. */\n  fadeOut() {\n    this._renderer.fadeOutRipple(this);\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Platform} from '@angular/cdk/platform';\nimport {\n  Directive,\n  ElementRef,\n  Inject,\n  InjectionToken,\n  Input,\n  NgZone,\n  OnDestroy,\n  OnInit,\n  Optional,\n} from '@angular/core';\nimport {RippleRef} from './ripple-ref';\nimport {RippleAnimationConfig, RippleConfig, RippleRenderer, RippleTarget} from './ripple-renderer';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/** Configurable options for `matRipple`. */\nexport interface RippleGlobalOptions {\n  /**\n   * Whether ripples should be disabled. Ripples can be still launched manually by using\n   * the `launch()` method. Therefore focus indicators will still show up.\n   */\n  disabled?: boolean;\n\n  /**\n   * Configuration for the animation duration of the ripples. There are two phases with different\n   * durations for the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  animation?: RippleAnimationConfig;\n\n  /**\n   * Whether ripples should start fading out immediately after the mouse our touch is released. By\n   * default, ripples will wait for the enter animation to complete and for mouse or touch release.\n   */\n  terminateOnPointerUp?: boolean;\n}\n\n/** Injection token that can be used to specify the global ripple options. */\nexport const MAT_RIPPLE_GLOBAL_OPTIONS =\n    new InjectionToken<RippleGlobalOptions>('mat-ripple-global-options');\n\n@Directive({\n  selector: '[mat-ripple], [matRipple]',\n  exportAs: 'matRipple',\n  host: {\n    'class': 'mat-ripple',\n    '[class.mat-ripple-unbounded]': 'unbounded'\n  }\n})\nexport class MatRipple implements OnInit, OnDestroy, RippleTarget {\n\n  /** Custom color for all ripples. */\n  @Input('matRippleColor') color: string;\n\n  /** Whether the ripples should be visible outside the component's bounds. */\n  @Input('matRippleUnbounded') unbounded: boolean;\n\n  /**\n   * Whether the ripple always originates from the center of the host element's bounds, rather\n   * than originating from the location of the click event.\n   */\n  @Input('matRippleCentered') centered: boolean;\n\n  /**\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\n   * bounding rectangle.\n   */\n  @Input('matRippleRadius') radius: number = 0;\n\n  /**\n   * Configuration for the ripple animation. Allows modifying the enter and exit animation\n   * duration of the ripples. The animation durations will be overwritten if the\n   * `NoopAnimationsModule` is being used.\n   */\n  @Input('matRippleAnimation') animation: RippleAnimationConfig;\n\n  /**\n   * Whether click events will not trigger the ripple. Ripples can be still launched manually\n   * by using the `launch()` method.\n   */\n  @Input('matRippleDisabled')\n  get disabled() { return this._disabled; }\n  set disabled(value: boolean) {\n    this._disabled = value;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * The element that triggers the ripple when click events are received.\n   * Defaults to the directive's host element.\n   */\n  @Input('matRippleTrigger')\n  get trigger() { return this._trigger || this._elementRef.nativeElement; }\n  set trigger(trigger: HTMLElement) {\n    this._trigger = trigger;\n    this._setupTriggerEventsIfEnabled();\n  }\n  private _trigger: HTMLElement;\n\n  /** Renderer for the ripple DOM manipulations. */\n  private _rippleRenderer: RippleRenderer;\n\n  /** Options that are set globally for all ripples. */\n  private _globalOptions: RippleGlobalOptions;\n\n  /** Whether ripple directive is initialized and the input bindings are set. */\n  private _isInitialized: boolean = false;\n\n  constructor(private _elementRef: ElementRef<HTMLElement>,\n              ngZone: NgZone,\n              platform: Platform,\n              @Optional() @Inject(MAT_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) animationMode?: string) {\n\n    this._globalOptions = globalOptions || {};\n    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);\n\n    if (animationMode === 'NoopAnimations') {\n      this._globalOptions.animation = {enterDuration: 0, exitDuration: 0};\n    }\n  }\n\n  ngOnInit() {\n    this._isInitialized = true;\n    this._setupTriggerEventsIfEnabled();\n  }\n\n  ngOnDestroy() {\n    this._rippleRenderer._removeTriggerEvents();\n  }\n\n  /** Fades out all currently showing ripple elements. */\n  fadeOutAll() {\n    this._rippleRenderer.fadeOutAll();\n  }\n\n  /**\n   * Ripple configuration from the directive's input values.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleConfig(): RippleConfig {\n    return {\n      centered: this.centered,\n      radius: this.radius,\n      color: this.color,\n      animation: {...this._globalOptions.animation, ...this.animation},\n      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp,\n    };\n  }\n\n  /**\n   * Whether ripples on pointer-down are disabled or not.\n   * @docs-private Implemented as part of RippleTarget\n   */\n  get rippleDisabled(): boolean {\n    return this.disabled || !!this._globalOptions.disabled;\n  }\n\n  /** Sets up the the trigger event listeners if ripples are enabled. */\n  private _setupTriggerEventsIfEnabled() {\n    if (!this.disabled && this._isInitialized) {\n      this._rippleRenderer.setupTriggerEvents(this.trigger);\n    }\n  }\n\n  /**\n   * Launches a manual ripple using the specified ripple configuration.\n   * @param config Configuration for the manual ripple.\n   */\n  launch(config: RippleConfig): RippleRef;\n\n  /**\n   * Launches a manual ripple at the specified coordinates within the element.\n   * @param x Coordinate within the element, along the X axis at which to fade-in the ripple.\n   * @param y Coordinate within the element, along the Y axis at which to fade-in the ripple.\n   * @param config Optional ripple configuration for the manual ripple.\n   */\n  launch(x: number, y: number, config?: RippleConfig): RippleRef;\n\n  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */\n  launch(configOrX: number | RippleConfig, y: number = 0, config?: RippleConfig): RippleRef {\n    if (typeof configOrX === 'number') {\n      return this._rippleRenderer.fadeInRipple(configOrX, y, {...this.rippleConfig, ...config});\n    } else {\n      return this._rippleRenderer.fadeInRipple(0, 0, {...this.rippleConfig, ...configOrX});\n    }\n  }\n}\n\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {PlatformModule} from '@angular/cdk/platform';\nimport {MatCommonModule} from '../common-behaviors/common-module';\nimport {MatRipple} from './ripple';\n\nexport * from './ripple';\nexport * from './ripple-ref';\nexport * from './ripple-renderer';\n\n@NgModule({\n  imports: [MatCommonModule, PlatformModule],\n  exports: [MatRipple, MatCommonModule],\n  declarations: [MatRipple],\n})\nexport class MatRippleModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Component,\n  ViewEncapsulation,\n  Input,\n  ChangeDetectionStrategy,\n  Inject,\n  Optional,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\n\n/**\n * Possible states for a pseudo checkbox.\n * @docs-private\n */\nexport type MatPseudoCheckboxState = 'unchecked' | 'checked' | 'indeterminate';\n\n/**\n * Component that shows a simplified checkbox without including any kind of \"real\" checkbox.\n * Meant to be used when the checkbox is purely decorative and a large number of them will be\n * included, such as for the options in a multi-select. Uses no SVGs or complex animations.\n * Note that theming is meant to be handled by the parent element, e.g.\n * `mat-primary .mat-pseudo-checkbox`.\n *\n * Note that this component will be completely invisible to screen-reader users. This is *not*\n * interchangeable with `<mat-checkbox>` and should *not* be used if the user would directly\n * interact with the checkbox. The pseudo-checkbox should only be used as an implementation detail\n * of more complex components that appropriately handle selected / checked state.\n * @docs-private\n */\n@Component({\n  moduleId: module.id,\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'mat-pseudo-checkbox',\n  styleUrls: ['pseudo-checkbox.css'],\n  template: '',\n  host: {\n    'class': 'mat-pseudo-checkbox',\n    '[class.mat-pseudo-checkbox-indeterminate]': 'state === \"indeterminate\"',\n    '[class.mat-pseudo-checkbox-checked]': 'state === \"checked\"',\n    '[class.mat-pseudo-checkbox-disabled]': 'disabled',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n  },\n})\nexport class MatPseudoCheckbox {\n  /** Display state of the checkbox. */\n  @Input() state: MatPseudoCheckboxState = 'unchecked';\n\n  /** Whether the checkbox is disabled. */\n  @Input() disabled: boolean = false;\n\n  constructor(@Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) { }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {MatPseudoCheckbox} from './pseudo-checkbox/pseudo-checkbox';\n\n\n@NgModule({\n  exports: [MatPseudoCheckbox],\n  declarations: [MatPseudoCheckbox]\n})\nexport class MatPseudoCheckboxModule { }\n\n\nexport * from './pseudo-checkbox/pseudo-checkbox';\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ChangeDetectionStrategy, Component, Input, ViewEncapsulation} from '@angular/core';\nimport {CanDisable, CanDisableCtor, mixinDisabled} from '../common-behaviors/disabled';\n\n\n// Boilerplate for applying mixins to MatOptgroup.\n/** @docs-private */\nexport class MatOptgroupBase { }\nexport const _MatOptgroupMixinBase: CanDisableCtor & typeof MatOptgroupBase =\n    mixinDisabled(MatOptgroupBase);\n\n// Counter for unique group ids.\nlet _uniqueOptgroupIdCounter = 0;\n\n/**\n * Component that is used to group instances of `mat-option`.\n */\n@Component({\n  moduleId: module.id,\n  selector: 'mat-optgroup',\n  exportAs: 'matOptgroup',\n  templateUrl: 'optgroup.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled'],\n  styleUrls: ['optgroup.css'],\n  host: {\n    'class': 'mat-optgroup',\n    'role': 'group',\n    '[class.mat-optgroup-disabled]': 'disabled',\n    '[attr.aria-disabled]': 'disabled.toString()',\n    '[attr.aria-labelledby]': '_labelId',\n  }\n})\nexport class MatOptgroup extends _MatOptgroupMixinBase implements CanDisable {\n  /** Label for the option group. */\n  @Input() label: string;\n\n  /** Unique id for the underlying label. */\n  _labelId: string = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;\n}\n"],"names":["_this","_ngZone","_changeDetectorRef","_viewportRuler","_onDestroy","Subject","tslib_1.__extends","MatTabNav","_super","Object","defineProperty","prototype","this","_backgroundColor","value","nativeElement","_elementRef","classList","remove","backgroundColor","add","updateActiveLink","element","_activeLinkChanged","markForCheck","ngAfterContentInit","runOutsideAngular","dirChange","_dir","change","observableOf","merge","pipe","takeUntil","subscribe","_alignInkBar","ngAfterContentChecked","activeTab","_tabLinks","find","tab","active","_activeLinkElement","ngOnDestroy","next","complete","_inkBar","show","alignToElement","hide","type","Component","args","selector","exportAs","inputs","template","styles","host","class","encapsulation","ViewEncapsulation","None","changeDetection","ChangeDetectionStrategy","OnPush","NgZone","ChangeDetectorRef","ViewportRuler","propDecorators","Input","MatTabLinkBase","_MatTabLinkMixinBase","mixinTabIndex","mixinDisableRipple","mixinDisabled","call","_tabNavBar","_focusMonitor","_tabLinkRipple","setupTriggerEvents","tabIndex","parseInt","globalOptions","_ripplesGloballyDisabled","disabled","terminateOnPointerUp","animation","monitor","get","_isActive","enumerable","configurable","stopMonitoring","MatTabLink","decorators","Directive","[attr.aria-current]","[attr.aria-disabled]","[attr.tabIndex]","[class.mat-tab-disabled]","[class.mat-tab-label-active]","Platform","undefined","Optional","Inject","MAT_RIPPLE_GLOBAL_OPTIONS","String","Attribute","FocusMonitor","NgModule","imports","CommonModule","MatCommonModule","PortalModule","MatRippleModule","ObserversModule","A11yModule","exports","MatTabGroup","MatTabLabel","MatTab","MatTabContent","declarations","MatInkBar","MatTabLabelWrapper","MatTabBody","MatTabBodyPortal","MatTabHeader","MatTabsModule","MatToolbarBase","_MatToolbarMixinBase","mixinColor","MatToolbarRow","MatToolbar","elementRef","_platform","document","_document","ngAfterViewInit","isDevMode","isBrowser","_checkToolbarMixedModes","_toolbarRows","changes","length","Array","from","childNodes","filter","node","contains","nodeType","COMMENT_NODE","some","textContent","trim","throwToolbarMixedModesError","[class.mat-toolbar-multiple-rows]","[class.mat-toolbar-single-row]","DOCUMENT","MatToolbarModule","MatTreeNodeOutlet","viewContainer","ViewContainerRef","_MatTreeNodeMixinBase","CdkTreeNode","_MatNestedTreeNodeMixinBase","CdkNestedTreeNode","MatTreeNode","_tree","role","Number","[attr.aria-expanded]","[attr.aria-level]","[attr.role]","providers","provide","useExisting","ElementRef","CdkTree","MatTreeNodeDef","CdkTreeNodeDef","data","MatNestedTreeNode","_differs","IterableDiffers","nodeOutlet","ContentChildren","MatTreeNodePadding","CdkTreeNodePadding","level","indent","MatTree","recursive","MatTreeNodeToggle","(click)","CdkTreeNodeToggle","MAT_TREE_DIRECTIVES","CdkTreeModule","MatTreeModule","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","isArray","_flattenChildren","take","children","forEach","child","index","childParentMap","slice","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","treeFlattener","initialData","_flattenedData","BehaviorSubject","_expandedData","_data","dataNodes","connect","collectionViewer","viewChange","expansionModel","onChange","apply","map","disconnect","DataSource","MatTreeNestedDataSource","VERSION","Version","SELECT_PANEL_PADDING_X","CdkColumnDef","MatFooterCell","CdkFooterCell","MatCell","columnDef","cssClassFriendlyName","CdkCell","MatHeaderRowDef","CdkHeaderRowDef","MatFooterRowDef","CdkFooterRowDef","MatRowDef","CdkRowDef","MatHeaderRow","CDK_ROW_TEMPLATE","CdkHeaderRow","arguments","CdkFooterRow","MatFooterRow","MatRow","CdkRow","EXPORTED_DECLARATIONS","MatTable","MatHeaderCellDef","MatColumnDef","MatCellDef","MatFooterCellDef","MatHeaderCell","CdkTableModule","MatTableModule","MAX_SAFE_INTEGER","MatTableDataSource","_renderData","_filter","_renderChangesSubscription","Subscription","EMPTY","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","sort","direction","a","b","valueA","valueB","comparatorResult","filterPredicate","dataStr","keys","reduce","currentTerm","key","toLowerCase","transformedFilter","indexOf","_updateChangeSubscription","_sort","_paginator","paginator","sortChange","initialized","pageChange","page","dataStream","filteredData","combineLatest","_a","_filterData","orderedData","_orderData","paginatedData","_pageData","unsubscribe","obj","_updatePaginator","startIndex","pageIndex","pageSize","splice","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","min","_MAT_INK_BAR_POSITIONER","InjectionToken","providedIn","factory","_MAT_INK_BAR_POSITIONER_FACTORY","_inkBarPositioner","requestAnimationFrame","_setStyles","style","visibility","positions","inkBar","left","width","TemplateRef","CdkPortal","MatTabBase","_MatTabMixinBase","_viewContainerRef","textLabel","_contentPortal","_stateChanges","position","origin","isActive","ngOnChanges","hasOwnProperty","ngOnInit","TemplatePortal","_explicitContent","_implicitContent","ViewChild","ariaLabel","ariaLabelledby","matTabsAnimations","translateTab","trigger","state","transform","minHeight","transition","animate","componentFactoryResolver","viewContainerRef","_host","_centeringSub","_leavingSub","_beforeCentering","startWith","_isCenterPosition","_position","isCentering","hasAttached","attach","_content","_afterLeavingCenter","detach","ComponentFactoryResolver","forwardRef","CdkPortalOutlet","changeDetectorRef","_dirChangeSubscription","_translateTabComplete","_onCentering","EventEmitter","_onCentered","animationDuration","dir","_computePositionAnimationState","distinctUntilChanged","x","y","fromState","toState","event","emit","_positionIndex","_computePositionFromOrigin","_onTranslateTabStarted","clientHeight","_getLayoutDirection","animations","Output","_portalHost","PortalHostDirective","MatTabLabelWrapperBase","_MatTabLabelWrapperMixinBase","focus","getOffsetLeft","offsetLeft","getOffsetWidth","offsetWidth","MatTabHeaderBase","_MatTabHeaderMixinBase","_scrollDistance","_selectedIndexChanged","_destroyed","_showPaginationControls","_disableScrollAfter","_disableScrollBefore","_selectedIndex","selectFocusedIndex","indexFocused","coerceNumberProperty","_keyManager","updateActiveItemIndex","_tabLabelCount","_labelWrappers","updatePagination","_scrollToLabel","_checkScrollingControls","_alignInkBarToSelectedTab","_scrollDistanceChanged","_updateTabScrollPosition","_handleKeydown","keyCode","HOME","setFirstItemActive","preventDefault","END","setLastItemActive","ENTER","SPACE","focusIndex","onKeydown","resize","realign","FocusKeyManager","withHorizontalOrientation","withWrap","updateActiveItem","newFocusIndex","_setTabFocus","_onContentChanges","zoneCallback","run","_checkPaginationEnabled","_isValidIndex","setActiveItem","toArray","containerEl","_tabListContainer","scrollLeft","scrollWidth","scrollDistance","translateX","_tabList","v","max","_getMaxScrollDistance","_scrollHeader","scrollDir","viewLength","labelIndex","selectedLabel","labelBeforePos","labelAfterPos","beforeVisiblePos","afterVisiblePos","isEnabled","selectedLabelWrapper","selectedIndex","[class.mat-tab-header-pagination-controls-enabled]","[class.mat-tab-header-rtl]","Directionality","nextId","MatTabChangeEvent","MAT_TABS_CONFIG","MatTabGroupBase","_MatTabGroupMixinBase","defaultConfig","_indexToSelect","_tabBodyWrapperHeight","_tabsSubscription","_tabLabelSubscription","_dynamicHeight","headerPosition","selectedIndexChange","focusChange","animationDone","selectedTabChange","_groupId","coerceBooleanProperty","indexToSelect","_clampTabIndex","isFirstRun_1","_createChangeEvent","_tabs","_subscribeToTabLabels","tabs","realignInkBar","_tabHeader","_focusChanged","_getTabLabelId","_getTabContentId","_setTabBodyWrapperHeight","tabHeight","wrapper","_tabBodyWrapper","height","offsetHeight","_removeTabBodyWrapperHeight","_handleClick","tabHeader","_getTabIndex","idx","[class.mat-tab-group-dynamic-height]","[class.mat-tab-group-inverted-header]","dynamicHeight","MatTabNavBase","_MatTabNavMixinBase","SORT_ANIMATION_TRANSITION","leftPointer","rightPointer","arrowOpacity","opacity","arrowPosition","keyframes","allowChildren","query","animateChild","optional","sortButtonLabel","id","Injectable","MatSortHeaderIntl","MAT_SORT_HEADER_INTL_PROVIDER","deps","SkipSelf","useFactory","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","MatSortHeaderBase","_MatSortHeaderMixinBase","MatSortHeader","_intl","_columnDef","_showIndicatorHint","_arrowDirection","_disableViewStateAnimation","getSortHeaderNotContainedWithinSortError","_rerenderSubscription","_isSorted","_updateArrowDirection","_viewState","_setAnimationTransitionState","_disableClear","name","register","deregister","_setIndicatorHintVisible","visible","_isDisabled","viewState","_getArrowDirectionState","_getArrowViewState","start","_getAriaSortAttribute","(mouseenter)","(longpress)","(mouseleave)","[attr.aria-sort]","[class.mat-sort-header-disabled]","matSortAnimations","indicator","MatSort","disableClear","MatSortModule","MatStepLabel","CdkStepLabel","optionalLabel","MatStepperIntl","MAT_STEPPER_INTL_PROVIDER","MAT_STEPPER_INTL_PROVIDER_FACTORY","MatStepHeader","_intlSubscription","_stringLabel","label","_templateLabel","_getHostElement","_getIconContext","errorMessage","iconOverrides","selected","matStepperAnimations","horizontalStepTransition","verticalStepTransition","MatStepperIcon","templateRef","MatStep","stepper","_errorStateMatcher","stepperOptions","isErrorState","control","form","originalErrorState","customErrorState","invalid","interacted","ErrorStateMatcher","MAT_STEPPER_GLOBAL_OPTIONS","MatStepper","_icons","_iconOverrides","_steps","_stateChanged","MatHorizontalStepper","[class.mat-stepper-label-position-end]","[class.mat-stepper-label-position-bottom]","aria-orientation","labelPosition","MatVerticalStepper","_orientation","ctorParameters","MatStepperNext","[type]","CdkStepper","CdkStepperNext","MatStepperPrevious","CdkStepperPrevious","MatButtonModule","CdkStepperModule","MatIconModule","MatStepperModule","stickyCssClass","CDK_TABLE_TEMPLATE","CdkCellDef","CdkHeaderCellDef","CdkFooterCellDef","sticky","stickyEnd","CdkHeaderCell","MatSlider","_max","_percent","_calculatePercentage","_value","_min","_step","_roundToDecimal","toString","split","pop","_thumbLabel","_tickInterval","parseFloat","toFixed","_vertical","displayWith","_focusHostElement","blur","_blurHostElement","_clamp","vertical","invert","percent","_isMinValue","thumbLabel","axis","scale","_shouldInvertMouseCoords","_thumbGap","_getDirection","_tickIntervalPercent","tickSize","backgroundSize","sign","rotate","_invertAxis","detectChanges","_onMouseenter","_sliderDimensions","_getSliderDimensions","_updateTickIntervalPercent","_onMousedown","oldValue","_isSliding","_updateValueFromPosition","clientX","clientY","_emitInputEvent","_emitChangeEvent","_onSlide","_onSlideStart","center","_valueOnSlideStart","_onSlideEnd","_onFocus","_onBlur","onTouched","_onKeydown","PAGE_UP","_increment","PAGE_DOWN","LEFT_ARROW","UP_ARROW","RIGHT_ARROW","DOWN_ARROW","_onKeyup","numSteps","step","pos","offset","top","size","posComponent","exactValue","_calculateValue","closestValue","round","_controlValueAccessorChangeFn","valueChange","input","tickInterval","trackSize","pixelsPerStep","stepsPerTick","pixelsPerTick","MatSliderChange","source","percentage","_sliderWrapper","getBoundingClientRect","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MAT_SLIDER_VALUE_ACCESSOR","(focus)","(blur)","(mousedown)","(keydown)","(keyup)","(slide)","(slideend)","(slidestart)","[tabIndex]","[attr.aria-valuemax]","[attr.aria-valuemin]","[attr.aria-valuenow]","[attr.aria-orientation]","[class.mat-slider-disabled]","[class.mat-slider-has-ticks]","[class.mat-slider-horizontal]","[class.mat-slider-axis-inverted]","[class.mat-slider-sliding]","[class.mat-slider-thumb-label-showing]","[class.mat-slider-vertical]","[class.mat-slider-min-value]","[class.mat-slider-hide-last-tick]","[class._mat-animation-noopable]","ANIMATION_MODULE_TYPE","HAMMER_GESTURE_CONFIG","useClass","GestureConfig","MatSliderModule","MatSnackBarRef","containerInstance","_overlayRef","_afterDismissed","_afterOpened","_onAction","_dismissedByAction","onAction","dismiss","_onExit","_finishDismiss","closed","exit","clearTimeout","_durationTimeoutId","dismissWithAction","closeWithAction","_dismissAfter","duration","setTimeout","_open","dispose","dismissedByAction","afterDismissed","asObservable","afterOpened","_onEnter","MAT_SNACK_BAR_DATA","MatSnackBarConfig","politeness","announcementMessage","horizontalPosition","verticalPosition","SimpleSnackBar","snackBarRef","action","matSnackBarAnimations","snackBarState","MatSnackBarContainer","snackBarConfig","_animationState","_role","attachComponentPortal","portal","_assertNotAttached","_applySnackBarClasses","_portalOutlet","attachTemplatePortal","onAnimationEnd","_completeExit","onEnter_1","enter","onMicrotaskEmpty","panelClasses","panelClass","cssClass","Error","[@state]","(@state.done)","OverlayModule","entryComponents","MatSnackBarModule","MAT_SNACK_BAR_DEFAULT_OPTIONS","MAT_SNACK_BAR_DEFAULT_OPTIONS_FACTORY","MatSnackBar","_overlay","_live","_injector","_breakpointObserver","_parentSnackBar","_defaultConfig","_snackBarRefAtThisLevel","parent","_openedSnackBarRef","openFromComponent","component","config","_attach","openFromTemplate","open","message","_config","tslib_1.__assign","_attachSnackBarContainer","overlayRef","userInjector","injector","PortalInjector","WeakMap","containerPortal","ComponentPortal","containerRef","instance","content","userConfig","_createOverlay","container","$implicit","_createInjector","contentRef","observe","Breakpoints","Handset","detachments","matches","overlayElement","_animateSnackBar","clear","announce","overlayConfig","OverlayConfig","positionStrategy","global","isRtl","isLeft","isRight","right","centerHorizontally","bottom","create","Overlay","LiveAnnouncer","Injector","BreakpointObserver","MatSortBase","_MatSortMixinBase","mixinInitialized","sortables","Map","_direction","getSortInvalidDirectionError","sortable","getSortHeaderMissingIdError","has","getSortDuplicateSortableIdError","set","delete","getNextSortDirection","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","_markInitialized","AnimationDurations","ENTERING","AnimationCurves","STANDARD_CURVE","MatDrawerContent","_container","_contentMarginChanges","[style.margin-left.px]","[style.margin-right.px]","ScrollDispatcher","_focusTrapFactory","_doc","_elementFocusedBeforeDrawerWasOpened","_mode","_disableClose","_autoFocus","openedChange","opened","_isFocusTrapEnabled","_focusTrap","_trapFocus","_restoreFocus","close","stopPropagation","_opened","MatDrawer","onPositionChanged","_modeChanged","mode","focusInitialElementWhenReady","hasMovedFocus","activeEl","activeElement","HTMLElement","focusVia","_openedVia","enabled","destroy","_animationStarted","_animationEnd","isOpen","openedVia","_enableAnimations","matDrawerAnimations","transformDrawer","[@transform]","(@transform.start)","(@transform.done)","[attr.align]","[class.mat-drawer-end]","[class.mat-drawer-over]","[class.mat-drawer-side]","_openedStream","openedStart","_closedStream","closedStart","_element","_animationMode","backdropClick","_doCheckSubject","_autosize","defaultAutosize","MatDrawerContainer","_backdropOverride","_drawers","drawer","_watchDrawerToggle","_watchDrawerPosition","_watchDrawerMode","_isDrawerOpen","_start","_end","_updateContentMargins","debounceTime","ngDoCheck","_setContainerClass","throwMatDuplicatedDrawerError","_right","_left","_closeModalDrawer","disableClose","_canHaveBackdrop","_isShowingBackdrop","_width","_contentMargins","[class.mat-drawer-container-explicit-backdrop]","ContentChild","_userContent","autosize","MatSidenavContent","scrollDispatcher","ngZone","MatSidenav","_fixedBottomGap","[class.mat-sidenav-fixed]","[style.top.px]","[style.bottom.px]","fixedInViewport","fixedTopGap","MatSidenavContainer","MatSidenavModule","ScrollingModule","PlatformModule","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","disableToggleValue","disableDragValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","MatSlideToggle","multi","MatSlideToggleChange","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","defaults","_","_uniqueId","_required","_checked","_dragging","toggleChange","dragChange","focusOrigin","_onChangeEvent","_inputElement","_onInputClick","toggle","_getDragPercentage","distance","_thumbBarWidth","_previousChecked","_onDragStart","thumbEl","_thumbEl","_thumbBarEl","clientWidth","_onDrag","_dragPercentage","deltaX","dragX","_onDragEnd","newCheckedValue","_onLabelTextChange","[id]","[attr.tabindex]","[class.mat-checked]","[class.mat-slide-toggle-label-before]","required","MatSlideToggleModule","MatSliderBase","_MatSliderMixinBase","_invert","MAT_PROGRESS_BAR_LOCATION","MatProgressBar","_primaryValueBar","animationEnd","MatProgressBarModule","BASE_SIZE","MatProgressSpinnerBase","_MatProgressSpinnerMixinBase","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY","INDETERMINATE_ANIMATION_TEMPLATE","MatProgressSpinner","platform","animationMode","_fallbackAnimation","_noopAnimations","_forceAnimations","_diameter","EDGE","TRIDENT","diameter","strokeWidth","animationClass","diameters","_attachStyleNode","_strokeWidth","newValue","viewBox","_circleRadius","PI","_strokeCircumference","styleTag","createElement","head","appendChild","sheet","insertRule","_getAnimationText","replace","Set","[style.width.px]","[style.height.px]","[attr.mode]","MatSpinner","MatProgressSpinnerModule","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","MatRadioGroup","MatRadioChange","MatRadioGroupBase","_MatRadioGroupMixinBase","_changeDetector","_name","_selected","_isInitialized","_labelPosition","_disabled","_updateRadioButtonNames","_markRadiosForCheck","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_touch","_radios","radio","isAlreadySelected","_markForCheck","MatRadioButton","descendants","MatRadioButtonBase","_MatRadioButtonMixinBase","radioGroup","_radioDispatcher","_removeUniqueSelectionListener","listen","newCheckedState","notify","newDisabledState","_isRippleDisabled","disableRipple","_onInputChange","groupValueChanged","[class.mat-radio-checked]","[class.mat-radio-disabled]","[attr.id]","UniqueSelectionDispatcher","ariaDescribedby","MatRadioModule","box-shadow","MAT_DRAWER_DEFAULT_AUTOSIZE","MAT_DRAWER_DEFAULT_AUTOSIZE_FACTORY","_optionIds","options","option","join","MatSelect","_highlightCorrectOption","empty","_selectionModel","_scrollActiveOptionIntoView","activeOptionIndex","activeItemIndex","labelCount","_countGroupLabelsBeforeOption","optionGroups","panel","scrollTop","_getOptionScrollPosition","_getItemHeight","_getOptionIndex","result","current","_calculateOverlayPosition","itemHeight","items","_getItemCount","panelHeight","scrollContainerHeight","maxScroll","selectedOptionOffset","scrollBuffer","_scrollTop","_calculateOverlayScroll","_offsetY","_calculateOverlayOffsetY","_checkOverlayWithinViewport","optionOffsetFromScrollTop","halfOptionHeight","optimalScrollPosition","_getAriaLabel","placeholder","_getAriaLabelledby","_parentFormField","_hasFloatingLabel","_labelId","_getAriaActiveDescendant","panelOpen","activeItem","_calculateOverlayOffsetX","offsetX","overlayRect","overlayDir","viewportSize","getViewportSize","_isRtl","paddingWidth","multiple","SELECT_MULTIPLE_PANEL_PADDING_X","first","group","leftOverflow","rightOverflow","updatePosition","optionOffsetFromPanelTop","optionHeightAdjustment","_triggerRect","maxOptionsDisplayed","floor","_disableOptionCentering","firstDisplayedIndex","selectedDisplayIndex","partialItemHeight","topSpaceAvailable","bottomSpaceAvailable","panelHeightTop","abs","totalPanelHeight","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_transformOrigin","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","_triggerFontSize","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","_panelOpen","[attr.aria-label]","[attr.aria-labelledby]","[attr.aria-required]","[attr.aria-invalid]","[attr.aria-owns]","[attr.aria-multiselectable]","[attr.aria-describedby]","[attr.aria-activedescendant]","[class.mat-select-disabled]","[class.mat-select-invalid]","[class.mat-select-required]","[class.mat-select-empty]","matSelectAnimations","transformPanel","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","NgForm","FormGroupDirective","MatFormField","NgControl","Self","MAT_SELECT_SCROLL_STRATEGY","CdkConnectedOverlay","MatOption","MatOptgroup","customTrigger","MatSelectTrigger","disableOptionCentering","compareWith","errorStateMatcher","sortComparator","selectionChange","MatOptionModule","MatFormFieldModule","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","MatSelectModule","matTooltipAnimations","tooltipState","SCROLL_THROTTLE_MS","MAT_TOOLTIP_SCROLL_STRATEGY","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY","MAT_TOOLTIP_DEFAULT_OPTIONS","MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY","MatTooltip","_scrollDispatcher","_ariaDescriber","scrollStrategy","_defaultOptions","hammerLoader","showDelay","hideDelay","_message","_manualListeners","_scrollStrategy","elementStyle","hasGestures","window","Hammer","IOS","ANDROID","listener","addEventListener","nodeName","webkitUserSelect","userSelect","msUserSelect","draggable","webkitUserDrag","_updatePosition","_tooltipInstance","removeDescription","_isTooltipVisible","_updateTooltipMessage","describe","_tooltipClass","_setTooltipClass","removeEventListener","delay","_showTimeoutId","_hideTimeoutId","_detach","_portal","TooltipComponent","afterHidden","isVisible","e","ESCAPE","_handleTouchend","touchendHideDelay","strategy","flexibleConnectedTo","withTransformOriginOn","withFlexibleDimensions","withViewportMargin","scrollableAncestors","getAncestorScrollContainers","withScrollableContainers","positionChanges","scrollableViewProperties","isOverlayClipped","getConfig","_getOrigin","overlay","_getOverlayPosition","withPositions","main","fallback","originPosition","isLtr","originX","originY","getMatTooltipInvalidPositionError","_invertPosition","overlayPosition","overlayX","overlayY","tooltipClass","(touchend)","AriaDescriber","HAMMER_LOADER","_visibility","_closeOnInteraction","_onHide","_isHandset","_animationStart","_animationDone","_handleBodyInteraction","aria-hidden","MatTooltipModule","itemsPerPageLabel","nextPageLabel","previousPageLabel","firstPageLabel","lastPageLabel","getRangeLabel","MatPaginatorIntl","MAT_PAGINATOR_INTL_PROVIDER","MAT_PAGINATOR_INTL_PROVIDER_FACTORY","PageEvent","MatPaginatorBase","_MatPaginatorBase","MatPaginator","_pageIndex","_length","_pageSizeOptions","_hidePageSize","_showFirstLastButtons","_intlChanges","_pageSize","_updateDisplayedPageSizeOptions","p","_initialized","nextPage","hasNextPage","previousPageIndex","_emitPageEvent","previousPage","hasPreviousPage","firstPage","lastPage","getNumberOfPages","maxPageIndex","_changePageSize","_nextButtonsDisabled","_previousButtonsDisabled","pageSizeOptions","_displayedPageSizeOptions","hidePageSize","showFirstLastButtons","MatPaginatorModule","MatProgressBarBase","_MatProgressBarMixinBase","MAT_PROGRESS_BAR_LOCATION_FACTORY","progressbarId","location","_isNoopAnimation","_bufferValue","_animationEndSubscription","path","getPathname","_rectangleFillValue","clamp","emitAnimationEnd","_primaryTransform","_bufferTransform","bufferValue","fromEvent","target","aria-valuemin","aria-valuemax","_appRef","_attached","MatMenuContent","context","_template","_outlet","DomPortalOutlet","_componentFactoryResolver","insertBefore","outletElement","isAttached","ApplicationRef","matMenuAnimations","transformMenu","fadeInItems","MAT_MENU_PANEL","MatMenuItemBase","_MatMenuItemMixinBase","MatMenuItem","_parentMenu","_hovered","_highlighted","_triggersSubmenu","addItem","removeItem","_checkDisabled","_handleMouseEnter","getLabel","textNodeType","TEXT_NODE","output","length_1","[class.mat-menu-item-highlighted]","[class.mat-menu-item-submenu-trigger]","[attr.disabled]","MAT_MENU_DEFAULT_OPTIONS","MAT_MENU_DEFAULT_OPTIONS_FACTORY","MatMenu","_xPosition","xPosition","_yPosition","yPosition","_items","_itemChanges","_tabSubscription","_classList","_panelAnimationState","backdropClass","_overlapTrigger","overlapTrigger","_hasBackdrop","hasBackdrop","throwMatMenuInvalidPositionX","setPositionClasses","throwMatMenuInvalidPositionY","classes","className","withTypeAhead","tabOut","switchMap","item","parentMenu","setFocusOrigin","focusFirstItem","lazyContent","onStable","resetActiveItem","setElevation","depth","newElevation","customElevation","c","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_onAnimationDone","_isAnimating","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_menuItemInstance","_menuOpen","_closeSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","_openedBy","menuOpened","onMenuOpen","menuClosed","onMenuClose","triggersSubmenu","menu","_menu","reason","_destroyMenu","_checkMenu","_handleHover","_cleanUpSubscriptions","toggleMenu","closeMenu","openMenu","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","menuOpen","_resetMenu","_setMenuElevation","_setIsMenuOpen","throwMatMenuMissingError","_getOverlayConfig","_subscribeToPositions","keydownEvents","withLockedPosition","connectionPair","originFallbackX","_b","overlayFallbackY","_c","originFallbackY","_d","overlayFallbackX","offsetY","backdrop","parentClose","hover","_handleMousedown","isFakeMousedownFromScreenReader","button","asapScheduler","aria-haspopup","_deprecatedMatMenuTriggerFor","MatMenuModule","minWidth","fadeInContent","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MatSelectChange","MatSelectBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatSelectMixinBase","mixinErrorState","scrollStrategyFactory","_multiple","_compareWith","o1","o2","_uid","_destroy","_onChange","_onTouched","_panelDoneAnimatingStream","_positions","_focused","controlType","optionSelectionChanges","defer","onSelectionChange","o","valueAccessor","_scrollStrategyFactory","_placeholder","stateChanges","getMatSelectDynamicMultipleError","getMatSelectNonFunctionValueError","_initializeSelection","_id","SelectionModel","_initKeyManager","added","select","removed","deselect","_resetOptions","updateErrorState","getComputedStyle","fontSize","_setSelectionByValue","selectedOptions","viewValue","reverse","_handleOpenKeydown","_handleClosedKeydown","isArrowKey","isOpenKey","manager","altKey","A","ctrlKey","hasDeselectedOptions_1","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onAttached","positionChange","_setPseudoCheckboxPaddingSize","_getPanelTheme","color","pseudoCheckbox","querySelector","isEmpty","getMatSelectNonArrayValueError","currentValue","_selectValue","_sortValues","correspondingOption","error","console","warn","ActiveDescendantKeyManager","withVerticalOrientation","withAllowedModifierKeys","changedOrDestroyed","_onSelect","isUserInput","_setOptionIds","wasSelected","isSelected","_propagateChanges","options_1","fallbackValue","valueToEmit","MAT_SELECTION_LIST_VALUE_ACCESSOR","MatSelectionList","MatListOption","_MatSelectionListMixinBase","MatLineModule","MatPseudoCheckboxModule","MatList","MatNavList","MatListItem","MatListAvatarCssMatStyler","MatListIconCssMatStyler","MatListSubheaderCssMatStyler","MatDividerModule","MatListModule","_isInteractiveList","navList","list","_getListType","_list","hasAttribute","setAttribute","setLines","_lines","[class.mat-list-item-avatar]","[class.mat-list-item-with-avatar]","_avatar","_icon","MatSelectionListBase","MatListOptionBase","_MatListOptionMixinBase","MatSelectionListChange","selectionList","_hasFocus","checkboxPosition","_setSelected","_reportValueChange","hadFocus","newActiveItem","_removeOptionFromList","_text","_handleFocus","_setFocusedOption","_handleBlur","tabindex","[class.mat-list-item-disabled]","[attr.aria-selected]","MatLine","skipPredicate","_tempValues","_setOptionsFromValues","_modelChanges","_i","optionIndex","previousFocusIndex","_toggleFocusedOption","selectAll","deselectAll","_getSelectedOptionValues","values","focusedOption","focusedIndex","hasChanged","aria-multiselectable","MatGridTile","MatGridTileText","MatGridAvatarCssMatStyler","MatGridTileHeaderCssMatStyler","MatGridTileFooterCssMatStyler","TileCoordinator","columnIndex","rowIndex","lastRowMax","tracker","rowCount","update","numColumns","tiles","fill","tile","_trackTile","gapStartIndex","_findMatchingGap","colspan","_markTilePosition","TilePosition","tileCols","gapEndIndex","_nextRow","_findGapEndIndex","rowspan","row","col","cssCalcAllowedValue","TileStyler","_rows","_rowspan","init","gutterSize","cols","_gutterSize","normalizeUnits","_cols","getBaseTileSize","sizePercent","gutterFraction","getTilePosition","baseSize","calc","getTileSize","span","setStyle","colIndex","percentWidthPerTile","gutterWidthFractionPerTile","setColStyles","setRowStyles","percentWidth","gutterWidth","baseTileWidth","side","_setStyle","getGutterSpan","getTileSpan","tileHeight","getComputedHeight","FixedTileStyler","fixedRowHeight","test","reset","_setListStyle","_tiles","RatioTileStyler","_parseRatio","percentHeightPerTile","rowHeightRatio","baseTileHeight","ratioParts","FitTileStyler","gutterHeightPerTile","MatGridList","_gutter","_rowHeight","_setTileStyler","_checkCols","_checkRowHeight","_layoutTiles","rowHeight","_tileStyler","_tileCoordinator","_gridList","MAT_GRID_LIST","MatGridListModule","SvgIconConfig","svgElement","url","MatIconRegistry","_httpClient","_sanitizer","_svgIconConfigs","_iconSetConfigs","_cachedIconsByUrl","_inProgressUrlFetches","_fontCssClassesByAlias","_defaultFontSetClass","addSvgIcon","iconName","addSvgIconInNamespace","addSvgIconLiteral","literal","addSvgIconLiteralInNamespace","namespace","_addSvgIconConfig","sanitizedLiteral","sanitize","SecurityContext","HTML","getMatIconFailedToSanitizeLiteralError","_createSvgElementForSingleIcon","addSvgIconSet","addSvgIconSetInNamespace","addSvgIconSetLiteral","addSvgIconSetLiteralInNamespace","_addSvgIconSetConfig","_svgElementFromString","registerFontClassAlias","alias","classNameForFontAlias","setDefaultFontSetClass","getDefaultFontSetClass","getSvgIconFromUrl","safeUrl","RESOURCE_URL","getMatIconFailedToSanitizeUrlError","cachedIcon","cloneSvg","_loadSvgIconFromConfig","tap","svg","getNamedSvgIcon","iconKey","_getSvgFromConfig","iconSetConfigs","_getSvgFromIconSetConfigs","observableThrow","getMatIconNameNotFoundError","namedIcon","_extractIconWithNameFromAnySet","iconSetFetchRequests","iconSetConfig","_loadSvgIconSetFromConfig","catchError","err","forkJoin","foundIcon","_extractSvgIconFromSet","_fetchUrl","svgText","responseText","_setSvgAttributes","iconSet","iconSource","iconElement","cloneNode","removeAttribute","_toSvgElement","str","div","innerHTML","ELEMENT_NODE","getMatIconNoHttpProviderError","inProgressFetch","req","responseType","finalize","share","configNamespace","HttpClient","DomSanitizer","ICON_REGISTRY_PROVIDER","ICON_REGISTRY_PROVIDER_FACTORY","MatIconBase","_MatIconMixinBase","MAT_ICON_LOCATION","MAT_ICON_LOCATION_FACTORY","funcIriAttributes","ɵ0","attr","funcIriAttributeSelector","funcIriPattern","MatIcon","_iconRegistry","ariaHidden","_location","_inline","inline","_fontSet","_cleanupFontValue","_fontIcon","_splitIconName","parts","svgIcon","_setSvgElement","log","_clearSvgElement","_usingFontIcon","_updateFontIconClasses","ngAfterViewChecked","cachedElements","_elementsWithExternalReferences","newPath","_previousPath","_prependPathToReferences","styleTags","querySelectorAll","_cacheChildrenWithExternalReferences","layoutElement","childCount","removeChild","elem","fontSetClass","fontSet","_previousFontSetClass","fontIcon","_previousFontIconClass","elements","attrs","elementsWithFuncIri","elementWithReference","getAttribute","match","attributes","[class.mat-icon-inline]","MatListBase","_MatListMixinBase","MatListItemBase","_MatListItemMixinBase","MatDatepickerContent","_dateAdapter","createMissingDateImplError","MatDatepicker","_datepickerInput","_getThemePalette","_disabledChange","_inputSubscription","_popupRef","_popupComponentRef","sameDate","_selectedChanged","date","_valueChange","_focusedElementBeforeOpen","touchUi","_openAsDialog","_openAsPopup","openedStream","_dialogRef","_calendarPortal","completeClose","closedStream","_dialog","afterClosed","componentInstance","datepicker","_setColor","_createPopup","MatDialog","MAT_DATEPICKER_SCROLL_STRATEGY","DateAdapter","calendarHeaderComponent","startAt","yearSelected","monthSelected","dateClass","MAT_DATEPICKER_VALUE_ACCESSOR","MatDatepickerInput","MAT_DATEPICKER_VALIDATORS","NG_VALIDATORS","MatDatepickerInputEvent","targetElement","_dateFormats","_formField","dateChange","dateInput","_cvaOnChange","_validatorOnChange","_datepickerSubscription","_localeSubscription","_parseValidator","_lastValueValid","matDatepickerParse","text","_minValidator","controlValue","_getValidDateOrNull","deserialize","compareDate","matDatepickerMin","actual","_maxValidator","matDatepickerMax","_filterValidator","_dateFilter","matDatepickerFilter","_validator","Validators","compose","localeChanges","_datepicker","_registerInput","isValid","oldDate","_formatValue","registerOnValidatorChange","validate","getPopupConnectionElementRef","getConnectedOverlayOrigin","isAltDownArrow","readOnly","_onInput","parse","format","display","isDateInstance","MAT_INPUT_VALUE_ACCESSOR","[attr.aria-haspopup]","[attr.min]","[attr.max]","[disabled]","(input)","(change)","MAT_DATE_FORMATS","matDatepicker","MatDatepickerToggleIcon","MatDatepickerToggle","defaultTabIndex","parsedTabIndex","_watchStateChanges","datepickerDisabled","inputDisabled","datepickerToggled","[class.mat-accent]","[class.mat-warn]","_customIcon","_button","MatDialogModule","MatCalendar","MatCalendarBody","MatMonthView","MatYearView","MatMultiYearView","MatCalendarHeader","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerModule","_inset","MatDivider","[class.mat-divider-vertical]","[class.mat-divider-horizontal]","[class.mat-divider-inset]","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","expansionHeaderHeight","params","collapsedHeight","expandedHeight","bodyExpansion","MatExpansionPanelContent","uniqueId","MatExpansionPanel","accordion","_uniqueSelectionDispatcher","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","hideToggle","_hasSpacing","expanded","displayMode","_getExpandedState","_lazyContent","_containsFocus","_body","focusedElement","bodyElement","outputs","[class.mat-expanded]","[class.mat-expansion-panel-spacing]","MatExpansionPanelActionRow","MatExpansionPanelHeader","_parentChangeSubscription","accordionHideToggleChange","_handleHeaderFocus","_toggle","_isExpanded","_getPanelId","_showToggle","_keydown","hasModifierKey","_handleHeaderKeydown","[attr.aria-controls]","[@expansionHeight]","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","_headers","header","CdkAccordion","CdkAccordionModule","MatExpansionModule","_colspan","property","todayValue","selectedValue","labelMinRequiredCells","numCols","activeCell","cellAspectRatio","selectedValueChange","selectedChange","_userSelection","activeDateChange","firstDayOfWeek","getFirstDayOfWeek","narrowWeekdays","getDayOfWeekNames","longWeekdays","weekdays","long","narrow","_weekdays","concat","_activeDate","today","oldActiveDate","validDate","clampDate","minDate","maxDate","_hasSameMonthAndYear","_init","_selectedDate","_getDateInCurrentMonth","_minDate","_maxDate","_dateSelected","selectedYear","getYear","activeDate","selectedMonth","getMonth","selectedDate","createDate","_handleCalendarBodyKeydown","addCalendarDays","getDate","getNumDaysInMonth","addCalendarYears","addCalendarMonths","dateFilter","_focusActiveCell","_todayDate","_monthLabel","getMonthNames","toLocaleUpperCase","firstOfMonth","_firstWeekOffset","getDayOfWeek","_createWeekCells","_matCalendarBody","daysInMonth","dateNames","getDateNames","_weeks","cell","_shouldEnableDate","dateA11yLabel","cellClasses","MatCalendarCell","d1","d2","_selectedYear","_todayYear","activeYear","activeOffset","_years","year","_createCellForYear","_yearSelected","month","yearsPerPage","_getActiveCell","yearName","getYearName","_shouldEnableYear","firstOfYear","_selectedMonth","_getMonthInCurrentYear","_monthSelected","normalizedDate","_todayMonth","_yearLabel","monthNames","_months","_createCellForMonth","monthName","monthYearA11yLabel","_shouldEnableMonth","_isYearAndMonthAfterMaxDate","_isYearAndMonthBeforeMinDate","maxYear","maxMonth","minYear","minMonth","calendar","currentView","monthYearLabel","switchToMultiYearViewLabel","switchToMonthViewLabel","prevMonthLabel","prevYearLabel","multi-year","prevMultiYearLabel","nextMonthLabel","nextYearLabel","nextMultiYearLabel","currentPeriodClicked","previousClicked","nextClicked","previousEnabled","_isSameView","nextEnabled","date1","date2","_moveFocusOnNextTick","_currentView","startView","focusActiveCell","view","_getCurrentViewComponent","monthView","headerComponent","yearView","multiYearView","matDatepickerAnimations","fadeInCalendar","datepickerUid","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","MatDatepickerContentBase","_MatDatepickerContentMixinBase","_calendar","[@transformPanel]","[class.mat-datepicker-content-touch]","MatChipList","ariaOrientation","selectable","chips","MatChip","MatChipInput","focused","_addOnBlur","separatorKeyCodes","chipEnd","_chipList","registerInput","_emitChipEnd","_blur","addOnBlur","_focus","_isSeparatorKey","separators","[attr.placeholder]","MAT_CHIPS_DEFAULT_OPTIONS","chipList","CHIP_DECLARATIONS","MatChipRemove","MatChipAvatar","MatChipTrailingIcon","useValue","MatChipsModule","MatDialogConfig","maxWidth","ariaDescribedBy","autoFocus","restoreFocus","closeOnNavigation","animationBody","matDialogAnimations","dialogContainer","slideDialog","MatDialogContainer","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","_ariaLabelledBy","throwMatDialogContentAlreadyAttachedError","_savePreviouslyFocusedElement","toFocus","_onAnimationStart","_startExitAnimation","aria-modal","[@dialogContainer]","(@dialogContainer.start)","(@dialogContainer.done)","MatDialogRef","_containerInstance","_afterClosed","_beforeClosed","phaseName","_result","dialogResult","detachBackdrop","beforeClosed","_getPositionStrategy","centerVertically","updateSize","afterOpen","beforeClose","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","afterAllClosed","openDialogs","_afterAllClosed","componentOrTemplateRef","_applyConfigDefaults","getDialogById","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","_closeDialogs","dialog","dialogConfig","maxHeight","disposeOnNavigation","injectionTokens","previousValue","overlayContainer","getContainerElement","parentElement","siblings","sibling","dialogs","Location","OverlayContainer","dialogElementUid","MatDialogClose","getClosestDialog","proxiedChange","_matDialogClose","MatDialogTitle","MatDialogContent","MatDialogActions","MatTextareaAutosize","minRows","maxRows","rows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","CdkTextareaAutosize","MAT_INPUT_INVALID_TYPES","MatInputBase","_MatInputMixinBase","MatInput","inputValueAccessor","_autofillMonitor","_isServer","_isNativeSelect","autofilled","_type","_readonly","_neverEmptyInputTypes","t","getSupportedInputTypes","_inputValueAccessor","_previousNativeValue","el","selectionStart","selectionEnd","setSelectionRange","_validateType","_isTextarea","isAutofilled","_dirtyCheckNativeValue","isFocused","readonly","getMatInputUnsupportedTypeError","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","[class.mat-input-server]","[required]","[attr.readonly]","AutofillMonitor","TextFieldModule","MatInputModule","calendarLabel","openCalendarLabel","displayValue","cssClasses","_cellClicked","_isActiveCell","cellNumber","_firstRowOffset","aria-readonly","MatCheckbox","Init","Checked","Unchecked","Indeterminate","TransitionCheckState","MatCheckboxChange","MatCheckboxBase","_MatCheckboxMixinBase","_clickAction","indeterminateChange","_currentAnimationClass","_currentCheckState","_indeterminate","_calculateRippleRadius","changed","_transitionCheckState","_getAriaChecked","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass_1","_onInteractionEvent","animSuffix","calculatedRippleRadius","rippleWidth","ripple","radius","[class.mat-checkbox-indeterminate]","[class.mat-checkbox-checked]","[class.mat-checkbox-disabled]","[class.mat-checkbox-label-before]","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","MAT_CHECKBOX_CLICK_ACTION","MatRipple","MAT_CHECKBOX_REQUIRED_VALIDATOR","MatCheckboxRequiredValidator","[attr.required]","CheckboxRequiredValidator","MatCheckboxModule","MatChipSelectionChange","MatChipBase","_MatChipMixinBase","CHIP_ATTRIBUTE_NAMES","rippleConfig","chipListSelectable","_selectable","_removable","destroyed","_addHostClassName","_chipRipple","RippleRenderer","coercedValue","_dispatchSelectionChange","CHIP_ATTRIBUTE_NAMES_1","tagName","chip","_removeTriggerEvents","selectViaInteraction","toggleSelected","removable","DELETE","BACKSPACE","[class.mat-chip-selected]","[class.mat-chip-with-avatar]","[class.mat-chip-with-trailing-icon]","[class.mat-chip-disabled]","avatar","trailingIcon","removeIcon","_parentChip","MatChipListBase","_MatChipListMixinBase","MatChipListChange","_lastDestroyedChipIndex","_tabIndex","_userTabIndex","_chipInput","_hasFocusedChip","_resetChips","_updateTabIndex","_updateFocusForDestroyedChips","_dropSubscriptions","inputElement","_originatesFromChip","_focusInput","_isInputEmpty","newChipIndex","_clearSelection","correspondingChip","skip","_markAsTouched","_listenToChipsFocus","_listenToChipsSelection","_listenToChipsRemoved","_chipFocusSubscription","_chipBlurSubscription","_chipSelectionSubscription","_chipRemoveSubscription","chipSelectionChanges","chipFocusChanges","chipIndex","chipBlurChanges","chipRemoveChanges","currentElement","[class.mat-chip-list-disabled]","[class.mat-chip-list-invalid]","[class.mat-chip-list-required]","MatButton","stopImmediatePropagation","MatAnchor","MAT_BUTTON_TOGGLE_DEFAULT_OPTIONS","MAT_BUTTON_TOGGLE_GROUP_VALUE_ACCESSOR","MatButtonToggleGroup","MatButtonToggleGroupMultiple","_uniqueIdCounter","MatButtonToggleChange","defaultOptions","appearance","_buttonToggles","_syncButtonToggle","_isSelected","_isPrechecked","_rawValue","[class.mat-button-toggle-vertical]","[class.mat-button-toggle-group-appearance-standard]","MatButtonToggle","MatButtonToggleBase","_MatButtonToggleMixinBase","toggleGroup","_isSingleSelector","buttonToggleGroup","_appearance","_buttonElement","_onButtonClick","newChecked","[class.mat-button-toggle-standalone]","[class.mat-button-toggle-checked]","[class.mat-button-toggle-disabled]","[class.mat-button-toggle-appearance-standard]","MatButtonToggleModule","MatCardContent","MatCardTitle","MatCardSubtitle","align","[class.mat-card-actions-align-end]","MatCardActions","MatCardFooter","MatCardImage","MatCardSmImage","MatCardMdImage","MatCardLgImage","MatCardXlImage","MatCardAvatar","MatCard","MatCardHeader","MatCardTitleGroup","MatCardModule","MatAutocomplete","_autoActiveFirstOption","_setVisibility","_setScrollTop","_getScrollTop","showPanel","_emitSelectEvent","MatAutocompleteSelectedEvent","optionSelected","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","autoActiveFirstOption","panelWidth","MatAutocompleteOrigin","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","_zone","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","_destroyPanel","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","_isOpen","_closingActionsSubscription","_getOutsideClickStream","MatOptionSelectionChange","clickTarget","formField","_setTriggerValue","activeOption","_resetActiveItem","prevActiveItem","TAB","_canOpen","_scrollToOption","_handleInput","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","newScrollPosition","_subscribeToClosingActions","firstStable","optionChanges","_positionStrategy","reapplyLastPosition","panelClosingActions","_setValueAndClose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","getMatAutocompleteMissingPanelError","_getPanelWidth","wasOpen","_getConnectedElement","withPush","connectedTo","_getHostWidth","[attr.autocomplete]","[attr.aria-autocomplete]","(focusin)","Host","autocompleteDisabled","MatAutocompleteModule","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_renderer","_hasContent","_color","_overlap","val","_updateTextContent","_description","newDescription","_updateHostAriaDescription","_hidden","isAbove","isAfter","description","_badgeElement","_createBadgeElement","rootNode","badgeElement","oldDescription","colorPalette","[class.mat-badge-overlap]","[class.mat-badge-above]","[class.mat-badge-below]","[class.mat-badge-before]","[class.mat-badge-after]","[class.mat-badge-small]","[class.mat-badge-medium]","[class.mat-badge-large]","[class.mat-badge-hidden]","[class.mat-badge-disabled]","Renderer2","overlap","hidden","MatBadgeModule","MAT_BOTTOM_SHEET_DATA","MatBottomSheetConfig","matBottomSheetAnimations","bottomSheetState","COMPLEX","ACCELERATION_CURVE","EXITING","DECELERATION_CURVE","MatBottomSheetContainer","breakpointObserver","bottomSheetConfig","_elementFocusedBeforeOpened","_breakpointSubscription","Medium","Large","XLarge","_toggleClass","isMatched","_validatePortalAttached","_setPanelClass","(@state.start)","FocusTrapFactory","MatBottomSheetModule","MatBottomSheetRef","MAT_BOTTOM_SHEET_DEFAULT_OPTIONS","MatBottomSheet","_parentBottomSheet","_bottomSheetRefAtThisLevel","_openedBottomSheetRef","_attachContainer","ref","bottomSheetRef","scrollStrategies","block","DEFAULT_ROUND_BUTTON_COLOR","BUTTON_HOST_ATTRIBUTES","MatButtonBase","_MatButtonMixinBase","isRoundButton","_hasHostAttributes","isIconButton","BUTTON_HOST_ATTRIBUTES_1","attribute","_active","_emitSelectionChangeEvent","setActiveStyles","setInactiveStyles","_mostRecentViewValue","[class.mat-selected]","[class.mat-option-multiple]","[class.mat-active]","[class.mat-option-disabled]","MAT_LABEL_GLOBAL_OPTIONS","MatError","matFormFieldAnimations","transitionMessages","[class.mat-right]","MatHint","MatLabel","MatPlaceholder","MatPrefix","MatSuffix","MatFormFieldBase","_MatFormFieldMixinBase","MAT_FORM_FIELD_DEFAULT_OPTIONS","labelOptions","_defaults","_outlineGapCalculationNeeded","_showAlwaysAnimate","_subscriptAnimationState","_hintLabel","_hintLabelId","_labelOptions","float","_animationsEnabled","_updateOutlineGapOnStable","_hideRequiredMarker","_processHints","_connectionContainerRef","_validateControlChild","_validatePlaceholders","_syncDescribedByIds","valueChanges","_prefixChildren","_suffixChildren","_hintChildren","_errorChildren","updateOutlineGap","_shouldForward","prop","_hasPlaceholder","_placeholderChild","_hasLabel","_labelChild","_shouldLabelFloat","_canLabelFloat","shouldLabelFloat","_shouldAlwaysFloat","_hideControlPlaceholder","_getDisplayedMessages","errorState","_label","getMatFormFieldPlaceholderConflictError","_validateHints","startHint_1","endHint_1","hint","hintLabel","getMatFormFieldDuplicatedHintError","startHint","endHint","getMatFormFieldMissingControlError","labelEl","startWidth","gapWidth","startEls","gapEls","containerStart","_getStartEnd","labelStart","labelWidth","outlineGapPadding","rect","[class.mat-form-field-appearance-standard]","[class.mat-form-field-appearance-fill]","[class.mat-form-field-appearance-outline]","[class.mat-form-field-appearance-legacy]","[class.mat-form-field-invalid]","[class.mat-form-field-can-float]","[class.mat-form-field-should-float]","[class.mat-form-field-hide-placeholder]","[class.mat-form-field-disabled]","[class.mat-form-field-autofilled]","[class.mat-focused]","[class.ng-untouched]","[class.ng-touched]","[class.ng-pristine]","[class.ng-dirty]","[class.ng-valid]","[class.ng-invalid]","[class.ng-pending]","hideRequiredMarker","underlineRef","_inputContainerRef","_uniqueAutocompleteIdCounter","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","__extends","d","__","constructor","extendStatics","MATERIAL_SANITY_CHECKS_FACTORY","base","class_1","defaultColor","_disableRipple","matcher","_pendingSubscribers","Observable","subscriber","_notifySubscriber","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","range","valueFunction","valuesArray","lines","setClass","isAdd","enforceStyleRecalculation","getPropertyValue","distanceToFurthestCorner","distX","distY","sqrt","optionsArray","groups","groupCounter","optionOffset","optionHeight","currentScrollPosition","reposition","MAT_DIALOG_SCROLL_STRATEGY_FACTORY","provider","exp","parentRegistry","httpClient","sanitizer","pathname","search","scrollThrottle","parentIntl","sortOrder","setPrototypeOf","__proto__","__assign","assign","s","n","SHARP_CURVE","MATERIAL_SANITY_CHECKS","_sanityChecksEnabled","_hammerLoader","_hasDoneGlobalChecks","_hasCheckedHammer","_window","_areChecksEnabled","_checkDoctypeIsDefined","_checkThemeIsPresent","_isTestEnv","__karma__","jasmine","doctype","body","testElement","computedStyle","_checkHammerIsAvailable","BidiModule","Boolean","MAT_DATE_LOCALE","MAT_DATE_LOCALE_PROVIDER","_localeChanges","setLocale","locale","second","firstValid","secondValid","SUPPORTS_INTL_API","Intl","DEFAULT_MONTH_NAMES","short","DEFAULT_DATE_NAMES","DEFAULT_DAY_OF_WEEK_NAMES","ISO_8601_REGEX","NativeDateAdapter","matDateLocale","useUtcForDisplay","_clampDate","getFullYear","getDay","dtf_1","DateTimeFormat","timeZone","_stripDirectionalityCharacters","_format","Date","dtf_2","day","dtf_3","weekday","dtf","_createDateWithOverflow","clone","displayFormat","setFullYear","toDateString","years","months","newDate","days","toIso8601","getUTCFullYear","_2digit","getUTCMonth","getUTCDate","isNaN","getTime","NaN","UTC","getHours","getMinutes","getSeconds","getMilliseconds","MAT_NATIVE_DATE_FORMATS","NativeDateModule","MatNativeDateModule","ShowOnDirtyErrorStateMatcher","dirty","submitted","touched","MAT_HAMMER_OPTIONS","ANGULAR_MATERIAL_SUPPORTED_HAMMER_GESTURES","ɵ1","noopHammerInstance","on","off","_hammerOptions","commonModule","events","buildHammer","hammer","mc","pan","Pan","swipe","Swipe","press","Press","slide","_createRecognizer","threshold","longpress","time","recognizeWith","inheritances","recognizer","HammerGestureConfig","MatLineSetter","FADING_IN","VISIBLE","FADING_OUT","HIDDEN","RippleState","RippleRef","fadeOut","fadeOutRipple","defaultRippleAnimationConfig","enterDuration","exitDuration","ignoreMouseEventsTimeout","passiveEventOptions","_target","_isPointerDown","_triggerEvents","_activeRipples","onMousedown","isFakeMousedown","isSyntheticEvent","_lastTouchStartEvent","now","rippleDisabled","fadeInRipple","onTouchStart","touches","changedTouches","onPointerUp","persistent","_containerElement","containerRect","_containerRect","animationConfig","centered","transitionDuration","rippleRef","_mostRecentTransientRipple","runTimeoutOutsideZone","isMostRecentTransientRipple","wasActive","rippleEl","fadeOutAll","_triggerElement","_globalOptions","_rippleRenderer","_setupTriggerEventsIfEnabled","_trigger","launch","configOrX","[class.mat-ripple-unbounded]","unbounded","MatPseudoCheckbox","[class.mat-pseudo-checkbox-indeterminate]","[class.mat-pseudo-checkbox-checked]","[class.mat-pseudo-checkbox-disabled]","MatOptgroupBase","_MatOptgroupMixinBase","_uniqueOptgroupIdCounter","[class.mat-optgroup-disabled]","_parent"],"mappings":";;;;;;;i/DkKuBA,SAAgBu1F,GAAUC,EAAG/iF,GAEzB,QAASgjF,KAAO70F,KAAK80F,YAAcF,EADnCG,GAAcH,EAAG/iF,GAEjB+iF,EAAE70F,UAAkB,OAAN8R,EAAahS,OAAO84B,OAAO9mB,IAAMgjF,EAAG90F,UAAY8R,EAAE9R,UAAW,GAAI80F,ICNnF,QAAgBG,KACd,OAAO,ECAT,QAAgBjxF,GAAyCkxF,GACvD,MAAF,UAAAr1F,GAMI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KAA2CwC,IAA3CxC,WALAZ,GAAA8nC,WAAiC,IAvBjC,MAsBuBxnC,GAAvBw1F,EAAAt1F,GAGIC,OAAJC,eAAQo1F,EAARn1F,UAAA,gBAAI,WAAiB,MAAOC,MAAKknC,eAC7B,SAAahnC,GAAcF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,oCA1BtEg1F,GAsBuBD,GCOvB,QAAgBztF,GACZytF,EAASE,GACX,MAAF,UAAAv1F,GAmBI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KACewC,IADfxC,WAIMZ,GAAKyoD,MAAQstC,IAtDnB,MA+BuBz1F,GAAvBw1F,EAAAt1F,GAGIC,OAAJC,eAAQo1F,EAARn1F,UAAA,aAAI,WAA4B,MAAOC,MAAKwpF,YACxC,SAAUtpF,GACR,GAAMsqF,GAAetqF,GAASi1F,CAE1B3K,KAAiBxqF,KAAKwpF,SACpBxpF,KAAKwpF,QACPxpF,KAAKI,YAAYD,cAAcE,UAAUC,OAAO,OAAON,KAAKwpF,QAE1DgB,GACFxqF,KAAKI,YAAYD,cAAcE,UAAUG,IAAI,OAAOgqF,GAGtDxqF,KAAKwpF,OAASgB,oCA9CtB0K,GA+BuBD,GCVvB,QAAgBnxF,GAA8CmxF,GAC5D,MAAF,UAAAr1F,GAOI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KAA2CwC,IAA3CxC,WANAZ,GAAAg2F,gBAAsC,IAvBtC,MAsBuB11F,GAAvBw1F,EAAAt1F,GAIIC,OAAJC,eAAQo1F,EAARn1F,UAAA,qBAAI,WAAsB,MAAOC,MAAKo1F,oBAClC,SAAkBl1F,GAAcF,KAAKo1F,eAAiBp1E,EAAAA,sBAAsB9f,oCA3BhFg1F,GAsBuBD,GCAvB,QAAgBpxF,GAAiDoxF,EAASjzB,GAExE,WAFF,KAAAA,IAA0EA,EAA1E,GAEA,SAAApiE,GASI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KACewC,IADfxC,WARAZ,GAAA6/E,UAAgCjd,IAzBhC,MAwBuBtiE,GAAvBw1F,EAAAt1F,GAGIC,OAAJC,eAAQo1F,EAARn1F,UAAA,gBAAI,WAAyB,MAAOC,MAAKyE,UAAY,EAAIzE,KAAKi/E,eAC1D,SAAa/+E,GAEXF,KAAKi/E,UAAqB,MAAT/+E,EAAgBA,EAAQ8hE,mCA9B/CkzB,GAwBuBD,GCavB,QAAgB7wC,GAAsD6wC,GAEpE,MAAF,UAAAr1F,GAyBI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KACewC,IADfxC,WAvBIZ,GAAJuyF,YAA0B,EAMtBvyF,EAAJqmD,aAA4B,GAAIhmD,GAAAA,UA/ChC,MAuCuBC,GAAvBw1F,EAAAt1F,GAYIs1F,EAAJn1F,UAAAsmD,iBAAI,WACE,GAAMo1B,GAAWz7E,KAAK2xF,WAChB/7D,EAAS51B,KAAKikD,kBAAoBjkD,KAAKgkD,YACvCqxC,EAAUr1F,KAAK0wC,mBAAqB1wC,KAAK+jD,0BACzCh9B,EAAU/mB,KAAKkkD,UAAYlkD,KAAKkkD,UAAgC,QAAG,KACnEs3B,EAAW6Z,EAAQvuE,aAAaC,EAAS6O,EAE3C4lD,KAAaC,IACfz7E,KAAK2xF,WAAanW,EAClBx7E,KAAKylD,aAAazjD,SA5D1BkzF,GAuCuBD,GCJvB,QAAgB/7D,GAA4C+7D,GAE1D,MAAF,UAAAr1F,GAyBI,QAAJs1F,KAAA,IAAgB,GAAhB1yF,MAAAiqD,EAAA,EAAgBA,EAAhBz8C,UAAA3H,OAAgBokD,IAAAjqD,EAAhBiqD,GAAAz8C,UAAAy8C,EAAI,IAAJrtD,GAAAQ,EAAA4O,MAAAxO,KAA2CwC,IAA3CxC,WAvBIZ,GAAJ4nC,gBAAqB,EAOjB5nC,EAAJk2F,uBAMIl2F,EAAJ2T,YAAkB,GAAIwiF,GAAAA,WAAiB,SAAAC,GAG7Bp2F,EAAK4nC,eACP5nC,EAAKq2F,kBAAkBD,GAEvBp2F,EAAwB,oBAAEkN,KAAKkpF,OA1DvC,MAqCuB91F,GAAvBw1F,EAAAt1F,GAgCIs1F,EAAJn1F,UAAAk6B,iBAAI,WACE,GAAIj6B,KAAKgnC,eACP,KAAMpS,OAAM,wFAId50B,MAAKgnC,gBAAiB,EAEtBhnC,KAAwB,oBAAE4M,QAAQ5M,KAAKy1F,mBACvCz1F,KAAKs1F,oBAAsB,MAI7BJ,EAAJn1F,UAAA01F,kBAAI,SAAkBD,GAChBA,EAAWxzF,OACXwzF,EAAWvzF,YApFjBizF,GAqCuBD,GCnBvB,QAAgBS,KACd,MAAOC,GAAAA,OAAOC,EAAAA,WC+BhB,QAASC,GAASxtF,EAAgBytF,GAEhC,IAAK,GADCC,GAAcztF,MAAMD,GACjBoF,EAAI,EAAGA,EAAIpF,EAAQoF,IAC1BsoF,EAAYtoF,GAAKqoF,EAAcroF,EAEjC,OAAOsoF,GCtBT,QAAgBprC,GAASqrC,EAA2Bt1F,GAGlDs1F,EAAM5tF,QAAQhH,KAAKsW,EAAAA,UAA8Bs+E,IAAQ10F,UAAU,SAAC+R,GAAtE,GAAuEhL,GAAvEgL,EAAAhL,MACI4tF,GAASv1F,EAAS,cAAc,GAChCu1F,EAASv1F,EAAS,cAAc,GAChCu1F,EAASv1F,EAAS,kBAAkB,GAErB,IAAX2H,GAA2B,IAAXA,EAClB4tF,EAASv1F,EAAS,OAAO2H,EAA/B,SAA8C,GAC/BA,EAAS,GAClB4tF,EAASv1F,EAAS,kBAAkB,KAM1C,QAASu1F,GAASv1F,EAAkC09C,EAAmB83C,GACrE,GAAM71F,GAAYK,EAAQP,cAAcE,SACxC61F,GAAQ71F,EAAUG,IAAI49C,GAAa/9C,EAAUC,OAAO89C,GCuQtD,QAAS+3C,GAA0Bz1F,GAIjC4xC,OAAOgU,iBAAiB5lD,GAAS01F,iBAAiB,WAMpD,QAASC,GAAyBr9E,EAAWC,EAAWg6E,GACtD,GAAMqD,GAAQ/hF,KAAKuJ,IAAIvJ,KAAKu5B,IAAI90B,EAAIi6E,EAAK39E,MAAOf,KAAKu5B,IAAI90B,EAAIi6E,EAAKz6D,QAC5D+9D,EAAQhiF,KAAKuJ,IAAIvJ,KAAKu5B,IAAI70B,EAAIg6E,EAAKplE,KAAMtZ,KAAKu5B,IAAI70B,EAAIg6E,EAAKv6D,QACjE,OAAOnkB,MAAKiiF,KAAKF,EAAQA,EAAQC,EAAQA,yCxB5D3CE,GAAyBptD,EAAzBhsB,UACQq5E,EAARzsD,EAA8B5sB,UACtBs5E,EAAR,gBACAF,EAAyBhpF,GAAzBq/B,OAAA2pD,EAAAhpF,GAAAq/B,QAAA4pD,EAAAC,IAEAA,GAGA,OAAAA,GAGA,MAAA,uBAcA,GAAAC,GAAAlqC,EAAAmqC,aAEAD,EAGIA,EAAJC,EAAAC,EAAAjsD,EACAt2B,KAAAuJ,IAAA,EAAA84E,EAAA/rD,EAAAgsD,GAGAC,EyBrSA,QAAgBjF,KACd,MAAOj9D,OAAM,gEAIf,QAAgBu9D,GAAmC7O,GACjD,MAAO1uD,OAAM,4CAA2C0uD,EAA1D,QAIA,QAAgBgP,KACd,MAAO19D,OAAM,sDpCqDf,QAAgB8/D,KACd,OAAQ5P,uBAAuB,G7HRjC,QAAgBK,GAAyC/vC,GACvD,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBwJ,cAwBxC,QAAgBzO,KACd,MAAO1zD,OAAM,6MuI4Gf,QAASkgD,GAAqBzzC,EACArL,GAC5B,MAAFM,OAAa+K,EAAarL,GhCnK1B,QAAgBw8C,KACd,KAAM59C,OAAM,yEEOd,QAAgBoiE,GAAmC5hD,GACjD,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBC,SAIxC,QAAgBrZ,GAA4C/+B,GAE1D,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBC,SA2UxC,QAAS1Y,GACL9+C,EAA0B2rD,GAC5B,MAAFrrD,OAAaqrD,EAAmB3rD,GC/PhC,QAASugD,GAAiB71E,EAAkCi0E,GAG1D,IAFA,GAAI/+C,GAA6Bl1B,EAAQP,cAAc41E,cAEhDngD,IAAWA,EAAOv1B,UAAUsI,SAAS,yBAC1CitB,EAASA,EAAOmgD,aAGlB,OAAOngD,GAAS++C,EAAYhzE,KAAK,SAAA4zE,GAAU,MAAAA,GAAO9yD,KAApD,EAAmEA,KAAM,KwDlIzE,QAAgBu2D,IAAgC12E,GAC9C,MAAOsyB,OAAM,eAAetyB,EAA9B,mCCDA,QAAgB05D,IAA2Bi7B,GACzC,MAAOriE,OACH,wCAAwCqiE,EAD9C,0JpFoDA,QAAgBznB,IAAuCp6B,GACrD,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBwJ,cNiOxC,QAAS9mC,IAAKinC,GAAuB,MAAO,QAAQA,EAApD,IAIA,QAASxnC,IAAexvD,GACtB,MAAQA,GAAMq7D,MAAM,aAAgBr7D,EAAQA,EAAQ,KGzQtD,QAAgBg2D,IAA4BvC,GAC1C,MAAO/+B,OAAM,sCAAsC++B,EAArD,KASA,QAAgBgE,MACd,MAAO/iC,OAAM,8JAWf,QAAgB0gC,IAAmCtC,GACjD,MAAOp+B,OAAM,yHACkDo+B,EAAjE,MAQA,QAAgBsB,IAAuCR,GACrD,MAAOl/B,OAAM,2HACkDk/B,EAAjE,MAihBA,QAAgBuE,IACd8+B,EACAC,EACAC,EACAxvF,GACA,MAAOsvF,IAAkB,GAAIlkC,IAAgBmkC,EAAYC,EAAWxvF,GAiBtE,QAAS2tD,IAASG,GAChB,MAAOA,GAAIyB,WAAU,GAIvB,QAASvB,IAAQ7B,EAAmBhwC,GAClC,MAAOgwC,GAAY,IAAMhwC,EChjB3B,QAAgBy0C,MACd,GAAM3wD,GAAY6tF,EAAAA,OAAOvsF,EAAAA,UACnB8vD,EAAYpxD,EAAYA,EAAU8xC,SAAW,IAEnD,QAGEK,YAAa,WAAM,MAAAif,GAAaA,EAAUo+B,SAAWp+B,EAAUq+B,OAAU,KuFtD7E,QAAgBr1C,MACd,KAAMttB,OAAM,0KAYd,QAAgBopB,MACd,KAAMppB,OAAM,kIASd,QAAgBspB,MACd,KAAMtpB,OAAM,gIpGiCd,QAAgBooB,MACd,OACEa,gBAAgB,EAChBV,UAAW,QACXE,UAAW,QACXM,cAAe,oCCzBnB,QAAgBmC,IAAiC1K,GAC/C,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBwJ,coGrCxC,QAAgBrxC,MACd,MAAO9wB,OAAM,iEASf,QAAgBqzB,MACd,MAAOrzB,OAAM,sDAQf,QAAgB+wB,MACd,MAAO/wB,OAAM,qClKwGf,QAAgBgvB,IAA4CxO,GAE1D,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBwJ,cChFxC,QAAgBlhD,IAAkC7/B,GAChD,MAAO4e,OAAM,qBAAqB5e,EAApC,iBAQA,QAAgBs7B,IAAoC8D,GAClD,MAAO,YAAM,MAAAA,GAAQm4C,iBAAiBwJ,YAAYS,eAAgBrmD,MAyBpE,QAAgBK,MACd,OACEO,UAAW,EACXC,UAAW,EACXsC,kBAAmB,MqDzCvB,QAAgBiD,IAAoCkgD,GAClD,MAAOA,IAAc,GAAIpgD,IVQ3B,QAAgBqC,MACd,GAAM5xC,GAAY6tF,EAAAA,OAAOvsF,EAAAA,UACnB8vD,EAAYpxD,EAAYA,EAAU8xC,SAAW,IAEnD,QAGEK,YAAa,WAAM,MAAAif,GAAaA,EAAUo+B,SAAWp+B,EAAUq+B,OAAU,wBAkJnD,6BAAF,KAAxBz5E,IAA4CA,EAA5C,KAAAvJ,KAAAuJ,IAAArJ,EAAAF,KAAAE,IAAAqJ,EAAAD,IEtJA,QAAgBumB,MACd,OAAQW,SAAUf,IRdpB,QAAgBlF,IAA8B9oB,GAC5C,KAAM4e,OAAM,iDAAgD5e,EAA9D,OAeA,QAAgBmzB,MACd,OAAO,EFjCT,QAAgBhU,MACd,MAAO,IAAInC,I+HhCb,QAAgB0G,IAAgCjX,GAC9C,MAAOmS,OAAM,kDAAkDnS,EAAjE,MAIA,QAAgBgB,MACd,MAAOmR,OAAM,oFAIf,QAAgB4E,MACd,MAAO5E,OAAM,oDAIf,QAAgB0E,IAA6B3nB,GAC3C,MAAOijB,OAASjjB,EAAlB,qD9HkJA,QAASooB,IAAsBtV,EACAU,GAC7B,GAAIuyE,IAA8B,MAAO,OAIzC,OAHa,QAATjzE,GAAmBizE,EAAU/wC,UAC5BxhC,GAAgBuyE,EAAUprF,KAAK,IAE7BorF,ErBpJT,QAAgB10E,IAAsCy0E,GACpD,MAAOA,IAAc,GAAI90E,IIH3B,QAAgB+C,IAAkC+xE,GAChD,MAAOA,IAAc,GAAIjyE,IdG3B,QAAgB1Q,MAMd,MALe,UAACpU,GAAyB,OACvC4U,KAAM5U,GAAWA,EAAQyZ,YAAc,GAAK,KAAO,IACnD5E,MAAO7U,GAAWA,EAAQ2Z,aAAe,GAAK,KAAO,kO4IlBzD,GAAI06E,IAAgB,SAASH,EAAG/iF,GAI5B,OAHAkjF,GAAgBl1F,OAAO83F,iBAChBC,uBAA2BtvF,QAAS,SAAUssF,EAAG/iF,GAAK+iF,EAAEgD,UAAY/lF,IACvE,SAAU+iF,EAAG/iF,GAAK,IAAK,GAAIumC,KAAKvmC,GAAOA,EAAEuE,eAAegiC,KAAIw8C,EAAEx8C,GAAKvmC,EAAEumC,MACpDw8C,EAAG/iF,IASjBgmF,GAAW,WAQlB,MAPAA,IAAWh4F,OAAOi4F,QAAU,SAAkB5f,GAC1C,IAAK,GAAI6f,GAAGtqF,EAAI,EAAGuqF,EAAIhoF,UAAU3H,OAAQoF,EAAIuqF,EAAGvqF,IAAK,CACjDsqF,EAAI/nF,UAAUvC,EACd,KAAK,GAAI2qC,KAAK2/C,GAAOl4F,OAAOE,UAAUqW,eAAepS,KAAK+zF,EAAG3/C,KAAI8/B,EAAE9/B,GAAK2/C,EAAE3/C,IAE9E,MAAO8/B,IAEJ2f,GAASrpF,MAAMxO,KAAMgQ,wCkBrChC,MAUEoqB,GAAFC,eAA0B,8BACxBD,EAAF0xD,mBAA8B,8BAC5B1xD,EAAFwxD,mBAA8B,4BAC5BxxD,EAAF69D,YAAuB,8BAbvB79D,iCAAA,MAmBEF,GAAFyxD,QAAmB,QACjBzxD,EAAFC,SAAoB,QAClBD,EAAF2xD,QAAmB,QArBnB3xD,KjBcag+D,GAAyB,GAAIvjF,GAAAA,eAAwB,qBAChEC,WAAY,OACZC,QAASmgF,kBA+BT,QAAF3uF,GACwD8xF,EACTC,GADSp4F,KAAxDm4F,qBAAwDA,EACTn4F,KAA/Co4F,cAA+CA,EAb/Cp4F,KAAAq4F,sBAAiC,EAGjCr4F,KAAAs4F,mBAA8B,EAG9Bt4F,KAAA8H,UAA0C,gBAAbD,WAAyBA,SAAWA,SAAW,KAG5E7H,KAAAu4F,QAAsC,gBAAXjmD,SAAuBA,OAASA,OAAS,KAM5DtyC,KAAKw4F,sBAAwBx4F,KAAKq4F,uBACpCr4F,KAAKy4F,yBACLz4F,KAAK04F,uBACL14F,KAAKq4F,sBAAuB,GAtDlC,MA2DUhyF,GAAVtG,UAAAy4F,6BACI,MAAOx4F,MAAKm4F,sBAAwBnwF,EAAAA,cAAgBhI,KAAK24F,cAInDtyF,EAAVtG,UAAA44F,sBACI,GAAMrmD,GAAStyC,KAAmB,OAClC,OAAOsyC,KAAWA,EAAOsmD,WAAatmD,EAAOumD,UAGvCxyF,EAAVtG,UAAA04F,kCACQz4F,KAAK8H,YAAc9H,KAAK8H,UAAUgxF,SACpCvwC,QAAQC,KACN,yHAMEniD,EAAVtG,UAAA24F,gCAGI,GAAK14F,KAAK8H,WAAc9H,KAAK8H,UAAUixF,MAAoC,kBAArBzyC,kBAAtD,CAIA,GAAM0yC,GAAch5F,KAAK8H,UAAU69B,cAAc,MAEjDqzD,GAAY34F,UAAUG,IAAI,2BAC1BR,KAAK8H,UAAUixF,KAAKlzD,YAAYmzD,EAEhC,IAAMC,GAAgB3yC,iBAAiB0yC,EAKnCC,IAA2C,SAA1BA,EAAc93B,SACjC5Y,QAAQC,KACN,sLAMJxoD,KAAK8H,UAAUixF,KAAKp+B,YAAYq+B,KAIlC3yF,EAAFtG,UAAAm5F,wBAAE,YACMl5F,KAAKs4F,mBAAsBt4F,KAAKu4F,WAIhCv4F,KAAKw4F,qBAAyBx4F,KAAmB,QAAU,QAAMA,KAAKo4F,eACxE7vC,QAAQC,KACN,wFAEJxoD,KAAKs4F,mBAAoB,mBAtF7Bh2F,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUgzF,EAAAA,YACVzyF,SAAUyyF,EAAAA,oDAgBZ72F,KAAA82F,QAAAj0F,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB01F,QACxB51F,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB6zC,EAAAA,oBAjDxBhwC,KOYagzF,GAAkB,GAAI1kF,GAAAA,eAAuB,mBACxDC,WAAY,OACZC,QAAS6gF,IAcE4D,IAA4BjvF,QAASgvF,GAAiB/uF,YAAasrF,EAAAA,WAGhF/3B,GAAA,wBAME79D,KAAFu5F,eAA6B,GAAI95F,GAAAA,QArCjC,MAoCEI,QAAFC,eAAM+9D,EAAN99D,UAAA,qBAAE,WAAwC,MAAOC,MAAKu5F,gDAqLpD17B,EAAF99D,UAAAy/D,YAAE,SAAYt/D,GACV,MAAa,OAATA,GAAiBF,KAAKohE,eAAelhE,IAAUF,KAAKugE,QAAQrgE,GACvDA,EAEFF,KAAKmnB,WAOd02C,EAAF99D,UAAAy5F,UAAE,SAAUC,GACRz5F,KAAKy5F,OAASA,EACdz5F,KAAKu5F,eAAev3F,QAUtB67D,EAAF99D,UAAA0/D,YAAE,SAAY5yB,EAAU6sD,GACpB,MAAO15F,MAAKopE,QAAQv8B,GAAS7sC,KAAKopE,QAAQswB,IACtC15F,KAAKupE,SAAS18B,GAAS7sC,KAAKupE,SAASmwB,IACrC15F,KAAK4pE,QAAQ/8B,GAAS7sC,KAAK4pE,QAAQ8vB,IAUzC77B,EAAF99D,UAAAy8D,SAAE,SAAS3vB,EAAiB6sD,GACxB,GAAI7sD,GAAS6sD,EAAQ,CACnB,GAAIC,GAAa35F,KAAKugE,QAAQ1zB,GAC1B+sD,EAAc55F,KAAKugE,QAAQm5B,EAC/B,OAAIC,IAAcC,GACR55F,KAAKy/D,YAAY5yB,EAAO6sD,GAE3BC,GAAcC,EAEvB,MAAO/sD,IAAS6sD,GAWlB77B,EAAF99D,UAAA0oE,UAAE,SAAU/L,EAASjoD,EAAgBqJ,GACjC,MAAIrJ,IAAOzU,KAAKy/D,YAAY/C,EAAMjoD,GAAO,EAChCA,EAELqJ,GAAO9d,KAAKy/D,YAAY/C,EAAM5+C,GAAO,EAChCA,EAEF4+C,GAxRXmB,KWwBa+D,GAAmB,GAAIjtD,GAAAA,eAA+B,oBVV7DklF,GAAmC,mBAARC,MAI3BC,IACJ9xB,MACE,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAC1E,UAAW,WAAY,YAEzB+xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACvF9xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MAKpEvP,GAAqC,SAAAlrD,GAAK,MAAA1H,QAAO0H,EAAI,IAA/CwsF,GAAqBpE,EAAM,GAAjCl9B,IAIMuhC,IACJjyB,MAAS,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC3E+xB,OAAU,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OACpD9xB,QAAW,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,MASrCiyB,GACF,oGA+BF,QAAFC,GAAmDC,EAAuB91D,GAAxE,GAAFnlC,GACIQ,EADJoE,KAAAhE,OAAAA,WAFEZ,GAAFk7F,kBAA8B,EAI1B16F,EAAJG,UAAUy5F,UAAVx1F,KAAA5E,EAAoBi7F,GAGhBj7F,EAAKk7F,kBAAoB/1D,EAASO,QAClC1lC,EAAKm7F,WAAah2D,EAASO,SAAWP,EAASM,OAnFnD,MA4DuCnlC,GAAvC06F,EAAAx6F,GA0BEw6F,EAAFr6F,UAAAqpE,QAAE,SAAQ1M,GACN,MAAOA,GAAK89B,eAGdJ,EAAFr6F,UAAAwpE,SAAE,SAAS7M,GACP,MAAOA,GAAK6M,YAGd6wB,EAAFr6F,UAAA6pE,QAAE,SAAQlN,GACN,MAAOA,GAAKkN,WAGdwwB,EAAFr6F,UAAAyqE,aAAE,SAAa9N,GACX,MAAOA,GAAK+9B,UAGdL,EAAFr6F,UAAAqqE,cAAE,SAAcl1D,GAAd,GAAF9V,GAAAY,IACI,IAAI65F,GAAmB,CACrB,GAAMa,GAAM,GAAIZ,MAAKa,eAAe36F,KAAKy5F,QAAS3tB,MAAO52D,EAAO0lF,SAAU,OAC1E,OAAO/E,GAAM,GAAI,SAAApoF,GACb,MAAArO,GAAKy7F,+BAA+Bz7F,EAAK07F,QAAQJ,EAAK,GAAIK,MAAK,KAAMttF,EAAG,OAE9E,MAAOssF,IAAoB7kF,IAG7BklF,EAAFr6F,UAAA8qE,aAAE,WAAA,GAAFzrE,GAAAY,IACI,IAAI65F,GAAmB,CACrB,GAAMmB,GAAM,GAAIlB,MAAKa,eAAe36F,KAAKy5F,QAASwB,IAAK,UAAWL,SAAU,OAC5E,OAAO/E,GAAM,GAAI,SAAApoF,GAAK,MAAArO,GAAKy7F,+BACvBz7F,EAAK07F,QAAQE,EAAK,GAAID,MAAK,KAAM,EAAGttF,EAAI,OAE9C,MAAOwsF,KAGTG,EAAFr6F,UAAA+nE,kBAAE,SAAkB5yD,GAAlB,GAAF9V,GAAAY,IACI,IAAI65F,GAAmB,CACrB,GAAMqB,GAAM,GAAIpB,MAAKa,eAAe36F,KAAKy5F,QAAS0B,QAASjmF,EAAO0lF,SAAU,OAC5E,OAAO/E,GAAM,EAAG,SAAApoF,GAAK,MAAArO,GAAKy7F,+BACtBz7F,EAAK07F,QAAQI,EAAK,GAAIH,MAAK,KAAM,EAAGttF,EAAI,OAE9C,MAAOysF,IAA0BhlF,IAGnCklF,EAAFr6F,UAAAmsE,YAAE,SAAYxP,GACV,GAAIm9B,GAAmB,CACrB,GAAMuB,GAAM,GAAItB,MAAKa,eAAe36F,KAAKy5F,QAAS9tB,KAAM,UAAWivB,SAAU,OAC7E,OAAO56F,MAAK66F,+BAA+B76F,KAAK86F,QAAQM,EAAK1+B,IAE/D,MAAO32D,QAAO/F,KAAKopE,QAAQ1M,KAG7B09B,EAAFr6F,UAAA6nE,kBAAE,WAEE,MAAO,IAGTwyB,EAAFr6F,UAAA8pE,kBAAE,SAAkBnN,GAChB,MAAO18D,MAAK4pE,QAAQ5pE,KAAKq7F,wBACrBr7F,KAAKopE,QAAQ1M,GAAO18D,KAAKupE,SAAS7M,GAAQ,EAAG,KAGnD09B,EAAFr6F,UAAAu7F,MAAE,SAAM5+B,GACJ,MAAO18D,MAAKypE,WAAWzpE,KAAKopE,QAAQ1M,GAAO18D,KAAKupE,SAAS7M,GAAO18D,KAAK4pE,QAAQlN,KAG/E09B,EAAFr6F,UAAA0pE,WAAE,SAAWkC,EAAcG,EAAepP,GAGtC,GAAIoP,EAAQ,GAAKA,EAAQ,GACvB,KAAMl3C,OAAM,wBAAwBk3C,EAA1C,6CAGI,IAAIpP,EAAO,EACT,KAAM9nC,OAAM,iBAAiB8nC,EAAnC,oCAGI,IAAInyB,GAASvqC,KAAKq7F,wBAAwB1vB,EAAMG,EAAOpP,EAEvD,IAAInyB,EAAOg/B,YAAcuC,EACvB,KAAMl3C,OAAM,iBAAiB8nC,EAAnC,2BAAkEoP,EAAlE,KAGI,OAAOvhC,IAGT6vD,EAAFr6F,UAAAuoE,MAAE,WACE,MAAO,IAAIyyB,OAGbX,EAAFr6F,UAAAkhE,MAAE,SAAM/gE,GAGJ,MAAoB,gBAATA,GACF,GAAI66F,MAAK76F,GAEXA,EAAQ,GAAI66F,MAAKA,KAAK95B,MAAM/gE,IAAU,MAG/Ck6F,EAAFr6F,UAAAmhE,OAAE,SAAOxE,EAAY6+B,GACjB,IAAKv7F,KAAKugE,QAAQ7D,GAChB,KAAM9nC,OAAM,iDAGd,IAAIilE,GAAmB,CAGjB75F,KAAKu6F,aAAe79B,EAAK89B,cAAgB,GAAK99B,EAAK89B,cAAgB,QACrE99B,EAAO18D,KAAKs7F,MAAM5+B,GAClBA,EAAK8+B,YAAYjnF,KAAKuJ,IAAI,EAAGvJ,KAAKE,IAAI,KAAMioD,EAAK89B,kBAGnDe,EAANjlE,MAA0BilE,GAAeX,SAAU,OAE7C,IAAMQ,GAAM,GAAItB,MAAKa,eAAe36F,KAAKy5F,OAAQ8B,EACjD,OAAOv7F,MAAK66F,+BAA+B76F,KAAK86F,QAAQM,EAAK1+B,IAE/D,MAAO18D,MAAK66F,+BAA+Bn+B,EAAK++B,iBAGlDrB,EAAFr6F,UAAA+pE,iBAAE,SAAiBpN,EAAYg/B,GAC3B,MAAO17F,MAAK+pE,kBAAkBrN,EAAc,GAARg/B,IAGtCtB,EAAFr6F,UAAAgqE,kBAAE,SAAkBrN,EAAYi/B,GAC5B,GAAIC,GAAU57F,KAAKq7F,wBACfr7F,KAAKopE,QAAQ1M,GAAO18D,KAAKupE,SAAS7M,GAAQi/B,EAAQ37F,KAAK4pE,QAAQlN,GAUnE,OAJI18D,MAAKupE,SAASqyB,MAAc57F,KAAKupE,SAAS7M,GAAQi/B,GAAU,GAAK,IAAM,KACzEC,EAAU57F,KAAKq7F,wBAAwBr7F,KAAKopE,QAAQwyB,GAAU57F,KAAKupE,SAASqyB,GAAU,IAGjFA,GAGTxB,EAAFr6F,UAAA4pE,gBAAE,SAAgBjN,EAAYm/B,GAC1B,MAAO77F,MAAKq7F,wBACRr7F,KAAKopE,QAAQ1M,GAAO18D,KAAKupE,SAAS7M,GAAO18D,KAAK4pE,QAAQlN,GAAQm/B,IAGpEzB,EAAFr6F,UAAA+7F,UAAE,SAAUp/B,GACR,OACEA,EAAKq/B,iBACL/7F,KAAKg8F,QAAQt/B,EAAKu/B,cAAgB,GAClCj8F,KAAKg8F,QAAQt/B,EAAKw/B,eAClB3yD,KAAK,MAQT6wD,EAAFr6F,UAAAy/D,YAAE,SAAYt/D,GACV,GAAqB,gBAAVA,GAAoB,CAC7B,IAAKA,EACH,MAAO,KAIT,IAAIi6F,GAAe9oC,KAAKnxD,GAAQ,CAC9B,GAAIw8D,GAAO,GAAIq+B,MAAK76F,EACpB,IAAIF,KAAKugE,QAAQ7D,GACf,MAAOA,IAIb,MAAO98D,GAAXG,UAAiBy/D,YAAjBx7D,KAAAhE,KAA6BE,IAG3Bk6F,EAAFr6F,UAAAqhE,eAAE,SAAextD,GACb,MAAOA,aAAemnF,OAGxBX,EAAFr6F,UAAAwgE,QAAE,SAAQ7D,GACN,OAAQy/B,MAAMz/B,EAAK0/B,YAGrBhC,EAAFr6F,UAAAonB,QAAE,WACE,MAAO,IAAI4zE,MAAKsB,MAIVjC,EAAVr6F,UAAAs7F,wBAAA,SAAkC1vB,EAAcG,EAAepP,GAC3D,GAAMnyB,GAAS,GAAIwwD,MAAKpvB,EAAMG,EAAOpP,EAOrC,OAHIiP,IAAQ,GAAKA,EAAO,KACtBphC,EAAOixD,YAAYx7F,KAAKopE,QAAQ7+B,GAAU,MAErCA,GAQD6vD,EAAVr6F,UAAAi8F,QAAA,SAAkBhE,GACd,OAAQ,KAAOA,GAAGhrF,OAAO,IAUnBotF,EAAVr6F,UAAA86F,+BAAA,SAAyCtjC,GACrC,MAAOA,GAAItxB,QAAQ,kBAAmB,KAchCm0D,EAAVr6F,UAAA+6F,QAAA,SAAkBM,EAA0B1+B,GACxC,GAAMk4B,GAAI,GAAImG,MAAKA,KAAKuB,IACpB5/B,EAAK89B,cAAe99B,EAAK6M,WAAY7M,EAAKkN,UAAWlN,EAAK6/B,WAC1D7/B,EAAK8/B,aAAc9/B,EAAK+/B,aAAc//B,EAAKggC,mBAC/C,OAAOtB,GAAIl6B,OAAO0zB,mBAnQtBtyF,KAACogB,EAAAA,iDAkBDpgB,KAAAyD,OAAAZ,aAAA7C,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BrD,MAAkC62F,QArElC/2F,KAAQoD,EAAAA,YARR00F,GA4DuCv8B,IWjD1B8+B,IACX17B,OACErC,UAAW,MAEbuC,SACEvC,WAAY+M,KAAM,UAAWG,MAAO,UAAWmvB,IAAK,WACpDxtB,gBAAiB9B,KAAM,UAAWG,MAAO,SACzCb,eAAgBU,KAAM,UAAWG,MAAO,OAAQmvB,IAAK,WACrDluB,oBAAqBpB,KAAM,UAAWG,MAAO,sCCnBjD,sBAqBAxpE,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUq6B,EAAAA,gBACVp2B,YACGC,QAASwzD,GAAa5sC,SAAUmpE,SAxBrCwC,KAgCAjkC,GAAoDgkC,+BAhCpD,sBA8BAr6F,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUy2F,IACVxyF,YAAaC,QAASu3D,GAAkB2P,SAA1C5Y,SAhCAkkC,iCCAA,MAcEC,GAAF/8F,UAAA+mB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQg2E,OAAU/1E,GAAQA,EAAKg2E,4BAH5E16F,KAACogB,EAAAA,aAZDo6E,iCAAA,MAsBEz1E,GAAFtnB,UAAA+mB,aAAE,SAAaC,EAA6BC,GACxC,SAAUD,GAAWA,EAAQI,UAAYJ,EAAQk2E,SAAYj2E,GAAQA,EAAKg2E,4BAH9E16F,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,8GApBzByS,KCuBa61E,GAAqB,GAAIvoF,GAAAA,eAA8B,sBAE9DwoF,IACJ,YACA,QACA,aACA,WACA,aACA,aAQFxkC,GAAM,aAANykC,GACO,aAFDC,IACJC,GAAF3kC,GACE4kC,IAAFH,mBASE,QAAFlsE,GACoDssE,EACpCC,GAFd,GAAFr+F,GAGIQ,EAHJoE,KAAAhE,OAAAA,WACoDZ,GAApDo+F,eAAoDA,EAHlDp+F,EAAFs+F,OAAWP,GAMHM,GACFA,EAAavE,4BAtDnB,MA6CmCx5F,GAAnCwxB,EAAAtxB,GA0BEsxB,EAAFnxB,UAAA49F,YAAE,SAAYj9F,GACV,GAAMk9F,GAAyC,mBAAXtrD,QAAyB,OAAgBC,OAAS,IAEtF,KAAKqrD,EASH,MAAOP,GAGT,IAAMQ,GAAK,GAAID,GAAOl9F,EAASV,KAAKw9F,oBAAkB73F,IAGhDm4F,EAAM,GAAIF,GAAOG,IACjBC,EAAQ,GAAIJ,GAAOK,MACnBC,EAAQ,GAAIN,GAAOO,MAKnBC,EAAQp+F,KAAKq+F,kBAAkBP,GAAM1kF,MAAO,QAASklF,UAAW,GAAIN,GACpEO,EAAYv+F,KAAKq+F,kBAAkBH,GAAQ9kF,MAAO,YAAaolF,KAAM,KAe3E,OAZAV,GAAIW,cAAcT,GAOlBO,EAAUE,cAAcL,GAGxBP,EAAGr9F,KAAKw9F,EAAOE,EAAOJ,EAAKM,EAAOG,IAElC,GAIMrtE,EAAVnxB,UAAAs+F,kBAAA,SAA4BpJ,EAAkB5rD,GAA9C,IAA4D,GAA5Dq1D,MAAAjyC,EAAA,EAA4DA,EAA5Dz8C,UAAA3H,OAA4DokD,IAAAiyC,EAA5DjyC,EAAA,GAAAz8C,UAAAy8C,EACI,IAAIkyC,GAAa,GAAK1J,GAAoC,YAAE5rD,EAK5D,OAHAq1D,GAAapyF,KAAK2oF,GAClByJ,EAAa9xF,QAAQ,SAAA4xC,GAAQ,MAAAmgD,GAAWF,cAAcjgD,KAE/CmgD,kBA9EXr8F,KAACogB,EAAAA,iDAMDpgB,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB06F,QAxCxB56F,KAAQ+D,GAARlB,aAAA7C,KAyCKsD,EAAAA,cAnDLsrB,GA6CmC0tE,EAAAA,iDb7CnC,sBAuBAt8F,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,wBACVK,MAAOC,MAAS,gBAzBlBqpD,KA6DAyyC,GAAA,WACE,QAAFA,GAAc7I,EAA2Bt1F,GACrCiqD,EAASqrC,EAAOt1F,GA/DpB,MAAAm+F,kCAAA,sBAmEAv8F,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,IACVK,SAAU0lD,GAAS/lD,IACnBU,cAAeqlD,QAtEjB1C,ScYEo1C,UAAF,EAAaC,QAAb,EAAsBC,WAAtB,EAAkCC,OAAlC,EAAAC,IAAAA,GAAEJ,WAAF,YAAAI,GAAAA,GAAaH,SAAb,UAAAG,GAAAA,GAAsBF,YAAtB,aAAAE,GAAAA,GAAkCD,QAAlC,QAMA,IAAAE,IAAA,WAKE,QAAFA,GACY7V,EAED5oF,EAEAs1B,GAJCh2B,KAAZspF,UAAYA,EAEDtpF,KAAXU,QAAWA,EAEAV,KAAXg2B,OAAWA,EAPTh2B,KAAF+W,MAAuBmoF,GAAYD,OArBnC,MAgCEE,GAAFp/F,UAAAq/F,QAAE,WACEp/F,KAAKspF,UAAU+V,cAAcr/F,OAjCjCm/F,KbgDaG,IACXC,cAAe,IACfC,aAAc,KAOVC,GAA2B,IAG3BC,GAAsB1/C,EAAAA,iCAAiCC,SAAS,IAStEw9B,GAAA,WA4BE,QAAFA,GAAsBkiB,EACAtgG,EACRsI,EACA48B,GAHZ,GAAFnlC,GAAAY,IAAsBA,MAAtB2/F,QAAsBA,EACA3/F,KAAtBX,QAAsBA,EArBtBW,KAAA4/F,gBAA2B,EAG3B5/F,KAAA6/F,eAA2B,GAAIzmE,KAG/Bp5B,KAAA8/F,eAA2B,GAAI55D,KAmK/BlmC,KAAA+/F,YAAwB,SAAC3mF,GAGrB,GAAM4mF,GAAkB58C,EAAAA,gCAAgChqC,GAClD6mF,EAAmB7gG,EAAK8gG,sBAC1BnF,KAAKoF,MAAQ/gG,EAAK8gG,qBAAuBT,EAExCrgG,GAAKugG,QAAQS,gBAAmBJ,GAAoBC,IACvD7gG,EAAKwgG,gBAAiB,EACtBxgG,EAAKihG,aAAajnF,EAAMgT,QAAShT,EAAMiT,QAASjtB,EAAKugG,QAAQziB,gBAKnEl9E,KAAAsgG,aAAyB,SAAClnF,GACtB,IAAKha,EAAKugG,QAAQS,eAAgB,CAIhChhG,EAAK8gG,qBAAuBnF,KAAKoF,MACjC/gG,EAAKwgG,gBAAiB,CAMtB,KAAK,GAFCW,GAAUnnF,EAAMonF,eAEb/yF,EAAI,EAAGA,EAAI8yF,EAAQl4F,OAAQoF,IAClCrO,EAAKihG,aAAaE,EAAQ9yF,GAAG2e,QAASm0E,EAAQ9yF,GAAG4e,QAASjtB,EAAKugG,QAAQziB,gBAM/El9E,KAAAygG,YAAwB,WACfrhG,EAAKwgG,iBAIVxgG,EAAKwgG,gBAAiB,EAGtBxgG,EAAK0gG,eAAelzF,QAAQ,SAAAovE,GAG1B,GAAM9nC,GAAY8nC,EAAOjlE,QAAUmoF,GAAYH,SAC7C/iB,EAAOhmD,OAAOtxB,sBAAwBs3E,EAAOjlE,QAAUmoF,GAAYJ,WAEhE9iB,EAAOhmD,OAAO0qE,YAAcxsD,GAC/B8nC,EAAOojB,cA/LP76D,EAASt8B,YACXjI,KAAK2gG,kBAAoBh5F,EAAWxH,cAGpCH,KAAK6/F,eACFlmE,IAAI,YAAa35B,KAAK+/F,aACtBpmE,IAAI,UAAW35B,KAAKygG,aACpB9mE,IAAI,aAAc35B,KAAKygG,aAEvB9mE,IAAI,aAAc35B,KAAKsgG,cACvB3mE,IAAI,WAAY35B,KAAKygG,aACrB9mE,IAAI,cAAe35B,KAAKygG,cAlHjC,MA4HEhjB,GAAF19E,UAAAsgG,aAAE,SAAarnF,EAAWC,EAAW+c,GAAnC,GAAF52B,GAAAY,SAAA,KAAAg2B,IAAqCA,KACjC,IAAM4qE,GAAgB5gG,KAAK6gG,eACL7gG,KAAK6gG,gBAAkB7gG,KAAK2gG,kBAAkB3xE,wBAC9D8xE,EAAVxqE,MAAgCgpE,GAAiCtpE,EAAOrxB,UAEhEqxB,GAAO+qE,WACT/nF,EAAI4nF,EAActrF,KAAOsrF,EAAcrrF,MAAQ,EAC/C0D,EAAI2nF,EAAc/yE,IAAM+yE,EAAc3/E,OAAS,EAGjD,IAAMg7D,GAASjmD,EAAOimD,QAAUoa,EAAyBr9E,EAAGC,EAAG2nF,GACzDx0D,EAAUpzB,EAAI4nF,EAActrF,KAC5BytC,EAAU9pC,EAAI2nF,EAAc/yE,IAC5ByE,EAAWwuE,EAAgBvB,cAE3BvjB,EAASn0E,SAAS89B,cAAc,MACtCq2C,GAAO37E,UAAUG,IAAI,sBAErBw7E,EAAO9mE,MAAMI,KAAU82B,EAAU6vC,EAArC,KACID,EAAO9mE,MAAM2Y,IAASk1B,EAAUk5B,EAApC,KACID,EAAO9mE,MAAM+L,OAAqB,EAATg7D,EAA7B,KACID,EAAO9mE,MAAMK,MAAoB,EAAT0mE,EAA5B,KAGID,EAAO9mE,MAAM3U,gBAAkBy1B,EAAO6xB,OAAS,KAC/Cm0B,EAAO9mE,MAAM8rF,mBAAwB1uE,EAAzC,KAEItyB,KAAK2gG,kBAAkB96D,YAAYm2C,GAInCma,EAA0Bna,GAE1BA,EAAO9mE,MAAM8B,UAAY,UAGzB,IAAMiqF,GAAY,GAAI9B,IAAUn/F,KAAMg8E,EAAQhmD,EA2B9C,OAzBAirE,GAAUlqF,MAAQmoF,GAAYJ,UAG9B9+F,KAAK8/F,eAAet/F,IAAIygG,GAEnBjrE,EAAO0qE,aACV1gG,KAAKkhG,2BAA6BD,GAKpCjhG,KAAKmhG,sBAAsB,WACzB,GAAMC,GAA8BH,IAAc7hG,EAAK8hG,0BAEvDD,GAAUlqF,MAAQmoF,GAAYH,QAMzB/oE,EAAO0qE,YAAgBU,GAAgChiG,EAAKwgG,gBAC/DqB,EAAU7B,WAEX9sE,GAEI2uE,GAITxjB,EAAF19E,UAAAs/F,cAAE,SAAc4B,GACZ,GAAMI,GAAYrhG,KAAK8/F,eAAelmE,OAAOqnE,EAY7C,IAVIA,IAAcjhG,KAAKkhG,6BACrBlhG,KAAKkhG,2BAA6B,MAI/BlhG,KAAK8/F,eAAehyE,OACvB9tB,KAAK6gG,eAAiB,MAInBQ,EAAL,CAIA,GAAMC,GAAWL,EAAUvgG,QACrBogG,EAAVxqE,MAAgCgpE,GAAiC2B,EAAUjrE,OAAOrxB,UAE9E28F,GAASpsF,MAAM8rF,mBAAwBF,EAAgBtB,aAA3D,KACI8B,EAASpsF,MAAM+M,QAAU,IACzBg/E,EAAUlqF,MAAQmoF,GAAYF,WAG9Bh/F,KAAKmhG,sBAAsB,WACzBF,EAAUlqF,MAAQmoF,GAAYD,OAC9BqC,EAAmB,WAAE3mC,YAAY2mC,IAChCR,EAAgBtB,gBAIrB/hB,EAAF19E,UAAAwhG,WAAE,WACEvhG,KAAK8/F,eAAelzF,QAAQ,SAAAovE,GAAU,MAAAA,GAAOojB,aAI/C3hB,EAAF19E,UAAAqE,mBAAE,SAAmB1D,GAAnB,GAAFtB,GAAAY,IACSU,IAAWA,IAAYV,KAAKwhG,kBAKjCxhG,KAAK+9E,uBAEL/9E,KAAKX,QAAQyB,kBAAkB,WAC7B1B,EAAKygG,eAAejzF,QAAQ,SAACuiB,EAAI7sB,GAC/B5B,EAAQiyC,iBAAiBrwC,EAAM6sB,EAAIuwE,QAIvC1/F,KAAKwhG,gBAAkB9gG,IA0DjB+8E,EAAV19E,UAAAohG,sBAAA,SAAgChyE,EAAcwkB,OAA9C,KAAAA,IAA8CA,EAA9C,GACI3zC,KAAKX,QAAQyB,kBAAkB,WAAM,MAAAyxB,YAAWpD,EAAIwkB,MAItD8pC,EAAF19E,UAAAg+E,qBAAE,WAAA,GAAF3+E,GAAAY,IACQA,MAAKwhG,iBACPxhG,KAAK6/F,eAAejzF,QAAQ,SAACuiB,EAAI7sB,GAC/BlD,EAAoB,gBAAEs0C,oBAAoBpxC,EAAM6sB,EAAIuwE,OApT5DjiB,Kc+Ca33E,GACT,GAAI6O,GAAAA,eAAoC,2CAuE1C,QAAF6nE,GAAsBp8E,EACRy/B,EACA0E,EAC+ChgC,EACJigC,GAJnCxkC,KAAtBI,YAAsBA,EA1CpBJ,KAAFi8E,OAA6C,EAmB7Cj8E,KAAAknC,WAA+B,EAqB/BlnC,KAAAgnC,gBAAoC,EAQhChnC,KAAKyhG,eAAiBl9F,MACtBvE,KAAK0hG,gBAAkB,GAAIjkB,IAAez9E,KAAM6/B,EAAQz/B,EAAamkC,GAE/C,mBAAlBC,IACFxkC,KAAKyhG,eAAe98F,WAAa46F,cAAe,EAAGC,aAAc,IAjIvE,MA0FE3/F,QAAFC,eACM08E,EADNz8E,UAAA,gBAAE,WACiB,MAAOC,MAAKknC,eAC7B,SAAahnC,GACXF,KAAKknC,UAAYhnC,EACjBF,KAAK2hG,gEAQP9hG,OAAFC,eACM08E,EADNz8E,UAAA,eAAE,WACgB,MAAOC,MAAK4hG,UAAY5hG,KAAKI,YAAYD,mBACzD,SAAY2W,GACV9W,KAAK4hG,SAAW9qF,EAChB9W,KAAK2hG,gEA2BPnlB,EAAFz8E,UAAAsW,SAAE,WACErW,KAAKgnC,gBAAiB,EACtBhnC,KAAK2hG,gCAGPnlB,EAAFz8E,UAAAgC,YAAE,WACE/B,KAAK0hG,gBAAgB3jB,wBAIvBvB,EAAFz8E,UAAAwhG,WAAE,WACEvhG,KAAK0hG,gBAAgBH,cAOvB1hG,OAAFC,eAAM08E,EAANz8E,UAAA,oBAAE,WACE,OACEghG,SAAU/gG,KAAK+gG,SACf9kB,OAAQj8E,KAAKi8E,OACbp0B,MAAO7nD,KAAK6nD,MACZljD,UAAN2xB,MAAqBt2B,KAAKyhG,eAAe98F,UAAc3E,KAAK2E,WACtDD,qBAAsB1E,KAAKyhG,eAAe/8F,uDAQ9C7E,OAAFC,eAAM08E,EAANz8E,UAAA,sBAAE,WACE,MAAOC,MAAKyE,YAAczE,KAAKyhG,eAAeh9F,0CAIxC+3E,EAAVz8E,UAAA4hG,yCACS3hG,KAAKyE,UAAYzE,KAAKgnC,gBACzBhnC,KAAK0hG,gBAAgBt9F,mBAAmBpE,KAAK8W,UAmBjD0lE,EAAFz8E,UAAA8hG,OAAE,SAAOC,EAAkC7oF,EAAe+c,GACtD,WADJ,KAAA/c,IAA2CA,EAA3C,GAC6B,gBAAd6oF,GACF9hG,KAAK0hG,gBAAgBrB,aAAayB,EAAW7oF,EAA1Dqd,MAAiEt2B,KAAKk9E,aAAiBlnD,IAE1Eh2B,KAAK0hG,gBAAgBrB,aAAa,EAAG,EAAlD/pE,MAAyDt2B,KAAKk9E,aAAiB4kB,oBAjJ/Ex/F,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,4BACVC,SAAU,YACVI,MACEC,MAAS,aACTg/F,+BAAgC,qDA5CpCz/F,KAAEiI,EAAAA,aAIFjI,KAAEgB,EAAAA,SAPFhB,KAAQoD,EAAAA,WAkHRpD,SAAAqD,GAAAR,aAAA7C,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BrD,MAAkCsD,QAClCxD,KAAAyD,OAAAZ,aAAA7C,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BrD,MAAkCuuB,EAAAA,8CA9DlC82B,QAAAvlD,KAAGoB,EAAAA,MAAHlB,MAAS,oBAGTw/F,YAAA1/F,KAAGoB,EAAAA,MAAHlB,MAAS,wBAMTu+F,WAAAz+F,KAAGoB,EAAAA,MAAHlB,MAAS,uBAOTy5E,SAAA35E,KAAGoB,EAAAA,MAAHlB,MAAS,qBAOTmC,YAAArC,KAAGoB,EAAAA,MAAHlB,MAAS,wBAMTiC,WAAAnC,KAAGoB,EAAAA,MAAHlB,MAAS,uBAYTsU,UAAAxU,KAAGoB,EAAAA,MAAHlB,MAAS,uBAtGTg6E,iCCAA,sBAiBAl6E,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,GAAiBm6B,EAAAA,gBAC3B95B,SAAU81E,GAAWn2E,IACrBU,cAAey1E,QApBjBj2E,mBC2DE,QAAF07F,GAAgEtkE,GAAA39B,KAAhE29B,eAAgEA,EAL9D39B,KAAF+W,MAA2C,YAGzC/W,KAAFyE,UAA+B,EAA/B,sBApBAnC,KAACC,EAAAA,UAADC,OAAAQ,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEZ,SAAF,sBACEI,QAAF,2jCACED,SAAU,GACVE,MACFC,MAAA,sBACMm/F,4CAAN,4BACIC,sCAAJ,sBACIC,uCAAJ,WACItxE,kCAAJ,4KAYAmxE,EAAAx+F,kEAFAw+F,iCCzDA,sBAYA3/F,KAAC4D,EAAAA,SAAD1D,OACEkE,SAAUu7F,IACVl7F,cAAek7F,QAdjBt4C,KCcA04C,GAAA,yBAdA,MAAAA,MAeaC,GACTv+F,EAAcs+F,IAGdE,GAA2B,kFA2B7BnjG,GAAF2sC,SAAqB,sBAAsBw2D,OAH3C,MAFiC7iG,GAAjC2wC,EAAAzwC,kBAjBA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,cACVE,SAAU,4JACVI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEV,QAAF,YACEE,QAAF,mkBACEC,MACFC,MAAA,eACMgH,KAAN,QACIy4F,gCAAJ,WACIl9F,uBAAJ,sBACIwpC,yBAAJ,gBAIAuB,EAAA5sC,wCAGA4sC,O1CVIoxC,GAAmB,EAGvBkF,GAAA,WACE,QAAFA,GAEW93D,EAEAi6B,sBAFA9oD,KAAX6uB,OAAWA,EAEA7uB,KAAX8oD,YAAWA,EAzCX,MAAA69B,MAyDa/2C,GACT,GAAIj7B,GAAAA,eAAyC,6CA6D/C,QAAFy7B,GACY1S,EACAp+B,EACiDmjG,EACpC31D,GAHb9sC,KAAZ09B,SAAYA,EACA19B,KAAZV,mBAAYA,EACiDU,KAA7DyiG,QAA6DA,EACpCziG,KAAzB8sC,MAAyBA,EApCzB9sC,KAAA+mC,WAAsB,EACtB/mC,KAAAkuF,SAAoB,EACpBluF,KAAAknC,WAAsB,EACtBlnC,KAAAsuF,qBAAiC,GAY/BtuF,KAAFyiB,GAAwB,cAAcg/D,KAYpCzhF,KAAFolD,kBAAyC,GAAI1sC,GAAAA,aAG3C1Y,KAAF+V,cAA2B,GAAItW,GAAAA,QAH/B,MArBEI,QAAFC,eAAMswC,EAANrwC,UAAA,gBAAE,WAAiB,MAAOC,MAAKyiG,SAAWziG,KAAKyiG,QAAQ91D,0CAGrD9sC,OAAFC,eAAMswC,EAANrwC,UAAA,gBAAE,WAA0B,MAAOC,MAAK+mC,2CAStClnC,OAAFC,eACMswC,EADNrwC,UAAA,gBAAE,WACiB,MAAQC,MAAK8sC,OAAS9sC,KAAK8sC,MAAMroC,UAAazE,KAAKknC,eACpE,SAAahnC,GAAcF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,oCAGlEL,OAAFC,eAAMswC,EAANrwC,UAAA,qBAAE,WAAsB,MAAOC,MAAKyiG,SAAWziG,KAAKyiG,QAAQj6D;iFAqB1D3oC,OAAFC,eAAMswC,EAANrwC,UAAA,cAAE,WACE,MAAOC,MAAKkuF,yCAOdruF,OAAFC,eAAMswC,EAANrwC,UAAA,iBAAE,WAEE,OAAQC,KAAKgmB,kBAAkBjd,aAAe,IAAIC,wCAIpDonC,EAAFrwC,UAAAkmD,OAAE,WACOjmD,KAAK+mC,YACR/mC,KAAK+mC,WAAY,EACjB/mC,KAAKV,mBAAmBsB,eACxBZ,KAAKmuF,8BAKT/9C,EAAFrwC,UAAAomD,SAAE,WACMnmD,KAAK+mC,YACP/mC,KAAK+mC,WAAY,EACjB/mC,KAAKV,mBAAmBsB,eACxBZ,KAAKmuF,8BAKT/9C,EAAFrwC,UAAAka,MAAE,WACE,GAAMvZ,GAAUV,KAAKgmB,iBAEQ,mBAAlBtlB,GAAQuZ,OACjBvZ,EAAQuZ,SASZm2B,EAAFrwC,UAAAquF,gBAAE,WACOpuF,KAAKkuF,UACRluF,KAAKkuF,SAAU,EACfluF,KAAKV,mBAAmBsB,iBAS5BwvC,EAAFrwC,UAAAsuF,kBAAE,WACMruF,KAAKkuF,UACPluF,KAAKkuF,SAAU,EACfluF,KAAKV,mBAAmBsB,iBAK5BwvC,EAAFrwC,UAAAw8C,SAAE,WACE,MAAOv8C,MAAK0mD,WAIdtW,EAAFrwC,UAAA6b,eAAE,SAAexC,GACTA,EAAMyC,UAAYM,EAAAA,OAAS/C,EAAMyC,UAAYO,EAAAA,QAC/Cpc,KAAKwnD,wBAGLpuC,EAAM4C,mBAQVo0B,EAAFrwC,UAAAynD,sBAAE,WACOxnD,KAAKyE,WACRzE,KAAK+mC,WAAY/mC,KAAK2sC,WAAY3sC,KAAK+mC,UACvC/mC,KAAKV,mBAAmBsB,eACxBZ,KAAKmuF,2BAA0B,KAKnC/9C,EAAFrwC,UAAAuhB,aAAE,WACE,MAAOthB,MAAKyE,SAAW,KAAO,KAIhC2rC,EAAFrwC,UAAAimB,gBAAE,WACE,MAAOhmB,MAAK09B,SAASv9B,eAGvBiwC,EAAFrwC,UAAAi6D,mBAAE,WAME,GAAIh6D,KAAK+mC,UAAW,CAClB,GAAM2f,GAAY1mD,KAAK0mD,SAEnBA,KAAc1mD,KAAKsuF,uBACrBtuF,KAAKsuF,qBAAuB5nC,EAC5B1mD,KAAK+V,cAAc/T,UAKzBouC,EAAFrwC,UAAAgC,YAAE,WACE/B,KAAK+V,cAAc9T,YAIbmuC,EAAVrwC,UAAAouF,0BAAA,SAAoCrlC,OAApC,KAAAA,IAAoCA,GAApC,GACI9oD,KAAKolD,kBAAkB/rC,KAAK,GAAIstE,IAAyB3mF,KAAM8oD,oBA/LnExmD,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVI,MACFiH,KAAA,SACMo5B,kBAAN,iBACIorD,uBAAJ,WACIC,8BAAJ,WACIC,qBAAsB,SACtBvrD,OAAJ,KACIipB,uBAAJ,sBACI7mD,uBAAJ,sBACIopF,8BAAJ,WACIljF,UAAJ,0BACImkB,YAAJ,yBACI5sB,MAAS,cAEbF,QAAA,k5CACAD,SAAA,qWACEI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAnEAf,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAotC,QAFAttC,KAAE+tC,GAAFlrC,aAAA7C,KAAAsD,EAAAA,cAcAwqC,EAAA3sC,2DAwEAgB,WAAAnC,KAAAoB,EAAAA,QAGA0hD,oBAAA9iD,KAAAsX,EAAAA,UAYAw2B,iCClHA,sBAgBA9tC,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUI,GAAiBH,EAAAA,aAAcujD,IACzCjjD,SAAU0pC,GAAWC,IACrBtpC,cAAeqpC,GAAWC,QAnB5BQ,KCWa89C,GACX,GAAIh6E,GAAAA,eAA6B,4BCD/BisB,GAAe,6BAajB5gC,KAAFyiB,GAAwB,aAAame,KAxBrC,sBAeAt+B,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,YACVK,MACEC,MAAS,YACTgH,KAAQ,QACR8+B,YAAa,4BAIjBpmB,KAAAngB,KAAGoB,EAAAA,SAxBHkrF,KCoBaC,IAIXC,mBAAoBh4E,EAAAA,QAAQ,sBAE1BC,EAAAA,MAAM,QAAS7B,EAAAA,OAAQ+M,QAAS,EAAGjL,UAAW,oBAC9CE,EAAAA,WAAW,iBACThC,EAAAA,OAAQ+M,QAAS,EAAGjL,UAAW,sBAC/BG,EAAAA,QAAQ,+CChBdw4B,GAAA,yBAbA,MAAAA,MCWI/O,GAAe,6BAgBjB5gC,KAAFsjF,MAAoC,QAGlCtjF,KAAFyiB,GAAwB,YAAYme,KA9BpC,sBAeAt+B,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,WACVK,MACEC,MAAS,WACTgsF,oBAAqB,iBACrBlmD,YAAa,KAEb3L,eAAgB,8BAKpBomD,QAAAhhF,KAAGoB,EAAAA,QAGH+e,KAAAngB,KAAGoB,EAAAA,SA9BHsrF,iCCAA,sBAYA1sF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gBAbZwsF,iCCAA,sBAiBA3sF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,sBAlBZysF,iCCAA,sBAYA5sF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBAbZ0sF,iCCAA,sBAYA7sF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBAbZ2sF,KCwDIxuD,GAAe,EASnByuD,GAAA,WACE,QAAFA,GAAqBjvF,GAAAJ,KAArBI,YAAqBA,EAlErB,MAAAivF,MAyEaC,GACT9nF,EAAW6nF,GAAkB,WAiBpBE,GACT,GAAI56E,GAAAA,eAA2C,iDAkJjD,QAAFo7B,GACa3vC,EACCd,EACsCkwF,EAC1BxuF,EAERyuF,EAEJ7nF,EACAvI,EACmCs+B,GAV/C,GAAFv+B,GAWIQ,EAXJoE,KAAAhE,KAWUI,IAXVJ,WACaZ,GAAbgB,YAAaA,EACChB,EAAdE,mBAAcA,EAEYF,EAA1B4B,KAA0BA,EAER5B,EAAlBqwF,UAAkBA,EAEJrwF,EAAdwI,UAAcA,EACAxI,EAAdC,QAAcA,EAtGdD,EAAAswF,8BAAyC,EAyBzCtwF,EAAAuwF,oBAA+B,EAW7BvwF,EAAFwwF,yBAAqC,GASrCxwF,EAAAywF,WAAuB,GAGrBzwF,EAAF0wF,aAAyB,YAAYlvD,KAGnCxhC,EAAF2sC,SAAa,wBAAwBnL,KAuDjCxhC,EAAK2wF,cAAgBP,MACrBpwF,EAAKooF,WAAapoF,EAAK2wF,cAAcC,OAAS,OAC9C5wF,EAAK6wF,mBAAwC,mBAAnBtyD,EAG1Bv+B,EAAKwiF,WAAc6N,GAAaA,EAAU7N,WAAc6N,EAAU7N,WAAa,WA3BnF,MAvFkCliF,GAAlCqwC,EAAAnwC,GAMEC,OAAFC,eACMiwC,EADNhwC,UAAA,kBAAE,WAC2C,MAAOC,MAAK0iF,iBACvD,SAAexiF,GACb,GAAM+rB,GAAWjsB,KAAK0iF,WAEtB1iF,MAAK0iF,YAAcxiF,GAAUF,KAAKyvF,WAAazvF,KAAKyvF,UAAU7N,YAAe,SAEpD,YAArB5hF,KAAK0iF,aAA6Bz2D,IAAa/rB,GACjDF,KAAKkwF,6DAMTrwF,OAAFC,eACMiwC,EADNhwC,UAAA,0BAAE,WACoC,MAAOC,MAAKmwF,yBAChD,SAAuBjwF,GACrBF,KAAKmwF,oBAAsBnwE,EAAAA,sBAAsB9f,oCAQnDL,OAAFC,eAAMiwC,EAANhwC,UAAA,0BAAE,WACE,MAA2B,WAApBC,KAAKwnF,aAA4BxnF,KAAK2vF,oDAI/C9vF,OAAFC,eAAMiwC,EAANhwC,UAAA,sBAAE,WAAgC,MAA2B,UAApBC,KAAKwnF,4CAM5C3nF,OAAFC,eACMiwC,EADNhwC,UAAA,iBAAE,WAC0B,MAAOC,MAAK6vF,gBACtC,SAAc3vF,GACZF,KAAK6vF,WAAa3vF,EAClBF,KAAKowF,iDAkBPvwF,OAAFC,eACMiwC,EADNhwC,UAAA,kBAAE,WAEE,MAA2B,WAApBC,KAAK4hF,YAAgD,UAArB5hF,KAAKqmF,YAA0B,OAASrmF,KAAKqmF,iBAEtF,SAAenmF,GACTA,IAAUF,KAAKqmF,cACjBrmF,KAAKqmF,YAAcnmF,GAASF,KAAK+vF,cAAcC,OAAS,OACxDhwF,KAAKV,mBAAmBsB,iDAkD5BmvC,EAAFhwC,UAAA8gE,0BAAE,WACE,MAAO7gE,MAAKqwF,yBAA2BrwF,KAAKI,aAG9C2vC,EAAFhwC,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKswF,uBAEL,IAAMvpE,GAAU/mB,KAAKooF,QAEjBrhE,GAAQk+B,aACVjlD,KAAKI,YAAYD,cAAcE,UAAUG,IAAI,uBAAuBumB,EAAQk+B,aAI9El+B,EAAQ0+B,aAAarkD,KAAKsW,EAAAA,UAAS,OAAepW,UAAU,WAC1DlC,EAAKmxF,wBACLnxF,EAAKoxF,sBACLpxF,EAAKE,mBAAmBsB,iBAItBmmB,EAAQm9B,WAAan9B,EAAQm9B,UAAUusC,cACzC1pE,EAAQm9B,UAAUusC,aAAanvF,UAAU,WAAM,MAAAlC,GAAKE,mBAAmBsB,iBAIzEO,EAAAA,MAAMnB,KAAK0wF,gBAAgBtoF,QAASpI,KAAK2wF,gBAAgBvoF,SAAS9G,UAAU,WAC1ElC,EAAK8wF,4BACL9wF,EAAKE,mBAAmBsB,iBAI1BZ,KAAK4wF,cAAcxoF,QAAQhH,KAAKsW,EAAAA,UAAU,OAAOpW,UAAU,WACzDlC,EAAKgxF,gBACLhxF,EAAKE,mBAAmBsB,iBAI1BZ,KAAK6wF,eAAezoF,QAAQhH,KAAKsW,EAAAA,UAAU,OAAOpW,UAAU,WAC1DlC,EAAKoxF,sBACLpxF,EAAKE,mBAAmBsB,kBAI5BmvC,EAAFhwC,UAAAyB,sBAAE,WACExB,KAAKswF,wBACDtwF,KAAK0vF,8BACP1vF,KAAK8wF,oBAIT/gD,EAAFhwC,UAAAgI,gBAAE,WAEE/H,KAAK4vF,yBAA2B,QAChC5vF,KAAKV,mBAAmBqsB,iBAI1BokB,EAAFhwC,UAAAgxF,eAAE,SAAeC,GACb,GAAM9sC,GAAYlkD,KAAKooF,SAAWpoF,KAAKooF,SAASlkC,UAAY,IAC5D,OAAOA,IAAaA,EAAU8sC,IAGhCjhD,EAAFhwC,UAAAkxF,gBAAE,WACE,SAAUjxF,KAAKooF,UAAYpoF,KAAKooF,SAASz8C,aAAe3rC,KAAKkxF,oBAG/DnhD,EAAFhwC,UAAAoxF,UAAE,WACE,QAASnxF,KAAKoxF,aAGhBrhD,EAAFhwC,UAAAsxF,kBAAE,WACE,MAAOrxF,MAAKsxF,iBAAmBtxF,KAAKooF,SAASmJ,kBAAoBvxF,KAAKwxF,qBAGxEzhD,EAAFhwC,UAAA0xF,wBAAE,WAEE,MAA2B,WAApBzxF,KAAK4hF,aAA4B5hF,KAAKmxF,aACzCnxF,KAAKmxF,cAAgBnxF,KAAKqxF,qBAGhCthD,EAAFhwC,UAAA+rC,kBAAE,WAEE,MAAO9rC,MAAKmxF,aAAmC,WAApBnxF,KAAK4hF,YAA2B5hF,KAAKixF,mBAIlElhD,EAAFhwC,UAAA2xF,sBAAE,WACE,MAAQ1xF,MAAK6wF,gBAAkB7wF,KAAK6wF,eAAexoF,OAAS,GACxDrI,KAAKooF,SAASuJ,WAAc,QAAU,QAI5C5hD,EAAFhwC,UAAA0nF,qBAAE,WAAA,GAAFroF,GAAAY,IACQA,MAAK8rC,qBAAuB9rC,KAAKsxF,iBAG/BtxF,KAAKiwF,qBACPjwF,KAAK2vF,oBAAqB,EAE1Bn1C,EAAAA,UAAUx6C,KAAK4xF,OAAOzxF,cAAe,iBAAiBiB,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WAC5ElC,EAAKuwF,oBAAqB,KAI9B3vF,KAAKwnF,WAAa,SAClBxnF,KAAKV,mBAAmBsB,iBAQpBmvC,EAAVhwC,UAAAwwF,iCACI,GAAIvwF,KAAKooF,SAASz8C,aAAe3rC,KAAKkxF,kBACpC,KAAMW,MAKF9hD,EAAVhwC,UAAAqwF,yBACIpwF,KAAK8xF,iBACL9xF,KAAKwwF,uBAOCzgD,EAAVhwC,UAAA+xF,oCACI,IAAI9xF,KAAK4wF,cAAe,CACtB,GAAImB,OAAV,GACUC,MAAV,EACMhyF,MAAK4wF,cAAchkF,QAAQ,SAACqlF,GAC1B,GAAmB,UAAfA,EAAK3O,MAAmB,CAC1B,GAAIyO,GAAa3yF,EAAK8yF,UACpB,KAAMC,GAAmC,QAE3CJ,GAAYE,MACP,IAAmB,QAAfA,EAAK3O,MAAiB,CAC/B,GAAI0O,EACF,KAAMG,GAAmC,MAE3CH,GAAUC,OAUVliD,EAAVhwC,UAAAywF,+BACI,GAAIxwF,KAAKooF,SAAU,CACjB,GAAI35C,KAEJ,IAAqC,SAAjCzuC,KAAK0xF,wBAAoC,CAC3C,GAAMU,GAAYpyF,KAAK4wF,cACnB5wF,KAAK4wF,cAAcjvF,KAAK,SAAAswF,GAAQ,MAAe,UAAfA,EAAK3O,QAAqB,KACxD+O,EAAUryF,KAAK4wF,cACjB5wF,KAAK4wF,cAAcjvF,KAAK,SAAAswF,GAAQ,MAAe,QAAfA,EAAK3O,QAAmB,IAExD8O,GACF3jD,EAAIniC,KAAK8lF,EAAU3vE,IACVziB,KAAK6vF,YACdphD,EAAIniC,KAAKtM,KAAK8vF,cAGZuC,GACF5jD,EAAIniC,KAAK+lF,EAAQ5vE,QAEVziB,MAAK6wF,iBACdpiD,EAAMzuC,KAAK6wF,eAAepiF,IAAI,SAAA65C,GAAS,MAAAA,GAAM7lC,KAG/CziB,MAAKooF,SAAS55C,kBAAkBC,KAK1BsB,EAAZhwC,UAAAuwF,sBAAE,WACE,IAAKtwF,KAAKooF,SACR,KAAMkK,MAQVviD,EAAFhwC,UAAA+wF,iBAAE,WACE,GAAMyB,GAAUvyF,KAAK4xF,OAAS5xF,KAAK4xF,OAAOzxF,cAAgB,IAE1D,IAAwB,YAApBH,KAAK4hF,YAA6B2Q,GAAYA,EAAQ5lF,SAAStE,QAC9DkqF,EAAQxpF,YAAYC,UAIrBhJ,KAAK4H,WAAc5H,KAAK4H,UAAUK,WAAtC,CAMA,IAAKJ,SAAwB,gBAAEc,SAAS3I,KAAKI,YAAYD,eAEvD,YADAH,KAAK0vF,8BAA+B,EAItC,IAAI8C,GAAa,EACbC,EAAW,EACTC,EAAW1yF,KAAKqwF,wBAAwBlwF,cAAco6D,iBAC1D,iCACIo4B,EAAS3yF,KAAKqwF,wBAAwBlwF,cAAco6D,iBACtD,8BACJ,IAAIv6D,KAAK4xF,QAAU5xF,KAAK4xF,OAAOzxF,cAAcwM,SAAStE,OAAQ,CAM5D,IAAoB,GALduqF,GAAiB5yF,KAAK6yF,aACxB7yF,KAAKqwF,wBAAwBlwF,cAAc6uB,yBACzC8jE,EAAa9yF,KAAK6yF,aAAaN,EAAQ5lF,SAAS,GAAGqiB,yBACrD+jE,EAAa,EAEvBtmC,EAAA,EAA0Bp5C,EAAAk/E,EAAQ5lF,SAAR8/C,EAA1Bp5C,EAAAhL,OAA0BokD,IAAkB,CACpCsmC,GADR1/E,EAAAo5C,GAC4BpyC,YAEtBm4E,EAAaM,EAAaF,EA/aN,EAgbpBH,EAAWM,EAAa,EAjbH,IAibOA,EAAkCC,GAAwB,EAGxF,IAAK,GAAIvlF,GAAI,EAAGA,EAAIilF,EAASrqF,OAAQoF,IACnCilF,EAASl0C,KAAK/wC,GAAGyH,MAAMK,MAAWi9E,EAAxC,IAEI,KAAK,GAAI/kF,GAAI,EAAGA,EAAIklF,EAAOtqF,OAAQoF,IACjCklF,EAAOn0C,KAAK/wC,GAAGyH,MAAMK,MAAWk9E,EAAtC,IAGIzyF,MAAK0vF,8BAA+B,IAI9B3/C,EAAVhwC,UAAA8yF,aAAA,SAAuBI,GACnB,MAAOjzF,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,MAAkB+yF,EAAKz6D,MAAQy6D,EAAK39E,MAI5Dy6B,EAAVhwC,UAAAmwF,+CAEQlwF,MAAKX,QACPW,KAAKX,QAAQw/C,SAASz9C,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WAAM,MAAAlC,GAAK0xF,qBAEzD38E,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAK0xF,qCAlaxCxuF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEC,SAAU,eACVE,SAAU,0mfAMVE,MACEC,MAAJ,iBACImwF,6CAAJ,2BACIC,yCAAJ,uBACIC,4CAAJ,0BACIC,2CAAJ,yBACIC,iCAAJ,sBACAC,mCAAA,iBACAC,sCAAA,sBACMC,0CAAN,4BACIC,kCAAJ,oBACIC,oCAAJ,sBACIC,sBAAJ,mBACItxB,qBAAJ,oBACIC,mBAAJ,kBACIsxB,uBAAJ,8BACIC,qBAAJ,4BACIC,sBAAJ,6BACIC,mBAAJ,0BACIC,mBAAJ,0BACIC,qBAAJ,4BACIC,qBAAJ,4BACIrjE,kCAAJ,uBAEAnuB,QAAA,SACAK,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA0sC,EAAA5nB,eAAA,WAAA,QACA7lB,KAAAiI,EAAAA,aACAjI,KAAAiB,EAAAA,oBACAjB,SAAAqD,GAAAR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAmsF,QACArsF,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAmCsD,EAAAA,aACnCtD,SAAAqD,GAAAR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA+sF,QACAjtF,KAAAoD,EAAAA,wHAzHAqqC,EAAAtsC,gBAJAm+E,aAAAt/E,KAAAoB,EAAAA,QAkOA0wF,qBAAA9xF,KAAAoB,EAAAA,QAzOAwuF,YAAA5vF,KAAAoB,EAAAA,QA2OA8jF,aAAAllF,KAAAoB,EAAAA,QAhMA2wF,eAAA/xF,KAAAmU,EAAAA,UAAAjU,MAAA,eA5BA6tF,0BAAA/tF,KAAAmU,EAAAA,UAAAjU,MAAA,yBAiOA8xF,qBAAAhyF,KAAAmU,EAAAA,UAAAjU,MAAA,0GApGA0uF,oBAAA5uF,KAAAk9B,EAAAA,aAAAh9B,MAAA0sF,MAcAkC,cAAA9uF,KAAAk9B,EAAAA,aAAAh9B,MAAAysF,MAsBA4B,iBAAAvuF,KAAQ0I,EAAAA,gBAARxI,MAAAosF,MAsBAgC,gBAAAtuF,KAAA0I,EAAAA,gBAAAxI,MAAAwsF,MAmBA0B,kBAAApuF,KAAA0I,EAAAA,gBAAAxI,MAAA2sF,MAEAwB,kBAAAruF,KAAA0I,EAAAA,gBAAYxI,MAAZ4sF,OAEAr/C,GACAu/C,gCCtOA,sBAoBAhtF,KAAC4D,EAAAA,SAAD1D,OACEuE,cACE6nF,GACA7+C,GACAi/C,GACAC,GACAC,GACAC,GACAC,IAEFjpF,SACEC,EAAAA,aACAI,EAAAA,iBAEFE,SACEkoF,GACA7+C,GACAi/C,GACAC,GACAC,GACAC,GACAC,QAzCJt+C,KvByCIyjD,GAA+B,EAGnC5P,GAAA,WACE,QAAFA,GAEW91D,EAEAya,GAFAtpC,KAAX6uB,OAAWA,EAEA7uB,KAAXspC,OAAWA,EAjDX,MAAAq7C,MAuDA6P,GAAA,yBAvDA,MAAAA,MAwDaC,GACT3wF,EAAmB0wF,IASV3P,GACT,GAAIlwE,GAAAA,eAA8C,oCAChDC,WAAY,OACZC,QAAS6/E,mBA+Fb,QAAFtQ,GACY9kF,EACAc,EACkCihC,GAH5C,GAAFjiC,GAIIQ,EAJJoE,KAAAhE,OAAAA,WACYZ,GAAZE,mBAAYA,EACAF,EAAZgB,YAAYA,EAlEVhB,EAAFqlF,WAAuB,EAIrBrlF,EAAFonF,SAAqB,EAenBpnF,EAAFkrB,YAA0D,KAoBxDlrB,EAAFwlF,eACM,GAAIlsE,GAAAA,aAGRtZ,EAAF+7B,OAAkD,GAAIziB,GAAAA,aAGpDtZ,EAAF2yB,OAAkD,GAAIrZ,GAAAA,aAapDtZ,EAAFq+C,cAGEr+C,EAAFqjB,GAAe,oBAAoB8xE,KAQ/Bn1F,EAAKilF,yBAA2BhjD,EAASyjD,wBAlB7C,MA3DqCplF,GAArC0kF,EAAAxkF,GAUEC,OAAFC,eAAMskF,EAANrkF,UAAA,cAAE,WAAwB,MAAOC,MAAKwmF,SAAWxmF,KAAKykF;GAsBpD5kF,OAAFC,eACMskF,EADNrkF,UAAA,6BAAE,WACuC,MAAOC,MAAKqkF,4BACnD,SAA0BnkF,GACxBF,KAAKqkF,uBAAyBrkE,EAAAA,sBAAsB9f,oCAwBtDL,OAAFC,eACMskF,EADNrkF,UAAA,iBAAE,SACcG,GADd,GAAFd,GAAAY,IAEQE,IAASA,EAAMmI,SACjBnI,EAAM6pB,MAAM,KAAKnd,QAAQ,SAAAwxC,GAAa,MAAAh/C,GAAKq+C,WAAWW,EAAUp1C,SAAU,IAC1EhJ,KAAKI,YAAYD,cAAci+C,UAAY,qCAiB/CgmC,EAAFrkF,UAAAc,mBAAE,WACEb,KAAKkb,YAAc,GAAIutC,GAAAA,2BAAsCzoD,KAAKqpC,SAAS1sB,WAE3E3c,KAAKskF,kBAOPF,EAAFrkF,UAAAwkF,cAAE,SAAcp6C,GACRnqC,KAAKkqC,QACPlqC,KAAKkqC,MAAM/pC,cAAcgqC,UAAYA,IAKzCi6C,EAAFrkF,UAAAykF,cAAE,WACE,MAAOxkF,MAAKkqC,MAAQlqC,KAAKkqC,MAAM/pC,cAAcgqC,UAAY,GAI3Di6C,EAAFrkF,UAAAukF,eAAE,WACEtkF,KAAKykF,YAAczkF,KAAKqpC,QAAQhhC,OAChCrI,KAAKy9C,WAAW,4BAA8Bz9C,KAAKykF,UACnDzkF,KAAKy9C,WAAW,4BAA8Bz9C,KAAKykF,UACnDzkF,KAAKV,mBAAmBsB,gBAI1BwjF,EAAFrkF,UAAA2kF,iBAAE,SAAiBp7C,GACf,GAAMlwB,GAAQ,GAAIurE,IAA6B3kF,KAAMspC,EACrDtpC,MAAK4kF,eAAevrE,KAAKD,mBAhI7B9W,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEG,SAAU,wJACVC,QAAF,kpBACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEX,SAAF,kBACEC,QAAF,iBACEG,MACFC,MAAA,oBAEAqH,YACAC,QAAAulC,GAAAtlC,YAAA85E,2FA3EA9hF,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAAqiF,SA0JAT,EAAA3gF,6GA5DA4lC,UAAA/mC,KAAA0I,EAAAA,gBAAAxI,MAAA4tC,IAAAvI,aAAA,MAGAoC,eAAA3nC,KAAA0I,EAAAA,gBAAAxI,MAAA6tC,MAGA/lB,cAAAhoB,KAAAoB,EAAAA,QAGAohF,wBAAAxiF,KAAAoB,EAAAA,QAGAqhF,aAAAziF,KAAAoB,EAAAA,QAMAkhF,iBAAAtiF,KAAAsX,EAAAA,SAWAuhB,SAAA74B,KAAAsX,EAAAA,SAGAmY,SAAAzvB,KAAAsX,EAAAA,SAIAvZ,YAAAiC,KAAAoB,EAAAA,MAAAlB,MAAA,YASA4hF,qBCrIE,QAAFY,GAEar9E,GAAA3H,KAAb2H,WAAaA,EArBb,sBAcArF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,0BACVC,SAAU,gEARZJ,KAAmBiI,EAAAA,cARnBy6E,K9H8DaC,GACT,GAAItwE,GAAAA,eAAqC,oCAQhCuwE,IACX76E,QAAS46E,GACTpiE,MAAO+V,EAAAA,SACP7V,WAAYoiE,GAODC,IACX/6E,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAitE,MAC9BrkD,OAAO,iBA4GP,QAAFqkD,GAAsB3nD,EAAgDrI,EAChDzf,EACA0vE,EACAhmF,EACkCsyC,EACtB5wC,EACQ09D,EACU52D,EAE9BvI,GATpB,GAAFH,GAAAY,IAAsBA,MAAtB09B,SAAsBA,EAAgD19B,KAAtEq1B,SAAsEA,EAChDr1B,KAAtB4V,kBAAsBA,EACA5V,KAAtBslF,MAAsBA,EACAtlF,KAAtBV,mBAAsBA,EAEYU,KAAlCgB,KAAkCA,EACQhB,KAA1C0+D,WAA0CA,EACU1+D,KAApD8H,UAAoDA,EAE9B9H,KAAtBT,eAAsBA,EAjFtBS,KAAAulF,qBAAgC,EAChCvlF,KAAAwlF,uBAAkC,EAUlCxlF,KAAAylF,wBAAmC,EAMnCzlF,KAAA0lF,sBAAkCv0E,EAAAA,aAAaC,MAO/CpR,KAAA2lF,qBAAgC,EAGhC3lF,KAAA4lF,qBAA0C,GAAInmF,GAAAA,QAM9CO,KAAA6lF,mBAA+B,WAI3BzmF,EAAKumF,oBACD99E,SAASq0B,gBAAkB98B,EAAKs+B,SAASv9B,eAAiBf,EAAK6sC,WAIrEjsC,KAAF4kD,UAAoC,aAGlC5kD,KAAF6kD,WAAe,aAeb7kD,KAAF8lF,sBAAyD,MA+CzD9lF,KAAA+lF,kBAAsC,EAqEpC/lF,KAAFgmF,iBAAoE7gC,EAAAA,MAAM,WACtE,MAAI/lD,GAAK6mF,cAAgB7mF,EAAK6mF,aAAa58C,QACnCloC,EAAAA,MAAZqN,UAAA,GAAqBpP,EAAK6mF,aAAa58C,QAAQ56B,IAAI,SAAA66B,GAAU,MAAAA,GAAO8b,qBAKzDhmD,EAAKkmF,MAAMzmC,SACbjsB,eACAxxB,KAAKsL,EAAAA,KAAK,GAAI6xC,EAAAA,UAAU,WAAM,MAAAn/C,GAAK4mF,sBAtGlB,mBAAX1zC,SACTgzC,EAAMxkF,kBAAkB,WACtBwxC,OAAOK,iBAAiB,OAAQvzC,EAAKymF,sBAIzC7lF,KAAKmyC,gBAAkBP,EAjN3B,MA0LE/xC,QAAFC,eACMulF,EADNtlF,UAAA,4BAAE,WACsC,MAAOC,MAAKwlF,2BAClD,SAAyBtlF,GACvBF,KAAKwlF,sBAAwBxlE,EAAAA,sBAAsB9f,oCAuBrDmlF,EAAFtlF,UAAAgC,YAAE,WACwB,mBAAXuwC,SACTA,OAAOoB,oBAAoB,OAAQ1zC,KAAK6lF,oBAG1C7lF,KAAK0lF,sBAAsB/xE,cAC3B3T,KAAKulF,qBAAsB,EAC3BvlF,KAAKkmF,gBACLlmF,KAAK4lF,qBAAqB3jF,YAI5BpC,OAAFC,eAAMulF,EAANtlF,UAAA,iBAAE,WACE,MAAOC,MAAK+lF,kBAAoB/lF,KAAKimF,aAAaxB,2CAKpDY,EAAFtlF,UAAAomF,UAAE,WACEnmF,KAAKomF,iBACLpmF,KAAKqmF,eAIPhB,EAAFtlF,UAAAumF,WAAE,WACEtmF,KAAKumF,cAEAvmF,KAAK+lF,mBAIN/lF,KAAKisC,WAEPjsC,KAAKimF,aAAal0D,OAAO1Y,OAG3BrZ,KAAKimF,aAAaO,QAAUxmF,KAAK+lF,kBAAmB,EAEhD/lF,KAAKsxB,aAAetxB,KAAKsxB,YAAYxZ,gBACvC9X,KAAKsxB,YAAYpZ,SACjBlY,KAAKymF,4BAA4B9yE,eAK9B3T,KAAKulF,qBAKRvlF,KAAKV,mBAAmBqsB,kBAQ5B05D,EAAFtlF,UAAAktC,eAAE,WACMjtC,KAAK+lF,kBACP/lF,KAAgB,YAAEitC,kBAQtBptC,OAAFC,eAAMulF,EAANtlF,UAAA,2BAAE,WAAA,GAAFX,GAAAY,IACI,OAAOmB,GAAAA,MACLnB,KAAKgmF,iBACLhmF,KAAKimF,aAAa/qE,YAAYojC,OAAOl9C,KAAKqH,EAAAA,OAAO,WAAM,MAAArJ,GAAK2mF,oBAC5D/lF,KAAK4lF,qBACL5lF,KAAK0mF,yBACL1mF,KAAKsxB,YACDtxB,KAAKsxB,YAAYqG,cAAcv2B,KAAKqH,EAAAA,OAAO,WAAM,MAAArJ,GAAK2mF,oBACtD7kF,EAAAA,MACJE,KAEAqN,EAAAA,IAAI,SAAA2K,GAAS,MAAAA,aAAiButE,IAA2BvtE,EAAQ,yCAkBrEvZ,OAAFC,eAAMulF,EAANtlF,UAAA,oBAAE,WACE,MAAIC,MAAKimF,cAAgBjmF,KAAKimF,aAAa/qE,YAClClb,KAAKimF,aAAa/qE,YAAYgxB,WAGhC,sCAIDm5C,EAAVtlF,UAAA2mF,4CACI,OAAK1mF,MAAK8H,UAIH3G,EAAAA,MACLq5C,EAAAA,UAAsBx6C,KAAK8H,UAAW,SACtC0yC,EAAAA,UAAsBx6C,KAAK8H,UAAW,aAEvC1G,KAAKqH,EAAAA,OAAO,SAAA2Q,GACX,GAAMwtE,GAAcxtE,EAA2B,OACzCytE,EAAYznF,EAAKs/D,WACnBt/D,EAAKs/D,WAAWt+D,YAAYD,cAAgB,IAEhD,OAAOf,GAAK2mF,kBACJa,IAAgBxnF,EAAKs+B,SAASv9B,iBAC5B0mF,IAAcA,EAAUl+E,SAASi+E,OAChCxnF,EAAKkyB,cAAgBlyB,EAAKkyB,YAAYuG,eAAelvB,SAASi+E,MAflE1lF,EAAAA,GAAa,OAoBxBmkF,EAAFtlF,UAAAkvB,WAAE,SAAW/uB,GAAX,GAAFd,GAAAY,IACImU,SAAQC,QAAQ,MAAMC,KAAK,WAAM,MAAAjV,GAAK0nF,iBAAiB5mF,MAIzDmlF,EAAFtlF,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAK4kD,UAAYz1B,GAInBk2D,EAAFtlF,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GAIpBk2D,EAAFtlF,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAK09B,SAASv9B,cAAcsE,SAAW6qB,GAGzC+1D,EAAFtlF,UAAA6b,eAAE,SAAexC,GACb,GAAMyC,GAAUzC,EAAMyC,OAUtB,IAJIA,IAAYu4B,EAAAA,QACdh7B,EAAM4C,iBAGJhc,KAAK+mF,cAAgBlrE,IAAYM,EAAAA,OAASnc,KAAKisC,UACjDjsC,KAAK+mF,aAAav/B,wBAClBxnD,KAAKgnF,mBACL5tE,EAAM4C,qBACD,IAAIhc,KAAKimF,aAAc,CAC5B,GAAMgB,GAAiBjnF,KAAKimF,aAAa/qE,YAAYgxB,WAC/C4a,EAAajrC,IAAYwR,EAAAA,UAAYxR,IAAY0R,EAAAA,UAEnDvtB,MAAKisC,WAAapwB,IAAYqrE,EAAAA,IAChClnF,KAAKimF,aAAa/qE,YAAYoB,UAAUlD,GAC/B0tC,GAAc9mD,KAAKmnF,YAC5BnnF,KAAKmmF,aAGHr/B,GAAc9mD,KAAKimF,aAAa/qE,YAAYgxB,aAAe+6C,IAC7DjnF,KAAKonF,oBAKX/B,EAAFtlF,UAAAsnF,aAAE,SAAajuE,GACX,GAAIqhC,GAASrhC,EAAgC,OACzClZ,EAAgCu6C,EAAOv6C,KAGvB,YAAhBu6C,EAAOn4C,OACTpC,EAAiB,IAATA,EAAc,KAAOiqB,WAAWjqB,IAQtCF,KAAKsnF,iBAAmBpnF,GAAS2H,SAASq0B,gBAAkB9iB,EAAMqhC,SACpEz6C,KAAKsnF,eAAiBpnF,EACtBF,KAAK4kD,UAAU1kD,GAEXF,KAAKmnF,YACPnnF,KAAKmmF,cAKXd,EAAFtlF,UAAA+rD,aAAE,WACO9rD,KAAK2lF,oBAEC3lF,KAAKmnF,aACdnnF,KAAKsnF,eAAiBtnF,KAAK09B,SAASv9B,cAAcD,MAClDF,KAAKomF,iBACLpmF,KAAKqmF,aAAY,IAJjBrmF,KAAK2lF,qBAAsB,GAcvBN,EAAVtlF,UAAAsmF,YAAA,SAAsBkB,OAAtB,KAAAA,IAAsBA,GAAtB,GACQvnF,KAAK0+D,YAA6C,SAA/B1+D,KAAK0+D,WAAW8oB,aACjCD,EACFvnF,KAAK0+D,WAAW+oB,uBAEhBznF,KAAK0+D,WAAW8oB,WAAa,SAG/BxnF,KAAKylF,wBAAyB,IAK1BJ,EAAVtlF,UAAAwmF,uBACQvmF,KAAKylF,yBACPzlF,KAAK0+D,WAAW8oB,WAAa,OAC7BxnF,KAAKylF,wBAAyB,IAa1BJ,EAAVtlF,UAAAqnF,2BACI,GAAMt6E,GAAQ9M,KAAKimF,aAAa/qE,YAAY4uB,iBAAmB,EACzDC,EAAaC,EAA8Bl9B,EAC7C9M,KAAKimF,aAAa58C,QAASrpC,KAAKimF,aAAah8C,cAE3Cy9C,EAAoBt9C,EACxBt9B,EAAQi9B,EAzZ4B,GA2ZpC/pC,KAAKimF,aAAazB,gBAxZiB,IA4ZrCxkF,MAAKimF,aAAa1B,cAAcmD,IAO1BrC,EAAVtlF,UAAA4nF,iDACUC,EAAc5nF,KAAKslF,MAAMzmC,SAASjsB,eAAexxB,KAAKsL,EAAAA,KAAK,IAC3Dm7E,EAAgB7nF,KAAKimF,aAAa58C,QAAQjhC,QAAQhH,KACtDs0D,EAAAA,IAAI,WAAM,MAAAt2D,GAAK0oF,kBAAkBC,wBAGjCp0C,EAAAA,MAAM,GAIR,OAAOxyC,GAAAA,MAAMymF,EAAaC,GACvBzmF,KAGCm9C,EAAAA,UAAU,WAQR,MAPAn/C,GAAK4nF,mBACL5nF,EAAK6mF,aAAa3B,iBAEdllF,EAAK6sC,WACP7sC,EAAgB,YAAE6tC,iBAGb7tC,EAAK4oF,sBAGdt7E,EAAAA,KAAK,IAGNpL,UAAU,SAAA8X,GAAS,MAAAha,GAAK6oF,kBAAkB7uE,MAIvCisE,EAAVtlF,UAAAmmF,yBACQlmF,KAAKsxB,cACPtxB,KAAKsmF,aACLtmF,KAAKsxB,YAAYmB,UACjBzyB,KAAKsxB,YAAc,OAIf+zD,EAAVtlF,UAAA+mF,iBAAA,SAA2B5mF,GACvB,GAAMgoF,GAAYloF,KAAKimF,cAAgBjmF,KAAKimF,aAAa37D,YACvDtqB,KAAKimF,aAAa37D,YAAYpqB,GAC9BA,EAIIioF,EAA0B,MAAbD,EAAoBA,EAAY,EAI/CloF,MAAK0+D,WACP1+D,KAAK0+D,WAAW0pB,SAASloF,MAAQioF,EAEjCnoF,KAAK09B,SAASv9B,cAAcD,MAAQioF,EAGtCnoF,KAAKsnF,eAAiBa,GAQhB9C,EAAVtlF,UAAAkoF,kBAAA,SAA4B7uE,GACpBA,GAASA,EAAMyV,SACjB7uB,KAAKqoF,6BAA6BjvE,EAAMyV,QACxC7uB,KAAK8mF,iBAAiB1tE,EAAMyV,OAAO3uB,OACnCF,KAAK4kD,UAAUxrC,EAAMyV,OAAO3uB,OAC5BF,KAAK09B,SAASv9B,cAAc8Z,QAC5Bja,KAAKimF,aAAavB,iBAAiBtrE,EAAMyV,SAG3C7uB,KAAKsmF,cAMCjB,EAAVtlF,UAAAsoF,6BAAA,SAAuCrI,GACnChgF,KAAKimF,aAAa58C,QAAQz8B,QAAQ,SAAA08B,GAC5BA,GAAU02C,GAAQ12C,EAAOljB,UAC3BkjB,EAAO6c,cAKLk/B,EAAVtlF,UAAAqmF,oCACI,KAAKpmF,KAAKimF,aACR,KAAMqC,IAGHtoF,MAAKsxB,YAwBRtxB,KAAKsxB,YAAYsiD,YAAYr+D,MAAOvV,KAAKuoF,oBAvBzCvoF,KAAK+zC,QAAU,GAAIz9B,GAAAA,eAAetW,KAAKimF,aAAarjF,SAAU5C,KAAK4V,mBACnE5V,KAAKsxB,YAActxB,KAAKq1B,SAASsD,OAAO34B,KAAKmiD,qBAI7CniD,KAAKsxB,YAAY+wB,gBAAgB/gD,UAAU,SAAA8X,IAGrCA,EAAMyC,UAAYu4B,EAAAA,QAAWh7B,EAAMyC,UAAYwR,EAAAA,UAAYjU,EAAM6tC,UACnE7nD,EAAK4nF,mBACL5nF,EAAKwmF,qBAAqB5jF,UAI1BhC,KAAKT,iBACPS,KAAK0lF,sBAAwB1lF,KAAKT,eAAe0B,SAASK,UAAU,WAC9DlC,EAAK6sC,WAAa7sC,EAAKkyB,aACzBlyB,EAAKkyB,YAAYsiD,YAAYr+D,MAAOnW,EAAKmpF,uBAS7CvoF,KAAKsxB,cAAgBtxB,KAAKsxB,YAAYxZ,gBACxC9X,KAAKsxB,YAAYvZ,OAAO/X,KAAK+zC,SAC7B/zC,KAAKymF,4BAA8BzmF,KAAK2nF,6BAG1C,IAAMa,GAAUxoF,KAAKisC,SAErBjsC,MAAKimF,aAAa3B,iBAClBtkF,KAAKimF,aAAaO,QAAUxmF,KAAK+lF,kBAAmB,EAIhD/lF,KAAKisC,WAAau8C,IAAYxoF,KAAKisC,WACrCjsC,KAAKimF,aAAa9qD,OAAO9hB,QAIrBgsE,EAAVtlF,UAAAoiD,6BACI,MAAO,IAAIjqB,GAAAA,eACTC,iBAAkBn4B,KAAKq1C,sBACvBzD,eAAgB5xC,KAAKmyC,kBACrB58B,MAAOvV,KAAKuoF,iBACZ52E,UAAW3R,KAAKgB,QAIZqkF,EAAVtlF,UAAAs1C,+BAyBI,MAxBAr1C,MAAK8nF,kBAAoB9nF,KAAKq1B,SAASrf,WACpCw+B,oBAAoBx0C,KAAKyoF,wBACzB/zC,wBAAuB,GACvBg0C,UAAS,GACTpzC,gBAEGK,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,SAKVvhB,WAAY,kCAIX10B,KAAK8nF,mBAGNzC,EAAVtlF,UAAA0oF,gCACI,MAAIzoF,MAAK2oF,YACA3oF,KAAK2oF,YAAYhhF,WAGnB3H,KAAK0+D,WAAa1+D,KAAK0+D,WAAWmC,4BAA8B7gE,KAAK09B,UAGtE2nD,EAAVtlF,UAAAwoF,0BACI,MAAOvoF,MAAKimF,aAAalB,YAAc/kF,KAAK4oF,iBAItCvD,EAAVtlF,UAAA6oF,yBACI,MAAO5oF,MAAKyoF,uBAAuBtoF,cAAc6uB,wBAAwBzZ,OAOnE8vE,EAAVtlF,UAAAinF,4BACIhnF,KAAKimF,aAAa/qE,YAAYkC,cAAcpd,KAAKimF,aAAanB,sBAAwB,GAAK,IAIrFO,EAAVtlF,UAAAonF,oBACI,GAAMzmF,GAAUV,KAAK09B,SAASv9B,aAC9B,QAAQO,EAAQqgE,WAAargE,EAAQ+D,WAAazE,KAAKwlF,sCAtkB3DljF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,oDACVK,MACE+lF,sBAAuB,wBACvB1+E,cAAe,2CACf2+E,2BAA4B,uCAC5B15C,+BAAgC,mBAChCnlC,uBAAwB,qDACxBglC,mBAAoB,iEAGpB85C,YAAa,iBACbt5D,SAAU,eACViyC,UAAW,uBACX/xC,YAAa,0BAEfjtB,SAAU,yBACV0H,WAAYg7E,4CA5Fd9iF,KAAEiI,EAAAA,aAZFjI,KAAEs2B,EAAAA,UAqBFt2B,KAAEkH,EAAAA,mBAHFlH,KAAEgB,EAAAA,SARFhB,KAAEiB,EAAAA,oBA+KFjB,SAAAqD,GAAAR,aAAA7C,KAAeuD,EAAAA,OAAfrD,MAAsByiF,QA7LtB3iF,KAAQwc,EAAAA,eAAR3Z,aAAA7C,KA8LesD,EAAAA,aA3JftD,KAAQytC,GAAR5qC,aAAA7C,KA4JesD,EAAAA,WA5JftD,KA4J2B0mF,EAAAA,SAC3B1mF,SAAAqD,GAAAR,aAAA7C,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BrD,MAAkC4G,EAAAA,cArKlC9G,KAAQkB,EAAAA,mCAsIRyiF,eAAA3jF,KAAGoB,EAAAA,MAAHlB,MAAS,qBAMTmmF,cAAArmF,KAAGoB,EAAAA,MAAHlB,MAAS,gCAMTsjF,wBAAAxjF,KAAGoB,EAAAA,MAAHlB,MAAS,kBAMTymF,uBAAA3mF,KAAGoB,EAAAA,MAAHlB,MAAS,8BA1LT6iF,iC+HAA,sBAmBA/iF,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAU0qC,GAAiB9b,EAAAA,cAAe1uB,GAAiBD,EAAAA,cAC3DM,SACE09E,GACAvzC,GACAw0C,GACAL,GACA3+E,IAEFU,cAAeq9E,GAAiBiB,GAAwBL,IACxD56E,WAAY86E,QA7BdgE,KCwBInqE,GAAS,EAIboqE,GAAA,yBA5BA,MAAAA,MA8BaC,GAC8BrlF,EAAcolF,mBAuFvD,QAAFE,GAC4CvhF,EAC9BzI,EACAe,EACAuxC,EAEA23C,GANZ,GAAFlqF,GAOQQ,EAPRoE,KAAAhE,OAAAA,WAC4CZ,GAA5C0I,UAA4CA,EAC9B1I,EAAdC,QAAcA,EACAD,EAAdgB,YAAcA,EACAhB,EAAduyC,eAAcA,EAEAvyC,EAAdkqF,UAAcA,EApEZlqF,EAAFmqF,aAAgB,EAShBnqF,EAAAoqF,OAAiC,UAQjCpqF,EAAAqqF,UAA8B,EAM5BrqF,EAAF4W,SAA0D,cAwBxD5W,EAAF0uB,KAA8C,SAW5C1uB,EAAFymD,IAAgB9mC,OAlHhB,MAsD8Brf,GAA9B2pF,EAAAzpF,GAKEC,OAAFC,eACMupF,EADNtpF,UAAA,aAAE,WAC4B,MAAOC,MAAKwpF,YACxC,SAAUtpF,GACRF,KAAKy9D,UAAUv9D,GACfF,KAAKwpF,OAAStpF,mCAKhBL,OAAFC,eACMupF,EADNtpF,UAAA,eAAE,WACyB,MAAOC,MAAKypF,cACrC,SAAYC,GACV1pF,KAAKypF,SAAWzpE,EAAAA,sBAAsB0pE,oCAWxC7pF,OAAFC,eACMupF,EADNtpF,UAAA,eAAE,WACwB,MAAOC,MAAKgY,cACpC,SAAY9X,GACVF,KAAKgY,SAAW9X,EAChBF,KAAKupF,YAAuB,MAATrpF,IAAiB,GAAGA,GAAQ8I,OAAOX,OAAS,EAC/DrI,KAAK2pF,sDAKP9pF,OAAFC,eACMupF,EADNtpF,UAAA,mBAAE,WAC4B,MAAOC,MAAK4pF,kBACxC,SAAgBC,GACVA,IAAmB7pF,KAAK4pF,eAC1B5pF,KAAK8pF,2BAA2BD,EAAgB7pF,KAAK4pF,cACrD5pF,KAAK4pF,aAAeC,oCASxBhqF,OAAFC,eACMupF,EADNtpF,UAAA,cAAE,WACwB,MAAOC,MAAK+pF,aACpC,SAAWL,GACT1pF,KAAK+pF,QAAU/pE,EAAAA,sBAAsB0pE,oCAoBvCL,EAAFtpF,UAAAiqF,QAAE,WACE,OAA2C,IAApChqF,KAAKgW,SAASvD,QAAQ,UAI/B42E,EAAFtpF,UAAAkqF,QAAE,WACE,OAA4C,IAArCjqF,KAAKgW,SAASvD,QAAQ,WAG/B42E,EAAFtpF,UAAAgC,YAAE,WACM/B,KAAKkqF,aAAelqF,KAAKmqF,eAC3BnqF,KAAK2xC,eAAeyB,kBAAkBpzC,KAAKmqF,cAAenqF,KAAKkqF,cAK3Db,EAAVtpF,UAAA4pF,8BAMI,MALK3pF,MAAKmqF,cAGRnqF,KAAKmqF,cAAcphF,YAAc/I,KAAKi3B,QAFtCj3B,KAAKmqF,cAAgBnqF,KAAKoqF,sBAIrBpqF,KAAKmqF,eAINd,EAAVtpF,UAAAqqF,+BAEI,GAAMC,GAAWrqF,KAAKspF,WAAatpF,KAAK8H,UAClCwiF,EAAeD,EAAS1kD,cAAc,OAwB5C,OArBA2kD,GAAa5/B,aAAa,KAAM,qBAAqB1qD,KAAK6lD,KAC1DykC,EAAajqF,UAAUG,IAAI,qBAC3B8pF,EAAavhF,YAAc/I,KAAKi3B,QAE5Bj3B,KAAKkqF,aACPI,EAAa5/B,aAAa,aAAc1qD,KAAKkqF,aAG/ClqF,KAAKI,YAAYD,cAAc0lC,YAAYykD,GAGN,kBAA1Bt1E,uBACThV,KAAKX,QAAQyB,kBAAkB,WAC7BkU,sBAAsB,WACpBs1E,EAAajqF,UAAUG,IAhBT,wBAoBlB8pF,EAAajqF,UAAUG,IApBL,oBAuBb8pF,GAIDjB,EAAVtpF,UAAA+pF,2BAAA,SAAqCD,EAAwBU,GAEzD,GAAMtzD,GAAUj3B,KAAK2pF,oBAEjBY,IACFvqF,KAAK2xC,eAAeyB,kBAAkBnc,EAASszD,GAG7CV,GACF7pF,KAAK2xC,eAAe4B,SAAStc,EAAS4yD,IAKlCR,EAAVtpF,UAAA09D,UAAA,SAAoB+sB,GACZA,IAAiBxqF,KAAKwpF,SACpBxpF,KAAKwpF,QACPxpF,KAAKI,YAAYD,cAAcE,UAAUC,OAAO,aAAaN,KAAKwpF,QAEhEgB,GACFxqF,KAAKI,YAAYD,cAAcE,UAAUG,IAAI,aAAagqF,oBAzKlEloF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,aACVE,QAAS,8BACTG,MACEC,MAAS,YACT0nF,4BAA6B,UAC7BC,0BAA2B,YAC3BC,0BAA2B,aAC3BC,2BAA4B,aAC5BC,0BAA2B,YAC3BC,0BAA2B,mBAC3BC,2BAA4B,oBAC5BC,0BAA2B,mBAC3BC,2BAA4B,yBAC5BC,6BAA8B,oDAoElC5oF,SAAAqD,GAAAR,aAAA7C,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBrD,MAA0B4G,EAAAA,cAvG1B9G,KAAEgB,EAAAA,SAHFhB,KAAEiI,EAAAA,aALFjI,KAAQ8zC,EAAAA,gBAWR9zC,KAAE6oF,EAAAA,+BAwCFtjC,QAAAvlD,KAAGoB,EAAAA,MAAHlB,MAAS,mBAST4oF,UAAA9oF,KAAGoB,EAAAA,MAAHlB,MAAS,qBAWTwT,WAAA1T,KAAGoB,EAAAA,MAAHlB,MAAS,sBAGTy0B,UAAA30B,KAAGoB,EAAAA,MAAHlB,MAAS,cAUT0nF,cAAA5nF,KAAGoB,EAAAA,MAAHlB,MAAS,yBAWTsrB,OAAAxrB,KAAGoB,EAAAA,MAAHlB,MAAS,kBAGT6oF,SAAA/oF,KAAGoB,EAAAA,MAAHlB,MAAS,qBA1GT6mF,GAsD8BD,gCCtD9B,sBAcA9mF,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEM,EAAAA,WACAJ,IAEFK,SAAU2iF,IACVtiF,cAAesiF,QApBjBiC,KCYaC,GAAwB,GAAI52E,GAAAA,eAAoB,sBAK7D62E,GAAA,wBAWExrF,KAAF2K,KAAoB,KAGlB3K,KAAF+9C,aAA0B,EAMxB/9C,KAAFk/B,cAA2B,EAGzBl/B,KAAF0W,UAA8B,KAO5B1W,KAAF8xE,mBAAgC,EAG9B9xE,KAAF4xE,WAAwB,EAMtB5xE,KAAF6xE,cAA2B,EAxD3B,MAAA2Z,MCkBaC,IAIXC,iBAAkB50E,EAAAA,QAAQ,SACxBC,EAAAA,MAAM,eAAgB7B,EAAAA,OAAO8B,UAAW,sBACxCD,EAAAA,MAAM,UAAW7B,EAAAA,OAAO8B,UAAW,oBACnCE,EAAAA,WAAW,qCACPC,EAAAA,QAAW+iB,GAAmByxD,QADtC,IACiDvxD,GAAgBwxD,qBAC7D10E,EAAAA,WAAW,kBACPC,EAAAA,QAAW+iB,GAAmB2xD,QADtC,IACiDzxD,GAAgB0xD,uCCyD/D,QAAFC,GACY3rF,EACAd,EACAs7B,EACRoxD,EAC8BnkF,EAEvBokF,GAPT,GAAF7sF,GAQIQ,EARJoE,KAAAhE,OAAAA,WACYZ,GAAZgB,YAAYA,EACAhB,EAAZE,mBAAYA,EACAF,EAAZw7B,kBAAYA,EAIDx7B,EAAX6sF,kBAAWA,EAxBT7sF,EAAFw0B,gBAAmD,OAGjDx0B,EAAFkzE,uBAA2B,GAAI55D,GAAAA,aAM/BtZ,EAAA8sF,4BAA4D,KAkBxD9sF,EAAK0I,UAAYD,EACjBzI,EAAK+sF,wBAA0BH,EAC5Bx0D,SAASC,EAAAA,YAAY20D,OAAQ30D,EAAAA,YAAY40D,MAAO50D,EAAAA,YAAY60D,SAC5DhrF,UAAU,WACTlC,EAAKmtF,aAAa,oCACdP,EAAmBQ,UAAU/0D,EAAAA,YAAY20D,SAC7ChtF,EAAKmtF,aAAa,mCACdP,EAAmBQ,UAAU/0D,EAAAA,YAAY40D,QAC7CjtF,EAAKmtF,aAAa,oCACdP,EAAmBQ,UAAU/0D,EAAAA,YAAY60D,aAvCrD,MAJ6C5sF,GAA7CqsF,EAAAnsF,GAgDEmsF,EAAFhsF,UAAA+zB,sBAAE,SAAyBC,GAIvB,MAHA/zB,MAAKysF,0BACLzsF,KAAK0sF,iBACL1sF,KAAKyyE,gCACEzyE,KAAKk0B,cAAcJ,sBAAsBC,IAIlDg4D,EAAFhsF,UAAAo0B,qBAAE,SAAwBJ,GAItB,MAHA/zB,MAAKysF,0BACLzsF,KAAK0sF,iBACL1sF,KAAKyyE,gCACEzyE,KAAKk0B,cAAcC,qBAAqBJ,IAIjDg4D,EAAFhsF,UAAAw0B,MAAE,WACOv0B,KAAK0a,aACR1a,KAAK4zB,gBAAkB,UACvB5zB,KAAKV,mBAAmBqsB,kBAK5BogE,EAAFhsF,UAAAiyB,KAAE,WACOhyB,KAAK0a,aACR1a,KAAK4zB,gBAAkB,SACvB5zB,KAAKV,mBAAmBsB,iBAI5BmrF,EAAFhsF,UAAAgC,YAAE,WACE/B,KAAKmsF,wBAAwBx4E,cAC7B3T,KAAK0a,YAAa,GAGpBqxE,EAAFhsF,UAAA2/C,iBAAE,SAAiBtmC,GACO,WAAlBA,EAAMD,QACRnZ,KAAKu7B,gBACsB,YAAlBniB,EAAMD,SAAyBnZ,KAAKisF,kBAAkBra,WAC/D5xE,KAAKs7B,aAGPt7B,KAAKsyE,uBAAuBj5D,KAAKD,IAGnC2yE,EAAFhsF,UAAA4yE,kBAAE,SAAkBv5D,GAChBpZ,KAAKsyE,uBAAuBj5D,KAAKD,IAG3B2yE,EAAVhsF,UAAAwsF,aAAA,SAAuB53D,EAAkBn0B,GACrC,GAAMH,GAAYL,KAAKI,YAAYD,cAAcE,SACjDG,GAAMH,EAAUG,IAAIm0B,GAAYt0B,EAAUC,OAAOq0B,IAG3Co3D,EAAVhsF,UAAA0sF,mCACI,GAAIzsF,KAAKk0B,cAAcpc,cACrB,KAAM8c,OAAM,gFAIRm3D,EAAVhsF,UAAA2sF,0BACI,GAAMhsF,GAAuBV,KAAKI,YAAYD,cACxCu0B,EAAa10B,KAAKisF,kBAAkBv3D,UAEtCpsB,OAAMkE,QAAQkoB,GAEhBA,EAAW9nB,QAAQ,SAAA+nB,GAAY,MAAAj0B,GAAQL,UAAUG,IAAIm0B,KAC5CD,GACTh0B,EAAQL,UAAUG,IAAIk0B,IAMlBq3D,EAAVhsF,UAAAu7B,sBACSt7B,KAAKq7B,aACRr7B,KAAKq7B,WAAar7B,KAAK46B,kBAAkBjC,OAAO34B,KAAKI,YAAYD,gBAGnEH,KAAKq7B,WAAWU,gCAIVgwD,EAAVhsF,UAAAw7B,yBACI,GAAMm3C,GAAU1yE,KAAKksF,2BAGjBlsF,MAAKisF,kBAAkBpa,cAAgBa,GAAoC,kBAAlBA,GAAQz4D,OACnEy4D,EAAQz4D,QAGNja,KAAKq7B,YACPr7B,KAAKq7B,WAAWkB,WAKZwvD,EAAVhsF,UAAA0yE,mDACIzyE,MAAKksF,4BAA8BlsF,KAAK8H,UAAsC,cAG1E9H,KAAKI,YAAYD,cAAc8Z,OACjC9F,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAKgB,YAAYD,cAAc8Z,0BA1KlE3X,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEG,SAAU,8CACVC,QAAF,0nBACEM,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEyW,YAAF8xE,GAAAC,kBACE5oF,MACFC,MAAe,6BACTkpD,SAAN,KACIliD,KAAJ,SACI8oE,aAAJ,OACIhkC,oBAAJ,+BACIha,WAAY,kBACZ83D,iBAAJ,4BACI73D,gBAAJ,mHA1CAxyB,KAAEsqF,EAAAA,mBAGFtqF,KAAEy2B,EAAAA,qBAiBFz2B,SAAmBqD,GAAnBR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,cALA9G,KAAQkpF,MACRO,EAAAtoF,6EAmCAsoF,mDCjEA,sBAgBAzpF,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACA2uB,EAAAA,cACA1uB,GACAC,EAAAA,cAEFI,SAAUqlF,GAAyB1lF,IACnCU,cAAeglF,IACf/2D,iBAAkB+2D,QAzBpBc,KCmBAC,GAAA,WAmBE,QAAFA,GACIz7D,EACQC,EAER4nC,GAJF,GAAF95D,GAAAY,IAEYA,MAAZsxB,YAAYA,EAVZtxB,KAAAuxB,gBAAqC,GAAI9xB,GAAAA,QAGzCO,KAAAwxB,aAAkC,GAAI/xB,GAAAA,QAUlCO,KAAKqxB,kBAAoBA,EAGzBA,EAAkBihD,uBAAuBlxE,KACvCqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,SAApBA,EAAMi6D,WAA0C,YAAlBj6D,EAAMD,UACpDzM,EAAAA,KAAK,IAENpL,UAAU,WACTlC,EAAKoyB,aAAaxvB,OAClB5C,EAAKoyB,aAAavvB,aAIpBovB,EAAkBihD,uBAAuBlxE,KACvCqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,SAApBA,EAAMi6D,WAA0C,WAAlBj6D,EAAMD,UACpDzM,EAAAA,KAAK,IAENpL,UAAU,WACTlC,EAAKkyB,YAAYmB,UACjBrzB,EAAKmyB,gBAAgBvvB,KAAK5C,EAAKk0E,SAC/Bl0E,EAAKmyB,gBAAgBtvB,aAGlBovB,EAAkB46D,kBAAkB/sD,cACvC/9B,EAAAA,MACEmwB,EAAYsM,gBACZtM,EAAY+wB,gBAAgBjhD,KAAKqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAAA,GAAMyC,UAAYu4B,EAAAA,WACnE9yC,UAAU,WAAM,MAAAlC,GAAKwyB,YAtE7B,MA8EEk7D,GAAF/sF,UAAA6xB,QAAE,SAAQ2Y,GAAR,GAAFnrC,GAAAY,IACSA,MAAKuxB,gBAAgBQ,SAExB/xB,KAAKqxB,kBAAkBihD,uBAAuBlxE,KAC5CqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,UAApBA,EAAMi6D,YACtB3mE,EAAAA,KAAK,IACLpL,UAAU,WAAM,MAAAlC,GAAKkyB,YAAYkiD,mBAEnCxzE,KAAKszE,QAAU/oC,EACfvqC,KAAKqxB,kBAAkBW,SAK3B86D,EAAF/sF,UAAA4yB,eAAE,WACE,MAAO3yB,MAAKuxB,gBAAgBqB,gBAI9Bk6D,EAAF/sF,UAAA8yB,YAAE,WACE,MAAO7yB,MAAKwxB,aAAaoB,gBAM3Bk6D,EAAF/sF,UAAA69B,cAAE,WACE,MAAO59B,MAAKsxB,YAAYsM,iBAM1BkvD,EAAF/sF,UAAAsiD,cAAE,WACE,MAAOriD,MAAKsxB,YAAY+wB,iBAhH5ByqC,KC+BaC,GACT,GAAIp4E,GAAAA,eAAqC,kDAuB3C,QAAFq4E,GACc33D,EACAE,EACwB03D,EACZ/zB,EAERrnB,GALJ7xC,KAAdq1B,SAAcA,EACAr1B,KAAdu1B,UAAcA,EACwBv1B,KAAtCitF,mBAAsCA,EACZjtF,KAA1Bk5D,UAA0BA,EAERl5D,KAAlB6xC,gBAAkBA,EAtBlB7xC,KAAAktF,2BAAsE,KAvCtE,MA0CErtF,QAAFC,eAAMktF,EAANjtF,UAAA,6BAAE,WACE,GAAM61B,GAAS51B,KAAKitF,kBACpB,OAAOr3D,GAASA,EAAOu3D,sBAAwBntF,KAAKktF,gCAGtD,SAA0BhtF,GACpBF,KAAKitF,mBACPjtF,KAAKitF,mBAAmBE,sBAAwBjtF,EAEhDF,KAAKktF,2BAA6BhtF,mCAiBtC8sF,EAAFjtF,UAAAo2B,KAAE,SAA0B0+C,EACT7+C,GADjB,GAAF52B,GAAAY,KAGUq2B,EACFy+C,EAAqB90E,KAAK6xC,iBAAmB,GAAI25C,IAAwBx1D,GACvEQ,EAAax2B,KAAKm3B,eAAed,GACjCe,EAAYp3B,KAAKotF,iBAAiB52D,EAAYH,GAC9Cg3D,EAAM,GAAIP,IAAwB11D,EAAWZ,EAAYx2B,KAAKk5D,UAEpE,IAAI2b,YAAkCr/D,GAAAA,YACpC4hB,EAAUjD,qBAAqB,GAAI7d,GAAAA,eAAkBu+D,EAAsB,MACzEx9C,UAAWhB,EAAQ1rB,KACnB2iF,eAAgBD,SAEb,CACL,GAAMt5D,GAAS,GAAI+C,GAAAA,gBAAgB+9C,MAAwBlvE,GACrD3F,KAAKs3B,gBAAgBjB,EAASg3D,IAC9B91D,EAAaH,EAAUtD,sBAAsBC,EACnDs5D,GAAIr2D,SAAWO,EAAWP,SAuB5B,MAnBAq2D,GAAI16D,iBAAiBrxB,UAAU,WAEzBlC,EAAK+tF,uBAAyBE,IAChCjuF,EAAK+tF,sBAAwB,QAI7BntF,KAAKmtF,uBAGPntF,KAAKmtF,sBAAsBx6D,iBAAiBrxB,UAAU,WAAM,MAAA+rF,GAAIh8D,kBAAkBkD,UAClFv0B,KAAKmtF,sBAAsBv7D,WAG3By7D,EAAIh8D,kBAAkBkD,QAGxBv0B,KAAKmtF,sBAAwBE,EAEtBA,GAMTL,EAAFjtF,UAAA6xB,QAAE,WACM5xB,KAAKmtF,uBACPntF,KAAKmtF,sBAAsBv7D,WAI/Bo7D,EAAFjtF,UAAAgC,YAAE,WACM/B,KAAKktF,4BACPltF,KAAKktF,2BAA2Bt7D,WAO5Bo7D,EAAVjtF,UAAAqtF,iBAAA,SAA2B52D,EACAR,GAEvB,GAAMS,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAW,GAAIqB,WACrE40D,GAAsBx1D,MAGnBa,EACF,GAAIC,GAAAA,gBAAgBi1D,GAAyB/1D,EAAO3e,iBAAkBqf,EAE1E,OAD4DF,GAAWze,OAAO8e,GAC1DG,UAOdg2D,EAAVjtF,UAAAo3B,eAAA,SAAyBnB,GACrB,GAAMiC,GAAgB,GAAIC,GAAAA,eACxBvmB,UAAWqkB,EAAOrkB,UAClBosC,YAAa/nB,EAAO+nB,YACpB23B,oBAAqB1/C,EAAO87C,kBAC5BJ,SAAU,OACV9/B,eAAgB5xC,KAAKq1B,SAASk4D,iBAAiBC,QAC/Cr1D,iBAAkBn4B,KAAKq1B,SAASrf,WAC7BoiB,SACAK,qBACAC,OAAO,MAOZ,OAJI1C,GAAO2nB,gBACT1lB,EAAc0lB,cAAgB3nB,EAAO2nB,eAGhC39C,KAAKq1B,SAASsD,OAAOV,IAQtB+0D,EAAVjtF,UAAAu3B,gBAAA,SAA6BtB,EACAs3D,GAEzB,GAAM72D,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,SAC5Ei/C,EAAkB,GAAI/+C,WACzBk2D,GAAmBQ,IACnB/B,GAAuBv1D,EAAOrrB,OAWjC,QARIqrB,EAAOrkB,WACL8kB,GAAiBA,EAAa5xB,IAA2Bia,EAAAA,eAAgB,OAC7E62D,EAAgBh8C,IAAI7a,EAAAA,gBAClB5e,MAAO81B,EAAOrkB,UACd1Q,OAAQC,EAAAA,OAIL,GAAIy1B,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAWogD,mBAzJ9DrzE,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAYi4E,2CA5BzBvqF,KAAQs2B,EAAAA,UAKRt2B,KAAEw2B,EAAAA,WA4CFx2B,KAA0D0qF,EAA1D7nF,aAAA7C,KAAOsD,EAAAA,WAAPtD,KAAmBwgB,EAAAA,aApCnBxgB,KAAQ6zE,EAAAA,SAARhxE,aAAA7C,KAqCOsD,EAAAA,aAnCPtD,KAA+BkpF,GAA/BrmF,aAAA7C,KAoCOsD,EAAAA,WApCPtD,KAoCmBuD,EAAAA,OApCnBrD,MAoC0BuqF,uMA5D1BC,KjBoCMS,GAA6B,SAM7BC,IACJ,aACA,kBACA,kBACA,oBACA,qBACA,eACA,WAKFC,GAAA,WACE,QAAFA,GAAqBvtF,GAAAJ,KAArBI,YAAqBA,EAvDrB,MAAAutF,MA0DaC,GAELpmF,EAAWzD,EAAcD,EAAmB6pF,qBAiClD,QAAFzM,GAAcv5E,EAMQC,EACA1D,EAE0Cy5B,GAT9D,GAAFv+B,GAUIQ,EAVJoE,KAAAhE,KAUU2H,IAVV3H,IAMsBZ,GAAtBwI,UAAsBA,EACAxI,EAAtB8E,cAAsBA,EAE0C9E,EAAhEu+B,eAAgEA,EAjB9Dv+B,EAAFyuF,cAAoCzuF,EAAK0uF,mBAAmB,UAAW,gBAGrE1uF,EAAF2uF,aAAmC3uF,EAAK0uF,mBAAmB,kBAmBvD,KAAmB,GAAvBrhC,GAAA,EAAuBuhC,EAAvBN,GAAuBjhC,EAAvBuhC,EAAA3lF,OAAuBokD,IAAwB,CAAtC,GAAMmM,GAAfo1B,EAAAvhC,EACUrtD,GAAK0uF,mBAAmBl1B,IACzBjxD,EAAuC,cAAEtH,UAAUG,IAAIo4D,SAI5Dx5D,GAAK8E,cAAcU,QAAQxF,EAAKgB,aAAa,GAEzChB,EAAKyuF,gBACPzuF,EAAKyoD,MAAQ4lC,MAzBnB,MAV+B/tF,GAA/BwhF,EAAAthF,GAuCEshF,EAAFnhF,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,cAIzC8gF,EAAFnhF,UAAAka,MAAE,WACEja,KAAKgmB,kBAAkB/L,SAGzBinE,EAAFnhF,UAAAimB,gBAAE,WACE,MAAOhmB,MAAKI,YAAYD,eAG1B+gF,EAAFnhF,UAAAwoC,kBAAE,WACE,MAAOvoC,MAAKwoC,eAAiBxoC,KAAKyE,UAIpCy8E,EAAFnhF,UAAA+tF,mBAAE,WAAF,IAAqB,GAArB1uF,GAAAY,KAAAw7D,KAAA/O,EAAA,EAAqBA,EAArBz8C,UAAA3H,OAAqBokD,IAAA+O,EAArB/O,GAAAz8C,UAAAy8C,EACI,OAAO+O,GAAW1yD,KAAK,SAAAmlF,GAAa,MAAA7uF,GAAK4mB,kBAAkBykC,aAAawjC,qBA1E5E3rF,KAACC,EAAAA,UAADC,OAAAC,SAAA,iMACEC,SAAU,YACVI,MAGF2+D,aAAA,mBACM3wC,kCAAN,uCAEAluB,SAAA,mVACAC,QAAA;8jMACEF,QAAF,WAAA,gBAAA,SACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhEAf,KAAE2D,EAAAA,eAJF3D,KAAQyD,OAAQZ,aAAhB7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,4BA6FAmwD,EAAAz9E,uDAXAy9E,uCAgFE18C,+FASFxkC,KAAAyE,8BAEQ2U,EAAR+nE,6BAGAC,EAAAj8E,aACA7C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,gLAxCAK,MAKMqgC,kBAAN,4JAIIrS,kCAAJ,uCAEAnuB,QAAA,WAAA,gBAAA,SACAC,SAAA,mVACAC,QAAA,sjMACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAIA+9E,EAAAj5D,eAAA,WAAA,QACA7lB,KAAAoD,EAAAA,kJA9JA07E,EAAA39E,gBAKAY,WAAA/B,KAAAoB,EAAAA,4CCbA,sBAcApB,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAG,GACAF,IAEFK,SACEw6E,GACAE,GACA/6E,IAEFU,cACEm6E,GACAE,QA3BJ14D,KC2Da24D,GACT,GAAI1sE,GAAAA,eAA8C,qCASzC2sE,IACXj3E,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAmpE,MAC9BvgD,OAAO,GAOTwgD,GAAA,yBA/EA,MAAAA,MAiFIC,GAAmB,EAGvBC,GAAA,WACE,QAAFA,GAEW7yD,EAGA3uB,GAHAF,KAAX6uB,OAAWA,EAGA7uB,KAAXE,MAAWA,EA1FX,MAAAwhF,oBAgNE,QAAFH,GACY16C,EAEJ86C,GAFI3hF,KAAZ6mC,gBAAYA,EAnGZ7mC,KAAAqqB,WAAsB,EACtBrqB,KAAAskD,WAAsB,EACtBtkD,KAAAknC,WAAsB,EAepBlnC,KAAFouB,8BAAwD,aAGtDpuB,KAAF6kD,WAA0B,aAkB1B7kD,KAAA8mC,MAAkB,2BAA2B26C,KA8B3CzhF,KAAFquB,YAAmC,GAAI3V,GAAAA,aA2BrC1Y,KAAFiB,OACM,GAAIyX,GAAAA,aAOJ1Y,KAAK4hF,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,WAtNpF,MA2IE/hF,QAAFC,eACMyhF,EADNxhF,UAAA,YAAE,WACqB,MAAOC,MAAK8mC,WACjC,SAAS5mC,GAAT,GAAFd,GAAAY,IACIA,MAAK8mC,MAAQ5mC,EAETF,KAAK6hF,gBACP7hF,KAAK6hF,eAAej1E,QAAQ,SAAAq1B,GAAU,MAAAA,GAAOje,KAAO5kB,EAAK0nC,yCAM7DjnC,OAAFC,eACMyhF,EADNxhF,UAAA,gBAAE,WAC0B,MAAOC,MAAKqqB,eACtC,SAAanqB,GACXF,KAAKqqB,UAAYrK,EAAAA,sBAAsB9f,oCAIzCL,OAAFC,eACMyhF,EADNxhF,UAAA,aAAE,WAEE,GAAMqmB,GAAWpmB,KAAK2pC,gBAAkB3pC,KAAK2pC,gBAAgBvjB,WAE7D,OAAIpmB,MAAK2sC,SACAvmB,EAAS3X,IAAI,SAAAwzB,GAAU,MAAAA,GAAO/hC,QAGhCkmB,EAAS,GAAKA,EAAS,GAAGlmB,UAAQyF,QAE3C,SAAU0/B,GACRrlC,KAAKwmD,qBAAqBnhB,GAC1BrlC,KAAKquB,YAAYhV,KAAKrZ,KAAKE,wCAW7BL,OAAFC,eAAMyhF,EAANxhF,UAAA,gBAAE,WACE,GAAMqmB,GAAWpmB,KAAK2pC,gBAAgBvjB,QACtC,OAAOpmB,MAAK2sC,SAAWvmB,EAAYA,EAAS,IAAM,sCAIpDvmB,OAAFC,eACMyhF,EADNxhF,UAAA,gBAAE,WAC0B,MAAOC,MAAKskD,eACtC,SAAapkD,GACXF,KAAKskD,UAAYtkC,EAAAA,sBAAsB9f,oCAIzCL,OAAFC,eACMyhF,EADNxhF,UAAA,gBAAE,WAC0B,MAAOC,MAAKknC,eACtC,SAAahnC,GACXF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,GAEnCF,KAAK6hF,gBACP7hF,KAAK6hF,eAAej1E,QAAQ,SAAAq1B,GAAU,MAAAA,GAAO0F,mDAiBjD45C,EAAFxhF,UAAAsW,SAAE,WACErW,KAAK2pC,gBAAkB,GAAImc,GAAAA,eAAgC9lD,KAAK2sC,aAAUhnC,IAAW,IAGvF47E,EAAFxhF,UAAAc,mBAAE,kBACEwS,EAAArT,KAAK2pC,iBAAgBsc,OAAzBz3C,MAAA6E,EAAmCrT,KAAK6hF,eAAep5E,OAAO,SAAAw5B,GAAU,MAAAA,GAAOf,YAO7EqgD,EAAFxhF,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKE,MAAQA,EACbF,KAAK6mC,gBAAgBjmC,gBAIvB2gF,EAAFxhF,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAKouB,8BAAgCe,GAIvCoyD,EAAFxhF,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GAIpBoyD,EAAFxhF,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,GAIlBiyD,EAAFxhF,UAAAwsB,iBAAE,WACE,GAAMnG,GAAWpmB,KAAKomB,SAChByI,EAASvmB,MAAMkE,QAAQ4Z,GAAYA,EAASA,EAAS/d,OAAS,GAAK+d,EACnEhN,EAAQ,GAAIsoE,IAAqB,EAAU1hF,KAAKE,MACtDF,MAAKouB,8BAA8BhV,EAAMlZ,OACzCF,KAAKiB,OAAOoY,KAAKD,IASnBmoE,EAAFxhF,UAAA+hF,kBAAE,SAAkB7/C,EAAyBgkB,EAAiB6C,OAA9D,KAAAA,IAA8DA,GAA9D,GAGS9oD,KAAK2sC,WAAY3sC,KAAKomB,UAAa6b,EAAOf,UAC5ClhC,KAAgC,SAAEkhC,SAAU,GAG3C+kB,EACFjmD,KAAK2pC,gBAAgBsc,OAAOhkB,GAE5BjiC,KAAK2pC,gBAAgBwc,SAASlkB,GAI5B6mB,GACF9oD,KAAKusB,mBAKPvsB,KAAKquB,YAAYhV,KAAKrZ,KAAKE,QAI7BqhF,EAAFxhF,UAAAgiF,YAAE,SAAY9/C,GACV,MAAOjiC,MAAK2pC,gBAAgBsf,WAAWhnB,IAIzCs/C,EAAFxhF,UAAAiiF,cAAE,SAAc//C,GACZ,WAA8B,KAAnBjiC,KAAKiiF,YAIZjiF,KAAK2sC,UAAYrkC,MAAMkE,QAAQxM,KAAKiiF,WAC/BjiF,KAAKiiF,UAAUn5E,KAAK,SAAA5I,GAAS,MAAgB,OAAhB+hC,EAAO/hC,OAAiBA,IAAU+hC,EAAO/hC,QAGxE+hC,EAAO/hC,QAAUF,KAAKiiF,YAIvBV,EAAVxhF,UAAAymD,qBAAA,SAA+BtmD,aAG3B,IAFAF,KAAKiiF,UAAY/hF,EAEZF,KAAK6hF,eAIV,GAAI7hF,KAAK2sC,UAAYzsC,EAAO,CAC1B,IAAKoI,MAAMkE,QAAQtM,GACjB,KAAM00B,OAAM,qDAGd50B,MAAK8/E,kBACL5/E,EAAM0M,QAAQ,SAACs7C,GAAsB,MAAA9oD,GAAK+oD,aAAaD,SAEvDloD,MAAK8/E,kBACL9/E,KAAKmoD,aAAajoD,IAKdqhF,EAAVxhF,UAAA+/E,2BACI9/E,KAAK2pC,gBAAgB5R,QACrB/3B,KAAK6hF,eAAej1E,QAAQ,SAAAq1B,GAAU,MAAAA,GAAOf,SAAU,KAIjDqgD,EAAVxhF,UAAAooD,aAAA,SAAuBjoD,GACnB,GAAMmoD,GAAsBroD,KAAK6hF,eAAelgF,KAAK,SAAAsgC,GACnD,MAAuB,OAAhBA,EAAO/hC,OAAiB+hC,EAAO/hC,QAAUA,GAG9CmoD,KACFA,EAAoBnnB,SAAU,EAC9BlhC,KAAK2pC,gBAAgBsc,OAAOoC,oBAtPlC/lD,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,0BACV2H,WACEk3E,IACCj3E,QAASm3E,GAA8Bl3E,YAAai3E,IAEvDz+E,MACEiH,KAAQ,QACRhH,MAAS,0BACTuC,uBAAwB,WACxB48E,qCAAsC,WACtCC,sDAAuD,6BAEzDz/E,SAAU,+DA5FZJ,KAAEiB,EAAAA,oBAmMFjB,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB6+E,2BA7ExBQ,iBAAAv/E,KAAG0I,EAAAA,gBAAHxI,MAAmB4V,EAAAA,WAAW,WAAM,MAAAgqE,SAGpCR,aAAAt/E,KAAGoB,EAAAA,QAGHsgB,OAAA1hB,KAAGoB,EAAAA,QAYHinB,WAAAroB,KAAGoB,EAAAA,QAOHxD,QAAAoC,KAAGoB,EAAAA,QAoBH2qB,cAAA/rB,KAAGsX,EAAAA,SASH+yB,WAAArqC,KAAGoB,EAAAA,QAOHe,WAAAnC,KAAGoB,EAAAA,QAWHzC,SAAAqB,KAAGsX,EAAAA,UA7MH2nE,KA2VAc,GAAA,yBA3VA,MAAAA,MA4VaC,GACTx+E,EAAmBu+E,mBA0GrB,QAAFD,GAA0BG,EACJjjF,EACAc,EACA8D,EAEe89D,EAEnB2f,GAPhB,GAAFviF,GAQIQ,EARJoE,KAAAhE,OAAAA,IACsBZ,GAAtBE,mBAAsBA,EACAF,EAAtBgB,YAAsBA,EACAhB,EAAtB8E,cAAsBA,EAjFtB9E,EAAAojF,mBAA8B,EAC9BpjF,EAAAqiC,UAAqB,EAWnBriC,EAAFuX,eAA4D,KA4D5DvX,EAAA8nC,WAA+B,EAG7B9nC,EAAF6B,OACM,GAAIyX,GAAAA,YAYN,IAAMupD,GAAiBj4D,OAAOg4D,SAC9B5iE,GAAKiF,SAAY49D,GAAqC,IAAnBA,EAAwBA,EAAiB,KAC5E7iE,EAAKqjF,kBAAoBF,EACzBnjF,EAAKwiF,WACDD,GAAkBA,EAAeC,WAAaD,EAAeC,WAAa,aAjBlF,MA9EqCliF,GAArC0iF,EAAAxiF,GA0BEC,OAAFC,eAAMsiF,EAANriF,UAAA,gBAAE,WAAyB,MAAUC,MAAKyiB,GAA1C,2CAeE5iB,OAAFC,eACMsiF,EADNriF,UAAA,kBAAE,WAEE,MAAOC,MAAKyiF,kBAAoBziF,KAAKyiF,kBAAkBb,WAAa5hF,KAAK0iF,iBAE3E,SAAexiF,GACbF,KAAK0iF,YAAcxiF,mCAKrBL,OAAFC,eACMsiF,EADNriF,UAAA,eAAE,WAEE,MAAOC,MAAKyiF,kBAAoBziF,KAAKyiF,kBAAkBV,YAAY/hF,MAAQA,KAAKyhC,cAElF,SAAYvhC,GACV,GAAMmlC,GAAWrlB,EAAAA,sBAAsB9f,EAEnCmlC,KAAarlC,KAAKyhC,WACpBzhC,KAAKyhC,SAAW4D,EAEZrlC,KAAKyiF,mBACPziF,KAAKyiF,kBAAkBX,kBAAkB9hF,KAAMA,KAAKyhC,UAGtDzhC,KAAKV,mBAAmBsB,iDAK5Bf,OAAFC,eACMsiF,EADNriF,UAAA,gBAAE,WAEE,MAAOC,MAAKknC,WAAclnC,KAAKyiF,mBAAqBziF,KAAKyiF,kBAAkBh+E,cAE7E,SAAavE,GAAkBF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,oCAwBtEkiF,EAAFriF,UAAAsW,SAAE,WACErW,KAAKwiF,kBAAoBxiF,KAAKyiF,oBAAsBziF,KAAKyiF,kBAAkB91C,SAC3E3sC,KAAK+3E,MAAQ/3E,KAAKwiF,kBAAoB,QAAU,WAChDxiF,KAAKyiB,GAAKziB,KAAKyiB,IAAM,qBAAqBg/D,KAEtCzhF,KAAKwiF,oBACPxiF,KAAKgkB,KAAOhkB,KAAKyiF,kBAAkBz+D,MAGjChkB,KAAKyiF,mBAAqBziF,KAAKyiF,kBAAkBT,cAAchiF,QACjEA,KAAKkhC,SAAU,GAGjBlhC,KAAKkE,cAAcU,QAAQ5E,KAAKI,aAAa,IAG/CgiF,EAAFriF,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,cAIzCgiF,EAAFriF,UAAAka,MAAE,WACEja,KAAK2iF,eAAexiF,cAAc8Z,SAIpCmoE,EAAFriF,UAAA6iF,eAAE,WACE,GAAMC,KAAa7iF,KAAKwiF,oBAA4BxiF,KAAKyhC,QAErDohD,KAAe7iF,KAAKyhC,WACtBzhC,KAAKyhC,SAAWohD,EACZ7iF,KAAKyiF,oBACPziF,KAAKyiF,kBAAkBX,kBAAkB9hF,KAAMA,KAAKyhC,UAAU,GAC9DzhC,KAAKyiF,kBAAkB59B,eAI3B7kD,KAAKiB,OAAOoY,KAAK,GAAIqoE,IAAsB1hF,KAAMA,KAAKE,SAQxDkiF,EAAFriF,UAAA4nC,cAAE,WAGE3nC,KAAKV,mBAAmBsB,+BAxK5B0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEG,SAAU,ykBACVC,QAAF,60FACEG,cAAFC,EAAAA,kBAAmCC,KACjCR,SAAF,kBACES,gBAAFC,EAAAA,wBAAAC,OACEV,QAAF,iBACEG,MACFggF,uCAAA,qBACMC,oCAAN,UACIC,qCAAsC,WACtCC,gDAAJ,4BACIlgF,MAAJ,4DAKIysB,UAAJ,uHAsFAltB,KAAuCiI,EAAAA,aAxbvCjI,KAAE2D,EAAAA,eAIF3D,KAAEyD,OAAFZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAXAF,SAAQqD,GAARR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA6+E,SAqcAe,EAAA3+E,wHA7EAk/E,iBAAArgF,KAAQmU,EAAAA,UAARjU,MAAA,YAKAigB,KAAAngB,KAAAoB,EAAAA,QAKAsgB,OAAA1hB,KAAAoB,EAAAA,QASAxD,QAAAoC,KAAAoB,EAAAA,QAGAW,WAAA/B,KAAAoB,EAAAA,QAGAk+E,aAAAt/E,KAAQoB,EAAAA,QAGRw9B,UAAA5+B,KAAAoB,EAAAA,QAGAe,WAAAnC,KAAAoB,EAAAA,QAUAzC,SAAAqB,KAAAsX,EAAAA,UA2BAwoE,mCCpcA,sBAaA9/E,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,GAAiBE,IAC3BG,SAAUL,GAAiBk7E,GAAsBa,IACjDr7E,cAAew6E,GAAsBa,QAhBvCc,iCCAA,sBAqBA5gF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mBACVK,MAAOC,MAAS,wBAvBlBogF,iCAAA,sBA+BA7gF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mDACVK,MACEC,MAAS,sBAlCbqgF,iCAAA,sBA2CA9gF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,4DACVK,MACEC,MAAS,yBA9CbsgF,gCAiEErjF,KAAFsjF,MAAoC,QAjEpC,sBAuDAhhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mBACVC,SAAU,iBACVI,MACEC,MAAS,mBACTwgF,qCAAsC,yCAK1CD,QAAAhhF,KAAGoB,EAAAA,SAjEH8/E,iCAAA,sBAwEAlhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBACVK,MAAOC,MAAS,uBA1ElB0gF,iCAAA,sBAkFAnhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mCACVK,MAAOC,MAAS,sBApFlB2gF,iCAAA,sBA4FAphF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,2CACVK,MAAOC,MAAS,yBA9FlB4gF,iCAAA,sBAsGArhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,4CACVK,MAAOC,MAAS,yBAxGlB6gF,iCAAA,sBAgHAthF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,2CACVK,MAAOC,MAAS,yBAlHlB8gF,iCAAA,sBA0HAvhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,4CACVK,MAAOC,MAAS,yBA5HlB+gF,iCAAA,sBAoIAxhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,qCACVK,MAAOC,MAAS,uBAtIlBghF,iCA+JA,sBATAzhF,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVE,SAAU,8EACVC,QAAF,01EACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MAAFC,MAAA,gBAGAihF,iCAcA,yWALAhhF,cAAAC,EAAAA,kBAAAC,KACEC,gBAAiBC,EAAAA,wBAAnBC,OACEP,MAAQC,MAAV,uBAGAkhF,iCAcA,0YAHAnhF,MAAAC,MAAA,4BAGAmhF,iCC3LA,sBA4BA5hF,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,IACVK,SACEs9E,GACAC,GACAC,GACAf,GACAC,GACAC,GACAG,GACAC,GACAE,GACAC,GACAC,GACAH,GACAI,GACAC,GACA19E,IAEFU,cACEi9E,GAASC,GAAeC,GAAmBf,GAAgBC,GAAcC,GACzEG,GAAgBC,GAAeE,GAAgBC,GAAgBC,GAAgBH,GAC/EI,GAAgBC,QAlDpBI,KCsBa5H,GACT,GAAI5nE,GAAAA,eAAuC,6BX0B3CisB,GAAe,EAKfk7C,GAAyB,EAOhBQ;uEACXjyE,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAiiE,MAC9Br5C,OAAO,OASPs5C,KAAF,EAEEC,QAAF,EAEEC,UAAF,EAEEC,cAAF,EANAC,IAAAA,GAAEJ,MAAF,OAEAI,GAAAA,GAAEH,SAAF,UAEAG,GAAAA,GAAEF,WAAF,YAEAE,GAAAA,GAAED,eAAF,eAIA,IAAAE,IAAA,yBAnFA,MAAAA,MA4FAC,GAAA,WACE,QAAFA,GAAqBx6E,GAAAJ,KAArBI,YAAqBA,EA7FrB,MAAAw6E,MA+FaC,GAMLh3E,EAAc2D,EAAW1D,EAAmBC,EAAc62E,KAAmB,0BA8FnF,QAAFP,GAAc1yE,EACQrI,EACA4E,EACA7E,EACegF,EAEXy2E,EACsCn9C,GAP9D,GAAFv+B,GAQIQ,EARJoE,KAAAhE,KAQU2H,IARV3H,WACsBZ,GAAtBE,mBAAsBA,EACAF,EAAtB8E,cAAsBA,EACA9E,EAAtBC,QAAsBA,EAGID,EAA1B07E,aAA0BA,EACsC17E,EAAhEu+B,eAAgEA,EA9D9Dv+B,EAAFsX,UAA2C,GAKzCtX,EAAFuX,eAA4D,KAE5DvX,EAAAmiC,UAA8B,mBAAkBX,GAG9CxhC,EAAFqjB,GAAwBrjB,EAAKmiC,UAY3BniC,EAAF4oB,cAA+C,QAG7C5oB,EAAF4kB,KAAiC,KAG/B5kB,EAAF6B,OACM,GAAIyX,GAAAA,aAGRtZ,EAAF27E,oBAAkE,GAAIriE,GAAAA,aAepEtZ,EAAFylD,WAA0B,aAE1BzlD,EAAA47E,uBAA2C,GAE3C57E,EAAA67E,mBAAqDP,GAAqBJ,KAE1El7E,EAAAgvB,8BAAgE,aA6ChEhvB,EAAAqiC,UAA8B,EAgB9BriC,EAAA8nC,WAA+B,EAwB/B9nC,EAAA87E,gBAAoC,EAzEhC97E,EAAKiF,SAAWC,SAASD,IAAa,EAEtCjF,EAAK8E,cAAcU,QAAQ+C,GAAY,GAAMrG,UAAU,SAAAugC,GAChDA,GAMH1tB,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAKylD,mBAgD1C,MAjIiCnlD,GAAjC26E,EAAAz6E,GAoBEC,OAAFC,eAAMu6E,EAANt6E,UAAA,eAAE,WAAwB,OAAUC,KAAKyiB,IAAMziB,KAAKuhC,WAApD,0CAGE1hC,OAAFC,eACMu6E,EADNt6E,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GAAkBF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,oCA6DtEm6E,EAAFt6E,UAAAi6D,mBAAE,WACEh6D,KAAKm7E,0BAGPd,EAAFt6E,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,cAMzCP,OAAFC,eACMu6E,EADNt6E,UAAA,eAAE,WACyB,MAAOC,MAAKyhC,cACrC,SAAYvhC,GACNA,GAASF,KAAKkhC,UAChBlhC,KAAKyhC,SAAWvhC,EAChBF,KAAKV,mBAAmBsB,iDAS5Bf,OAAFC,eACMu6E,EADNt6E,UAAA,gBAAE,WACiB,MAAOC,MAAKknC,eAC7B,SAAahnC,GACX,GAAMmlC,GAAWrlB,EAAAA,sBAAsB9f,EAEnCmlC,KAAarlC,KAAKyE,WACpBzE,KAAKknC,UAAY7B,EACjBrlC,KAAKV,mBAAmBsB,iDAW5Bf,OAAFC,eACMu6E,EADNt6E,UAAA,qBAAE,WAC+B,MAAOC,MAAKk7E,oBAC3C,SAAkBh7E,GAChB,GAAMk7E,GAAUl7E,GAASF,KAAKk7E,cAC9Bl7E,MAAKk7E,eAAiBh7E,EAElBk7E,IACEp7E,KAAKk7E,eACPl7E,KAAKq7E,sBAAsBX,GAAqBD,eAEhDz6E,KAAKq7E,sBACHr7E,KAAKkhC,QAAUw5C,GAAqBH,QAAUG,GAAqBF,WAEvEx6E,KAAK+6E,oBAAoB1hE,KAAKrZ,KAAKk7E,kDAKvCb,EAAFt6E,UAAAwoC,kBAAE,WACE,MAAOvoC,MAAKwoC,eAAiBxoC,KAAKyE,UAIpC41E,EAAFt6E,UAAAkjC,mBAAE,WAMEjjC,KAAKV,mBAAmBqsB,iBAI1B0uD,EAAFt6E,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKkhC,UAAYhhC,GAInBm6E,EAAFt6E,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAKouB,8BAAgCe,GAIvCkrD,EAAFt6E,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GAIpBkrD,EAAFt6E,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,GAGlB+qD,EAAFt6E,UAAAu7E,gBAAE,WACE,MAAOt7E,MAAKkhC,QAAU,OAAUlhC,KAAKu7E,cAAgB,QAAU,SAGzDlB,EAAVt6E,UAAAs7E,sBAAA,SAAgCG,GAC5B,GAAIC,GAAWz7E,KAAKi7E,mBAChBv6E,EAAuBV,KAAKI,YAAYD,aAE5C,IAAIs7E,IAAaD,IAGbx7E,KAAKg7E,uBAAuB3yE,OAAS,GACvC3H,EAAQL,UAAUC,OAAON,KAAKg7E,wBAGhCh7E,KAAKg7E,uBAAyBh7E,KAAK07E,0CAC/BD,EAAUD,GACdx7E,KAAKi7E,mBAAqBO,EAEtBx7E,KAAKg7E,uBAAuB3yE,OAAS,GAAG,CAC1C3H,EAAQL,UAAUG,IAAIR,KAAKg7E,uBAG3B,IAAMW,GAAiB37E,KAAKg7E,sBAE5Bh7E,MAAKX,QAAQyB,kBAAkB,WAC7ByxB,WAAW,WACT7xB,EAAQL,UAAUC,OAAOq7E,IACxB,SAKDtB,EAAVt6E,UAAAwsB,4BACI,GAAMnT,GAAQ,GAAIuhE,GAClBvhE,GAAMyV,OAAS7uB,KACfoZ,EAAM8nB,QAAUlhC,KAAKkhC,QAErBlhC,KAAKouB,8BAA8BpuB,KAAKkhC,SACxClhC,KAAKiB,OAAOoY,KAAKD,IAInBihE,EAAFt6E,UAAAkiC,OAAE,WACEjiC,KAAKkhC,SAAWlhC,KAAKkhC,SAUvBm5C,EAAFt6E,UAAAiiC,cAAE,SAAc5oB,GAAd,GAAFha,GAAAY,IAQIoZ,GAAMqiB,kBAGDz7B,KAAKyE,UAAkC,SAAtBzE,KAAK86E,aAkBf96E,KAAKyE,UAAkC,SAAtBzE,KAAK86E,eAGhC96E,KAAK+hC,cAAc5hC,cAAc+gC,QAAUlhC,KAAKkhC,QAChDlhC,KAAK+hC,cAAc5hC,cAAco7E,cAAgBv7E,KAAKu7E,gBApBlDv7E,KAAKu7E,eAAuC,UAAtBv7E,KAAK86E,cAE7B3mE,QAAQC,UAAUC,KAAK,WACrBjV,EAAK87E,gBAAiB,EACtB97E,EAAK27E,oBAAoB1hE,KAAKja,EAAK87E,kBAIvCl7E,KAAKiiC,SACLjiC,KAAKq7E,sBACDr7E,KAAKyhC,SAAWi5C,GAAqBH,QAAUG,GAAqBF,WAKxEx6E,KAAKusB,qBAUT8tD,EAAFt6E,UAAAka,MAAE,WACEja,KAAKkE,cAAck4B,SAASp8B,KAAK+hC,cAAe,aAGlDs4C,EAAFt6E,UAAA67E,oBAAE,SAAoBxiE,GAIlBA,EAAMqiB,mBAGA4+C,EAAVt6E,UAAA27E,0CACA,SAAMD,EAAgCD,GAElC,GAA4B,mBAAxBx7E,KAAK29B,eACP,MAAO,EAGT,IAAIk+C,GAAqB,EAEzB,QAAQJ,GACN,IAAKf,IAAqBJ,KAGxB,GAAIkB,IAAad,GAAqBH,QACpCsB,EAAa,wBACR,CAAA,GAAIL,GAAYd,GAAqBD,cAG1C,MAAO,EAFPoB,GAAa,0BAIf,KACF,KAAKnB,IAAqBF,UACxBqB,EAAaL,IAAad,GAAqBH,QAC3C,oBAAsB,yBAC1B,MACF,KAAKG,IAAqBH,QACxBsB,EAAaL,IAAad,GAAqBF,UAC3C,oBAAsB,uBAC1B,MACF,KAAKE,IAAqBD,cACxBoB,EAAaL,IAAad,GAAqBH,QAC3C,wBAA0B,0BAIlC,MAAO,qBAAqBsB,GAStBxB,EAAVt6E,UAAAo7E,kCACI,IAAKW,GAAwB,CAC3B,GAAMC,GACF/7E,KAAKI,YAAYD,cAAc4nD,cAAc,wBAAwBrlB,aAAe,CACxFo5C,IAAyBC,EAAc,EAEzC/7E,KAAKg8E,OAAOC,OAASH,mBAnWzBx5E,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEG,SAAU,q7CACVC,QAAF,m0MACEH,SAAF,cACEI,MACFC,MAAA,eACMmgC,OAAN,KACIC,kBAAJ,OACI+4C,qCAAJ,gBACIC,+BAAJ,UACIC,gCAAJ,WACIC,oCAAJ,4BACIvrD,kCAAJ,uCAEA1mB,WAAAkyE,IACA35E,QAAA,gBAAA,QAAA,YACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAlHAf,KAAE2D,EAAAA,eAFF3D,KAAEgB,EAAAA,SALFhB,KAAQyD,OAARZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAYAF,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA+5E,QAmLAj6E,KAAAyD,OAAAZ,aAAA7C,KAAesD,EAAAA,WAAftD,KAAAuD,EAAAA,OAAmCrD,MAAnCuuB,EAAAA,4BAGAspD,EAAA52E,wHA9DAgf,KAAAngB,KAAAoB,EAAAA,QAKA4/B,WAAAhhC,KAAAoB,EAAAA,QAKAskB,gBAAQ1lB,KAARoB,EAAAA,QAMAsgB,OAAA1hB,KAAAoB,EAAAA,QAMAzC,SAAAqB,KAAAsX,EAAAA,SAGAmhE,sBAAAz4E,KAAAsX,EAAAA,SAGA1Z,QAAAoC,KAAAoB,EAAAA,QAIAq+B,gBAAAz/B,KAAAmU,EAAAA,UAAAjU,MAAA,WAGAw5E,SAAA15E,KAAAmU,EAAAA,UAAAjU,MAAAg6E,MAGAt7C,UAAA5+B,KAAAoB,EAAAA,QAGAe,WAAAnC,KAAAoB,EAAAA,QAiDA63E,gBAAGj5E,KAAHoB,EAAAA,SAgCA22E,OCpPaoC,IACXpyE,QAASi0D,EAAAA,cACTh0D,YAAa8N,EAAAA,WAAW,WAAM,MAAAskE,MAC9B17C,OAAO,8EArBT,MAmCkDthC,GAAlDg9E,EAAA98E,kBANA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,8HAEV2H,WAAYqyE,IACZ35E,MAAO65E,kBAAmB,4BAjC5BD,GAmCkDE,EAAAA,uDCnClD,sBAgBAt6E,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,aAAcG,GAAiBF,GAAiBG,EAAAA,iBAC1DE,SAAU2zE,GAAaqC,GAA8Br2E,IACrDU,cAAeszE,GAAaqC,QAnB9BG,KCoDAC,GAAA,WACE,QAAFA,GAEWjuD,EAEAzI,EAEA0iC,sBAJA9oD,KAAX6uB,OAAWA,EAEA7uB,KAAXomB,SAAWA,EAEApmB,KAAX8oD,YAAWA,EA3DX,MAAAg0B,MAiEAC,GAAA,WACE,QAAFA,GAAqB38E,GAAAJ,KAArBI,YAAqBA,EAlErB,MAAA28E,MAqEaC,GAELx1E,EAAW1D,EAAmBC,EAAcg5E,KAAe,WAE7DE,IAAwB,8CAzE9B,sBA+EA36E,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mCACVK,MAAOC,MAAS,uBAjFlBsuE,iCAAA,sBAyFA/uE,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gDACVK,MAAOC,MAAS,8BA3FlBuuE,oBAgOE,QAAFpB,GAAqB9vE,EACCf,EACRklC,EAC+ChgC,GAH3D,GAAFnF,GAIIQ,EAJJoE,KAAAhE,KAIUI,IAJVJ,WAAqBZ,GAArBgB,YAAqBA,EACChB,EAAtBC,QAAsBA,EAnGtBD,EAAAoF,0BAAqC,EAMnCpF,EAAF89E,gBAWE99E,EAAFksD,WAAuB,EAGrBlsD,EAAF+9E,oBAAgC,EAsB9B/9E,EAAF2nC,WAAiC,EAuB/B3nC,EAAFg+E,aAAmC,EAUjCh+E,EAAFi+E,YAAkC,EAGhCj+E,EAAFytB,SAAsB,GAAIptB,GAAAA,QAGxBL,EAAF0tB,QAAqB,GAAIrtB,GAAAA,QAGvBL,EAAFwxC,gBACM,GAAIl4B,GAAAA,aAGRtZ,EAAFk+E,UAA6D,GAAI5kE,GAAAA,aAG/DtZ,EAAF8mD,QAA2D,GAAIxtC,GAAAA,aAa3DtZ,EAAKm+E,oBAELn+E,EAAKo+E,YAAc,GAAIC,IAAer+E,EAAMC,EAASe,EAAamkC,GAClEnlC,EAAKo+E,YAAYp5E,mBAAmBhE,EAAYD,eAE5CoE,IAEFnF,EAAKoF,2BAA6BD,EAAcE,SAChDrF,EAAK89E,cACHv4E,UAAWJ,EAAcI,UACzBD,qBAAsBH,EAAcG,yBAhP5C,MAuH6BhF,GAA7BwwE,EAAAtwE,GAmBEC,OAAFC,eAAMowE,EAANnwE,UAAA,sBAAE,WACE,MAAOC,MAAKyE,UAAYzE,KAAKwoC,eAAiBxoC,KAAKwE,0DAmBrD3E,OAAFC,eACMowE,EADNnwE,UAAA,gBAAE,WAC0B,MAAOC,MAAK+mC,eACtC,SAAa7mC,GACX,GAAMw9E,GAAe19D,EAAAA,sBAAsB9f,EAEvCw9E,KAAiB19E,KAAK+mC,YACxB/mC,KAAK+mC,UAAY22C,EACjB19E,KAAK29E,6DAMT99E,OAAFC,eACMowE,EADNnwE,UAAA,aAAE,WAEE,WAAsB4F,IAAf3F,KAAK0pB,OACR1pB,KAAK0pB,OACL1pB,KAAKI,YAAYD,cAAc4I,iBAErC,SAAU7I,GAAcF,KAAK0pB,OAASxpB,mCAStCL,OAAFC,eACMowE,EADNnwE,UAAA,kBAAE,WAC4B,MAAOC,MAAKo9E,aAAep9E,KAAKm9E,wBAC5D,SAAej9E,GACbF,KAAKo9E,YAAcp9D,EAAAA,sBAAsB9f,oCAO3CL,OAAFC,eACMowE,EADNnwE,UAAA,iBAAE,WAC2B,MAAOC,MAAKq9E,gBACvC,SAAcn9E,GACZF,KAAKq9E,WAAar9D,EAAAA,sBAAsB9f,oCAqB1CL,OAAFC,eAAMowE,EAANnwE,UAAA,oBAAE,WACE,MAAOC,MAAKgwE,WAAahwE,KAAKomB,SAAS0D,WAAa,sCAwBtDomD,EAAFnwE,UAAAw9E,kBAAE,WAEE,IAAmB,GAAvB9wB,GAAA,EAAuBmxB,EAAvBX,GAAuBxwB,EAAvBmxB,EAAAv1E,OAAuBokD,IAAsB,CAApC,GAAMmM,GAAfglB,EAAAnxB,EACM,IAAIzsD,KAAKI,YAAYD,cAAcsqD,aAAamO,IAC9C54D,KAAKI,YAAYD,cAAc09E,QAAQtrE,gBAAkBqmD,EAEzD,WADC54D,MAAKI,YAAwC,cAAEC,UAAUG,IAAIo4D,GAIjE54D,KAAKI,YAAwC,cAAEC,UAAUG,IAAI,sBAGhE0vE,EAAFnwE,UAAAgC,YAAE,WACE/B,KAAKs9E,UAAUjkE,MAAMykE,KAAM99E,OAC3BA,KAAKw9E,YAAYO,wBAInB7N,EAAFnwE,UAAAkmD,OAAE,WACOjmD,KAAK+mC,YACR/mC,KAAK+mC,WAAY,EACjB/mC,KAAK29E,6BAKTzN,EAAFnwE,UAAAomD,SAAE,WACMnmD,KAAK+mC,YACP/mC,KAAK+mC,WAAY,EACjB/mC,KAAK29E,6BAKTzN,EAAFnwE,UAAAi+E,qBAAE,WACOh+E,KAAK+mC,YACR/mC,KAAK+mC,WAAY,EACjB/mC,KAAK29E,0BAAyB,KAKlCzN,EAAFnwE,UAAAk+E,eAAE,SAAen1B,GAGb,WAHJ,KAAAA,IAAiBA,GAAjB,GACI9oD,KAAK+mC,WAAa/mC,KAAKomB,SACvBpmB,KAAK29E,yBAAyB70B,GACvB9oD,KAAKomB,UAId8pD,EAAFnwE,UAAAka,MAAE,WACOja,KAAKsrD,YACRtrD,KAAKI,YAAYD,cAAc8Z,QAC/Bja,KAAK6sB,SAAS7qB,MAAM87E,KAAM99E,QAE5BA,KAAKsrD,WAAY,GASnB4kB,EAAFnwE,UAAAO,OAAE,WACMN,KAAKk+E,WACPl+E,KAAKkmD,QAAQ7sC,MAAMykE,KAAM99E,QAK7BkwE,EAAFnwE,UAAAqhB,aAAE,SAAahI,GACPpZ,KAAKyE,SACP2U,EAAM4C,iBAEN5C,EAAMqiB,mBAKVy0C,EAAFnwE,UAAA6b,eAAE,SAAexC,GACb,IAAIpZ,KAAKyE,SAIT,OAAQ2U,EAAMyC,SACZ,IAAKsiE,GAAAA,OACL,IAAKC,GAAAA,UAEHp+E,KAAKM,SAEL8Y,EAAM4C,gBACN,MACF,KAAKI,GAAAA,MAECpc,KAAKgwE,YACPhwE,KAAKi+E,gBAAe,GAItB7kE,EAAM4C,mBAKZk0D,EAAFnwE,UAAA4wE,MAAE,WAAA,GAAFvxE,GAAAY,IAKIA,MAAKX,QAAQw/C,SACVjsB,eACAxxB,KAAKsL,EAAAA,KAAK,IACVpL,UAAU,WACTlC,EAAKC,QAAQ4d,IAAI,WACf7d,EAAKksD,WAAY,EACjBlsD,EAAK0tB,QAAQ9qB,MAAM87E,KAAM1+E,SAKzB8wE,EAAVnwE,UAAA49E,yBAAA,SAAmC70B,OAAnC,KAAAA,IAAmCA,GAAnC,GACI9oD,KAAK4wC,gBAAgBv3B,MACnBwV,OAAQ7uB,KACR8oD,YAANA,EACM1iC,SAAUpmB,KAAK+mC,4BA/QrBzkC,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,yDACVE,QAAS,QAAS,WAAY,iBAC9BD,SAAU,UACVI,MACEC,MAAS,WACTogC,kBAAmB,uBACnBp5B,KAAQ,SACRs0E,4BAA6B,WAC7BC,+BAAgC,SAChCC,sCAAuC,6BACvCC,4BAA6B,WAC7B1hC,kBAAmB,mBACnBx3C,uBAAwB,sBACxB6mD,uBAAwB,eACxB3gD,UAAW,uBACXmkB,YAAa,yBACbH,UAAW,UACXC,SAAU,mDArGdntB,KAAEiI,EAAAA,aAKFjI,KAAEgB,EAAAA,SATFhB,KAAQoD,EAAAA,WAwNRpD,SAAAqD,GAAAR,aAAA7C,KAAesD,EAAAA,WAAftD,KAA2BuD,EAAAA,OAA3BrD,MAAkCsD,2BA9ElC24E,SAAAn8E,KAAGk9B,EAAAA,aAAHh9B,MAAgB6uE,MAGhBqN,eAAAp8E,KAAGk9B,EAAAA,aAAHh9B,MAAgB8uE,MAGhBqN,aAAAr8E,KAAGk9B,EAAAA,aAAHh9B,MAAgB4V,EAAAA,WAAW,WAAM,MAAAg5D,SAGjChrD,WAAA9jB,KAAGoB,EAAAA,QAaHxD,QAAAoC,KAAGoB,EAAAA,QAeHssE,aAAA1tE,KAAGoB,EAAAA,QAUHw6E,YAAA57E,KAAGoB,EAAAA,QAcHktC,kBAAAtuC,KAAGsX,EAAAA,SAIH0jE,YAAAh7E,KAAGsX,EAAAA,SAGHssC,UAAA5jD,KAAGsX,EAAAA,UAzNHs2D,GAuH6B8M,kBAqR3B,QAAF5L,GAAwBwN,GAAA5+E,KAAxB4+E,YAAwBA,EA5YxB,MA+YExN,GAAFrxE,UAAAqhB,aAAE,SAAahI,GACPpZ,KAAK4+E,YAAYV,WACnBl+E,KAAK4+E,YAAYt+E,SAQnB8Y,EAAMqiB,kCArBVn5B,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBACVK,MACEC,MAAS,yCACTyI,UAAW,gEAIflJ,KAAqC4tE,MA5YrCkB,KCiBaH,GACT,GAAIt8D,GAAAA,eAAuC,6BnB6B/CkqE,GAAA,WACE,QAAFA,GAAqB96B,EACAC,EACAC,EAEAC,GAJAlkD,KAArB+jD,0BAAqBA,EACA/jD,KAArBgkD,YAAqBA,EACAhkD,KAArBikD,iBAAqBA,EAEAjkD,KAArBkkD,UAAqBA,EApDrB,MAAA26B,MAsDaC,GACT16B,EAAgBy6B,IAIhBj+C,GAAe,EAGnBm+C,GAAA,WACE,QAAFA,GAEWlwD,EAEA3uB,GAFAF,KAAX6uB,OAAWA,EAEA7uB,KAAXE,MAAWA,EAnEX,MAAA6+E,qBA8UE,QAAFjP,GAAwB1vE,EACFd,EACY0B,EACRgjD,EACAC,EACZF,EAE2BG,GAPvC,GAAF9kD,GAQIQ,EARJoE,KAAAhE,KAQU+jD,EAA2BC,EAAaC,EAAkBC,IARpElkD,WAAwBZ,GAAxBgB,YAAwBA,EACFhB,EAAtBE,mBAAsBA,EACYF,EAAlC4B,KAAkCA,EAKO5B,EAAzC8kD,UAAyCA,EAzOvC9kD,EAAF6lD,YAAiC,gBAOjC7lD,EAAA4/E,wBAAmD,KAGnD5/E,EAAAsb,WAAuB,GAAIjb,GAAAA,QAkBzBL,EAAFslD,KAAiB,iBAAiB9jB,KAMhCxhC,EAAF6/E,UAAc,EAMZ7/E,EAAF8/E,cAAiC,KAM/B9/E,EAAFylD,WAAe,aAGbzlD,EAAFwlD,UAAoC,aAqBpCxlD,EAAAklD,WAA+B,EAgB/BllD,EAAAmlD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAgCpDrlD,EAAFoiC,WAAiC,EAgD/BpiC,EAAF8nC,WAAiC,EAG/B9nC,EAAF2wE,gBAA0E,aAexE3wE,EAAFg+E,aAAmC,EA6BjCh+E,EAAF6B,OACM,GAAIyX,GAAAA,aAORtZ,EAAFivB,YAAsD,GAAI3V,GAAAA,aAclDtZ,EAAK8kD,YACP9kD,EAAK8kD,UAAUoB,cAAgBlmD,KAZrC,MAtOiCM,GAAjCowE,EAAAlwE,GA4DEC,OAAFC,eAAMgwE,EAAN/vE,UAAA,gBAAE,WACE,MAAOC,MAAK2sC,SAAW3sC,KAAK2pC,gBAAgBvjB,SAAWpmB,KAAK2pC,gBAAgBvjB,SAAS,oCAIvFvmB,OAAFC,eAAMgwE,EAAN/vE,UAAA,YAAE,WAA4B,MAAOC,MAAK0pC,MAAQ,KAAO,2CAMvD7pC,OAAFC,eACMgwE,EADN/vE,UAAA,gBAAE,WAC0B,MAAOC,MAAKskD,eACtC,SAAapkD,GACXF,KAAKskD,UAAYtkC,EAAAA,sBAAsB9f,oCASzCL,OAAFC,eACMgwE,EADN/vE,UAAA,mBAAE,WACmD,MAAOC,MAAKukD,kBAC/D,SAAgBp1B,GACdnvB,KAAKukD,aAAep1B,EAChBnvB,KAAK2pC,iBAEP3pC,KAAK4lD,wDAST/lD,OAAFC,eACMgwE,EADN/vE,UAAA,aAAE,WACmB,MAAOC,MAAK0pB,YAC/B,SAAUxpB,GACRF,KAAKivB,WAAW/uB,GAChBF,KAAK0pB,OAASxpB,mCAQhBL,OAAFC,eAAMgwE,EAAN/vE,UAAA,UAAE,WACE,MAAOC,MAAKm/E,WAAan/E,KAAKm/E,WAAW18D,GAAKziB,KAAK0kD,sCAOrD7kD,OAAFC,eACMgwE,EADN/vE,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GACXF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,GACvCF,KAAKylD,aAAazjD,wCAQpBnC,OAAFC,eACMgwE,EADN/vE,UAAA,mBAAE,WAEE,MAAOC,MAAKm/E,WAAan/E,KAAKm/E,WAAWxzC,YAAc3rC,KAAKwlD,kBAE9D,SAAgBtlD,GACdF,KAAKwlD,aAAetlD,EACpBF,KAAKylD,aAAazjD,wCAKpBnC,OAAFC,eAAMgwE,EAAN/vE,UAAA,eAAE,WACE,MAAQC,MAAKm/E,YAAcn/E,KAAKm/E,WAAW/O,SAAYpwE,KAAKo/E,mDAO9Dv/E,OAAFC,eAAMgwE,EAAN/vE,UAAA,aAAE,WACE,QAASC,KAAKm/E,YAAcn/E,KAAKm/E,WAAWz1C,QAAgC,IAAtB1pC,KAAKiwE,MAAM5nE,wCAOnExI,OAAFC,eAAMgwE,EAAN/vE,UAAA,wBAAE,WAAkC,OAAQC,KAAK0pC,OAAS1pC,KAAKowE,yCAM7DvwE,OAAFC,eACMgwE,EADN/vE,UAAA,gBAAE,WAC0B,MAAOC,MAAKkkD,YAAclkD,KAAKkkD,UAAUz/C,SAAWzE,KAAKknC,eACnF,SAAahnC,GAAb,GAAFd,GAAAY,IACIA,MAAKknC,UAAYlnB,EAAAA,sBAAsB9f,GAEnCF,KAAKiwE,OACPjwE,KAAKiwE,MAAMrjE,QAAQ,SAAAkxE,GAAQ,MAAAA,GAAKr5E,SAAWrF,EAAK8nC,6CAYpDrnC,OAAFC,eACMgwE,EADN/vE,UAAA,kBAAE,WAC4B,MAAOC,MAAKo9E,iBACxC,SAAel9E,GAAf,GAAFd,GAAAY,IACIA,MAAKo9E,YAAcp9D,EAAAA,sBAAsB9f,GAErCF,KAAKiwE,OACPjwE,KAAKiwE,MAAMrjE,QAAQ,SAAAkxE,GAAQ,MAAAA,GAAKX,mBAAqB/9E,EAAKg+E,+CAK9Dv9E,OAAFC,eACMgwE,EADN/vE,UAAA,gBAAE,SACaG,GACXF,KAAKk/E,cAAgBh/E,EACrBF,KAAKi/E,UAAY/+E,mCAInBL,OAAFC,eAAMgwE,EAAN/vE,UAAA,4BAAE,WACE,MAAOoB,GAAAA,MAAXqN,UAAA,GAAoBxO,KAAKiwE,MAAMxhE,IAAI,SAAAqvE,GAAQ,MAAAA,GAAKltC,oDAI9C/wC,OAAFC,eAAMgwE,EAAN/vE,UAAA,wBAAE,WACE,MAAOoB,GAAAA,MAAXqN,UAAA,GAAoBxO,KAAKiwE,MAAMxhE,IAAI,SAAAqvE,GAAQ,MAAAA,GAAKjxD,6CAI9ChtB,OAAFC,eAAMgwE,EAAN/vE,UAAA,uBAAE,WACE,MAAOoB,GAAAA,MAAXqN,UAAA,GAAoBxO,KAAKiwE,MAAMxhE,IAAI,SAAAqvE,GAAQ,MAAAA,GAAKhxD,4CAI9CjtB,OAAFC,eAAMgwE,EAAN/vE,UAAA,yBAAE,WACE,MAAOoB,GAAAA,MAAXqN,UAAA,GAAoBxO,KAAKiwE,MAAMxhE,IAAI,SAAAqvE,GAAQ,MAAAA,GAAKR,8CA+B9CxN,EAAF/vE,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKkb,YAAc,GAAIuB,GAAAA,gBAAyBzc,KAAKiwE,OAClDtzD,WACA+rC,0BACAhsC,0BAA0B1c,KAAKgB,KAAOhB,KAAKgB,KAAKd,MAAQ,OAI3DF,KAAKkb,YAAYojC,OAAOl9C,KAAKC,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,WACjElC,EAAK6/E,WAAa,EAClB1sD,WAAW,WAAM,MAAAnzB,GAAK6/E,UAAY7/E,EAAK8/E,eAAiB,MAI1Dl/E,KAAKiwE,MAAM7nE,QAAQhH,KAAKsW,EAAAA,UAAU,MAAOrW,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,WAC7ElC,EAAKigF,cAGLjgF,EAAKwmD,uBAGLxmD,EAAKkgF,kBAGLlgF,EAAKmgF,gCAELngF,EAAKqmD,aAAazjD,UAItB8tE,EAAF/vE,UAAAsW,SAAE,WACErW,KAAK2pC,gBAAkB,GAAImc,GAAAA,eAAwB9lD,KAAK2sC,aAAUhnC,IAAW,GAC7E3F,KAAKylD,aAAazjD,QAGpB8tE,EAAF/vE,UAAA6+B,UAAE,WACM5+B,KAAKkkD,WAIPlkD,KAAKqmD,oBAITypB,EAAF/vE,UAAAgC,YAAE,WACE/B,KAAK0a,WAAW1Y,OAChBhC,KAAK0a,WAAWzY,WAChBjC,KAAKylD,aAAaxjD,WAElBjC,KAAKw/E,sBAKP1P,EAAF/vE,UAAA0wE,cAAE,SAAcgP,GACZz/E,KAAKm/E,WAAaM,GAOpB3P,EAAF/vE,UAAAyuC,kBAAE,SAAkBC,GAAiBzuC,KAAK0uC,iBAAmBD,EAAIlF,KAAK,MAGpEumC,EAAF/vE,UAAAkvB,WAAE,SAAW/uB,GACLF,KAAKiwE,OACPjwE,KAAKwmD,qBAAqBtmD,GAAO,IAKrC4vE,EAAF/vE,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAK4kD,UAAYz1B,GAInB2gD,EAAF/vE,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GAIpB2gD,EAAF/vE,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,EAChBtvB,KAAKylD,aAAazjD,QAOpB8tE,EAAF/vE,UAAA4uC,iBAAE,SAAiBv1B,GACVpZ,KAAK0/E,oBAAoBtmE,IAC5BpZ,KAAKia,SAQT61D,EAAF/vE,UAAAka,MAAE,WACMja,KAAKyE,UAMLzE,KAAKm/E,YAAcn/E,KAAKm/E,WAAW/O,UAE5BpwE,KAAKiwE,MAAM5nE,OAAS,GAC7BrI,KAAKkb,YAAYa,qBACjB/b,KAAKylD,aAAazjD,SAElBhC,KAAK2/E,cACL3/E,KAAKylD,aAAazjD,UAKtB8tE,EAAF/vE,UAAA4/E,YAAE,WACM3/E,KAAKm/E,YACPn/E,KAAKm/E,WAAWllE,SAOpB61D,EAAF/vE,UAAAmmE,SAAE,SAAS9sD,GACP,GAAMqhC,GAASrhC,EAA2B,MAGtCA,GAAMyC,UAAYuiE,EAAAA,WAAap+E,KAAK4/E,cAAcnlC,IACpDz6C,KAAKkb,YAAYgB,oBACjB9C,EAAM4C,kBACGy+B,GAAUA,EAAOp6C,UAAUsI,SAAS,cACzCyQ,EAAMyC,UAAYC,EAAAA,MACpB9b,KAAKkb,YAAYa,qBACjB3C,EAAM4C,kBACG5C,EAAMyC,UAAYI,EAAAA,KAC3Bjc,KAAKkb,YAAYgB,oBACjB9C,EAAM4C,kBAENhc,KAAKkb,YAAYoB,UAAUlD,GAG7BpZ,KAAKylD,aAAazjD,SAQZ8tE,EAAZ/vE,UAAAu/E,gBAAE,WAEEt/E,KAAKi/E,UAAYj/E,KAAKk/E,gBAAwC,IAAtBl/E,KAAKiwE,MAAM5nE,QAAgB,EAAI,IAO/DynE,EAAZ/vE,UAAAw/E,8BAAE,WACE,GAAoC,MAAhCv/E,KAAKg/E,yBAAmCh/E,KAAKiwE,MAAM5nE,OAAQ,CAC7D,GAAMw3E,GAAetrE,KAAKE,IAAIzU,KAAKg/E,wBAAyBh/E,KAAKiwE,MAAM5nE,OAAS,EAChFrI,MAAKkb,YAAYkC,cAAcyiE,GAGjC7/E,KAAKg/E,wBAA0B,MASzBlP,EAAV/vE,UAAAod,cAAA,SAAwBrQ,GACpB,MAAOA,IAAS,GAAKA,EAAQ9M,KAAKiwE,MAAM5nE,QAGlCynE,EAAV/vE,UAAA6/E,cAAA,SAAwBl/E,GACpB,GAAIA,GAA8C,UAAnCA,EAAQkyC,SAASrgC,cAA2B,CAEzD,OADS,EACKrS,MAGhB,OAAO,GAGT4vE,EAAF/vE,UAAAymD,qBAAE,SAAqBtmD,EAAY4oD,GAAjC,GAAF1pD,GAAAY,IAII,QAJJ,KAAA8oD,IAAmCA,GAAnC,GACI9oD,KAAK8/E,kBACL9/E,KAAKiwE,MAAMrjE,QAAQ,SAAAkxE,GAAQ,MAAAA,GAAK33B,aAE5B79C,MAAMkE,QAAQtM,GAChBA,EAAM0M,QAAQ,SAAAs7C,GAAgB,MAAA9oD,GAAK+oD,aAAaD,EAAcY,KAC9D9oD,KAAKooD,kBACA,CACL,GAAM23B,GAAoB//E,KAAKmoD,aAAajoD,EAAO4oD,EAI/Ci3B,IACEj3B,GACF9oD,KAAKkb,YAAYkC,cAAc2iE,KAU/BjQ,EAAV/vE,UAAAooD,aAAA,SAAuBjoD,EAAY4oD,kBAAnC,KAAAA,IAAmCA,GAAnC,EAEI,IAAMi3B,GAAoB//E,KAAKiwE,MAAMtuE,KAAK,SAAAm8E,GACxC,MAAqB,OAAdA,EAAK59E,OAAiBd,EAAKmlD,aAAau5B,EAAK59E,MAAQA,IAQ9D,OALI6/E,KACFj3B,EAAci3B,EAAkB/B,uBAAyB+B,EAAkB95B,SAC3EjmD,KAAK2pC,gBAAgBsc,OAAO85B,IAGvBA,GAGDjQ,EAAV/vE,UAAA6lD,0CAGIzxC,SAAQC,UAAUC,KAAK,YACjBjV,EAAK8kD,WAAa9kD,EAAKsqB,UACzBtqB,EAAKonD,qBAAqBpnD,EAAK8kD,UAAY9kD,EAAK8kD,UAAUhkD,MAAQd,EAAKsqB,QAAQ,GAC/EtqB,EAAKqmD,aAAazjD,WAShB8tE,EAAV/vE,UAAA+/E,gBAAA,SAA0BE,GACtBhgF,KAAK2pC,gBAAgB5R,QACrB/3B,KAAKiwE,MAAMrjE,QAAQ,SAAAkxE,GACbA,IAASkC,GACXlC,EAAK33B,aAGTnmD,KAAKylD,aAAazjD,QAOZ8tE,EAAV/vE,UAAAqoD,iCACQpoD,MAAKskD,YACPtkD,KAAK2pC,gBAAgB5R,QAErB/3B,KAAKiwE,MAAMrjE,QAAQ,SAAAkxE,GACbA,EAAK13D,UACPhnB,EAAKuqC,gBAAgBsc,OAAO63B,KAGhC99E,KAAKylD,aAAazjD,SAKd8tE,EAAV/vE,UAAAmpD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADE/gD,MAAMkE,QAAQxM,KAAKomB,UACPpmB,KAAKomB,SAAS3X,IAAI,SAAAqvE,GAAQ,MAAAA,GAAK59E,QAE/BF,KAAKomB,SAAWpmB,KAAKomB,SAASlmB,MAAQkpD,EAEtDppD,KAAK0pB,OAAS2/B,EACdrpD,KAAKiB,OAAOoY,KAAK,GAAI0lE,IAAkB/+E,KAAMqpD,IAC7CrpD,KAAKquB,YAAYhV,KAAKgwC,GACtBrpD,KAAK4kD,UAAUyE,GACfrpD,KAAKV,mBAAmBsB,gBAI1BkvE,EAAF/vE,UAAA4wE,MAAE,WAAA,GAAFvxE,GAAAY,IACSA,MAAKo/E,mBACRp/E,KAAKkb,YAAYkC,eAAe,GAG7Bpd,KAAKyE,WACJzE,KAAKm/E,WAKP5sD,WAAW,WACJnzB,EAAKgxE,SACRhxE,EAAK6gF,mBAKTjgF,KAAKigF,mBAMXnQ,EAAF/vE,UAAAkgF,eAAE,WACEjgF,KAAK6kD,aACL7kD,KAAKV,mBAAmBsB,eACxBZ,KAAKylD,aAAazjD,QAGZ8tE,EAAV/vE,UAAAs/E,uBACIr/E,KAAKw/E,qBACLx/E,KAAKkgF,sBACLlgF,KAAKmgF,0BACLngF,KAAKogF,yBAGCtQ,EAAV/vE,UAAAy/E,8BACQx/E,KAAKqgF,yBACPrgF,KAAKqgF,uBAAuB1sE,cAC5B3T,KAAKqgF,uBAAyB,MAG5BrgF,KAAKsgF,wBACPtgF,KAAKsgF,sBAAsB3sE,cAC3B3T,KAAKsgF,sBAAwB,MAG3BtgF,KAAKugF,6BACPvgF,KAAKugF,2BAA2B5sE,cAChC3T,KAAKugF,2BAA6B,MAGhCvgF,KAAKwgF,0BACPxgF,KAAKwgF,wBAAwB7sE,cAC7B3T,KAAKwgF,wBAA0B,OAK3B1Q,EAAV/vE,UAAAogF,6CACIngF,MAAKugF,2BAA6BvgF,KAAKygF,qBAAqBn/E,UAAU,SAAA8X,GACpEA,EAAMyV,OAAOzI,SACThnB,EAAKuqC,gBAAgBsc,OAAO7sC,EAAMyV,QAClCzvB,EAAKuqC,gBAAgBwc,SAAS/sC,EAAMyV,QAGnCzvB,EAAKutC,UACRvtC,EAAK6wE,MAAMrjE,QAAQ,SAAAkxE,IACZ1+E,EAAKuqC,gBAAgBsf,WAAW60B,IAASA,EAAK13D,UACjD03D,EAAK33B,aAKP/sC,EAAM0vC,aACR1pD,EAAK8pD,uBAMH4mB,EAAV/vE,UAAAmgF,yCACIlgF,MAAKqgF,uBAAyBrgF,KAAK0gF,iBAAiBp/E,UAAU,SAAA8X,GAC5D,GAAIunE,GAAoBvhF,EAAK6wE,MAAM5yD,UAAU5K,QAAQ2G,EAAM0kE,KAEvD1+E,GAAK+d,cAAcwjE,IACrBvhF,EAAK8b,YAAYC,sBAAsBwlE,GAEzCvhF,EAAKqmD,aAAazjD,SAGpBhC,KAAKsgF,sBAAwBtgF,KAAK4gF,gBAAgBt/E,UAAU,WAC1DlC,EAAKuxE,QACLvxE,EAAKqmD,aAAazjD,UAId8tE,EAAV/vE,UAAAqgF,2CACIpgF,MAAKwgF,wBAA0BxgF,KAAK6gF,kBAAkBv/E,UAAU,SAAA8X,GAC9D,GAAM0kE,GAAO1kE,EAAM0kE,KACb6C,EAAYvhF,EAAK6wE,MAAM5yD,UAAU5K,QAAQ2G,EAAM0kE,KAKjD1+E,GAAK+d,cAAcwjE,IAAc7C,EAAKxyB,YACxClsD,EAAK4/E,wBAA0B2B,MAM7B7Q,EAAV/vE,UAAA2/E,oBAAA,SAA8BtmE,GAG1B,IAFA,GAAI0nE,GAAiB1nE,EAAkC,OAEhD0nE,GAAkBA,IAAmB9gF,KAAKI,YAAYD,eAAe,CAC1E,GAAI2gF,EAAezgF,UAAUsI,SAAS,YACpC,OAAO,CAGTm4E,GAAiBA,EAAe/K,cAGlC,OAAO,GAIDjG,EAAV/vE,UAAAq/E,2BACI,MAAOp/E,MAAKiwE,MAAMnnE,KAAK,SAAAg1E,GAAQ,MAAAA,GAAKxyB,4BAprBxChpD,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEG,SAAU,qEACVF,SAAU,cACVI,MACFqgC,kBAAyB,8BACnBgM,0BAAN,2BACIJ,uBAAJ,sBACIzpC,uBAAJ,sBACI0pC,sBAAJ,aACIE,8BAAJ,WACI/kC,cAAJ,OACI42E,iCAAJ,WACIC,gCAAJ,aACIC,iCAAkC,WAClC7wD,0BAAJ,kBACIrtB,MAAJ,gBACIysB,UAAJ,UACIC,SAAJ,UACIE,YAAJ,mBACIuT,OAAQ,QAEZ94B,YAAAC,QAAAslC,GAAArlC,YAAAwlE,IACAjtE,QAAA;ytFACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FA9EAf,KAAEwc,EAAAA,eAAF3Z,aAAA7C,KAAAsD,EAAAA,aAJAtD,KAAEutC,EAAAA,OAAF1qC,aAAA7C,KAAAsD,EAAAA,aAPAtD,KAAQwtC,EAAAA,mBAAR3qC,aAAA7C,KAAAsD,EAAAA,aAsBAtD,KAA6D+kB,KAA7D/kB,KAA8B0tC,EAAAA,UAA9B7qC,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAA2tC,EAAAA,UAAA6/B,EAAkDrsE,6EA2IlDgtC,cAAAnuC,KAAAoB,EAAAA,QAGAxD,QAAAoC,KAAAoB,EAAAA,QAYA4/B,WAAAhhC,KAAAoB,EAAAA,QAeAioC,cAAGrpC,KAAHoB,EAAAA,QAoBAe,WAAAnC,KAAGoB,EAAAA,QAYHqsE,kBAAAztE,KAAAoB,EAAAA,MAAAlB,MAAA,sBAiCAwtE,aAAA1tE,KAAAoB,EAAAA,QAYAW,WAAA/B,KAAAoB,EAAAA,QAMAzC,SAAAqB,KAAAsX,EAAAA,SAWAyU,cAAA/rB,KAAAsX,EAAAA,SA2BAq2D,QAAA3tE,KAAA0I,EAAAA,gBAAAxI,MAAA0tE,OAWAJ,OCnTIlvC,GAAe,gBAyEjB,QAAFuvC,GACc/vE,EACiCyxC,GADjC7xC,KAAdI,YAAcA,EACiCJ,KAA/C6xC,gBAA+CA,EApD7C7xC,KAAFowE,SAAqB,EAkBnBpwE,KAAFqwE,YAAwB,EAOtBrwE,KAAFswE,kBAC8CtwE,KAAK6xC,gBAAgBy+B,kBAGjEtwE,KAAFuwE,QAC6C,GAAI73D,GAAAA,aAG/C1Y,KAAF2rC,YAAiC,GAG/B3rC,KAAFyiB,GAAwB,uBAAuBme,KAM/C5gC,KAAAknC,WAA+B,EAW3BlnC,KAAK+hC,cAAgB/hC,KAAKI,YAA6C,cArG3E,MAoDEP,QAAFC,eACMqwE,EADNpwE,UAAA,gBAAE,SACaG,GACPA,IACFF,KAAKwwE,UAAYtwE,EACjBF,KAAKwwE,UAAUC,cAAczwE,wCAOjCH,OAAFC,eACMqwE,EADNpwE,UAAA,iBAAE,WAC2B,MAAOC,MAAKqwE,gBACvC,SAAcnwE,GAAkBF,KAAKqwE,WAAarwD,EAAAA,sBAAsB9f,oCAsBxEL,OAAFC,eACMqwE,EADNpwE,UAAA,gBAAE,WAC0B,MAAOC,MAAKknC,WAAclnC,KAAKwwE,WAAaxwE,KAAKwwE,UAAU/rE,cACrF,SAAavE,GAAkBF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,oCAItEL,OAAFC,eAAMqwE,EAANpwE,UAAA,aAAE,WAAuB,OAAQC,KAAK+hC,cAAc7hC,uCAWlDiwE,EAAFpwE,UAAAoW,YAAE,WACEnW,KAAKwwE,UAAU/qB,aAAazjD,QAI9BmuE,EAAFpwE,UAAAmmE,SAAE,SAAS9sD,GACPpZ,KAAK0wE,aAAat3D,IAIpB+2D,EAAFpwE,UAAA4wE,MAAE,WACM3wE,KAAK4wE,WACP5wE,KAAK0wE,eAEP1wE,KAAKowE,SAAU,EAEVpwE,KAAKwwE,UAAUJ,SAClBpwE,KAAKwwE,UAAUG,QAEjB3wE,KAAKwwE,UAAU/qB,aAAazjD,QAG9BmuE,EAAFpwE,UAAA8wE,OAAE,WACE7wE,KAAKowE,SAAU,EACfpwE,KAAKwwE,UAAU/qB,aAAazjD,QAI9BmuE,EAAFpwE,UAAA2wE,aAAE,SAAat3D,IACNpZ,KAAK+hC,cAAc7hC,OAAWkZ,GACjCpZ,KAAKwwE,UAAUtK,SAAS9sD,GAErBA,IAASpZ,KAAK8wE,gBAAgB13D,EAAMyC,WACvC7b,KAAKuwE,QAAQl3D,MAAOiV,MAAOtuB,KAAK+hC,cAAe7hC,MAAOF,KAAK+hC,cAAc7hC,QAErEkZ,GACFA,EAAM4C,mBAKZm0D,EAAFpwE,UAAAihE,SAAE,WAEEhhE,KAAKwwE,UAAU/qB,aAAazjD,QAI9BmuE,EAAFpwE,UAAAka,MAAE,WACEja,KAAK+hC,cAAc9nB,SAIbk2D,EAAVpwE,UAAA+wE,gBAAA,SAA0Bj1D,GACtB,GAAMk1D,GAAa/wE,KAAKswE,iBACxB,OAAOhoE,OAAMkE,QAAQukE,GAAcA,EAAWt+D,QAAQoJ,IAAY,EAAIk1D,EAAWt3C,IAAI5d,mBA/HzFvZ,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,yBACVC,SAAU,gCACVI,MACEC,MAAS,mCACT4sB,YAAa,mBACbF,SAAU,UACVD,UAAW,WACXkyC,UAAW,aACXx+B,OAAQ,KACR4Z,kBAAmB,mBACnBk0B,qBAAsB,sBACtBhiC,sBAAuB,iHAlC3B1sC,KAAmBiI,EAAAA,aA2FnBjI,SAAAqD,GAAAR,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAYyuE,2BAhDZC,WAAA5uE,KAAGoB,EAAAA,MAAHlB,MAAS,qBAWTouE,YAAAtuE,KAAGoB,EAAAA,MAAHlB,MAAS,2BAUT8tE,oBAAAhuE,KAAGoB,EAAAA,MAAHlB,MAAS,mCAIT+tE,UAAAjuE,KAAGsX,EAAAA,OAAHpX,MAAU,0BAIVmpC,cAAArpC,KAAGoB,EAAAA,QAGH+e,KAAAngB,KAAGoB,EAAAA,QAGHe,WAAAnC,KAAGoB,EAAAA,SAvFHysE,KCgBMgB,IACJrB,GACAI,GACAC,GACAiB,GACAC,GACAC,IAUF3Y,IACQ2X,mBAAoBn0D,EAAAA,oCAjC5B,sBAyBA7Z,KAAC4D,EAAAA,SAAD1D,OACEkE,QAASyqE,GACTpqE,aAAcoqE,GACd/mE,WACEid,IAEEhd,QAAS4mE,GACTM,SAAQ,SAhCdC,KCiCAC,GAAA,wBAcEzxE,KAAF+J,KAAsB,SAGpB/J,KAAF00B,WAAmC,GAGjC10B,KAAF+9C,aAA0B,EAGxB/9C,KAAF29C,cAA2B,GAGzB39C,KAAFk/B,cAA2B,EAGzBl/B,KAAFuV,MAAmB,GAGjBvV,KAAFihB,OAAoB,GASlBjhB,KAAF0xE,SAA+B,OAS7B1xE,KAAF2K,KAAoB,KAMlB3K,KAAF2xE,gBAAoC,KAGlC3xE,KAAF0W,UAA8B,KAG5B1W,KAAF4xE,WAAwB,EAMtB5xE,KAAF6xE,cAA2B,EAUzB7xE,KAAF8xE,mBAAgC,EA/GhC,MAAAL,MCgBMM,IAIJh7D,EAAAA,MAAM,aAAc7B,EAAAA,OAAO+M,QAAS,EAAGjL,UAAW,gBAClDD,EAAAA,MAAM,QAAS7B,EAAAA,OAAO8B,UAAW,UACjCE,EAAAA,WAAW,aAAcC,EAAAA,QAAQ,mCAC7BjC,EAAAA,OAAO8B,UAAW,OAAQiL,QAAS,MACvC/K,EAAAA,WAAW,uBACPC,EAAAA,QAAQ,sCAAuCjC,EAAAA,OAAO+M,QAAS,OAOxD+vD,IAKXC,gBAAiBn7D,EAAAA,QAAQ,kBAAmBi7D,IAG5CG,YAAap7D,EAAAA,QAAQ,cAAei7D,oBCsDpC,QAAFI,GACY/xE,EACAw6B,EACAt7B,EAC8BwI,EAE/BuuB,GANT,GAAFj3B,GAQIQ,EARJoE,KAAAhE,OAAAA,WACYZ,GAAZgB,YAAYA,EACAhB,EAAZw7B,kBAAYA,EACAx7B,EAAZE,mBAAYA,EAC8BF,EAA1C0I,UAA0CA,EAE/B1I,EAAXi3B,QAAWA,EApBXj3B,EAAAgzE,qCAAqE,KAGnEhzE,EAAFizE,OAAsC,QAGpCjzE,EAAFkzE,uBAA2B,GAAI55D,GAAAA,aAG7BtZ,EAAFmzE,gBAAmC,OAfnC,MAFwC7yE,GAAxCyyE,EAAAvyE,GAqCEuyE,EAAFpyE,UAAA+zB,sBAAE,SAAyBC,GAMvB,MALI/zB,MAAKk0B,cAAcpc,eACrB06D,IAGFxyE,KAAKyyE,gCACEzyE,KAAKk0B,cAAcJ,sBAAsBC,IAOlDo+C,EAAFpyE,UAAAo0B,qBAAE,SAAwBJ,GAMtB,MALI/zB,MAAKk0B,cAAcpc,eACrB06D,IAGFxyE,KAAKyyE,gCACEzyE,KAAKk0B,cAAcC,qBAAqBJ,IAIzCo+C,EAAVpyE,UAAAu7B,sBACSt7B,KAAKq7B,aACRr7B,KAAKq7B,WAAar7B,KAAK46B,kBAAkBjC,OAAO34B,KAAKI,YAAYD,gBAM/DH,KAAKq2B,QAAQu7C,WACf5xE,KAAKq7B,WAAWU,gCAKZo2C,EAAVpyE,UAAAw7B,yBACI,GAAMm3C,GAAU1yE,KAAKoyE,oCAGjBpyE,MAAKq2B,QAAQw7C,cAAgBa,GAAoC,kBAAlBA,GAAQz4D,OACzDy4D,EAAQz4D,QAGNja,KAAKq7B,YACPr7B,KAAKq7B,WAAWkB,WAKZ41C,EAAVpyE,UAAA0yE,mDACQzyE,MAAK8H,YACP9H,KAAKoyE,qCAAuCpyE,KAAK8H,UAAsC,cAGnF9H,KAAKI,YAAYD,cAAc8Z,OAIjC9F,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAKgB,YAAYD,cAAc8Z,YAMlEk4D,EAAFpyE,UAAA2/C,iBAAE,SAAiBtmC,GACO,UAAlBA,EAAMD,QACRnZ,KAAKs7B,aACsB,SAAlBliB,EAAMD,SACfnZ,KAAKu7B,gBAGPv7B,KAAKsyE,uBAAuBj5D,KAAKD,IAInC+4D,EAAFpyE,UAAA4yE,kBAAE,SAAkBv5D,GAChBpZ,KAAKsyE,uBAAuBj5D,KAAKD,IAInC+4D,EAAFpyE,UAAA6yE,oBAAE,WACE5yE,KAAKqyE,OAAS,OAIdryE,KAAKV,mBAAmBsB,+BApJ5B0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEG,SAAU,8CACVC,QAAF,4oCACEG,cAAFC,EAAAA,kBAAAC,uFAKEJ,MACFC,MAAe,uBACTkpD,SAAN,KACI4mB,aAAJ,OACIhqC,YAAJ,MACI1+B,cAAJ,eACI2kC,yBAAJ,6CACID,oBAAJ,oBACIM,0BAAJ,kCACI2jC,qBAAJ,SACIC,2BAAJ,4BACIC,0BAAJ,kHAxDA1wE,KAAEiB,EAAAA,oBAmBFjB,SAAmBqD,GAAnBR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,cAdA9G,KAAEmvE,MAeFU,EAAA1uE,6EA2CA0uE,uBCtDIjO,GAAW,EAKf+O,GAAA,WAmBE,QAAFA,GACY3hD,EACD4hD,EAEPha,EACSz2C,OAAb,KAAAA,IAAAA,EAAA,cAAwCyhD,KALtC,IAAF9kE,GAAAY,IACYA,MAAZsxB,YAAYA,EACDtxB,KAAXkzE,mBAAWA,EAGElzE,KAAbyiB,GAAaA,EAnBXziB,KAAFk/B,aAAsCl/B,KAAKkzE,mBAAmB78C,QAAQ6I,aAGtEl/B,KAAAwxB,aAAkC,GAAI/xB,GAAAA,QAGtCO,KAAAmzE,aAAkC,GAAI1zE,GAAAA,QAGtCO,KAAAozE,cAAmC,GAAI3zE,GAAAA,QAanCyzE,EAAmBrtB,IAAMpjC,EAGzBywD,EAAmBZ,uBAAuBlxE,KACxCqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,SAApBA,EAAMi6D,WAA0C,UAAlBj6D,EAAMD,UACpDzM,EAAAA,KAAK,IAENpL,UAAU,WACTlC,EAAKoyB,aAAaxvB,OAClB5C,EAAKoyB,aAAavvB,aAIpBixE,EAAmBZ,uBAAuBlxE,KACxCqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,SAApBA,EAAMi6D,WAA0C,SAAlBj6D,EAAMD,UACpDzM,EAAAA,KAAK,IACLpL,UAAU,WAAM,MAAAlC,GAAKkyB,YAAYmB,YAEnCnB,EAAYqG,cAAcr2B,UAAU,WAClClC,EAAKg0E,cAAcpxE,KAAK5C,EAAKk0E,SAC7Bl0E,EAAKg0E,cAAcnxE,WACnB7C,EAAK+zE,aAAanxE,KAAK5C,EAAKk0E,SAC5Bl0E,EAAK+zE,aAAalxE,WAClB7C,EAAKm+D,kBAAiB,KACtBn+D,EAAKkyB,YAAYmB,YAGnBnB,EAAY+wB,gBACTjhD,KAAKqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAAA,GAAMyC,UAAYu4B,EAAAA,SAAWh1C,EAAK8/B,gBACvD59B,UAAU,WAAM,MAAAlC,GAAKo8B,UAjF5B,MAwFEy3C,GAAFlzE,UAAAy7B,MAAE,SAAM+3C,GAAN,GAAFn0E,GAAAY,IACIA,MAAKszE,QAAUC,EAGfvzE,KAAKkzE,mBAAmBZ,uBAAuBlxE,KAC7CqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAoB,UAApBA,EAAMi6D,YACtB3mE,EAAAA,KAAK,IAENpL,UAAU,WACTlC,EAAKg0E,cAAcpxE,KAAKuxE,GACxBn0E,EAAKg0E,cAAcnxE,WACnB7C,EAAKkyB,YAAYkiD,mBAGnBxzE,KAAKkzE,mBAAmBN,uBAM1BK,EAAFlzE,UAAA8yB,YAAE,WACE,MAAO7yB,MAAKwxB,aAAaoB,gBAM3BqgD,EAAFlzE,UAAAu9D,YAAE,WACE,MAAOt9D,MAAKmzE,aAAavgD,gBAM3BqgD,EAAFlzE,UAAA0zE,aAAE,WACE,MAAOzzE,MAAKozE,cAAcxgD,gBAM5BqgD,EAAFlzE,UAAA69B,cAAE,WACE,MAAO59B,MAAKsxB,YAAYsM,iBAM1Bq1C,EAAFlzE,UAAAsiD,cAAE,WACE,MAAOriD,MAAKsxB,YAAY+wB,iBAO1B4wB,EAAFlzE,UAAAktC,eAAE,SAAej3B,GACb,GAAIu+B,GAAWv0C,KAAK0zE,sBAgBpB,OAdI19D,KAAaA,EAASV,MAAQU,EAASwiB,OACzCxiB,EAASV,KAAOi/B,EAASj/B,KAAKU,EAASV,MAAQi/B,EAAS/b,MAAMxiB,EAASwiB,OAEvE+b,EAAS9b,qBAGPziB,IAAaA,EAAS6X,KAAO7X,EAAS0iB,QACxC1iB,EAAS6X,IAAM0mB,EAAS1mB,IAAI7X,EAAS6X,KAAO0mB,EAAS7b,OAAO1iB,EAAS0iB,QAErE6b,EAASo/B,mBAGX3zE,KAAKsxB,YAAY2b,iBAEVjtC,MAQTizE,EAAFlzE,UAAA6zE,WAAE,SAAWr+D,EAAoB0L,GAG7B,WAHJ,KAAA1L,IAAaA,EAAb,QAAA,KAAA0L,IAAiCA,EAAjC,IACIjhB,KAAK0zE,uBAAuBn+D,MAAMA,GAAO0L,OAAOA,GAChDjhB,KAAKsxB,YAAY2b,iBACVjtC,MAQTizE,EAAFlzE,UAAA8zE,UAAE,WACE,MAAO7zE,MAAK6yB,eAQdogD,EAAFlzE,UAAA+zE,YAAE,WACE,MAAO9zE,MAAKyzE,gBAINR,EAAVlzE,UAAA2zE,gCACI,MAAO1zE,MAAKsxB,YAAY4jB,YAAsD,kBAnMlF+9B,KCoCac,GAAkB,GAAIp/D,GAAAA,eAAoB,iBAG1Cq/D,GACT,GAAIr/D,GAAAA,eAAgC,8BAG3Bs/D,GACT,GAAIt/D,GAAAA,eAAqC,8BAchCu/D,IACX7pE,QAAS4pE,GACTpxD,MAAO+V,EAAAA,SACP7V,WAAYoxD,iBA+CZ,QAAFxW,GACctoC,EACAE,EACY2jC,EACoCrnB,EACpBD,EACJwiC,EACxBC,GAPZ,GAAFj1E,GAAAY,IACcA,MAAdq1B,SAAcA,EACAr1B,KAAdu1B,UAAcA,EACYv1B,KAA1Bk5D,UAA0BA,EACoCl5D,KAA9D6xC,gBAA8DA,EAExB7xC,KAAtCo0E,cAAsCA,EACxBp0E,KAAdq0E,kBAAcA,EA7Cdr0E,KAAAs0E,2BACAt0E,KAAAu0E,2BAAgD,GAAI90E,GAAAA,QACpDO,KAAAw0E,wBAA6C,GAAI/0E,GAAAA,QACjDO,KAAAy0E,oBAAgC,GAAIr7C,KA+BlCp5B,KAAF00E,eAA8CvvB,EAAAA,MAAY,WAAM,MAAA/lD,GAAKu1E,YAAYtsE,OAC3EjJ,EAAKw1E,gBACLx1E,EAAKw1E,gBAAgBxzE,KAAKsW,EAAAA,cAAU/R,OAUtC3F,KAAKmyC,gBAAkBP,EApH3B,MA6EE/xC,QAAFC,eAAM69D,EAAN59D,UAAA,mBAAE,WACE,MAAOC,MAAKo0E,cAAgBp0E,KAAKo0E,cAAcO,YAAc30E,KAAKs0E,yDAIpEz0E,OAAFC,eAAM69D,EAAN59D,UAAA,mBAAE,WACE,MAAOC,MAAKo0E,cAAgBp0E,KAAKo0E,cAAcvhD,YAAc7yB,KAAKw0E,yDAQpE30E,OAAFC,eAAM69D,EAAN59D,UAAA,iBAAE,WACE,MAAOC,MAAK6yB,6CAGdhzB,OAAFC,eAAM69D,EAAN59D,UAAA,uBAAE,WACE,GAAM61B,GAAS51B,KAAKo0E,aACpB,OAAOx+C,GAASA,EAAOg/C,gBAAkB50E,KAAKu0E,4DA6BhD5W,EAAF59D,UAAAo2B,KAAE,SAA0B0+C,EAClB7+C,GADR,GAAF52B,GAAAY,IAKI,IAFAg2B,EAAS8+C,EAAqB9+C,EAAQh2B,KAAK6xC,iBAAmB,GAAI4/B,KAE9Dz7C,EAAOvT,IAAMziB,KAAK+0E,cAAc/+C,EAAOvT,IACzC,KAAMmS,OAAM,mBAAmBoB,EAAOvT,GAA5C,kDAGI,IAAM+T,GAAax2B,KAAKm3B,eAAenB,GACjCi8C,EAAkBjyE,KAAKg1E,uBAAuBx+C,EAAYR,GAC1Di/C,EAAYj1E,KAAKk1E,qBAA2BL,EACA5C,EACAz7C,EACAR,EAWlD,OARKh2B,MAAK20E,YAAYtsE,QACpBrI,KAAKm1E,+CAGPn1E,KAAK20E,YAAYroE,KAAK2oE,GACtBA,EAAU3X,cAAch8D,UAAU,WAAM,MAAAlC,GAAKg2E,kBAAkBH,KAC/Dj1E,KAAK6yB,YAAY7wB,KAAKizE,GAEfA,GAMTtX,EAAF59D,UAAAs1E,SAAE,WACEr1E,KAAKs1E,cAAct1E,KAAK20E,cAO1BhX,EAAF59D,UAAAg1E,cAAE,SAActyD,GACZ,MAAOziB,MAAK20E,YAAYhzE,KAAK,SAAA4zE,GAAU,MAAAA,GAAO9yD,KAAOA,KAGvDk7C,EAAF59D,UAAAgC,YAAE,WAGE/B,KAAKs1E,cAAct1E,KAAKs0E,0BAQlB3W,EAAV59D,UAAAo3B,eAAA,SAAyBnB,GACrB,GAAMiC,GAAgBj4B,KAAKmiD,kBAAkBnsB,EAC7C,OAAOh2B,MAAKq1B,SAASsD,OAAOV,IAQtB0lC,EAAV59D,UAAAoiD,kBAAA,SAA4BqzB,GACxB,GAAMz+D,GAAQ,GAAImhB,GAAAA,eAChBC,iBAAkBn4B,KAAKq1B,SAASrf,WAAWoiB,SAC3CwZ,eAAgB4jC,EAAa5jC,gBAAkB5xC,KAAKmyC,kBACpDzd,WAAY8gD,EAAa9gD,WACzBqpB,YAAay3B,EAAaz3B,YAC1BpsC,UAAW6jE,EAAa7jE,UACxB+xC,SAAU8xB,EAAa9xB,SACvBzsC,UAAWu+D,EAAav+D,UACxBy6D,SAAU8D,EAAa9D,SACvB+D,UAAWD,EAAaC,UACxBC,oBAAqBF,EAAa1D,mBAOpC,OAJI0D,GAAa73B,gBACf5mC,EAAM4mC,cAAgB63B,EAAa73B,eAG9B5mC,GASD4mD,EAAV59D,UAAAi1E,uBAAA,SAAiC5/B,EAAqBpf,GAClD,GAAMS,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAW,GAAIqB,WACrE66C,GAAiBz7C,MAEda,EACF,GAAIC,GAAAA,gBAAgBq7C,GAAoBn8C,EAAO3e,iBAAkBqf,EAGrE,OAFqB0e,GAAQr9B,OAA2B8e,GAEpCG,UAYd2mC,EAAV59D,UAAAm1E,qBACA,SAAML,EACA5C,EACAz7C,EACAR,GAIF,GAAMi/C,GACF,GAAIhC,IAAmBz8C,EAAYy7C,EAAiBjyE,KAAKk5D,UAAWljC,EAAOvT,GAW/E,IARIuT,EAAO+nB,aACTvnB,EAAWoH,gBAAgBt8B,UAAU,WAC9B2zE,EAAU/1C,cACb+1C,EAAUz5C,UAKZq5C,YAAkCr/D,GAAAA,YACpCy8D,EAAgB99C,qBACd,GAAI7d,GAAAA,eAAkBu+D,EAAsB,MACnCx9C,UAAWrB,EAAOrrB,KAAMsqE,UAFzCA,SAGW,CACL,GAAMv+C,GAAW12B,KAAKs3B,gBAAmBtB,EAAQi/C,EAAWhD,GACtD16C,EAAa06C,EAAgBn+C,sBAC/B,GAAIgD,GAAAA,gBAAgB+9C,MAAwBlvE,GAAW+wB,GAC3Du+C,GAAU1X,kBAAoBhmC,EAAWP,SAO3C,MAJAi+C,GACGrB,WAAW59C,EAAOzgB,MAAOygB,EAAO/U,QAChCgsB,eAAejX,EAAOhgB,UAElBi/D,GAWDtX,EAAV59D,UAAAu3B,gBACA,SAAMtB,EACAi/C,EACAhD,GAEF,GAAMx7C,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,SAM5Ei/C,EAAkB,GAAI/+C,WACzBu7C,GAAoBF,IACpB8B,GAAiB/9C,EAAOrrB,OACxBsoE,GAAcgC,IAWjB,QARIj/C,EAAOrkB,WACL8kB,GAAiBA,EAAa5xB,IAA2Bia,EAAAA,eAAgB,OAC7E62D,EAAgBh8C,IAAI7a,EAAAA,gBAClB5e,MAAO81B,EAAOrkB,UACd1Q,OAAQC,EAAAA,OAIL,GAAIy1B,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAWogD,IAOpDhY,EAAV59D,UAAAq1E,kBAAA,SAA4BH,GACxB,GAAMnoE,GAAQ9M,KAAK20E,YAAYliE,QAAQwiE,EAEnCnoE,IAAS,IACX9M,KAAK20E,YAAY1gE,OAAOnH,EAAO,GAI1B9M,KAAK20E,YAAYtsE,SACpBrI,KAAKy0E,oBAAoB7nE,QAAQ,SAACgpE,EAAel1E,GAC3Ck1E,EACFl1E,EAAQgqD,aAAa,cAAekrB,GAEpCl1E,EAAQ22D,gBAAgB,iBAI5Br3D,KAAKy0E,oBAAoB18C,QACzB/3B,KAAK40E,gBAAgB5yE,UAQnB27D,EAAV59D,UAAAo1E,wDACI,GAAMU,GAAmB71E,KAAKq0E,kBAAkByB,qBAGhD,IAAID,EAAiBE,cAGnB,IAAK,GAFCC,GAAWH,EAAiBE,cAAcppE,SAEvCc,EAAIuoE,EAAS3tE,OAAS,EAAGoF,GAAK,EAAGA,IAAK,CAC7C,GAAIwoE,GAAUD,EAASvoE,EAEnBwoE,KAAYJ,GACO,WAArBI,EAAQrjC,UACa,UAArBqjC,EAAQrjC,UACPqjC,EAAQxrB,aAAa,eAEtBzqD,KAAKy0E,oBAAoB96C,IAAIs8C,EAASA,EAAQ3a,aAAa,gBAC3D2a,EAAQvrB,aAAa,cAAe,WAOpCiT,EAAV59D,UAAAu1E,cAAA,SAAwBY,GAGpB,IAFA,GAAIzoE,GAAIyoE,EAAQ7tE,OAEToF,KAKLyoE,EAAQzoE,GAAG+tB,wBAjTjBl5B,KAACogB,EAAAA,iDA1DDpgB,KAAEs2B,EAAAA,UAYFt2B,KAAEw2B,EAAAA,WALFx2B,KAAQ6zE,EAAAA,SAARhxE,aAAA7C,KA8FOsD,EAAAA,aAjFPtD,KAAQmvE,GAARtsE,aAAA7C,KAkFOsD,EAAAA,WAlFPtD,KAkFmBuD,EAAAA,OAlFnBrD,MAkF0BwxE,QAC1B1xE,SAAAqD,GAAAR,aAAA7C,KAAOuD,EAAAA,OAAPrD,MAAcyxE,QACd3xE,KAAqDq7D,EAArDx4D,aAAA7C,KAAOsD,EAAAA,WAAPtD,KAAmBwgB,EAAAA,aAtGnBxgB,KAAE8zE,EAAAA,oBAZFzY,KCqBI0Y,GAAmB,gBAuBrB,QAAFC,GACuBrB,EACX70E,EACAi9D,GAFWr9D,KAAvBi1E,UAAuBA,EACXj1E,KAAZI,YAAYA,EACAJ,KAAZq9D,QAAYA,EAVVr9D,KAAF0W,UAA2C,eArC3C,MAiDE4/D,GAAFv2E,UAAAsW,SAAE,WACOrW,KAAKi1E,YAMRj1E,KAAKi1E,UAAYsB,EAAiBv2E,KAAKI,YAAaJ,KAAKq9D,QAAQsX,eAIrE2B,EAAFv2E,UAAAoW,YAAE,SAAY/N,GACV,GAAMouE,GAAgBpuE,EAA1B,iBAAqDA,EAArD,qBAEQouE,KACFx2E,KAAKuzE,aAAeiD,EAActuB,8BAtCxC5lD,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mDACVC,SAAU,iBACVI,MACE0I,UAAW,gCACXqjC,oBAAqB,YACrBvsC,KAAQ,kDAdZA,KAAQ2wE,GAAR9tE,aAAA7C,KA2BKsD,EAAAA,aA9BLtD,KAAEiI,EAAAA,aAEFjI,KAAQq7D,wBAoBRjnD,YAAApU,KAAGoB,EAAAA,MAAHlB,MAAS,gBAGT+wE,eAAAjxE,KAAGoB,EAAAA,MAAHlB,MAAS,sBAETi0E,kBAAAn0E,KAAGoB,EAAAA,MAAHlB,MAAS,qBA1CT8zE,mBAmFE,QAAFI,GACwBzZ,EACZ78D,EACAi9D,GAFYr9D,KAAxBi9D,WAAwBA,EACZj9D,KAAZI,YAAYA,EACAJ,KAAZq9D,QAAYA,EALVr9D,KAAFyiB,GAAgB,oBAAoB4zD,KAjFpC,MAwFEK,GAAF32E,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,IACSA,MAAKi9D,aACRj9D,KAAKi9D,WAAasZ,EAAiBv2E,KAAKI,YAAaJ,KAAKq9D,QAAQsX,cAGhE30E,KAAKi9D,YACP9oD,QAAQC,UAAUC,KAAK,WACrB,GAAM+iB,GAAYh4B,EAAK69D,WAAWiW,kBAE9B97C,KAAcA,EAAUm7C,kBAC1Bn7C,EAAUm7C,gBAAkBnzE,EAAKqjB,sBA1B3CngB,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uCACVC,SAAU,iBACVI,MACEC,MAAS,mBACTmgC,OAAQ,8CA3DZ5gC,KAAQ2wE,GAAR9tE,aAAA7C,KAkEKsD,EAAAA,aArELtD,KAAEiI,EAAAA,aAEFjI,KAAQq7D,wBAgERl7C,KAAAngB,KAAGoB,EAAAA,SAjFHgzE,iCAAA,sBA6GAp0E,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,+DACVK,MAAOC,MAAS,0BA/GlB4zE,iCAAA,sBAwHAr0E,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,+DACVK,MAAOC,MAAS,0BA1HlB6zE,iCCAA,sBAuBAt0E,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACA2uB,EAAAA,cACAzuB,EAAAA,aACAD,IAEFK,SACEyrE,GACAmE,GACAI,GACAC,GACAC,GACAvwE,IAEFU,cACEorE,GACAmE,GACAI,GACAE,GACAD,IAEFvsE,WACEuzD,GACAuW,IAEFl/C,iBAAkBm9C,QAjDpBzP,gFCAA,MA4ByChjE,GAAzCm3E,EAAAj3E,GACEC,OAAFC,eACM+2E,EADN92E,UAAA,0BAAE,WACmC,MAAOC,MAAK82E,aAC/C,SAAuB52E,GAAiBF,KAAK82E,QAAU52E,mCAEvDL,OAAFC,eACM+2E,EADN92E,UAAA,0BAAE,WACmC,MAAOC,MAAK+2E,aAC/C,SAAuB72E,GAAiBF,KAAK+2E,QAAU72E,mCAEvDL,OAAFC,eACM+2E,EADN92E,UAAA,mBAAE,WAC6B,MAAOC,MAAKs8B,aACzC,SAAgBp8B,GAAkBF,KAAKs8B,QAAUp8B,mCAEjDL,OAAFC,eACM+2E,EADN92E,UAAA,2BAAE,WACqC,MAAOC,MAAKs8B,aACjD,SAAwBp8B,GAAkBF,KAAKs8B,QAAUp8B,kDA3B3DoC,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,wDACVC,SAAU,sBACVC,QAAS,qBAAsB,sBAC/BG,MACEC,MAAS,qCAGTi0E,KAAQ,IACRtV,UAAW,6CAIfuV,qBAAA30E,KAAGoB,EAAAA,QAIHwzE,qBAAA50E,KAAGoB,EAAAA,QAIHyzE,cAAA70E,KAAGoB,EAAAA,MAAHlB,MAAS,kBAIT40E,sBAAA90E,KAAGoB,EAAAA,SAzCHmzE,GA4ByCQ,EAAAA,qBCX5BhW,GACT,GAAI1sD,GAAAA,eAA6B,4BCoB/B2iE,IACJ,SACA,WACA,OACA,SACA,QACA,QACA,QACA,QACA,UAGE12C,GAAe,EAInB22C,GAAA,WACE,QAAFA,GAAqBxzB,EACAC,EACAC,EAEAC,GAJAlkD,KAArB+jD,0BAAqBA,EACA/jD,KAArBgkD,YAAqBA,EACAhkD,KAArBikD,iBAAqBA,EAEAjkD,KAArBkkD,UAAqBA,EA3DrB,MAAAqzB,MA6DaC,GACTpzB,EAAgBmzB,mBAiKlB,QAAFE,GACcr3E,EACAwH,EAEiBs8C,EACfF,EACAC,EACZF,EACsD2zB,EAC9CC,EACR93C,GAVF,GAAFzgC,GAYIQ,EAZJoE,KAAAhE,KAYU+jD,EAA2BC,EAAaC,EAAkBC,IAZpElkD,IACcZ,GAAdgB,YAAcA,EACAhB,EAAdwI,UAAcA,EAEiBxI,EAA/B8kD,UAA+BA,EAKnB9kD,EAAZu4E,iBAAYA,EA3IVv4E,EAAFslD,KAAmB,aAAa9jB,KAO9BxhC,EAAFw4E,WAAc,EAGZx4E,EAAFy4E,iBAAoB,EAMlBz4E,EAAFgxE,SAAqB,EAMnBhxE,EAAFqmD,aAAyC,GAAIhmD,GAAAA,QAM3CL,EAAF6lD,YAAwB,YAMtB7lD,EAAF04E,YAAe,EAuBb14E,EAAF8nC,WAAwB,EAwBtB9nC,EAAFoiC,WAAwB,EAgBtBpiC,EAAF24E,MAAoB,OAsBpB34E,EAAA44E,WAAsB,EAEpB54E,EAAF64E,uBACI,OACA,WACA,iBACA,QACA,OACA,QACAxvE,OAAO,SAAAyvE,GAAK,MAAAC,GAAAA,yBAAyB1+C,IAAIy+C,IAgBzC,IAAMx3E,GAAUtB,EAAKgB,YAAYD,oBAIjCf,GAAKg5E,oBAAsBV,GAAsBh3E,EAEjDtB,EAAKi5E,qBAAuBj5E,EAAKc,MAGjCd,EAAKqjB,GAAKrjB,EAAKqjB,GAKX7a,EAAU4qC,KACZ3S,EAAO/+B,kBAAkB,WACvBV,EAAYD,cAAcwyC,iBAAiB,QAAS,SAACv5B,GACnD,GAAIk/D,GAAKl/D,EAAgC,MACpCk/D,GAAGp4E,OAAUo4E,EAAGC,gBAAmBD,EAAGE,eAKzCF,EAAGG,kBAAkB,EAAG,GACxBH,EAAGG,kBAAkB,EAAG,QAMhCr5E,EAAKw4E,WAAax4E,EAAKwI,UAAUK,UACjC7I,EAAKy4E,gBAAqD,WAAnCn3E,EAAQkyC,SAASrgC,cAEpCnT,EAAKy4E,kBACPz4E,EAAK6lD,YAAc,EAA+BtY,SAAW,6BACA,uBAhRnE,MA2F8BjtC,GAA9B+3E,EAAA73E,GA0CEC,OAAFC,eACM23E,EADN13E,UAAA,gBAAE,WAEE,MAAIC,MAAKkkD,WAAyC,OAA5BlkD,KAAKkkD,UAAUz/C,SAC5BzE,KAAKkkD,UAAUz/C,SAEjBzE,KAAKknC,eAEd,SAAahnC,GACXF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,GAInCF,KAAKowE,UACPpwE,KAAKowE,SAAU,EACfpwE,KAAKylD,aAAazjD,yCAStBnC,OAAFC,eACM23E,EADN13E,UAAA,UAAE,WACmB,MAAOC,MAAK6lD,SAC/B,SAAO3lD,GAAiBF,KAAK6lD,IAAM3lD,GAASF,KAAK0kD,sCAajD7kD,OAAFC,eACM23E,EADN13E,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GAAkBF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,oCAItEL,OAAFC,eACM23E,EADN13E,UAAA,YAAE,WACqB,MAAOC,MAAK+3E,WACjC,SAAS73E,GACPF,KAAK+3E,MAAQ73E,GAAS,OACtBF,KAAK04E,iBAKA14E,KAAK24E,eAAiBR,EAAAA,yBAAyB1+C,IAAIz5B,KAAK+3E,SAC1D/3E,KAAKI,YAA6C,cAAEkC,KAAOtC,KAAK+3E,wCAYrEl4E,OAAFC,eACM23E,EADN13E,UAAA,aAAE,WACsB,MAAOC,MAAKo4E,oBAAoBl4E,WACtD,SAAUA,GACJA,IAAUF,KAAKE,QACjBF,KAAKo4E,oBAAoBl4E,MAAQA,EACjCF,KAAKylD,aAAazjD,yCAKtBnC,OAAFC,eACM23E,EADN13E,UAAA,gBAAE,WAC0B,MAAOC,MAAKg4E,eACtC,SAAa93E,GAAkBF,KAAKg4E,UAAYh4D,EAAAA,sBAAsB9f,oCAiEtEu3E,EAAF13E,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,IACQA,MAAK4H,UAAUK,WACjBjI,KAAK23E,iBAAiB/yE,QAAQ5E,KAAKI,YAAYD,eAAemB,UAAU,SAAA8X,GACtEha,EAAK04E,WAAa1+D,EAAMw/D,aACxBx5E,EAAKqmD,aAAazjD,UAKxBy1E,EAAF13E,UAAAoW,YAAE,WACEnW,KAAKylD,aAAazjD,QAGpBy1E,EAAF13E,UAAAgC,YAAE,WACE/B,KAAKylD,aAAaxjD,WAEdjC,KAAK4H,UAAUK,WACjBjI,KAAK23E,iBAAiB1yE,eAAejF,KAAKI,YAAYD,gBAI1Ds3E,EAAF13E,UAAA6+B,UAAE,WACM5+B,KAAKkkD,WAIPlkD,KAAKqmD,mBAMPrmD,KAAK64E,0BAIPpB,EAAF13E,UAAAka,MAAE,WAAgBja,KAAKI,YAAYD,cAAc8Z,SAG/Cw9D,EAAF13E,UAAA2gB,cAAE,SAAco4D,GACRA,IAAc94E,KAAKowE,SAAYpwE,KAAK+4E,WACtC/4E,KAAKowE,QAAU0I,EACf94E,KAAKylD,aAAazjD,SAItBy1E,EAAF13E,UAAAihE,SAAE,aAWUyW,EAAZ13E,UAAA84E,uBAAE,WACE,GAAMxzC,GAAWrlC,KAAKI,YAAYD,cAAcD,KAE5CF,MAAKq4E,uBAAyBhzC,IAChCrlC,KAAKq4E,qBAAuBhzC,EAC5BrlC,KAAKylD,aAAazjD,SAKZy1E,EAAZ13E,UAAA24E,cAAE,WACE,GAAIpB,GAAwB7kE,QAAQzS,KAAK+3E,QAAU,EACjD,KAAMiB,IAAgCh5E,KAAK+3E,QAKrCN,EAAZ13E,UAAAk5E,cAAE,WACE,MAAOj5E,MAAKi4E,sBAAsBxlE,QAAQzS,KAAK+3E,QAAU,GAIjDN,EAAZ13E,UAAAm5E,YAAE,WAEE,GAAIC,GAAYn5E,KAAKI,YAA6C,cAAE+4E,QACpE,OAAOA,IAAYA,EAASC,UAIpB3B,EAAZ13E,UAAA44E,YAAE,WACE,MAAiE,aAA1D34E,KAAKI,YAAYD,cAAcyyC,SAASrgC,eAOjD1S,OAAFC,eAAM23E,EAAN13E,UAAA,aAAE,WACE,QAAQC,KAAKi5E,iBAAoBj5E,KAAKI,YAAYD,cAAcD,OAAUF,KAAKk5E,eAC1El5E,KAAK83E,6CAOZj4E,OAAFC,eAAM23E,EAAN13E,UAAA,wBAAE,WACE,GAAIC,KAAK63E,gBAAiB,CAIxB,GAAMwB,GAAgBr5E,KAAKI,YAA8C,aAEzE,OAAOi5E,GAAc1sC,WAAa3sC,KAAK0pC,SAAW2vC,EAAchwC,QAAQ,GAAGvjB,OACvE9lB,KAAKowE,QAET,MAAOpwE,MAAKowE,UAAYpwE,KAAK0pC,uCAQjC+tC,EAAF13E,UAAAyuC,kBAAE,SAAkBC,GAAiBzuC,KAAK0uC,iBAAmBD,EAAIlF,KAAK,MAMpEkuC,EAAF13E,UAAA4uC,iBAAE,WAIO3uC,KAAKowE,SACRpwE,KAAKia,wBAvVX3X,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,4HAEVC,SAAU,WACVI,MAIEC,MAAS,oDACTu2E,2BAA4B,YAG5BzwC,YAAa,KACbmoC,qBAAsB,cACtBvP,aAAc,WACd8X,aAAc,WACdC,kBAAmB,uCACnBrqC,0BAA2B,2BAC3BH,sBAAuB,aACvBD,uBAAwB,sBACxBtf,SAAU,uBACVD,UAAW,sBACXkyC,UAAW,cAEbt3D,YAAaC,QAASslC,GAAqBrlC,YAAamtE,4CA3E1Dn1E,KAAEiI,EAAAA,aALFjI,KAAgCoD,EAAAA,WAehCpD,KAA4B0tC,EAAAA,UAA5B7qC,aAAA7C,KA2MKsD,EAAAA,WA3MLtD,KA2MiB2tC,EAAAA,SA3MjB3tC,KAAuCutC,EAAAA,OAAvC1qC,aAAA7C,KA4MKsD,EAAAA,aA5MLtD,KAAQwtC,EAAAA,mBAAR3qC,aAAA7C,KA6MKsD,EAAAA,aAzMLtD,KAAE+kB,KA2MF/kB,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiB2tC,EAAAA,OAAjB3tC,KAAyBuD,EAAAA,OAAzBrD,MAAgC6+D,QA7NhC/+D,KAAQm3E,EAAAA,kBAORn3E,KAAEgB,EAAAA,4BAoHFmB,WAAAnC,KAAGoB,EAAAA,QAuBH+e,KAAAngB,KAAGoB,EAAAA,QASHioC,cAAArpC,KAAGoB,EAAAA,QAMH4/B,WAAAhhC,KAAGoB,EAAAA,QAMHpB,OAAAA,KAAGoB,EAAAA,QAgBHgtC,oBAAApuC,KAAGoB,EAAAA,QAMHxD,QAAAoC,KAAGoB,EAAAA,QAUHq1E,WAAAz2E,KAAGoB,EAAAA,SAjNH+zE,GA2F8BD,gCC3F9B,sBAiBAl1E,KAAC4D,EAAAA,SAAD1D,OACEuE,cAAe0wE,GAAUZ,IACzB1wE,SACEC,EAAAA,aACAszE,EAAAA,gBACA5oC,IAEFpqC,SACEgzE,EAAAA,gBAGA5oC,GACA2mC,GACAZ,IAEFzsE,WAAYid,QAhCdsyD,gCCmBE35E,KAAFoI,QAAoC,GAAI3I,GAAAA,QAGtCO,KAAF45E,cAA0B,WAGxB55E,KAAF65E,kBAA8B,gBAG5B75E,KAAF4tE,eAA2B,iBAGzB5tE,KAAFguE,eAA2B,aAGzBhuE,KAAF6tE,cAA0B,gBAGxB7tE,KAAFiuE,cAA0B,YAGxBjuE,KAAF+tE,mBAA+B,oBAG7B/tE,KAAFkuE,mBAA+B,gBAG7BluE,KAAF2tE,uBAAmC,cAGjC3tE,KAAF0tE,2BAAuC,wBAjDvC,sBAaAprE,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,8GAbzBquD,KpB6BAkI,GAAA,WACE,QAAFA,GAAqBjrE,EACA45E,EACApjE,EACA4lB,EACAy9C,GAJA/5E,KAArBE,MAAqBA,EACAF,KAArB85E,aAAqBA,EACA95E,KAArB0W,UAAqBA,EACA1W,KAArBs8B,QAAqBA,EACAt8B,KAArB+5E,WAAqBA,EAlCrB,MAAA5O,oBAuFE,QAAFvI,GAAsBxiE,EAA8Cf,GAA9CW,KAAtBI,YAAsBA,EAA8CJ,KAApEX,QAAoEA,EAdlEW,KAAFonE,QAAqB,EAGnBpnE,KAAFqnE,WAAwB,EAMtBrnE,KAAFsnE,gBAA6B,EAG3BtnE,KAAFunE,oBAAiE,GAAI7uD,GAAAA,aAArE,MAIEkqD,GAAF7iE,UAAAi6E,aAAE,SAAajP,GACPA,EAAKzuC,SACPt8B,KAAKunE,oBAAoBluD,KAAK0xD,EAAK7qE,QAKvCL,OAAFC,eAAM8iE,EAAN7iE,UAAA,uBAAE,WACE,MAAOC,MAAKg3E,MAAQh3E,KAAKg3E,KAAK3uE,QAAUrI,KAAKg3E,KAAK,GAAG3uE,OACjDrI,KAAKonE,QAAUpnE,KAAKg3E,KAAK,GAAG3uE,OAAS,mCAG3Cu6D,EAAF7iE,UAAAk6E,cAAE,SAAcrsB,EAAkByC,GAC9B,GAAI6pB,GAAatsB,EAAW5tD,KAAKonE,QAAU/W,CAO3C,OAJIzC,KACFssB,GAAcl6E,KAAKm6E,iBAGdD,GAAcl6E,KAAKqnE,YAI5BzE,EAAF7iE,UAAAkqE,iBAAE,WAAA,GAAF7qE,GAAAY,IACIA,MAAKX,QAAQyB,kBAAkB,WAC7B1B,EAAKC,QAAQw/C,SAASjsB,eAAexxB,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WAC3D,GAAM+lE,GACFjoE,EAAKgB,YAAYD,cAAc4nD,cAAc,4BAE7Csf,IACFA,EAAWptD,4BA9ErB3X,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEG,SAAU,q6CACVC,QAAF,40BACEC,MACFC,MAAA,oBACMgH,KAAN,OACIqwE,gBAAJ,QAEA13E,SAAA,kBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFApCAu/D,EAAAn/D;qCA0CAwjE,aAAA3kE,KAAQoB,EAAAA,QAGRwjE,gBAAA5kE,KAAAoB,EAAAA,QAGAyjE,wBAAQ7kE,KAARoB,EAAAA,QAGA0jE,UAAA9kE,KAAAoB,EAAAA,QAGA2jE,aAAA/kE,KAAAoB,EAAAA,QAGA4jE,kBAAAhlE,KAAAoB,EAAAA,QAGA6jE,sBAAAjlE,KAAAsX,EAAAA,UASAgpD,mBCkDE,QAAFC,GAAsBvjE,EACsCm/D,EAC3B1C,EACC/6D,GAC9B,GAJkBhB,KAAtBV,mBAAsBA,EACsCU,KAA5Dy+D,aAA4DA,EAC3Bz+D,KAAjC+7D,aAAiCA,EACC/7D,KAAlCgB,KAAkCA,EAnChChB,KAAFwnE,eAA8D,GAAI9uD,GAAAA,aAGhE1Y,KAAFynE,eAA0D,GAAI/uD,GAAAA,aAG5D1Y,KAAF0nE,iBAAyD,GAAIhvD,GAAAA,cA8BpD1Y,KAAK+7D,aACR,KAAMC,IAA2B,cAEnC,KAAKh8D,KAAKy+D,aACR,KAAMzC,IAA2B,mBAGnC,IAAM2L,GAAiB3nE,KAAK+7D,aAAa6L,oBACnCC,EAAiB7nE,KAAK+7D,aAAa+L,kBAAkB,UACrDC,EAAe/nE,KAAK+7D,aAAa+L,kBAAkB,QAGrDE,EAAWD,EAAat5D,IAAI,SAACw5D,EAAMx6D,GACrC,OAAQw6D,KAAdA,EAAoBC,OAAQL,EAAep6D,KAEvCzN,MAAKmoE,UAAYH,EAASh7D,MAAM26D,GAAgBS,OAAOJ,EAASh7D,MAAM,EAAG26D,IAEzE3nE,KAAKqoE,YAAcroE,KAAK+7D,aAAauM,QA5CzC,MAtDEzoE,QAAFC,eACM+iE,EADN9iE,UAAA,kBAAE,WACsB,MAAOC,MAAKqoE,iBAClC,SAAenoE,GACb,GAAMqoE,GAAgBvoE,KAAKqoE,YACrBG,EACFxoE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,KAAWF,KAAK+7D,aAAauM,OACxFtoE,MAAKqoE,YAAcroE,KAAK+7D,aAAa0M,UAAUD,EAAWxoE,KAAK0oE,QAAS1oE,KAAK2oE,SACxE3oE,KAAK4oE,qBAAqBL,EAAevoE,KAAKqoE,cACjDroE,KAAK6oE,yCAMThpE,OAAFC,eACM+iE,EADN9iE,UAAA,gBAAE,WAC2B,MAAOC,MAAK+mC,eACvC,SAAa7mC,GACXF,KAAK+mC,UAAY/mC,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,IACxEF,KAAK8oE,cAAgB9oE,KAAK+oE,uBAAuB/oE,KAAK+mC,4CAKxDlnC,OAAFC,eACM+iE,EADN9iE,UAAA,eAAE,WAC0B,MAAOC,MAAKgpE,cACtC,SAAY9oE,GACVF,KAAKgpE,SAAWhpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAKzEL,OAAFC,eACM+iE,EADN9iE,UAAA,eAAE,WAC0B,MAAOC,MAAKipE,cACtC,SAAY/oE,GACVF,KAAKipE,SAAWjpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAmEzE2iE,EAAF9iE,UAAAc,mBAAE,WACEb,KAAK6oE,SAIPhG,EAAF9iE,UAAAmpE,cAAE,SAAcxM,GACZ,GAAI18D,KAAK8oE,eAAiBpM,EAAM,CAC9B,GAAMyM,GAAenpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAC9CC,EAAgBtpE,KAAK+7D,aAAawN,SAASvpE,KAAKqpE,YAChDG,EAAexpE,KAAK+7D,aAAa0N,WAAWN,EAAcG,EAAe5M,EAE/E18D,MAAKwnE,eAAenuD,KAAKmwD,GAG3BxpE,KAAKynE,eAAepuD,QAItBwpD,EAAF9iE,UAAA2pE,2BAAE,SAA2BtwD,GAKzB,GAAMmvD,GAAgBvoE,KAAKqoE,YACrBhwC,EAAQr4B,KAAKysC,QAEnB,QAAQrzB,EAAMyC,SACZ,IAAKuR,GAAAA,WACHptB,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,YAAahwC,EAAQ,GAAK,EACnF,MACF,KAAK/K,GAAAA,YACHttB,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,YAAahwC,GAAS,EAAI,EACnF,MACF,KAAKhL,GAAAA,SACHrtB,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,aAAc,EACvE,MACF,KAAK96C,GAAAA,WACHvtB,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,YAAa,EACtE,MACF,KAAKvsD,GAAAA,KACH9b,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,YACrD,EAAIroE,KAAK+7D,aAAa6N,QAAQ5pE,KAAKqoE,aACvC,MACF,KAAKpsD,GAAAA,IACHjc,KAAKqpE,WAAarpE,KAAK+7D,aAAa4N,gBAAgB3pE,KAAKqoE,YACpDroE,KAAK+7D,aAAa8N,kBAAkB7pE,KAAKqoE,aACxCroE,KAAK+7D,aAAa6N,QAAQ5pE,KAAKqoE,aACrC,MACF,KAAKp7C,GAAAA,QACHjtB,KAAKqpE,WAAajwD,EAAM6tC,OACpBjnD,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,aAAc,GACtDroE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,aAAc,EAC3D,MACF,KAAKl7C,GAAAA,UACHntB,KAAKqpE,WAAajwD,EAAM6tC,OACpBjnD,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YAAa,GACrDroE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,YAAa,EAC1D,MACF,KAAKlsD,GAAAA,MACL,IAAKC,GAAAA,MAOH,YANKpc,KAAKgqE,aAAchqE,KAAKgqE,WAAWhqE,KAAKqoE,eAC3CroE,KAAKkpE,cAAclpE,KAAK+7D,aAAa6N,QAAQ5pE,KAAKqoE,cAClDroE,KAAKynE,eAAepuD,OAEpBD,EAAM4C,kBAGV,SAEE,OAGAhc,KAAK+7D,aAAa0D,YAAY8I,EAAevoE,KAAKqpE,aACpDrpE,KAAK0nE,iBAAiBruD,KAAKrZ,KAAKqpE,YAGlCrpE,KAAKiqE,mBAEL7wD,EAAM4C,kBAIR6mD,EAAF9iE,UAAA8oE,MAAE,WACE7oE,KAAK8oE,cAAgB9oE,KAAK+oE,uBAAuB/oE,KAAKomB,UACtDpmB,KAAKkqE,WAAalqE,KAAK+oE,uBAAuB/oE,KAAK+7D,aAAauM,SAChEtoE,KAAKmqE,YACDnqE,KAAK+7D,aAAaqO,cAAc,SAASpqE,KAAK+7D,aAAawN,SAASvpE,KAAKqpE,aACpEgB,mBAET,IAAIC,GAAetqE,KAAK+7D,aAAa0N,WAAWzpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAC3ErpE,KAAK+7D,aAAawN,SAASvpE,KAAKqpE,YAAa,EACjDrpE,MAAKuqE,kBAnNa,EAoNGvqE,KAAK+7D,aAAayO,aAAaF,GAC/CtqE,KAAK+7D,aAAa6L,qBArNL,EAuNlB5nE,KAAKyqE,mBACLzqE,KAAKV,mBAAmBsB,gBAI1BiiE,EAAF9iE,UAAAkqE,iBAAE,WACEjqE,KAAK0qE,iBAAiBT,oBAIhBpH,EAAV9iE,UAAA0qE,4BACI,GAAME,GAAc3qE,KAAK+7D,aAAa8N,kBAAkB7pE,KAAKqpE,YACvDuB,EAAY5qE,KAAK+7D,aAAa8O,cACpC7qE,MAAK8qE,WACL,KAAK,GAAIr9D,GAAI,EAAGs9D,EAAO/qE,KAAKuqE,iBAAkB98D,EAAIk9D,EAAal9D,IAAKs9D,IAAQ,CArO1D,GAsOZA,IACF/qE,KAAK8qE,OAAOx+D,SACZy+D,EAAO,EAET,IAAMrO,GAAO18D,KAAK+7D,aAAa0N,WACzBzpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAC/BrpE,KAAK+7D,aAAawN,SAASvpE,KAAKqpE,YAAa57D,EAAI,GACjD6uB,EAAUt8B,KAAKgrE,kBAAkBtO,GACjChmD,EAAY1W,KAAK+7D,aAAamF,OAAOxE,EAAM18D,KAAKy+D,aAAa0C,QAAQ8J,eACrEC,EAAclrE,KAAKk+D,UAAYl+D,KAAKk+D,UAAUxB,OAAQ/2D,EAE5D3F,MAAK8qE,OAAO9qE,KAAK8qE,OAAOziE,OAAS,GAC5BiE,KAAK,GAAI6+D,IAAgB19D,EAAI,EAAGm9D,EAAUn9D,GAAIiJ,EAAW4lB,EAAS4uC,MAKnErI,EAAV9iE,UAAAirE,kBAAA,SAA4BtO,GACxB,QAASA,KACH18D,KAAKgqE,YAAchqE,KAAKgqE,WAAWtN,OACnC18D,KAAK0oE,SAAW1oE,KAAK+7D,aAAa0D,YAAY/C,EAAM18D,KAAK0oE,UAAY,MACrE1oE,KAAK2oE,SAAW3oE,KAAK+7D,aAAa0D,YAAY/C,EAAM18D,KAAK2oE,UAAY,IAOrE9F,EAAV9iE,UAAAgpE,uBAAA,SAAiCrM,GAC7B,MAAOA,IAAQ18D,KAAK4oE,qBAAqBlM,EAAM18D,KAAKqpE,YAChDrpE,KAAK+7D,aAAa6N,QAAQlN,GAAQ,MAIhCmG,EAAV9iE,UAAA6oE,qBAAA,SAA+BwC,EAAcC,GACzC,SAAUD,IAAMC,GAAMrrE,KAAK+7D,aAAawN,SAAS6B,IAAOprE,KAAK+7D,aAAawN,SAAS8B,IACzErrE,KAAK+7D,aAAaqN,QAAQgC,IAAOprE,KAAK+7D,aAAaqN,QAAQiC,KAO/DxI,EAAV9iE,UAAAw/D,oBAAA,SAA8B3rD,GAC1B,MAAQ5T,MAAK+7D,aAAaqF,eAAextD,IAAQ5T,KAAK+7D,aAAawE,QAAQ3sD,GAAQA,EAAM,MAInFivD,EAAV9iE,UAAA0sC,kBACI,MAAOzsC,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,sBAhRlCoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEG,SAAU,kkBACVF,SAAU,eACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJA3BAf,KAAEu7D,GAAF14D,aAAA7C,KAAAsD,EAAAA,aAiHAtD,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAAsD,EAAAA,cAtGAi9D,EAAAp/D,sEAwBAilE,UAAApmE,KAAAoB,EAAAA,QAcAilE,UAAArmE,KAAAoB,EAAAA,QASAsmE,aAAA1nE,KAAAoB,EAAAA,QAQAw6D,YAAA57D,KAAAoB,EAAAA,QAQA8jE,iBAAAllE,KAAAsX,EAAAA,SAGA6tD,iBAAAnlE,KAAQsX,EAAAA,SAGR8tD,mBAAAplE,KAAAsX,EAAAA,SAGA8wD,mBAAApoE,KAAAmU,EAAAA,UAAAjU,MAAAogE,OAMAC,mBCOE,QAAFE,GAAsBzjE,EACWy8D,EACC/6D,GAC9B,GAHkBhB,KAAtBV,mBAAsBA,EACWU,KAAjC+7D,aAAiCA,EACC/7D,KAAlCgB,KAAkCA,EAtBhChB,KAAFwnE,eAAuD,GAAI9uD,GAAAA,aAGzD1Y,KAAFg+D,aAAqD,GAAItlD,GAAAA,aAGvD1Y,KAAF0nE,iBAAyD,GAAIhvD,GAAAA,cAiBpD1Y,KAAK+7D,aACR,KAAMC,IAA2B,cAGnCh8D,MAAKqoE,YAAcroE,KAAK+7D,aAAauM,QAlBzC,MApDEzoE,QAAFC,eACMijE,EADNhjE,UAAA,kBAAE,WACsB,MAAOC,MAAKqoE,iBAClC,SAAenoE,GACb,GAAIqoE,GAAgBvoE,KAAKqoE,YACnBG,EACFxoE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,KAAWF,KAAK+7D,aAAauM,OACxFtoE,MAAKqoE,YAAcroE,KAAK+7D,aAAa0M,UAAUD,EAAWxoE,KAAK0oE,QAAS1oE,KAAK2oE,SACzEp0D,KAAK+4B,MAAMttC,KAAK+7D,aAAaqN,QAAQb,GA1BjB,KA2BpBh0D,KAAK+4B,MAAMttC,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,aA3BtB,KA4BtBroE,KAAK6oE,yCAMThpE,OAAFC,eACMijE,EADNhjE,UAAA,gBAAE,WAC2B,MAAOC,MAAK+mC,eACvC,SAAa7mC,GACXF,KAAK+mC,UAAY/mC,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,IACxEF,KAAKsrE,cAAgBtrE,KAAK+mC,WAAa/mC,KAAK+7D,aAAaqN,QAAQppE,KAAK+mC,4CAKxElnC,OAAFC,eACMijE,EADNhjE,UAAA,eAAE,WAC0B,MAAOC,MAAKgpE,cACtC,SAAY9oE,GACVF,KAAKgpE,SAAWhpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAKzEL,OAAFC,eACMijE,EADNhjE,UAAA,eAAE,WAC0B,MAAOC,MAAKipE,cACtC,SAAY/oE,GACVF,KAAKipE,SAAWjpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAsCzE6iE,EAAFhjE,UAAAc,mBAAE,WACEb,KAAK6oE,SAIP9F,EAAFhjE,UAAA8oE,MAAE,WAAA,GAAFzpE,GAAAY,IACIA,MAAKurE,WAAavrE,KAAK+7D,aAAaqN,QAAQppE,KAAK+7D,aAAauM,QAC9D,IAAIkD,GAAaxrE,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,aAC5CoD,EAAeD,EApGK,EAqGxBxrE,MAAK0rE,SACL,KAAK,GAAIj+D,GAAI,EAAGuhD,KAAoBvhD,EAtGZ,GAsG8BA,IACpDuhD,EAAI1iD,KAAKk/D,EAAaC,EAAeh+D,GArGhB,GAsGjBuhD,EAAI3mD,SACNrI,KAAK0rE,OAAOp/D,KAAK0iD,EAAIvgD,IAAI,SAAAk9D,GAAQ,MAAAvsE,GAAKwsE,mBAAmBD,MACzD3c,KAGJhvD,MAAKV,mBAAmBsB,gBAI1BmiE,EAAFhjE,UAAA8rE,cAAE,SAAcF,GACZ3rE,KAAKg+D,aAAa3kD,KAAKrZ,KAAK+7D,aAAa0N,WAAWkC,EAAM,EAAG,GAC7D,IAAIG,GAAQ9rE,KAAK+7D,aAAawN,SAASvpE,KAAKqpE,YACxCsB,EACA3qE,KAAK+7D,aAAa8N,kBAAkB7pE,KAAK+7D,aAAa0N,WAAWkC,EAAMG,EAAO,GAClF9rE,MAAKwnE,eAAenuD,KAAKrZ,KAAK+7D,aAAa0N,WAAWkC,EAAMG,EACxDv3D,KAAKE,IAAIzU,KAAK+7D,aAAa6N,QAAQ5pE,KAAKqpE,YAAasB,MAI3D5H,EAAFhjE,UAAA2pE,2BAAE,SAA2BtwD,GAKzB,GAAMmvD,GAAgBvoE,KAAKqoE,YACrBhwC,EAAQr4B,KAAKysC,QAEnB,QAAQrzB,EAAMyC,SACZ,IAAKuR,GAAAA,WACHptB,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YAAahwC,EAAQ,GAAK,EACpF,MACF,KAAK/K,GAAAA,YACHttB,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YAAahwC,GAAS,EAAI,EACpF,MACF,KAAKhL,GAAAA,SACHrtB,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,aAzIvC,EA0InB,MACF,KAAK96C,GAAAA,WACHvtB,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YA5IvC,EA6InB,MACF,KAAKvsD,GAAAA,KACH9b,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,aACrDroE,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,aAlJhB,GAmJpB,MACF,KAAKpsD,GAAAA,IACHjc,KAAKqpE,WAAarpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YArJtC,GAsJDroE,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,aAtJ9B,GAsJ4D,EAChF,MACF,KAAKp7C,GAAAA,QACHjtB,KAAKqpE,WACDrpE,KAAK+7D,aAAa+N,iBACd9pE,KAAKqoE,YAAajvD,EAAM6tC,QAAS,KA3JrB,GA4JpB,MACF,KAAK95B,GAAAA,UACHntB,KAAKqpE,WACDrpE,KAAK+7D,aAAa+N,iBACd9pE,KAAKqoE,YAAajvD,EAAM6tC,OAAS8kB,IAhKrB,GAiKpB,MACF,KAAK5vD,GAAAA,MACL,IAAKC,GAAAA,MACHpc,KAAK6rE,cAAc7rE,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,aAClD,MACF,SAEE,OAGAroE,KAAK+7D,aAAa0D,YAAY8I,EAAevoE,KAAKqpE,aACpDrpE,KAAK0nE,iBAAiBruD,KAAKrZ,KAAKqpE,YAGlCrpE,KAAKiqE,mBAEL7wD,EAAM4C,kBAGR+mD,EAAFhjE,UAAAisE,eAAE,WACE,MAAOhsE,MAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YArLd,IAyL1BtG,EAAFhjE,UAAAkqE,iBAAE,WACEjqE,KAAK0qE,iBAAiBT,oBAIhBlH,EAAVhjE,UAAA6rE,mBAAA,SAA6BD,GACzB,GAAIM,GAAWjsE,KAAK+7D,aAAamQ,YAAYlsE,KAAK+7D,aAAa0N,WAAWkC,EAAM,EAAG,GACnF,OAAO,IAAIR,IAAgBQ,EAAMM,EAAUA,EAAUjsE,KAAKmsE,kBAAkBR,KAItE5I,EAAVhjE,UAAAosE,kBAAA,SAA4BR,GAExB,OAAahmE,KAATgmE,GAA+B,OAATA,GACrB3rE,KAAK2oE,SAAWgD,EAAO3rE,KAAK+7D,aAAaqN,QAAQppE,KAAK2oE,UACtD3oE,KAAK0oE,SAAWiD,EAAO3rE,KAAK+7D,aAAaqN,QAAQppE,KAAK0oE,SACzD,OAAO,CAIT,KAAK1oE,KAAKgqE,WACR,OAAO,CAMT,KAAK,GAHCoC,GAAcpsE,KAAK+7D,aAAa0N,WAAWkC,EAAM,EAAG,GAGjDjP,EAAO0P,EAAapsE,KAAK+7D,aAAaqN,QAAQ1M,IAASiP,EAC9DjP,EAAO18D,KAAK+7D,aAAa4N,gBAAgBjN,EAAM,GAC/C,GAAI18D,KAAKgqE,WAAWtN,GAClB,OAAO,CAIX,QAAO,GAODqG,EAAVhjE,UAAAw/D,oBAAA,SAA8B3rD,GAC1B,MAAQ5T,MAAK+7D,aAAaqF,eAAextD,IAAQ5T,KAAK+7D,aAAawE,QAAQ3sD,GAAQA,EAAM,MAInFmvD,EAAVhjE,UAAA0sC,kBACI,MAAOzsC,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,sBA/NlCoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEG,SAAU,sbACVF,SAAU,mBACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,mHA3BAf,KAAEwc,EAAAA,eAAF3Z,aAAA7C,KAAAsD,EAAAA,cAUAm9D,EAAAt/D,sEAuBAilE,UAAApmE,KAAAoB,EAAAA,QAeAilE,UAAArmE,KAAAoB,EAAAA,QASAsmE,aAAA1nE,KAAAoB,EAAAA,QAQA8jE,iBAAAllE,KAAAsX,EAAAA,SAQAokD,eAAA17D,KAAAsX,EAAAA,SAGA8tD,mBAAAplE,KAAAsX,EAAAA,SAGA8wD,mBAAApoE,KAAAmU,EAAAA,UAAAjU,MAAAogE,OAMAG,mBCYE,QAAFD,GAAsBxjE,EACsCm/D,EAC3B1C,EACC/6D,GAC9B,GAJkBhB,KAAtBV,mBAAsBA,EACsCU,KAA5Dy+D,aAA4DA,EAC3Bz+D,KAAjC+7D,aAAiCA,EACC/7D,KAAlCgB,KAAkCA,EA7BhChB,KAAFwnE,eAAuD,GAAI9uD,GAAAA,aAGzD1Y,KAAFi+D,cAAsD,GAAIvlD,GAAAA,aAGxD1Y,KAAF0nE,iBAAyD,GAAIhvD,GAAAA,cAwBpD1Y,KAAK+7D,aACR,KAAMC,IAA2B,cAEnC,KAAKh8D,KAAKy+D,aACR,KAAMzC,IAA2B,mBAGnCh8D,MAAKqoE,YAAcroE,KAAK+7D,aAAauM,QA5BzC,MAnDEzoE,QAAFC,eACMgjE,EADN/iE,UAAA,kBAAE,WACsB,MAAOC,MAAKqoE,iBAClC,SAAenoE,GACb,GAAIqoE,GAAgBvoE,KAAKqoE,YACnBG,EACFxoE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,KAAWF,KAAK+7D,aAAauM,OACxFtoE,MAAKqoE,YAAcroE,KAAK+7D,aAAa0M,UAAUD,EAAWxoE,KAAK0oE,QAAS1oE,KAAK2oE,SACzE3oE,KAAK+7D,aAAaqN,QAAQb,KAAmBvoE,KAAK+7D,aAAaqN,QAAQppE,KAAKqoE,cAC9EroE,KAAK6oE,yCAMThpE,OAAFC,eACMgjE,EADN/iE,UAAA,gBAAE,WAC2B,MAAOC,MAAK+mC,eACvC,SAAa7mC,GACXF,KAAK+mC,UAAY/mC,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,IACxEF,KAAKqsE,eAAiBrsE,KAAKssE,uBAAuBtsE,KAAK+mC,4CAKzDlnC,OAAFC,eACMgjE,EADN/iE,UAAA,eAAE,WAC0B,MAAOC,MAAKgpE,cACtC,SAAY9oE,GACVF,KAAKgpE,SAAWhpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAKzEL,OAAFC,eACMgjE,EADN/iE,UAAA,eAAE,WAC0B,MAAOC,MAAKipE,cACtC,SAAY/oE,GACVF,KAAKipE,SAAWjpE,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,qCAgDzE4iE,EAAF/iE,UAAAc,mBAAE,WACEb,KAAK6oE,SAIP/F,EAAF/iE,UAAAwsE,eAAE,SAAeT,GACb,GAAMU,GACAxsE,KAAK+7D,aAAa0N,WAAWzpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAAayC,EAAO,EAEtF9rE,MAAKi+D,cAAc5kD,KAAKmzD,EAExB,IAAM7B,GAAc3qE,KAAK+7D,aAAa8N,kBAAkB2C,EAExDxsE,MAAKwnE,eAAenuD,KAAKrZ,KAAK+7D,aAAa0N,WACvCzpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAAayC,EAC5Cv3D,KAAKE,IAAIzU,KAAK+7D,aAAa6N,QAAQ5pE,KAAKqpE,YAAasB,MAI3D7H,EAAF/iE,UAAA2pE,2BAAE,SAA2BtwD,GAKzB,GAAMmvD,GAAgBvoE,KAAKqoE,YACrBhwC,EAAQr4B,KAAKysC,QAEnB,QAAQrzB,EAAMyC,SACZ,IAAKuR,GAAAA,WACHptB,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,YAAahwC,EAAQ,GAAK,EACrF,MACF,KAAK/K,GAAAA,YACHttB,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,YAAahwC,GAAS,EAAI,EACrF,MACF,KAAKhL,GAAAA,SACHrtB,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,aAAc,EACzE,MACF,KAAK96C,GAAAA,WACHvtB,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,YAAa,EACxE,MACF,KAAKvsD,GAAAA,KACH9b,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,aACtDroE,KAAK+7D,aAAawN,SAASvpE,KAAKqoE,aACrC,MACF,KAAKpsD,GAAAA,IACHjc,KAAKqpE,WAAarpE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKqoE,YACvD,GAAKroE,KAAK+7D,aAAawN,SAASvpE,KAAKqoE,aACzC,MACF,KAAKp7C,GAAAA,QACHjtB,KAAKqpE,WACDrpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YAAajvD,EAAM6tC,QAAU,IAAM,EAC/E,MACF,KAAK95B,GAAAA,UACHntB,KAAKqpE,WACDrpE,KAAK+7D,aAAa+N,iBAAiB9pE,KAAKqoE,YAAajvD,EAAM6tC,OAAS,GAAK,EAC7E,MACF,KAAK9qC,GAAAA,MACL,IAAKC,GAAAA,MACHpc,KAAKusE,eAAevsE,KAAK+7D,aAAawN,SAASvpE,KAAKqoE,aACpD,MACF,SAEE,OAGAroE,KAAK+7D,aAAa0D,YAAY8I,EAAevoE,KAAKqpE,aACpDrpE,KAAK0nE,iBAAiBruD,KAAKrZ,KAAKqpE,YAGlCrpE,KAAKiqE,mBAEL7wD,EAAM4C,kBAIR8mD,EAAF/iE,UAAA8oE,MAAE,WAAA,GAAFzpE,GAAAY,IACIA,MAAKqsE,eAAiBrsE,KAAKssE,uBAAuBtsE,KAAKomB,UACvDpmB,KAAKysE,YAAczsE,KAAKssE,uBAAuBtsE,KAAK+7D,aAAauM,SACjEtoE,KAAK0sE,WAAa1sE,KAAK+7D,aAAamQ,YAAYlsE,KAAKqpE,WAErD,IAAIsD,GAAa3sE,KAAK+7D,aAAaqO,cAAc,QAEjDpqE,MAAK4sE,UAAY,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,EAAG,IAAK,EAAG,EAAG,GAAI,KAAKn+D,IAAI,SAAAugD,GAAO,MAAAA,GAAIvgD,IACvE,SAAAq9D,GAAS,MAAA1sE,GAAKytE,oBAAoBf,EAAOa,EAAWb,QACxD9rE,KAAKV,mBAAmBsB,gBAI1BkiE,EAAF/iE,UAAAkqE,iBAAE,WACEjqE,KAAK0qE,iBAAiBT,oBAOhBnH,EAAV/iE,UAAAusE,uBAAA,SAAiC5P,GAC7B,MAAOA,IAAQ18D,KAAK+7D,aAAaqN,QAAQ1M,IAAS18D,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAC7ErpE,KAAK+7D,aAAawN,SAAS7M,GAAQ,MAIjCoG,EAAV/iE,UAAA8sE,oBAAA,SAA8Bf,EAAegB,GACzC,GAAIp2D,GAAY1W,KAAK+7D,aAAamF,OAC9BlhE,KAAK+7D,aAAa0N,WAAWzpE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,YAAayC,EAAO,GAChF9rE,KAAKy+D,aAAa0C,QAAQ4L,mBAC9B,OAAO,IAAI5B,IACPW,EAAOgB,EAAUzC,oBAAqB3zD,EAAW1W,KAAKgtE,mBAAmBlB,KAIvEhJ,EAAV/iE,UAAAitE,mBAAA,SAA6BlB,GAEzB,GAAMN,GAAaxrE,KAAK+7D,aAAaqN,QAAQppE,KAAKqpE,WAElD,QAAc1jE,KAAVmmE,GAAiC,OAAVA,GACvB9rE,KAAKitE,4BAA4BzB,EAAYM,IAC7C9rE,KAAKktE,6BAA6B1B,EAAYM,GAChD,OAAO,CAGT,KAAK9rE,KAAKgqE,WACR,OAAO,CAMT,KAAK,GAHCM,GAAetqE,KAAK+7D,aAAa0N,WAAW+B,EAAYM,EAAO,GAG5DpP,EAAO4N,EAActqE,KAAK+7D,aAAawN,SAAS7M,IAASoP,EAC7DpP,EAAO18D,KAAK+7D,aAAa4N,gBAAgBjN,EAAM,GAClD,GAAI18D,KAAKgqE,WAAWtN,GAClB,OAAO,CAIX,QAAO,GAODoG,EAAV/iE,UAAAktE,4BAAA,SAAsCtB,EAAcG,GAChD,GAAI9rE,KAAK2oE,QAAS,CAChB,GAAMwE,GAAUntE,KAAK+7D,aAAaqN,QAAQppE,KAAK2oE,SACzCyE,EAAWptE,KAAK+7D,aAAawN,SAASvpE,KAAK2oE,QAEjD,OAAOgD,GAAOwB,GAAYxB,IAASwB,GAAWrB,EAAQsB,EAGxD,OAAO,GAODtK,EAAV/iE,UAAAmtE,6BAAA,SAAuCvB,EAAcG,GACjD,GAAI9rE,KAAK0oE,QAAS,CAChB,GAAM2E,GAAUrtE,KAAK+7D,aAAaqN,QAAQppE,KAAK0oE,SACzC4E,EAAWttE,KAAK+7D,aAAawN,SAASvpE,KAAK0oE,QAEjD,OAAOiD,GAAO0B,GAAY1B,IAAS0B,GAAWvB,EAAQwB,EAGxD,OAAO,GAODxK,EAAV/iE,UAAAw/D,oBAAA,SAA8B3rD,GAC1B,MAAQ5T,MAAK+7D,aAAaqF,eAAextD,IAAQ5T,KAAK+7D,aAAawE,QAAQ3sD,GAAQA,EAAM,MAInFkvD,EAAV/iE,UAAA0sC,kBACI,MAAOzsC,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,sBA9QlCoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEG,SAAU,4fACVF,SAAU,cACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,iJAvBAf,KAAEu7D,GAAF14D,aAAA7C,KAAAsD,EAAAA,aAkGAtD,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAAsD,EAAAA,cAvFAk9D,EAAQr/D,sEAkBRilE,UAAApmE,KAAAoB,EAAAA,QAcAilE,UAAArmE,KAAAoB,EAAAA,QASAsmE,aAAA1nE,KAAAoB,EAAAA,QAQA8jE,iBAAAllE,KAAAsX,EAAAA,SAQAqkD,gBAAA37D,KAAAsX,EAAAA,SAGA8tD,mBAAAplE,KAAAsX,EAAAA,SAGA8wD,mBAAApoE,KAAAmU,EAAAA,UAAAjU,MAAAogE,OAMAE,mBCnDE,QAAFE,GAAsB5/C,EACsCmqD,EAC1BxR,EAC0B0C,EAC9CnmD,GAJQtY,KAAtBojB,MAAsBA,EACsCpjB,KAA5DutE,SAA4DA,EAC1BvtE,KAAlC+7D,aAAkCA,EAC0B/7D,KAA5Dy+D,aAA4DA,EAGxDz+D,KAAKutE,SAAS9nB,aAAankD,UAAU,WAAM,MAAAgX,GAAkB1X,iBA7CjE,MAiDEf,QAAFC,eAAMkjE,EAANjjE,UAAA,wBAAE,WACE,GAAiC,SAA7BC,KAAKutE,SAASC,YAChB,MAAOxtE,MAAK+7D,aACPmF,OAAOlhE,KAAKutE,SAASlE,WAAYrpE,KAAKy+D,aAAa0C,QAAQsM,gBACvDpD,mBAEX,IAAiC,QAA7BrqE,KAAKutE,SAASC,YAChB,MAAOxtE,MAAK+7D,aAAamQ,YAAYlsE,KAAKutE,SAASlE,WAErD,IAAMmC,GAAaxrE,KAAK+7D,aAAaqN,QAAQppE,KAAKutE,SAASlE,WAK3D,OAJwBrpE,MAAK+7D,aAAamQ,YACtClsE,KAAK+7D,aAAa0N,WAAW+B,EAAaA,EAAa,GAAI,EAAG,IAGtE,MAF2BxrE,KAAK+7D,aAAamQ,YACrClsE,KAAK+7D,aAAa0N,WAAW+B,EFtCT,GEsCqC,EAAIA,EAAa,GAAI,EAAG,qCAIvF3rE,OAAFC,eAAMkjE,EAANjjE,UAAA,yBAAE,WACE,MAAoC,SAA7BC,KAAKutE,SAASC,YACjBxtE,KAAKojB,MAAMsqD,2BAA6B1tE,KAAKojB,MAAMuqD,wDAIzD9tE,OAAFC,eAAMkjE,EAANjjE,UAAA,uBAAE,WACE,OACE+rE,MAAS9rE,KAAKojB,MAAMwqD,eACpBjC,KAAQ3rE,KAAKojB,MAAMyqD,cACnBC,aAAc9tE,KAAKojB,MAAM2qD,oBACzB/tE,KAAKutE,SAASC,8CAIlB3tE,OAAFC,eAAMkjE,EAANjjE,UAAA,uBAAE,WACE,OACE+rE,MAAS9rE,KAAKojB,MAAM4qD,eACpBrC,KAAQ3rE,KAAKojB,MAAM6qD,cACnBH,aAAc9tE,KAAKojB,MAAM8qD,oBACzBluE,KAAKutE,SAASC,8CAIlBxK,EAAFjjE,UAAAouE,qBAAE,WACEnuE,KAAKutE,SAASC,YAA2C,SAA7BxtE,KAAKutE,SAASC,YAAyB,aAAe,SAIpFxK,EAAFjjE,UAAAquE,gBAAE,WACEpuE,KAAKutE,SAASlE,WAA0C,SAA7BrpE,KAAKutE,SAASC,YACrCxtE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKutE,SAASlE,YAAa,GAC3DrpE,KAAK+7D,aAAa+N,iBACd9pE,KAAKutE,SAASlE,WAAyC,QAA7BrpE,KAAKutE,SAASC,aAAyB,GF3ErD,KEgF1BxK,EAAFjjE,UAAAsuE,YAAE,WACEruE,KAAKutE,SAASlE,WAA0C,SAA7BrpE,KAAKutE,SAASC,YACrCxtE,KAAK+7D,aAAagO,kBAAkB/pE,KAAKutE,SAASlE,WAAY,GAC1DrpE,KAAK+7D,aAAa+N,iBACd9pE,KAAKutE,SAASlE,WACmB,QAA7BrpE,KAAKutE,SAASC,YAAwB,EFrF9B,KE0F1BxK,EAAFjjE,UAAAuuE,gBAAE,WACE,OAAKtuE,KAAKutE,SAAS7E,WAGX1oE,KAAKutE,SAAS7E,UACjB1oE,KAAKuuE,YAAYvuE,KAAKutE,SAASlE,WAAYrpE,KAAKutE,SAAS7E,WAIhE1F,EAAFjjE,UAAAyuE,YAAE,WACE,OAAQxuE,KAAKutE,SAAS5E,UACjB3oE,KAAKuuE,YAAYvuE,KAAKutE,SAASlE,WAAYrpE,KAAKutE,SAAS5E,UAIxD3F,EAAVjjE,UAAAwuE,YAAA,SAAsBE,EAAUC,GAC5B,MAAiC,SAA7B1uE,KAAKutE,SAASC,YACTxtE,KAAK+7D,aAAaqN,QAAQqF,IAAUzuE,KAAK+7D,aAAaqN,QAAQsF,IACjE1uE,KAAK+7D,aAAawN,SAASkF,IAAUzuE,KAAK+7D,aAAawN,SAASmF,GAErC,QAA7B1uE,KAAKutE,SAASC,YACTxtE,KAAK+7D,aAAaqN,QAAQqF,IAAUzuE,KAAK+7D,aAAaqN,QAAQsF,GAGhEn6D,KAAK+4B,MAAMttC,KAAK+7D,aAAaqN,QAAQqF,GFlHpB,KEmHpBl6D,KAAK+4B,MAAMttC,KAAK+7D,aAAaqN,QAAQsF,GFnHjB,oBEM5BpsE,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEG,SAAU,mxBACVF,SAAU,oBACVM,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAjBAf,KAAQu7D,GAAR14D,aAAA7C,KAAAsD,EAAAA,aAuBAtD,SAAsEqD,GAAWR,aAAjF7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAiCrD,MAAjCo/D,QA1BAt/D,KAAQiB,EAAAA,qBAdRy/D,qDA2QAhjE,KAAA+7D,aAAAA,EAAE/7D,KAAFy+D,aAAAA,EACkCz+D,KAAlCV,mBAAAA,kQAHA,KAAA08D,IAAA,cAQA,KAAAh8D,KAAYy+D,aACZ,KAAAzC,IAAA,mBAGAh8D,MAAAi4C,aAAA70B,EAAAhb,QAAA9G,UAAA,WACAhC,EAAAsB,eAEQxB,EAARqmD,aAAAzjD,SA7CA,MAgDAnC,QAAOC,eAAP6iE,EAAA5iE,UAAA,WA3GA8E,+HAGAE,YAAA,EACAC,cAAA,kDAOAH,iIAGAE,YAAA,EACAC,cAAA,iDAIAH,+HAGAE,YAAA,EACAC,cAAA,iDAIAH,+HAGAE,YAAA,EACAC,cAAA,oMAyCAhF,KAAAylD,aAAAzjD,QAEA+C,YAAA,EACAC,cAAA,qDAIAH,6EACA7E,KAAA2uE,sBAAA,GAEA5pE,YAAA,EACAC,cAAA,yHA2BAhF,KAAAqpE,WAAArpE,KAAA+9D,SAAA/9D,KAAA+7D,aAAAuM,QAEItoE,KAAK4uE,aAAT5uE,KAAA6uE,iFAMA7uE,KAAA2uE,sBAAA,EACQ3uE,KAAK8uE,uFAMb9uE,KAAAylD,aAAAxjD,gDAKA,GAAAhB,GAAoCmH,EAApC,SAAAA,EAAA,SAAAA,EAAA,iCAGQ,GAAR2mE,GAAmB/uE,KAAnBgvE,kFAQAhvE,KAAOylD,aAAPzjD,4IAWA,SAAAhC,KAAAwtE,YAAAxtE,KAAAivE,qEACApuE,yGAOAb,KAAAwnE,eAAAnuD,KAAAqjD,8RAqBA18D,KAAAwtE,YAAAuB,0OAeApM,EAAAx9D,qkCAjOAtC,QAAA,67CACEC,MACFC,MAAA,gBAEEL,SAAF,cACEM,cAAFC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIAs/D,EAAAx6C,eAAA,WAAA,QACA7lB,KAAA2gE,iJAhJAN,EAAQl/D,gBA+PRyrE,kBAAA5sE,KAAAoB,EAAAA,QA7QAq6D,UAAAz7D,KAAAoB,EAAAA,6DAiKAglE,UAAApmE,KAAAoB,EAAAA,QAeAilE,UAAArmE,KAAGoB,EAAAA,QAQHsmE,aAAA1nE,KAAAoB,EAAAA,QAGAw6D,YAAA57D,KAAAoB,EAAAA,QAQA8jE,iBAAAllE,KAAAsX,EAAAA,SAQAokD,eAAA17D,KAAQsX,EAAAA,SAQRqkD,gBAAA37D,KAAAsX,EAAAA,SAGA6tD,iBAAAnlE,KAAQsX,EAAAA,SAGRq1D,YAAA3sE,KAAAmU,EAAAA,UAASjU,MAATqgE,MAMAsM,WAAA7sE,KAAAmU,EAAAA,UAAAjU,MAAAsgE,MAMAsM,gBAAA9sE,KAAGmU,EAAAA,UAAHjU,MAAAugE,OAMAJ,KCpOa0M,IAKX3/B,eAAgB54B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7B,EAAAA,OACZ+M,QAAS,EACTjL,UAAW,mBAEbE,EAAAA,WAAW,gBAAkBC,EAAAA,QAAQ,mCAAoCjC,EAAAA,OACvE+M,QAAS,EACTjL,UAAW,kBAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,eAAgBjC,EAAAA,OAAO+M,QAAS,QAIlEqtD,eAAgBx4D,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7B,EAAAA,OAAO+M,QAAS,KAC9BlL,EAAAA,MAAM,QAAS7B,EAAAA,OAAO+M,QAAS,KAI/B/K,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oDlBWhCo4D,GAAgB,EAGP3R,GACT,GAAIjpD,GAAAA,eAAqC,kCAQhCuuD,IACX74D,QAASuzD,GACT/6C,MAAO+V,EAAAA,SACP7V,WAAYysD,IAKdC,GAAA,WACE,QAAFA,GAAqBrvE,GAAAJ,KAArBI,YAAqBA,EA5ErB,MAAAqvE,MA8EaC,GACTloE,EAAWioE,mBAwCb,QAAF3T,GAAcn0D,GACd,MAAI/H,GAAJoE,KAAAhE,KAAU2H,IAAV3H,KATA,MAJ6CN,GAA7Co8D,EAAAl8D,GAgBEk8D,EAAF/7D,UAAAgI,gBAAE,WACE/H,KAAK2vE,UAAUb,kCApCnBxsE,KAACC,EAAAA,UAADC,OAAAC,SAAA,yBACEG,SAAU,2lBACVC,QAAF,shBACEC,MACFC,MAAA,yBACM6sE,oBAAN,UACIC,uCAAJ,sBAEAl2D,YACA01D,GAAA3/B,eACA2/B,GAAAC,gBAEA5sE,SAAA,uBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEV,QAAF,sEA9EAm5D,EAAAr4D;4DAsFAq4D,mEAyKA97D,KAAAq1B,SAAAA,EAAsBr1B,KAAtBX,QAAsBA,EACAW,KAAtB4V,kBAAAA,EACsB5V,KAAtB+7D,aAAAA,EACsB/7D,KAAtBgB,KAAAA,EAEkChB,KAAlC8H,UAA8CA,kbAP9C,KAAAk0D,IAA8C,cAW9Ch8D,MAAAmyC,gBAAAP,EAtEA,MAyEA/xC,QAAAC,eAAAm8D,EAAAl8D,UAAA,WAhJA8E,+FAIA80B,0FAGA50B,YAAA,EACAC,cAAA,+CAOAH,oCAAA7E,KAAAk8D,iBAAAl8D,KAAAk8D,iBAAAC,uBAAAx2D,KAGAg0B,+BAGA50B,YAAA,EACAC,cAAA,gJAUAD,YAAA,EACAC,cAAA,kDAIAH,qEAAA7E,KAAAk8D,iBAAAz3D,WAAAzE,KAAAknC,WAGAvN,gBAEA,GAAA0L,GAAArlB,EAAAA,sBAAA9f,wBACUF,KAAVknC,UAAA7B,EAEQrlC,KAARo8D,gBAAAp6D,KAAAqjC,KAGAtgC,YAAA,EACAC,cAAA,gDA6BAH,8FAEEG,cAAF,mDAOAH,gGACEG,cAAF,kDAIAH,wEACAE,YAAA,EACAC,cAAA,kDAGAH,wEACAE,YAAA,EACAC,cAAA,qDAAAH,gFAGAE,YAAA,EACAC,cAAA,oDA4CAhF,KAAAq8D,mBAAA1oD,cACI3T,KAAKo8D,gBAATn6D,WACQjC,KAARs8D,YACQt8D,KAARs8D,UAAA7pC,UAEQzyB,KAAKu8D,mBAAb,sCAOA,GAAAtwC,GAAAjsB,KAAA+mC,2BACA/mC,KAAA+7D,aAAAS,SAAAvwC,EAAAjsB,KAAA+mC,YACQ/mC,KAARy8D,iBAAAz6D,KAAA06D,qLAoBA,IAAA18D,KAAAk8D,iBAAA,KAAAtnC,OAAA,8DAEA50B,MAAAk8D,iBAAA5tC,EACAtuB,KAAAq8D,mBACQr8D,KAARk8D,iBAAAS,aAAAr7D,UAAA,SAAApB,GAAA,MAAAd,GAAA2nC,UAAA7mC,mEAQA,IAAAF,KAAAk8D,iBACA,KAAAtnC,OAAA,+DAEM50B,MAAN8H,YACA9H,KAAA48D,0BAAA58D,KAAA8H,UAAAo0B,eAEAl8B,KAAA68D,QAAA78D,KAAA88D,gBAAA98D,KAAA+8D,eACA/8D,KAAA07B,SAAA,EAEI17B,KAAKg9D,aAAT3jD,gDAMA,IAAArZ,KAAA07B,QAAA,CAEM17B,KAANs8D,WAAAt8D,KAAAs8D,UAAAxkD,eACA9X,KAAAs8D,UAAApkD,SAEMlY,KAAKi9D,aACXj9D,KAAAi9D,WAAAzhC,QACQx7B,KAAKi9D,WAAb,MAEMj9D,KAAKk9D,iBAAXl9D,KAAAk9D,gBAAA5hB,YACAt7C,KAAAk9D,gBAAAhlD,QAGA,IAAAilD,GAAA,oCAKU/9D,EAAKg+D,aAAf/jD,OACQja,EAAKw9D,0BAAb,MAGA58D,MAAA48D,2BACA,kBAAA58D,MAAA48D,0BAAA3iD,6DAWAkjD,+FAYAn9D,KAAAi9D,WAAAj9D,KAAAq9D,QAAAlnC,KAAA2lC,IACAnqD,UAAA3R,KAAAgB,KAAAhB,KAAAgB,KAAAd,MAAA,MAEQmX,iBAAkBrX,KAA1B4V,kBACM8e,WAAN,0BAEA10B,KAAAi9D,WAAkBK,cAAlBh8D,UAAA,WAAA,MAAAlC,GAAAo8B,UACAx7B,KAAAi9D,WAAAM,kBAAAC,WAAAx9D,KAEIA,KAAKy9D,0JAQTz9D,KAAAs8D,WAEAt8D,KAAA09D,eAGA19D,KAAAs8D,UAAAxkD,gBACA9X,KAAAu8D,mBAAAv8D,KAAAs8D,UAAAvkD,OAAA/X,KAAAk9D,iBAEQl9D,KAAKu8D,mBAAbvlC,SAAAwmC,WAAAx9D,KACMA,KAAKy9D,YAELz9D,KAAKX,QAAXw/C,SAAAjsB,eAAAxxB,KAAAsL,EAAAA,KAAA,IAAApL,UAAA,uKAWUy8C,aAAa,EACjBJ,cAAN,mCACMhsC,UAAW3R,KAAjBgB,KACM4wC,eAAN5xC,KAAAmyC,kBACMzd,WAAN,wBAEA10B,MAAAs8D,UAAAt8D,KAAAq1B,SAAAsD,OAAwCV,GACxCj4B,KAAAs8D,UAAAzkC,eAAA6yB,aAAA,OAAA,UAEIvpD,EAAAA,MAAJnB,KAAAs8D,UAAyB1+B,gBAAiB59B,KAA1Cs8D,UAAyD3kC,cAAzD33B,KAAAs8D,UAAAja,gBAAAjhD,KAAAqH,EAAAA,OAAA,SAAA2Q,GAGA,MACWA,GADXyC,UAAAu4B,EAAAA,iEAKA9yC,UAAA,WAAiC,MAAjClC,GAAAo8B,sKAQAiZ,sBAAA,2BACOC,wBAAP,GACOC,mBAAP,GACO2N,qBACAhN,gBAEPK,QAAA,QACAC,QAAA,SACUI,SAAV,QACUC,SAAV,QAGAN,QAAA,QACAC,QAAA,MACUI,SAAV,QACUC,SAAV,WAGAN,QAAA,MACAC,QAAA,SACUI,SAAV,MACUC,SAAV,QAGAN,QAAA,MACAC,QAAA,MACUI,SAAV,MACUC,SAAV,sNAiBUj2C,KAAKu8D,mBAAfvlC,SAAA6wB,MAAAA,GAEM7nD,KAAKi9D,aACXj9D,KAAAi9D,WAAAM,kBAAA1V,MAAAA,IAGAoU,EAAA92D,2EA/XAzC,SAAA,gBACES,gBAAiBC,EAAAA,wBAAnBC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA+4D,EAAA9zC,eAAiB,WAAjB,QACA7lB,KAAAq7D,gEA/FAr7D,SAAQqD,GAARR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAAo7D,QAjCAt7D,KAAEu7D,GAAF14D,aAAA7C,KAAAsD,EAAAA,aAkBAtD,KAAEwc,EAAAA,eAAF3Z,aAAA7C,KAAAsD,EAAAA,aAKAtD,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,eAMA6yD,EAAAx4D,gBAjCAq6D,0BAAAx7D,KAAAoB,EAAAA,QAuRAq6D,UAAAz7D,KAAAoB,EAAAA,0DA9IAm5D,UAAAv6D,KAAAoB,EAAAA,QAGAe,WAAAnC,KAAAoB,EAAAA,QAYAs6D,eAAA17D,KAAAsX,EAAAA,SAGAqkD,gBAAA37D,KAAAsX,EAAAA,SAcA8a,aAAApyB,KAAAoB,EAAAA,QAQAw6D,YAAA57D,KAAAoB,EAAAA,QAmBAs5D,eAAA16D,KAAGsX,EAAAA,OAAHpX,MAAA,YAMA46D,eAAA96D,KAAAsX,EAAAA,OAAApX,MAAA,YAGA24B,SAAA74B,KAAAoB,EAAAA,SAMAu4D,KCpLakC,IACX9zD,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAgmD,MAC9Bp9B,OAAO,GAIIq9B,IACXh0D,QAASi0D,EAAAA,cACTh0D,YAAa8N,EAAAA,WAAW,WAAM,MAAAgmD,MAC9Bp9B,OAAO,GASTu9B,GAAA,WAIE,QAAFA,GAEW9jB,EAEA+jB,GAFAx+D,KAAXy6C,OAAWA,EAEAz6C,KAAXw+D,cAAWA,EACPx+D,KAAKE,MAAQF,KAAKy6C,OAAOv6C,MAnE7B,MAAAq+D,oBAiPE,QAAFH,GACch+D,EACW27D,EAC2B0C,EAC1BC,GAJxB,GAAFt/D,GAAAY,IAKI,IAJUA,KAAdI,YAAcA,EACWJ,KAAzB+7D,aAAyBA,EAC2B/7D,KAApDy+D,aAAoDA,EAC1Bz+D,KAA1B0+D,WAA0BA,EAhExB1+D,KAAF2+D,WACM,GAAIjmD,GAAAA,aAGR1Y,KAAF4+D,UACM,GAAIlmD,GAAAA,aAGR1Y,KAAF28D,aAAiB,GAAIjkD,GAAAA,aAGnB1Y,KAAFo8D,gBAAoB,GAAI1jD,GAAAA,aAEtB1Y,KAAF6kD,WAAe,aAEf7kD,KAAA6+D,aAA+C,aAE/C7+D,KAAA8+D,mBAA+B,aAE/B9+D,KAAA++D,wBAAoC5tD,EAAAA,aAAaC,MAEjDpR,KAAAg/D,oBAAgC7tD,EAAAA,aAAaC,MAG7CpR,KAAAi/D,gBAAyC,WACrC,MAAO7/D,GAAK8/D,gBACR,MAAQC,oBAAuBC,KAAQhgE,EAAKgB,YAAYD,cAAcD,SAI9EF,KAAAq/D,cAAuC,SAACt4C,GACpC,GAAMu4C,GAAelgE,EAAKmgE,oBAAoBngE,EAAK28D,aAAayD,YAAYz4C,EAAQ7mB,OACpF,QAASd,EAAKqV,MAAQ6qD,GAClBlgE,EAAK28D,aAAa0D,YAAYrgE,EAAKqV,IAAK6qD,IAAiB,EACzD,MAAQI,kBAAqBjrD,IAAOrV,EAAKqV,IAAKkrD,OAAUL,KAIhEt/D,KAAA4/D,cAAuC,SAAC74C,GACpC,GAAMu4C,GAAelgE,EAAKmgE,oBAAoBngE,EAAK28D,aAAayD,YAAYz4C,EAAQ7mB,OACpF,QAASd,EAAK0e,MAAQwhD,GAClBlgE,EAAK28D,aAAa0D,YAAYrgE,EAAK0e,IAAKwhD,IAAiB,EACzD,MAAQO,kBAAqB/hD,IAAO1e,EAAK0e,IAAK6hD,OAAUL,KAIhEt/D,KAAA8/D,iBAA0C,SAAC/4C,GACvC,GAAMu4C,GAAelgE,EAAKmgE,oBAAoBngE,EAAK28D,aAAayD,YAAYz4C,EAAQ7mB,OACpF,OAAQd,GAAK2gE,aAAgBT,IAAgBlgE,EAAK2gE,YAAYT,IAClDU,qBAAuB,GAA/B,MAKRhgE,KAAAigE,WAAMC,EAAAA,WAAWC,SACNngE,KAAKi/D,gBAAiBj/D,KAAKq/D,cAAer/D,KAAK4/D,cAAe5/D,KAAK8/D,mBAG9E9/D,KAAAk/D,iBAA4B,GAOnBl/D,KAAK+7D,aACR,KAAMC,IAA2B,cAEnC,KAAKh8D,KAAKy+D,aACR,KAAMzC,IAA2B,mBAInCh8D,MAAKg/D,oBAAsBjD,EAAaqE,cAAc9+D,UAAU,WAC9DlC,EAAKc,MAAQd,EAAKc,QA/PxB,MA+FEL,QAAFC,eACMs+D,EADNr+D,UAAA,qBAAE,SACkBG,GADlB,GAAFd,GAAAY,IAESE,KAILF,KAAKqgE,YAAcngE,EACnBF,KAAKqgE,YAAYC,eAAetgE,MAChCA,KAAK++D,wBAAwBprD,cAE7B3T,KAAK++D,wBAA0B/+D,KAAKqgE,YAAY5D,iBAAiBn7D,UAAU,SAAC8kB,GAC1EhnB,EAAKc,MAAQkmB,EACbhnB,EAAKy/D,aAAaz4C,GAClBhnB,EAAKylD,aACLzlD,EAAKw/D,UAAUvlD,KAAK,GAAIklD,IAAwBn/D,EAAMA,EAAKgB,YAAYD,gBACvEf,EAAKu/D,WAAWtlD,KAAK,GAAIklD,IAAwBn/D,EAAMA,EAAKgB,YAAYD,oDAM5EN,OAAFC,eACMs+D,EADNr+D,UAAA,2BAAE,SACwBG,GACtBF,KAAK+/D,YAAc7/D,EACnBF,KAAK8+D,sDAKPj/D,OAAFC,eACMs+D,EADNr+D,UAAA,aAAE,WACwB,MAAOC,MAAK0pB,YACpC,SAAUxpB,GACRA,EAAQF,KAAK+7D,aAAayD,YAAYt/D,GACtCF,KAAKk/D,iBAAmBh/D,GAASF,KAAK+7D,aAAawE,QAAQrgE,GAC3DA,EAAQF,KAAKu/D,oBAAoBr/D,EACjC,IAAMsgE,GAAUxgE,KAAKE,KACrBF,MAAK0pB,OAASxpB,EACdF,KAAKygE,aAAavgE,GAEbF,KAAK+7D,aAAaS,SAASgE,EAAStgE,IACvCF,KAAK28D,aAAatjD,KAAKnZ,oCAM3BL,OAAFC,eACMs+D,EADNr+D,UAAA,WAAE,WACsB,MAAOC,MAAK2pB,UAClC,SAAQzpB,GACNF,KAAK2pB,KAAO3pB,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,IACnEF,KAAK8+D,sDAKPj/D,OAAFC,eACMs+D,EADNr+D,UAAA,WAAE,WACsB,MAAOC,MAAKupB,UAClC,SAAQrpB,GACNF,KAAKupB,KAAOvpB,KAAKu/D,oBAAoBv/D,KAAK+7D,aAAayD,YAAYt/D,IACnEF,KAAK8+D,sDAKPj/D,OAAFC,eACMs+D,EADNr+D,UAAA,gBAAE,WAC0B,QAASC,KAAKknC,eACxC,SAAahnC,GACX,GAAMmlC,GAAWrlB,EAAAA,sBAAsB9f,GACjCQ,EAAUV,KAAKI,YAAYD,aAE7BH,MAAKknC,YAAc7B,IACrBrlC,KAAKknC,UAAY7B,EACjBrlC,KAAKo8D,gBAAgB/iD,KAAKgsB,IAIxBA,GAAY3kC,EAAQ8pB,MAItB9pB,EAAQ8pB,wCAoFZ4zC,EAAFr+D,UAAAgC,YAAE,WACE/B,KAAK++D,wBAAwBprD,cAC7B3T,KAAKg/D,oBAAoBrrD,cACzB3T,KAAK28D,aAAa16D,WAClBjC,KAAKo8D,gBAAgBn6D,YAIvBm8D,EAAFr+D,UAAA2gE,0BAAE,SAA0BvxC,GACxBnvB,KAAK8+D,mBAAqB3vC,GAI5BivC,EAAFr+D,UAAA4gE,SAAE,SAASxhB,GACP,MAAOn/C,MAAKigE,WAAajgE,KAAKigE,WAAW9gB,GAAK,MAOhDif,EAAFr+D,UAAA6gE,6BAAE,WACE,MAAO5gE,MAAK6gE,6BAOdzC,EAAFr+D,UAAA8gE,0BAAE,WACE,MAAO7gE,MAAK0+D,WAAa1+D,KAAK0+D,WAAWmC,4BAA8B7gE,KAAKI,aAI9Eg+D,EAAFr+D,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKE,MAAQA,GAIfk+D,EAAFr+D,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAK6+D,aAAe1vC,GAItBivC,EAAFr+D,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GAIpBivC,EAAFr+D,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,GAGlB8uC,EAAFr+D,UAAAitB,WAAE,SAAW5T,GACT,GAAM0nD,GAAiB1nD,EAAM6tC,QAAU7tC,EAAMyC,UAAY0R,EAAAA,UAErDvtB,MAAKqgE,aAAeS,IAAmB9gE,KAAKI,YAAYD,cAAc4gE,WACxE/gE,KAAKqgE,YAAYlqC,OACjB/c,EAAM4C,mBAIVoiD,EAAFr+D,UAAAihE,SAAE,SAAS9gE,GACP,GAAIw8D,GAAO18D,KAAK+7D,aAAakF,MAAM/gE,EAAOF,KAAKy+D,aAAawC,MAAMrC,UAClE5+D,MAAKk/D,iBAAmBxC,GAAQ18D,KAAK+7D,aAAawE,QAAQ7D,GAC1DA,EAAO18D,KAAKu/D,oBAAoB7C,GAE3B18D,KAAK+7D,aAAaS,SAASE,EAAM18D,KAAK0pB,UACzC1pB,KAAK0pB,OAASgzC,EACd18D,KAAK6+D,aAAanC,GAClB18D,KAAK28D,aAAatjD,KAAKqjD,GACvB18D,KAAK4+D,UAAUvlD,KAAK,GAAIklD,IAAwBv+D,KAAMA,KAAKI,YAAYD,kBAI3Ei+D,EAAFr+D,UAAA6kD,UAAE,WACE5kD,KAAK2+D,WAAWtlD,KAAK,GAAIklD,IAAwBv+D,KAAMA,KAAKI,YAAYD,iBAI1Ei+D,EAAFr+D,UAAAo8D,iBAAE,WACE,MAAOn8D,MAAK0+D,WAAa1+D,KAAK0+D,WAAW7W,UAAQliD,IAInDy4D,EAAFr+D,UAAA+sB,QAAE,WAEM9sB,KAAKE,OACPF,KAAKygE,aAAazgE,KAAKE,OAGzBF,KAAK6kD,cAICuZ,EAAVr+D,UAAA0gE,aAAA,SAAuBvgE,GACnBF,KAAKI,YAAYD,cAAcD,MAC3BA,EAAQF,KAAK+7D,aAAamF,OAAOhhE,EAAOF,KAAKy+D,aAAa0C,QAAQvC,WAAa,IAO7ER,EAAVr+D,UAAAw/D,oBAAA,SAA8B3rD,GAC1B,MAAQ5T,MAAK+7D,aAAaqF,eAAextD,IAAQ5T,KAAK+7D,aAAawE,QAAQ3sD,GAAQA,EAAM,qBAnS7FtR,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uBACV2H,WACE+zD,GACAE,IACCh0D,QAASg3D,GAA0B/2D,YAAa8zD,IAEnDt7D,MACEw+D,uBAAwB,OACxBryB,mBAAoB,kDACpBsyB,aAAc,2CACdC,aAAc,2CACdC,aAAc,WACdC,UAAW,gCACXC,WAAY,cACZlyC,SAAU,YACVE,YAAa,sBAEfjtB,SAAU,6DA/EZJ,KAAEiI,EAAAA,aAmBFjI,KAAQu7D,GAAR14D,aAAA7C,KAoNOsD,EAAAA,aACPtD,SAAAqD,GAAAR,aAAA7C,KAAOsD,EAAAA,WAAPtD,KAAmBuD,EAAAA,OAAnBrD,MAA0Bo/D,QApN1Bt/D,KAAQytC,GAAR5qC,aAAA7C,KAqNOsD,EAAAA,gCAtJPi8D,gBAAAv/D,KAAGoB,EAAAA,QAqBHs8D,sBAAA19D,KAAGoB,EAAAA,QAQHxD,QAAAoC,KAAGoB,EAAAA,QAiBH+Q,MAAAnS,KAAGoB,EAAAA,QASHoa,MAAAxb,KAAGoB,EAAAA,QASHe,WAAAnC,KAAGoB,EAAAA,QAsBHi7D,aAAAr8D,KAAGsX,EAAAA,SAIHglD,YAAAt8D,KAAGsX,EAAAA,UAzLHwkD,iCCAA,sBA+BA97D,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gCAhCZq/D,mBAoFE,QAAFC,GACW3+C,EACC9jB,EACe0iE,GAFhBhiE,KAAXojB,MAAWA,EACCpjB,KAAZV,mBAAYA,EA7BZU,KAAA+V,cAA0B5E,EAAAA,aAAaC,KAgCnC,IAAM6wD,GAAiBj4D,OAAOg4D,EAC9BhiE,MAAKqE,SAAY49D,GAAqC,IAAnBA,EAAwBA,EAAiB,KARhF,MAhBEpiE,QAAFC,eACMiiE,EADNhiE,UAAA,gBAAE,WAEE,WAA0B4F,KAAnB3F,KAAKknC,UAA0BlnC,KAAKw9D,WAAW/4D,WAAazE,KAAKknC,eAE1E,SAAahnC,GACXF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,oCAsBzC6hE,EAAFhiE,UAAAoW,YAAE,SAAY/N,GACNA,EAAR,YACMpI,KAAKkiE,sBAITH,EAAFhiE,UAAAgC,YAAE,WACE/B,KAAK+V,cAAcpC,eAGrBouD,EAAFhiE,UAAAc,mBAAE,WACEb,KAAKkiE,sBAGPH,EAAFhiE,UAAAyyB,MAAE,SAAMpZ,GACApZ,KAAKw9D,aAAex9D,KAAKyE,WAC3BzE,KAAKw9D,WAAWrnC,OAChB/c,EAAMqiB,oBAIFsmC,EAAVhiE,UAAAmiE,yCACUC,EAAqBniE,KAAKw9D,WAAax9D,KAAKw9D,WAAWpB,gBAAkBl7D,EAAAA,KACzEkhE,EAAgBpiE,KAAKw9D,YAAcx9D,KAAKw9D,WAAWtB,iBACrDl8D,KAAKw9D,WAAWtB,iBAAiBE,gBAAkBl7D,EAAAA,KACjDmhE,EAAoBriE,KAAKw9D,WAC3Br8D,EAAAA,MAAMnB,KAAKw9D,WAAWR,aAAch9D,KAAKw9D,WAAWJ,cACpDl8D,EAAAA,IAEJlB,MAAK+V,cAAcpC,cACnB3T,KAAK+V,cAAgB5U,EAAAA,MACnBnB,KAAKojB,MAAMhb,QACX+5D,EACAC,EACAC,GACA/gE,UAAU,WAAM,MAAAlC,GAAKE,mBAAmBsB,iCA3F9C0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEG,SAAU,ooBACVC,QAAF,quBACEC,MACFC,MAAA,wHAKIu/D,qBAAJ,8CACIC,mBAAJ,4CACI/yC,UAAJ,mBAEA9sB,SAAA,sBACAM,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,oFAzBAf,KAAQyD,OAARZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,iBA4DAu/D,EAAAt+D,mFA3BAgB,WAAAnC,KAAAoB,EAAAA,QAGA8kC,gBAAAlmC,KAAQoB,EAAAA,QAGR8+D,cAAAlgE,KAAAk9B,EAAAA,aAAAh9B,MAAAs/D,MAUAW,UAAAngE,KAAAmU,EAAAA,UAAQjU,MAAR,aAMAu/D,iCClFA,sBA8BAz/D,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAsiB,GACAg6C,GACA3tC,EAAAA,cACAtuB,EAAAA,WACAH,EAAAA,cAEFI,SACEi8D,GACAC,GACA3G,GACAH,GACAsC,GACA2D,GACAD,GACAe,GACAC,GACAC,GACAC,IAEFj8D,cACE47D,GACAC,GACA3G,GACAH,GACAsC,GACA2D,GACAD,GACAe,GACAC,GACAC,GACAC,IAEF54D,WACE64D,GACAC,IAEFluC,iBACE8mC,GACAkH,QAvEJG,gCCgCAnjE,KAAAqqB,WAA+B,EAM/BrqB,KAAAojE,QAA4B,EAH5B,MANEvjE,QAAFC,eACMujE,EADNtjE,UAAA,gBAAE,WAC0B,MAAOC,MAAKqqB,eACtC,SAAanqB,GAAkBF,KAAKqqB,UAAYrK,EAAAA,sBAAsB9f,oCAItEL,OAAFC,eACMujE,EADNtjE,UAAA,aAAE,WACuB,MAAOC,MAAKojE,YACnC,SAAUljE,GAAkBF,KAAKojE,OAASpjD,EAAAA,sBAAsB9f,mDA1BlEoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEK,MACFiH,KAAA,YACMqmB,0BAAN,uCACIkzC,+BAAJ,WACIC,iCAAJ,YACIC,4BAAJ,QACIzgE,MAAJ,eAEAH,SAAA,GACAC,QAAA,+SACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAggE,EAAA5/D,kEASA4/D,iCCnCA,sBAcA/gE,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,GAAiBD,EAAAA,cAC3BM,SAAU28D,GAAYh9D,IACtBU,cAAes8D,QAjBjBnZ,KCqCauZ,GAAgB,GAAI9uD,GAAAA,eAAiC,iBnFOrD+uD,IAMXC,gBAAiB7sD,EAAAA,QAAQ,mBACvBC,EAAAA,MAAM,kBAAmB7B,EAAAA,OAAO8B,UAAW,kBAC3CD,EAAAA,MAAM,WAAY7B,EAAAA,OAAO8B,UAAW,oBACpCE,EAAAA,WAAW,4CACTC,EAAAA,QAlC0C,wCAsC9CysD,sBAAuB9sD,EAAAA,QAAQ,mBAC7BC,EAAAA,MAAM,kBAAmB7B,EAAAA,OACvB+L,OAAQ,yBAER4iD,QAASC,gBAAiB,UAE5B/sD,EAAAA,MAAM,WAAY7B,EAAAA,OAChB+L,OAAQ,wBAER4iD,QAASE,eAAgB,UAE3B7sD,EAAAA,WAAW,4CAA6C41B,EAAAA,OACtDzqB,EAAAA,MAAM,mBAAoBC,EAAAA,gBAAiBC,UAAU,IACrDpL,EAAAA,QAnD0C,0CAwD9C6sD,cAAeltD,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,kBAAmB7B,EAAAA,OAAO+L,OAAQ,MAAO9L,WAAY,YAC3D4B,EAAAA,MAAM,WAAY7B,EAAAA,OAAO+L,OAAQ,IAAK9L,WAAY,aAClD+B,EAAAA,WAAW,4CACTC,EAAAA,QA5D0C,uDoFF9C,QAAF8sD,GAAqBjpB,GAAAh7C,KAArBg7C,UAAqBA,EAlBrB,sBAcA14C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gFAPZH,KAAmBkT,EAAAA,eARnByuD,KC8CIC,GAAW,iBA2Eb,QAAFC,GAA6DC,EAC/C9kE,EACA+kE,EACQzuD,EAEU9N,EACgC61B,GAN9D,GAAFv+B,GAOIQ,EAPJoE,KAAAhE,KAOUokE,EAAW9kE,EAAoB+kE,IAPzCrkE,WAGsBZ,GAAtBwW,kBAAsBA,EAG0CxW,EAAhEu+B,eAAgEA,EAnChEv+B,EAAAklE,aAAwB,EAGtBllE,EAAFmlE,YAA0B,GAAI7rD,GAAAA,aAG5BtZ,EAAFolE,cAA4B,GAAI9rD,GAAAA,aAG9BtZ,EAAFqlE,cAA2B,GAAIhlE,GAAAA,QAe7BL,EAAFslE,UAAc,8BAA8BR,KAG1C9kE,EAAFulE,mBAAuB,GAAIllE,GAAAA,QAUvBL,EAAKglE,UAAYA,EACjBhlE,EAAK0I,UAAYA,EAIjB1I,EAAKulE,mBAAmBvjE,KAAK2X,EAAAA,qBAAqB,SAACC,EAAGC,GACpD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,WACpD7X,UAAU,SAAA8X,GACY,SAApBA,EAAMF,YACc,aAAlBE,EAAMD,QACR/Z,EAAKmlE,YAAYlrD,OACU,cAAlBD,EAAMD,SACf/Z,EAAKolE,cAAcnrD,YA/B7B,MAjCuC3Z,GAAvCykE,EAAAvkE,GAQEC,OAAFC,eACMqkE,EADNpkE,UAAA,kBAAE,WAEE,MAAOC,MAAKskE,aAAgBtkE,KAAKokE,WAAapkE,KAAKokE,UAAUQ,gBAE/D,SAAe1kE,GACbF,KAAKskE,YAActkD,EAAAA,sBAAsB9f,oCA0D3CikE,EAAFpkE,UAAA8kE,YAAE,WACE,QAAI7kE,KAAKokE,WAI4E,aAA3EpkE,KAAK8kE,SAAW9kE,KAAKokE,UAAUW,YAAc/kE,KAAKglE,sBAM9Db,EAAFpkE,UAAAilE,kBAAE,WACE,MAAOhlE,MAAK8kE,SAAW,WAAa,aAGtCX,EAAFpkE,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACQA,MAAKilE,cAEPjlE,KAAKm7B,OAAO/5B,KACVsW,EAAAA,UAAS,MACTjP,EAAAA,OAAO,WAAM,MAAArJ,GAAK0lE,WAAa1lE,EAAK20C,UACpCrnC,EAAAA,KAAK,IACLpL,UAAU,WACVlC,EAAK20C,QAAU,GAAIz9B,GAAAA,eAAelX,EAAK6lE,aAAajqB,UAAW57C,EAAKwW,sBAK1EuuD,EAAFpkE,UAAAoW,YAAE,SAAY/N,GACVpI,KAAKykE,cAAcziE,KAAKoG,IAG1B+7D,EAAFpkE,UAAAgC,YAAE,WACEnC,EAAJG,UAAUgC,YAAViC,KAAAhE,MACIA,KAAK2kE,mBAAmB1iE,WACxBjC,KAAKykE,cAAcxiE,YAIrBkiE,EAAFpkE,UAAAmlE,eAAE,WACE,GAAIllE,KAAKmlE,OAASnlE,KAAK8H,UAAW,CAChC,GAAMs9D,GAAiBplE,KAAK8H,UAAUo0B,cAChCmpC,EAAcrlE,KAAKmlE,MAAMhlE,aAC/B,OAAOilE,KAAmBC,GAAeA,EAAY18D,SAASy8D,GAGhE,OAAO,kBA5IX9iE,KAACC,EAAAA,UAADC,OAAAK,QAAA,m/CACEJ,SAAU,sBACVC,SAAF,oBACEE,SAAU,4bACVI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEV,QAAF,WAAA,YACE2iE,SAAF,SAAA,SAAA,kBACE3rD,YAAF+pD,GAAAM,eACE55D,oCAKqCzE,KAAvC7C,MACAC,MAAA,sBACMwiE,uBAAN,WACIz0C,kCAAJ,sCACI00C,sCAAJ,6KAiDAljE,KAAAwmC,EAAAA,4BAzGAxmC,KAAEkH,EAAAA,mBALFlH,SAAQqD,GAARR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,cAmBA9G,KAAEyD,OAAFZ,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,4BAiGAozC,EAAA1gE,0EA1CA+gE,gBAAAliE,KAAAsX,EAAAA,SAUAqrD,eAAA3iE,KAAAk9B,EAAAA,aAAAh9B,MAAAyhE,MAGAkB,QAAA7iE,KAAAmU,EAAAA,UAAAjU,MAAA,WAYA2hE,uBA9GAsB,GAAA,yBA2MA,wEALA3iE,MACAC,MAAA,sBAIA0iE,mBCzIE,QAAFC,GACqBx7B,EACPxM,EACAx5B,EACA5E,GAJZ,GAAFF,GAAAY,IACqBA,MAArBkqC,MAAqBA,EACPlqC,KAAd09B,SAAcA,EACA19B,KAAdkE,cAAcA,EACAlE,KAAdV,mBAAcA,EANdU,KAAA2lE,0BAAsCx0D,EAAAA,aAAaC,KAQ/C,IAAMw0D,GAA4B17B,EAAMk6B,UACtCl6B,EAAMk6B,UAAUruD,cAAc3U,KAAKqH,EAAAA,OAAO,SAAAL,GAAW,QAAEA,EAA7D,cAAoFgJ,EAAAA,KAIhFpR,MAAK2lE,0BAA4BxkE,EAAAA,MAC/B+oC,EAAM/O,OACN+O,EAAMnY,OACN6zC,EACA17B,EAAMu6B,cAAcrjE,KAAKqH,EAAAA,OAAO,SAAAL,GAAW,SAAGA,EAJpD,aAI0EA,EAJ1E,cAMK9G,UAAU,WAAM,MAAAlC,GAAKE,mBAAmBsB,iBAGzCspC,EAAMnY,OACH3wB,KAAKqH,EAAAA,OAAO,WAAM,MAAAyhC,GAAMg7B,oBACxB5jE,UAAU,WAAM,MAAA4C,GAAck4B,SAASsB,EAAU,aAEpDx5B,EAAcU,QAAQ84B,GAAUp8B,UAAU,SAAA2U,GACpCA,GAAUi0B,EAAMk6B,WAClBl6B,EAAMk6B,UAAUyB,mBAAmBzmE,KAS3C,MAMES,QAAFC,eAAM4lE,EAAN3lE,UAAA,gBAAE,WACE,MAAOC,MAAKkqC,MAAMzlC,0CAIpBihE,EAAF3lE,UAAA+lE,QAAE,WACE9lE,KAAKkqC,MAAMjI,UAIbyjC,EAAF3lE,UAAAgmE,YAAE,WACE,MAAO/lE,MAAKkqC,MAAM46B,UAIpBY,EAAF3lE,UAAAilE,kBAAE,WACE,MAAOhlE,MAAKkqC,MAAM86B,qBAIpBU,EAAF3lE,UAAAimE,YAAE,WACE,MAAOhmE,MAAKkqC,MAAMznB,IAIpBijD,EAAF3lE,UAAAkmE,YAAE,WACE,OAAQjmE,KAAKkqC,MAAM06B,aAAe5kE,KAAKkqC,MAAMzlC,UAI/CihE,EAAF3lE,UAAAmmE,SAAE,SAAS9sD,GACP,OAAQA,EAAMyC,SAEZ,IAAKO,GAAAA,MACL,IAAKD,GAAAA,MACEgqD,EAAAA,eAAe/sD,KAClBA,EAAM4C,iBACNhc,KAAK8lE,UAGP,MACF,SAKE,YAJI9lE,KAAKkqC,MAAMk6B,WACbpkE,KAAKkqC,MAAMk6B,UAAUgC,qBAAqBhtD,MAYlDssD,EAAF3lE,UAAAka,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACIjW,KAAKkE,cAAck4B,SAASp8B,KAAK09B,SAAUznB,IAG7CyvD,EAAF3lE,UAAAgC,YAAE,WACE/B,KAAK2lE,0BAA0BhyD,cAC/B3T,KAAKkE,cAAce,eAAejF,KAAK09B,0BAxI3Cp7B,KAACC,EAAAA,UAADC,OAAAC,SAAA,6BACEI,QAAF,64BACED,SAAU,mRACVI,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEsW,YACF+pD,GAAAC,gBACAD,GAAAE,uBAEA9gE,MACAC,MAAA,6BACMgH,KAAN,SACI8+B,YAAJ,kBACI1F,kBAAJ,oBACIkjC,uBAAJ,gBACIp8D,uBAAJ,gBACI3E,uBAAwB,iBACxBigE,uBAAwB,gBACxB/5D,UAAJ,YACImkB,YAAJ,mBACI22C,qBAAsB,uQA5B1BhkE,KAAQ2D,EAAAA,eATR3D,KAAEiB,EAAAA,qBAHFmiE,EAAAjiE,kFAyFAiiE,iCAiFA,+EALA5iE,MACAC,MAAA,8CAIAwjE,iCAaA,yEALAzjE,MACAC,MAAA,wCAIAyjE,qFC1JApnE,GAAAklE,aAAiC,EAU/BllE,EAAF2lE,YAAkD,YAnDlD,MA+BkCrlE,GAAlC+mE,EAAA7mE,GAOEC,OAAFC,eACM2mE,EADN1mE,UAAA,kBAAE,WAC4B,MAAOC,MAAKskE,iBACxC,SAAeniE,GAAiBnC,KAAKskE,YAActkD,EAAAA,sBAAsB7d,oCAazEskE,EAAF1mE,UAAAc,mBAAE,WACEb,KAAKkb,YAAc,GAAIuB,GAAAA,gBAAgBzc,KAAK0mE,UAAU/pD,YAIxD8pD,EAAF1mE,UAAAqmE,qBAAE,SAAqBhtD,GACZ,GAAAyC,GAAXzC,EAAAyC,QACUmrC,EAAUhnD,KAAKkb,WAEjBW,KAAYC,EAAAA,MACdkrC,EAAQjrC,qBACR3C,EAAM4C,kBACGH,IAAYI,EAAAA,KACrB+qC,EAAQ9qC,oBACR9C,EAAM4C,kBAENhc,KAAKkb,YAAYoB,UAAUlD,IAI/BqtD,EAAF1mE,UAAA8lE,mBAAE,SAAmBc,GACjB3mE,KAAKkb,YAAY0B,iBAAiB+pD,mBAvDtCrkE,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gBACVC,SAAU,eACVC,QAAS,SACTyH,YACEC,QAASo5D,GACTn5D,YAAam8D,IAEf3jE,MACEC,MAAO,uCAMX2jE,WAAApkE,KAAG0I,EAAAA,gBAAHxI,MAAmBkjE,IAA0B79B,aAAa,MAI1D+8B,aAAAtiE,KAAGoB,EAAAA,QAaHqhE,cAAAziE,KAAGoB,EAAAA,SAnDH+iE,GA+BkCG,EAAAA,0CC/BlC,sBAsBAtkE,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,aAAcygE,EAAAA,mBAAoBvgE,EAAAA,cAC5CI,SACE+/D,GACAtC,GACAsB,GACAC,GACAc,GACAD,GACAtC,IAEFl9D,cACE0/D,GACAtC,GACAsB,GACAC,GACAc,GACAD,GACAtC,QAxCJ6C,KCcalU,GAAgB,GAAIj+C,GAAAA,eAAgC,+BpB2B/D,QAAF04C,GACY3vB,EACkCi1B,GADlC3yD,KAAZ09B,SAAYA,EACkC19B,KAA9C2yD,UAA8CA,EAL5C3yD,KAAFqvD,SAAqB,EACnBrvD,KAAF+mE,SAAqB,EAYrB,MALElnE,QAAFC,eACMutD,EADNttD,UAAA,eAAE,WACwB,MAAOC,MAAKqvD,cACpC,SAAYnvD,GAAiBF,KAAKqvD,SAAW96C,KAAK4Z,MAAMlT,EAAAA,qBAAqB/a,qCAG7EL,OAAFC,eACMutD,EADNttD,UAAA,eAAE,WACwB,MAAOC,MAAK+mE,cACpC,SAAY7mE,GAAiBF,KAAK+mE,SAAWxyD,KAAK4Z,MAAMlT,EAAAA,qBAAqB/a,qCAM7EmtD,EAAFttD,UAAA+wD,UAAE,SAAUkW,EAAkB9mE,GACzBF,KAAK09B,SAASv9B,cAA0B,MAAE6mE,GAAY9mE,kBAnC3DoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVI,MACFC,MAAA,iBAEAH,SAAA,gEACAC,QAAA;wvCACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,2IAUAgqD,EAAA5pD,mEAQA4pD,KAnDAC,GAAA,wHA6EAA,EAAAnoD,aACA7C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qPAdAU,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAoqD,EAAEnlC,eAAF,WAAA,QACA7lB,KAAAiI,EAAAA,8GAgBA,+HAAAgjD,iCAUA,sHAAAC,iCAUA,sHAAAC,KC/EAC,GAAA,wBAKE1tD,KAAF2tD,YAAwB,EAGtB3tD,KAAF4tD,SAAqB,EAnCrB,MAsCE/tD,QAAFC,eAAM4tD,EAAN3tD,UAAA,gBAAE,WAAyB,MAAOC,MAAK4tD,SAAW,mCAMhD/tD,OAAFC,eAAM4tD,EAAN3tD,UAAA,eAAE,WACE,GAAM8tD,GAAat5C,KAAKuJ,IAA5BtP,MAAuB+F,KAAYvU,KAAK8tD,QAGpC,OAAOD,GAAa,EAAI7tD,KAAK+tD,SAAWF,EAAa,EAAI7tD,KAAK+tD,0CAUhEL,EAAF3tD,UAAAiuD,OAAE,SAAOC,EAAoBC,GAA3B,GAAF9uD,GAAAY,IACIA,MAAK2tD,YAAc,EACnB3tD,KAAK4tD,SAAW,EAEhB5tD,KAAK8tD,QAAU,GAAIxlD,OAAM2lD,GACzBjuD,KAAK8tD,QAAQK,KAAK,EAAG,EAAGnuD,KAAK8tD,QAAQzlD,QACrCrI,KAAKoV,UAAY84C,EAAMz/C,IAAI,SAAA2/C,GAAQ,MAAAhvD,GAAKivD,WAAWD,MAI7CV,EAAV3tD,UAAAsuD,WAAA,SAAqBD,GAEjB,GAAME,GAAgBtuD,KAAKuuD,iBAAiBH,EAAKI,QASjD,OANAxuD,MAAKyuD,kBAAkBH,EAAeF,GAItCpuD,KAAK2tD,YAAcW,EAAgBF,EAAKI,QAEjC,GAAIE,IAAa1uD,KAAK4tD,SAAUU,IAIjCZ,EAAV3tD,UAAAwuD,iBAAA,SAA2BI,GACvB,GAAIA,EAAW3uD,KAAK8tD,QAAQzlD,OAC1B,KAAMusB,OAAM,oCAAoC+5B,EAAtD,kCACyC3uD,KAAK8tD,QAAQzlD,OAAtD,KAII,IAAIimD,IAAiB,EACjBM,GAAe,CAGnB,IAEM5uD,KAAK2tD,YAAcgB,EAAW3uD,KAAK8tD,QAAQzlD,QAC7CrI,KAAK6uD,WACLP,EAAgBtuD,KAAK8tD,QAAQr7C,QAAQ,EAAGzS,KAAK2tD,aAC7CiB,EAAc5uD,KAAK8uD,iBAAiBR,KAItCA,EAAgBtuD,KAAK8tD,QAAQr7C,QAAQ,EAAGzS,KAAK2tD,cAGvB,GAAlBW,GAOJM,EAAc5uD,KAAK8uD,iBAAiBR,GAIpCtuD,KAAK2tD,YAAcW,EAAgB,IAVjCtuD,KAAK6uD,WACLP,EAAgBtuD,KAAK8tD,QAAQr7C,QAAQ,EAAGzS,KAAK2tD,aAC7CiB,EAAc5uD,KAAK8uD,iBAAiBR,WAY9BM,EAAcN,EAAgBK,GAA6B,GAAfC,EAItD,OAAOr6C,MAAKuJ,IAAIwwC,EAAe,IAIzBZ,EAAV3tD,UAAA8uD,oBACI7uD,KAAK2tD,YAAc,EACnB3tD,KAAK4tD,UAGL,KAAK,GAAIngD,GAAI,EAAGA,EAAIzN,KAAK8tD,QAAQzlD,OAAQoF,IACvCzN,KAAK8tD,QAAQrgD,GAAK8G,KAAKuJ,IAAI,EAAG9d,KAAK8tD,QAAQrgD,GAAK,IAQ5CigD,EAAV3tD,UAAA+uD,iBAAA,SAA2BR,GACvB,IAAK,GAAI7gD,GAAI6gD,EAAgB,EAAG7gD,EAAIzN,KAAK8tD,QAAQzlD,OAAQoF,IACvD,GAAuB,GAAnBzN,KAAK8tD,QAAQrgD,GACf,MAAOA,EAKX,OAAOzN,MAAK8tD,QAAQzlD,QAIdqlD,EAAV3tD,UAAA0uD,kBAAA,SAA4BhqC,EAAe2pC,GACvC,IAAK,GAAI3gD,GAAI,EAAGA,EAAI2gD,EAAKI,QAAS/gD,IAChCzN,KAAK8tD,QAAQrpC,EAAQhX,GAAK2gD,EAAKW,SA7JrCrB,KAsKAgB,GAAA,WACE,QAAFA,GAAqBM,EAAoBC,GAApBjvD,KAArBgvD,IAAqBA,EAAoBhvD,KAAzCivD,IAAyCA,EAvKzC,MAAAP,MCgBMQ,GAAsB,gCAO5BC,GAAA,wBAEEnvD,KAAFovD,MAAkB,EAChBpvD,KAAFqvD,SAAqB,EA1BrB,MAuCEF,GAAFpvD,UAAAuvD,KAAE,SAAKC,EAAoBzB,EAA0B0B,EAAc79C,GAC/D3R,KAAKyvD,YAAcC,GAAeH,GAClCvvD,KAAKovD,MAAQtB,EAAQC,SACrB/tD,KAAKqvD,SAAWvB,EAAQiB,QACxB/uD,KAAK2vD,MAAQH,EACbxvD,KAAKq5B,WAAa1nB,GAUpBw9C,EAAFpvD,UAAA6vD,gBAAE,SAAgBC,EAAqBC,GAMnC,MAAO,IAAID,EAAf,QAAkC7vD,KAAKyvD,YAAvC,MAAwDK,EAAxD,MAUEX,EAAFpvD,UAAAgwD,gBAAE,SAAgBC,EAAkBpiC,GAGhC,MAAkB,KAAXA,EAAe,IAAMqiC,GAAK,IAAID,EAAzC,MAAuDhwD,KAAKyvD,YAA5D,OAA8E7hC,IAU5EuhC,EAAFpvD,UAAAmwD,YAAE,SAAYF,EAAkBG,GAC5B,MAAO,IAAIH,EAAf,MAA6BG,EAA7B,SAAyCA,EAAO,GAAhD,MAAuDnwD,KAAKyvD,YAA5D,KAUEN,EAAFpvD,UAAAqwD,SAAE,SAAShC,EAAmBR,EAAkByC,GAE5C,GAAIC,GAAsB,IAAMtwD,KAAK2vD,MAIjCY,GAA8BvwD,KAAK2vD,MAAQ,GAAK3vD,KAAK2vD,KAEzD3vD,MAAKwwD,aAAapC,EAAMiC,EAAUC,EAAqBC,GACvDvwD,KAAKywD,aAAarC,EAAMR,EAAU0C,EAAqBC,IAIzDpB,EAAFpvD,UAAAywD,aAAE,SAAapC,EAAmBiC,EAAkBK,EACrCC,GAEX,GAAIC,GAAgB5wD,KAAK4vD,gBAAgBc,EAAcC,GAInDE,EAA2B,QAApB7wD,KAAKq5B,WAAuB,QAAU,MACjD+0B,GAAK0C,UAAUD,EAAM7wD,KAAK+vD,gBAAgBa,EAAeP,IACzDjC,EAAK0C,UAAU,QAASb,GAAKjwD,KAAKkwD,YAAYU,EAAexC,EAAKI,YAMpEW,EAAFpvD,UAAAgxD,cAAE,WACE,MAAU/wD,MAAKyvD,YAAnB,OAAqCzvD,KAAKqvD,SAA1C,SAOEF,EAAFpvD,UAAAixD,YAAE,SAAYC,GACV,MAAUjxD,MAAKqvD,SAAnB,MAAiCrvD,KAAKkwD,YAAYe,EAAY,IAgB5D9B,EAAFpvD,UAAAmxD,kBAAE,WAA+C,MAAO,OAnJxD/B,KAmKAgC,GAAA,SAAAvxD,GAEE,QAAFuxD,GAAqBC,GAAnB,GAAFhyD,GAA+CQ,EAA/CoE,KAAAhE,OAAAA,WAAqBZ,GAArBgyD,eAAqBA,IArKrB,MAmKqC1xD,GAArCyxD,EAAAvxD,GAIEuxD,EAAFpxD,UAAAuvD,KAAE,SAAKC,EAAoBzB,EAA0B0B,EAAc79C,GAI/D,GAHA/R,EAAJG,UAAUuvD,KAAVtrD,KAAAhE,KAAeuvD,EAAYzB,EAAS0B,EAAM79C,GACtC3R,KAAKoxD,eAAiB1B,GAAe1vD,KAAKoxD,iBAErClC,GAAoBmC,KAAKrxD,KAAKoxD,gBACjC,KAAMx8B,OAAM,kBAAkB50B,KAAKoxD,eAAzC,wBAIED,EAAFpxD,UAAA0wD,aAAE,SAAarC,EAAmBR,GAC9BQ,EAAK0C,UAAU,MAAO9wD,KAAK+vD,gBAAgB/vD,KAAKoxD,eAAgBxD,IAChEQ,EAAK0C,UAAU,SAAUb,GAAKjwD,KAAKkwD,YAAYlwD,KAAKoxD,eAAgBhD,EAAKW,YAG3EoC,EAAFpxD,UAAAmxD,kBAAE,WACE,OACE,SAAUjB,GAAQjwD,KAAKgxD,YAAYhxD,KAAKoxD,gBAA9C,MAAmEpxD,KAAK+wD,mBAItEI,EAAFpxD,UAAAuxD,MAAE,SAAMhH,GACJA,EAAKiH,eAAe,SAAU,OAE1BjH,EAAKkH,QACPlH,EAAKkH,OAAO5kD,QAAQ,SAAAwhD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAjMjCK,GAmKqChC,IA0CrCsC,GAAA,SAAA7xD,GAME,QAAF6xD,GAAcvxD,GAAZ,GAAFd,GACIQ,EADJoE,KAAAhE,OAAAA,WAEIZ,GAAKsyD,YAAYxxD,KArNrB,MA6MqCR,GAArC+xD,EAAA7xD,GAWE6xD,EAAF1xD,UAAA0wD,aAAE,SAAarC,EAAmBR,EAAkB8C,EACrCC,GACX,GAAIgB,GAAuBjB,EAAe1wD,KAAK4xD,cAC/C5xD,MAAK6xD,eAAiB7xD,KAAK4vD,gBAAgB+B,EAAsBhB,GAKjEvC,EAAK0C,UAAU,YAAa9wD,KAAK+vD,gBAAgB/vD,KAAK6xD,eAAgBjE,IACtEQ,EAAK0C,UAAU,aAAcb,GAAKjwD,KAAKkwD,YAAYlwD,KAAK6xD,eAAgBzD,EAAKW,YAG/E0C,EAAF1xD,UAAAmxD,kBAAE,WACE,OACE,gBAAiBjB,GAAQjwD,KAAKgxD,YAAYhxD,KAAK6xD,gBAArD,MAA0E7xD,KAAK+wD,mBAI7EU,EAAF1xD,UAAAuxD,MAAE,SAAMhH,GACJA,EAAKiH,eAAe,gBAAiB,OAErCjH,EAAKkH,OAAO5kD,QAAQ,SAAAwhD,GAClBA,EAAK0C,UAAU,YAAa,MAC5B1C,EAAK0C,UAAU,aAAc,SAIzBW,EAAV1xD,UAAA2xD,YAAA,SAAsBxxD,GAClB,GAAM4xD,GAAa5xD,EAAM6pB,MAAM,IAE/B,IAA0B,IAAtB+nC,EAAWzpD,OACb,KAAMusB,OAAM,uDAAuD10B,EAAzE,IAGIF,MAAK4xD,eAAiBznC,WAAW2nC,EAAW,IAAM3nC,WAAW2nC,EAAW,KA1P5EL,GA6MqCtC,IAwDrC4C,GAAA,SAAAnyD,+DArQA,MAqQmCF,GAAnCqyD,EAAAnyD,GACEmyD,EAAFhyD,UAAA0wD,aAAE,SAAarC,EAAmBR,GAE9B,GAAI+D,GAAuB,IAAM3xD,KAAKqvD,SAGlC2C,GAAuBhyD,KAAKovD,MAAQ,GAAKpvD,KAAKovD,MAG9CyC,EAAiB7xD,KAAK4vD,gBAAgB+B,EAAsBK,EAEhE5D,GAAK0C,UAAU,MAAO9wD,KAAK+vD,gBAAgB8B,EAAgBjE,IAC3DQ,EAAK0C,UAAU,SAAUb,GAAKjwD,KAAKkwD,YAAY2B,EAAgBzD,EAAKW,YAGtEgD,EAAFhyD,UAAAuxD,MAAE,SAAMhH,GACAA,EAAKkH,QACPlH,EAAKkH,OAAO5kD,QAAQ,SAAAwhD,GAClBA,EAAK0C,UAAU,MAAO,MACtB1C,EAAK0C,UAAU,SAAU,SAxRjCiB,GAqQmC5C,kBC3LjC,QAAF8C,GAAsBv0B,EACY18B,GADZhB,KAAtB09B,SAAsBA,EACY19B,KAAlCgB,KAAkCA,EATlChB,KAAAkyD,QAA4B,MAwB5B,MAZEryD,QAAFC,eACMmyD,EADNlyD,UAAA,YAAE,WACqB,MAAOC,MAAK2vD,WACjC,SAASzvD,GACPF,KAAK2vD,MAAQp7C,KAAKuJ,IAAI,EAAGvJ,KAAK4Z,MAAMlT,EAAAA,qBAAqB/a,sCAI3DL,OAAFC,eACMmyD,EADNlyD,UAAA,kBAAE,WAC2B,MAAOC,MAAKkyD,aACvC,SAAehyD,GAAiBF,KAAKkyD,QAAU,IAAY,MAAThyD,EAAgB,GAAKA,oCAGvEL,OAAFC,eACMmyD,EADNlyD,UAAA,iBAAE,WACmC,MAAOC,MAAKmyD,gBAC/C,SAAcjyD,GACZ,GAAMmlC,GAAW,IAAY,MAATnlC,EAAgB,GAAKA,EAErCmlC,KAAarlC,KAAKmyD,aACpBnyD,KAAKmyD,WAAa9sB,EAClBrlC,KAAKoyD,eAAepyD,KAAKmyD,8CAI7BF,EAAFlyD,UAAAsW,SAAE,WACErW,KAAKqyD,aACLryD,KAAKsyD,mBAOPL,EAAFlyD,UAAAyB,sBAAE,WACExB,KAAKuyD,gBAICN,EAAVlyD,UAAAsyD,sBACI,IAAKryD,KAAKwvD,KACR,KAAM56B,OAAM,qFAMRq9B,EAAVlyD,UAAAuyD,2BACStyD,KAAKmyD,YACRnyD,KAAKoyD,eAAe,QAKhBH,EAAVlyD,UAAAqyD,eAAA,SAAyBI,GACjBxyD,KAAKyyD,aACPzyD,KAAKyyD,YAAYnB,MAAMtxD,MApGR,QAuGbwyD,EACFxyD,KAAKyyD,YAAc,GAAIV,IACdS,GAAaA,EAAU//C,QAAQ,MAAQ,EAChDzS,KAAKyyD,YAAc,GAAIhB,IAAgBe,GAEvCxyD,KAAKyyD,YAAc,GAAItB,IAAgBqB,IAKnCP,EAAVlyD,UAAAwyD,kCACSvyD,MAAK0yD,mBACR1yD,KAAK0yD,iBAAmB,GAAIhF,IAI9B,IAAMI,GAAU9tD,KAAK0yD,iBACfxE,EAAQluD,KAAKwxD,OAAO/oD,OAAO,SAAA2lD,GAAQ,OAACA,EAAKuE,WAAavE,EAAKuE,YAAcvzD,IACzEuS,EAAY3R,KAAKgB,KAAOhB,KAAKgB,KAAKd,MAAQ,KAEhDF,MAAK0yD,iBAAiB1E,OAAOhuD,KAAKwvD,KAAMtB,GACxCluD,KAAKyyD,YAAYnD,KAAKtvD,KAAKuvD,WAAYzB,EAAS9tD,KAAKwvD,KAAM79C,GAE3Du8C,EAAMthD,QAAQ,SAACwhD,EAAMthD,GACnB,GAAM6gB,GAAMmgC,EAAQ14C,UAAUtI,EAC9B1N,GAAKqzD,YAAYrC,SAAShC,EAAMzgC,EAAIqhC,IAAKrhC,EAAIshC,OAG/CjvD,KAAKuxD,cAAcvxD,KAAKyyD,YAAYvB,sBAItCe,EAAFlyD,UAAAwxD,cAAE,SAAcr8C,GACRA,IACDlV,KAAK09B,SAASv9B,cAA0B,MAAE+U,EAAM,IAAMA,EAAM,oBAvInE5S,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVE,SAAU,uCACVC,QAAF,gvCACEC,MACFC,MAAA,iBAEAqH,YACAC,QAAAuoD,GACAtoD,YAAA2nD,IAEA9uD,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,yHAvBA+uD,EAAQxuD,mGAiDR8rD,aAAAjtD,KAAAoB,EAAAA,QAMA8uD,YAAAlwD,KAAQoB,EAAAA,SAYRuuD,iCC1FA,sBAiBA3vD,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUujD,GAAerjD,IACzBK,SACEurD,GACA5E,GACAC,GACA5D,GACArjD,GACAmnD,GACAC,GACAF,IAEFxmD,cACEkrD,GACA5E,GACAC,GACAE,GACAC,GACAF,QAnCJsF,KCsEAC,GAAA,WAME,QAAFA,GAAcnoD,GAGJ,EAAcioC,SAClB5yC,KAAK+yD,WAAU,EAEf/yD,KAAKgzD,IAAG,EAlFd,MAAAF,oBA6HE,QAAFG,GACwBC,EACZC,EACsBtrD,GAFV7H,KAAxBkzD,YAAwBA,EACZlzD,KAAZmzD,WAAYA,EA1BZnzD,KAAAozD,gBAA4B,GAAIh6B,KAMhCp5B,KAAAqzD,gBAA4B,GAAIj6B,KAGhCp5B,KAAAszD,kBAA8B,GAAIl6B,KAGlCp5B,KAAAuzD,sBAAkC,GAAIn6B,KAGtCp5B,KAAAwzD,uBAAmC,GAAIp6B,KAOvCp5B,KAAAyzD,qBAAiC,iBAM3BzzD,KAAK8H,UAAYD,EAjIvB,MAyIEorD,GAAFlzD,UAAA2zD,WAAE,SAAWC,EAAkBX,GAC3B,MAAOhzD,MAAK4zD,sBAAsB,GAAID,EAAUX,IAQlDC,EAAFlzD,UAAA8zD,kBAAE,SAAkBF,EAAkBG,GAClC,MAAO9zD,MAAK+zD,6BAA6B,GAAIJ,EAAUG,IASzDb,EAAFlzD,UAAA6zD,sBAAE,SAAsBI,EAAmBL,EAAkBX,GACzD,MAAOhzD,MAAKi0D,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcE,KASvEC,EAAFlzD,UAAAg0D,6BAAE,SAA6BC,EAAmBL,EAAkBG,GAChE,GAAMI,GAAmBl0D,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAa/yD,KAAKu0D,+BAA+BL,EACvD,OAAOl0D,MAAKi0D,kBAAkBD,EAAWL,EAAU,GAAIb,IAAcC,KAOvEE,EAAFlzD,UAAAy0D,cAAE,SAAcxB,GACZ,MAAOhzD,MAAKy0D,yBAAyB,GAAIzB,IAO3CC,EAAFlzD,UAAA20D,qBAAE,SAAqBZ,GACnB,MAAO9zD,MAAK20D,gCAAgC,GAAIb,IAQlDb,EAAFlzD,UAAA00D,yBAAE,SAAyBT,EAAmBhB,GAC1C,MAAOhzD,MAAK40D,qBAAqBZ,EAAW,GAAIlB,IAAcE,KAQhEC,EAAFlzD,UAAA40D,gCAAE,SAAgCX,EAAmBF,GACjD,GAAMI,GAAmBl0D,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBC,KAAMP,EAExE,KAAKI,EACH,KAAMI,IAAuCR,EAG/C,IAAMf,GAAa/yD,KAAK60D,sBAAsBX,EAC9C,OAAOl0D,MAAK40D,qBAAqBZ,EAAW,GAAIlB,IAAcC,KAWhEE,EAAFlzD,UAAA+0D,uBAAE,SAAuBC,EAAe3W,GAEpC,WAFJ,KAAAA,IAAwCA,EAAxC2W,GACI/0D,KAAKwzD,uBAAuB75B,IAAIo7B,EAAO3W,GAChCp+C,MAOTizD,EAAFlzD,UAAAi1D,sBAAE,SAAsBD,GACpB,MAAO/0D,MAAKwzD,uBAAuB3uD,IAAIkwD,IAAUA,GASnD9B,EAAFlzD,UAAAk1D,uBAAE,SAAuB7W,GAErB,MADAp+C,MAAKyzD,qBAAuBrV,EACrBp+C,MAOTizD,EAAFlzD,UAAAm1D,uBAAE,WACE,MAAOl1D,MAAKyzD,sBAWdR,EAAFlzD,UAAAo1D,kBAAE,SAAkBC,GAAlB,GAAFh2D,GAAAY,KACUgzD,EAAMhzD,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAG3C,IAAMG,GAAav1D,KAAKszD,kBAAkBzuD,IAAImuD,EAE9C,OAAIuC,GACKr0D,EAAAA,GAAas0D,GAASD,IAGxBv1D,KAAKy1D,uBAAuB,GAAI3C,IAAcsC,IAAUh0D,KAC7Ds0D,EAAAA,IAAI,SAAAC,GAAO,MAAAv2D,GAAKk0D,kBAAkB35B,IAAG,EAAOg8B,KAC5ClnD,EAAAA,IAAI,SAAAknD,GAAO,MAAAH,IAASG,OAYxB1C,EAAFlzD,UAAA61D,gBAAE,SAAgB5xC,EAAcgwC,OAAhC,KAAAA,IAAgCA,EAAhC,GAEI,IAAM1hD,GAAMujD,GAAQ7B,EAAWhwC,GACzBgS,EAASh2B,KAAKozD,gBAAgBvuD,IAAIyN,EAExC,IAAI0jB,EACF,MAAOh2B,MAAK81D,kBAAkB9/B,EAIhC,IAAM+/B,GAAiB/1D,KAAKqzD,gBAAgBxuD,IAAImvD,EAEhD,OAAI+B,GACK/1D,KAAKg2D,0BAA0BhyC,EAAM+xC,GAGvCE,EAAAA,WAAgBC,GAA4B5jD,KAM7C2gD,EAAVlzD,UAAA+1D,kBAAA,SAA4B9/B,GACxB,MAAIA,GAAO+8B,WAEF7xD,EAAAA,GAAas0D,GAASx/B,EAAO+8B,aAG7B/yD,KAAKy1D,uBAAuBz/B,GAAQ50B,KACzCs0D,EAAAA,IAAI,SAAAC,GAAO,MAAA3/B,GAAO+8B,WAAa4C,IAC/BlnD,EAAAA,IAAI,SAAAknD,GAAO,MAAAH,IAASG,OAalB1C,EAAVlzD,UAAAi2D,0BAAA,SAAoChyC,EAAc+xC,cAIxCI,EAAYn2D,KAAKo2D,+BAA+BpyC,EAAM+xC,EAE5D,IAAII,EAIF,MAAOj1D,GAAAA,GAAai1D,EAKtB,IAAME,GAAwDN,EAC3DttD,OAAO,SAAA6tD,GAAiB,OAACA,EAAcvD,aACvCtkD,IAAI,SAAA6nD,GACH,MAAOl3D,GAAKm3D,0BAA0BD,GAAel1D,KACnDo1D,EAAAA,WAAW,SAACC,GACV,GAAMzD,GAAM5zD,EAAK+zD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAciB,EAActD,IAKjF,OADAzK,SAAQD,MAAM,yBAAyB0K,EAAnD,YAAkEyD,EAAIrgC,SACnDl1B,EAAAA,GAAa,UAO5B,OAAOw1D,GAAAA,SAASL,GAAsBj1D,KAAKqN,EAAAA,IAAI,WAC7C,GAAMkoD,GAAYv3D,EAAKg3D,+BAA+BpyC,EAAM+xC,EAE5D,KAAKY,EACH,KAAMT,IAA4BlyC,EAGpC,OAAO2yC,OASH1D,EAAVlzD,UAAAq2D,+BAAA,SAAyCzC,EAAkBoC,GAGvD,IAAK,GAAItoD,GAAIsoD,EAAe1tD,OAAS,EAAGoF,GAAK,EAAGA,IAAK,CACnD,GAAMuoB,GAAS+/B,EAAetoD,EAC9B,IAAIuoB,EAAO+8B,WAAY,CACrB,GAAM4D,GAAY32D,KAAK42D,uBAAuB5gC,EAAO+8B,WAAYY,EACjE,IAAIgD,EACF,MAAOA,IAIb,MAAO,OAOD1D,EAAVlzD,UAAA01D,uBAAA,SAAiCz/B,aAC7B,OAAOh2B,MAAK62D,UAAU7gC,EAAOg9B,KACxB5xD,KAAKqN,EAAAA,IAAI,SAAAqoD,GAAW,MAAA13D,GAAKm1D,+BAA+BuC,OAOvD7D,EAAVlzD,UAAAw2D,0BAAA,SAAoCvgC,aAEhC,OAAIA,GAAO+8B,WACF7xD,EAAAA,GAAa80B,EAAO+8B,YAGtB/yD,KAAK62D,UAAU7gC,EAAOg9B,KAAK5xD,KAAKqN,EAAAA,IAAI,SAAAqoD,GAOzC,MAJK9gC,GAAO+8B,aACV/8B,EAAO+8B,WAAa3zD,EAAKy1D,sBAAsBiC,IAG1C9gC,EAAO+8B,eAOVE,EAAVlzD,UAAAw0D,+BAAA,SAAyCwC,GACrC,GAAMpB,GAAM31D,KAAK60D,sBAAsBkC,EAEvC,OADA/2D,MAAKg3D,kBAAkBrB,GAChBA,GAQD1C,EAAVlzD,UAAA62D,uBAAA,SAAiCK,EAAqBtD,GAClD,GAAMuD,GAAaD,EAAQlP,cAAc,IAAM4L,EAE/C,KAAKuD,EACH,MAAO,KAKT,IAAMC,GAAcD,EAAWE,WAAU,EAKzC,IAJAD,EAAYE,gBAAgB,MAIe,QAAvCF,EAAYvkB,SAASrgC,cACvB,MAAOvS,MAAKg3D,kBAAiB,EAM/B,IAA2C,WAAvCG,EAAYvkB,SAASrgC,cACvB,MAAOvS,MAAKg3D,kBAAkBh3D,KAAKs3D,cAAcH,GAQnD,IAAMxB,GAAM31D,KAAK60D,sBAAsB,cAIvC,OAFAc,GAAI9vB,YAAYsxB,GAETn3D,KAAKg3D,kBAAkBrB,IAMxB1C,EAAVlzD,UAAA80D,sBAAA,SAAgC0C,GAC5B,GAAMC,GAAMx3D,KAAK8H,UAAU69B,cAAc,MACzC6xB,GAAIC,UAAYF,CAChB,IAAM5B,GAAM6B,EAAIzP,cAAc,MAE9B,KAAK4N,EACH,KAAM/gC,OAAM,sBAGd,OAAO+gC,IAMD1C,EAAVlzD,UAAAu3D,cAAA,SAAwB52D,GAGpB,IAAK,GAFDi1D,GAAM31D,KAAK60D,sBAAsB,eAE5BpnD,EAAI,EAAGA,EAAI/M,EAAQ8H,WAAWH,OAAQoF,IACzC/M,EAAQ8H,WAAWiF,GAAG7E,WAAa5I,KAAK8H,UAAU4vD,cACpD/B,EAAI9vB,YAAYnlC,EAAQ8H,WAAWiF,GAAG2pD,WAAU,GAIpD,OAAOzB,IAMD1C,EAAVlzD,UAAAi3D,kBAAA,SAA4BrB,GAMxB,MALAA,GAAIjL,aAAa,MAAO,IACxBiL,EAAIjL,aAAa,SAAU,QAC3BiL,EAAIjL,aAAa,QAAS,QAC1BiL,EAAIjL,aAAa,sBAAuB,iBACxCiL,EAAIjL,aAAa,YAAa,SACvBiL,GAOD1C,EAAVlzD,UAAA82D,UAAA,SAAoBzB,aAChB,KAAKp1D,KAAKkzD,YACR,KAAMyE,KAGR,IAAe,MAAXvC,EACF,KAAMxgC,OAAM,+BAA+BwgC,EAAjD,KAGI,IAAMpC,GAAMhzD,KAAKmzD,WAAWgB,SAASC,EAAAA,gBAAgBiB,aAAcD,EAEnE,KAAKpC,EACH,KAAMsC,IAAmCF,EAM3C,IAAMwC,GAAkB53D,KAAKuzD,sBAAsB1uD,IAAImuD,EAEvD,IAAI4E,EACF,MAAOA,EAKT,IAAMC,GAAM73D,KAAKkzD,YAAYruD,IAAImuD,GAAM8E,aAAc,SAAS12D,KAC5D22D,EAAAA,SAAS,WAAM,MAAA34D,GAAKm0D,sBAAsB35B,OAAOo5B,KACjDgF,EAAAA,QAIF,OADAh4D,MAAKuzD,sBAAsB55B,IAAIq5B,EAAK6E,GAC7BA,GASD5E,EAAVlzD,UAAAk0D,kBAAA,SAA4BD,EAAmBL,EAAkB39B,GAE7D,MADAh2B,MAAKozD,gBAAgBz5B,IAAIk8B,GAAQ7B,EAAWL,GAAW39B,GAChDh2B,MAQDizD,EAAVlzD,UAAA60D,qBAAA,SAA+BZ,EAAmBh+B,GAC9C,GAAMiiC,GAAkBj4D,KAAKqzD,gBAAgBxuD,IAAImvD,EAQjD,OANIiE,GACFA,EAAgB3rD,KAAK0pB,GAErBh2B,KAAKqzD,gBAAgB15B,IAAIq6B,GAAYh+B,IAGhCh2B,qBA5eXsC,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,+CArFzBtS,KAAQ41D,EAAAA,WAAR/yD,aAAA7C,KAqHKsD,EAAAA,aA5GLtD,KAAQ61D,EAAAA,eA8GR71D,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB4G,EAAAA,4LAhIxB6pD,KAwlBamF,IAEX/tD,QAAS4oD,GACTpwC,OACG,GAAIjd,GAAAA,SAAY,GAAIkd,GAAAA,SAAYmwC,KAChC,GAAIrtD,GAAAA,SAAYsyD,EAAAA,YACjBC,EAAAA,cACC,GAAIvyD,GAAAA,SAAYwD,EAA+B,WAElD2Z,WAAYs1C,IC/jBdC,GAAA,WACE,QAAFA,GAAqBl4D,GAAAJ,KAArBI,YAAqBA,EAnCrB,MAAAk4D,MAqCaC,GACT/wD,EAAW8wD,IAOFE,GAAoB,GAAI7jD,GAAAA,eAAgC,qBACnEC,WAAY,OACZC,QAAS4jD,KAyBLC,IACJ,YACA,gBACA,MACA,SACA,OACA,SACA,SACA,eACA,aACA,aACA,OACA,UAIFC,GAAuD,SAAAC,GAAQ,MAAA,IAAIA,EAAnE,KAAMC,GAA2BH,GAAkBjqD,IAAnDkqD,IAA4EpvB,KAAK,MAG3EuvB,GAAiB,2CAwFrB,QAAFC,GACMpxD,EACQqxD,EACkBC,EAKqBC,GARnD,GAAF95D,GASIQ,EATJoE,KAAAhE,KASU2H,IATV3H,WAEcZ,GAAd45D,cAAcA,EAMuC55D,EAArD85D,UAAqDA,EAtCrD95D,EAAA+5D,SAA6B,EA2CpBF,GACHtxD,EAAWxH,cAAcuqD,aAAa,cAAe,UA9B3D,MA5B6BhrD,GAA7Bq5D,EAAAn5D,GAOEC,OAAFC,eACMi5D,EADNh5D,UAAA,cAAE,WAEE,MAAOC,MAAKm5D,aAEd,SAAWC,GACTp5D,KAAKm5D,QAAUn5C,EAAAA,sBAAsBo5C,oCAQvCv5D,OAAFC,eACMi5D,EADNh5D,UAAA,eAAE,WACwB,MAAOC,MAAKq5D,cACpC,SAAYn5D,GACVF,KAAKq5D,SAAWr5D,KAAKs5D,kBAAkBp5D,oCAKzCL,OAAFC,eACMi5D,EADNh5D,UAAA,gBAAE,WACyB,MAAOC,MAAKu5D,eACrC,SAAar5D,GACXF,KAAKu5D,UAAYv5D,KAAKs5D,kBAAkBp5D,oCA4ClC64D,EAAVh5D,UAAAy5D,eAAA,SAAyB7F,GACrB,IAAKA,EACH,OAAQ,GAAI,GAEd,IAAM8F,GAAQ9F,EAAS5pC,MAAM,IAC7B,QAAQ0vC,EAAMpxD,QACZ,IAAK,GAAG,OAAQ,GAAIoxD,EAAM,GAC1B,KAAK,GAAG,MAAA,EACR,SAAS,KAAM7kC,OAAM,uBAAuB++B,EAAlD,OAIEoF,EAAFh5D,UAAAoW,YAAE,SAAY/N,GAAZ,GAAFhJ,GAAAY,IAEI,IAAIoI,EAAR,QACM,GAAIpI,KAAK05D,QAAS,CACT,GAAfrmD,GAAArT,KAAAw5D,eAAAx5D,KAAA05D,SAAe1F,EAAf3gD,EAAA,GAA0BsgD,EAA1BtgD,EAAA,EAEQrT,MAAKg5D,cAAcpD,gBAAgBjC,EAAUK,GAAW5yD,KAAKsL,EAAAA,KAAK,IAAIpL,UACpE,SAAAq0D,GAAO,MAAAv2D,GAAKu6D,eAAehE,IAC3B,SAACc,GAAe,MAAAlO,SAAQqR,IAAI,0BAA0BnD,EAAIrgC,eAG5Dp2B,MAAK65D,kBAIL75D,MAAK85D,kBACP95D,KAAK+5D,0BAIThB,EAAFh5D,UAAAsW,SAAE,WAGMrW,KAAK85D,kBACP95D,KAAK+5D,0BAIThB,EAAFh5D,UAAAi6D,mBAAE,WACE,GAAMC,GAAiBj6D,KAAKk6D,+BAE5B,IAAID,GAAkBj6D,KAAKk5D,WAAae,EAAensC,KAAM,CAC3D,GAAMqsC,GAAUn6D,KAAKk5D,UAAUjf,aAQ3BkgB,KAAYn6D,KAAKo6D,gBACnBp6D,KAAKo6D,cAAgBD,EACrBn6D,KAAKq6D,yBAAyBF,MAKpCpB,EAAFh5D,UAAAgC,YAAE,WACM/B,KAAKk6D,iCACPl6D,KAAKk6D,gCAAgCniC,SAIjCghC,EAAVh5D,UAAA+5D,0BACI,OAAQ95D,KAAK05D,SAGPX,EAAVh5D,UAAA45D,eAAA,SAAyBhE,GACrB31D,KAAK65D,kBAOL,KAAK,GAFCS,GAAY3E,EAAI4E,iBAAiB,SAE9B9sD,EAAI,EAAGA,EAAI6sD,EAAUjyD,OAAQoF,IACpC6sD,EAAU7sD,GAAG1E,aAAe,GAK9B,IAAI/I,KAAKk5D,UAAW,CAClB,GAAMlf,GAAOh6C,KAAKk5D,UAAUjf,aAC5Bj6C,MAAKo6D,cAAgBpgB,EACrBh6C,KAAKw6D,qCAAqC7E,GAC1C31D,KAAKq6D,yBAAyBrgB,GAGhCh6C,KAAKI,YAAYD,cAAc0lC,YAAY8vB,IAGrCoD,EAAVh5D,UAAA85D,4BACI,GAAMY,GAA6Bz6D,KAAKI,YAAYD,cAChDu6D,EAAaD,EAAcjyD,WAAWH,MAQ1C,KANIrI,KAAKk6D,iCACPl6D,KAAKk6D,gCAAgCniC,QAKhC2iC,KAAc,CACnB,GAAM7tD,GAAQ4tD,EAAcjyD,WAAWkyD,EAIhB,KAAnB7tD,EAAMjE,UAAmD,QAAjCiE,EAAM+lC,SAASrgC,eACzCkoD,EAAcE,YAAY9tD,KAKxBksD,EAAVh5D,UAAAg6D,kCACI,GAAK/5D,KAAK85D,iBAAV,CAIA,GAAMc,GAAoB56D,KAAKI,YAAYD,cACrC06D,EAAe76D,KAAK86D,QACtB96D,KAAKg5D,cAAchE,sBAAsBh1D,KAAK86D,SAC9C96D,KAAKg5D,cAAc9D,wBAEnB2F,IAAgB76D,KAAK+6D,wBACnB/6D,KAAK+6D,uBACPH,EAAKv6D,UAAUC,OAAON,KAAK+6D,uBAEzBF,GACFD,EAAKv6D,UAAUG,IAAIq6D,GAErB76D,KAAK+6D,sBAAwBF,GAG3B76D,KAAKg7D,UAAYh7D,KAAKi7D,yBACpBj7D,KAAKi7D,wBACPL,EAAKv6D,UAAUC,OAAON,KAAKi7D,wBAEzBj7D,KAAKg7D,UACPJ,EAAKv6D,UAAUG,IAAIR,KAAKg7D,UAE1Bh7D,KAAKi7D,uBAAyBj7D,KAAKg7D,YAS/BjC,EAAVh5D,UAAAu5D,kBAAA,SAA4Bp5D,GACxB,MAAwB,gBAAVA,GAAqBA,EAAM8I,OAAO+gB,MAAM,KAAK,GAAK7pB,GAQ1D64D,EAAVh5D,UAAAs6D,yBAAA,SAAmCrgB,GAC/B,GAAMkhB,GAAWl7D,KAAKk6D,+BAElBgB,IACFA,EAAStuD,QAAQ,SAACuuD,EAAOz6D,GACvBy6D,EAAMvuD,QAAQ,SAAAgsD,GACZl4D,EAAQgqD,aAAakO,EAAK50C,KAAM,QAAQg2B,EAAlD,IAA0D4e,EAAK14D,MAA/D,WAUU64D,EAAVh5D,UAAAy6D,qCAAA,SAA+C95D,GAK3C,IAAK,GAJC06D,GAAsB16D,EAAQ65D,iBAAiB1B,IAC/CqC,EAAWl7D,KAAKk6D,gCAClBl6D,KAAKk6D,iCAAmC,GAAI9gC,KAEvC3rB,EAAI,EAAGA,EAAI2tD,EAAoB/yD,OAAQoF,KAApD,SAAaA,GACPirD,GAAkB9rD,QAAQ,SAAAgsD,GACxB,GAAMyC,GAAuBD,EAAoB3tD,GAC3CvN,EAAQm7D,EAAqBC,aAAa1C,GAC1C2C,EAAQr7D,EAAQA,EAAMq7D,MAAMzC,IAAkB,IAEpD,IAAIyC,EAAO,CACT,GAAIC,GAAaN,EAASr2D,IAAIw2D,EAEzBG,KACHA,KACAN,EAASvhC,IAAI0hC,EAAsBG,IAG/C,EAAsBlvD,MAAM0X,KAAM40C,EAAM14D,MAAOq7D,EAAM,SAdxC9tD,mBA9QbnL,KAACC,EAAAA,UAADC,OAAAI,SAAA,4BACEH,SAAU,WACVC,SAAU,UACVG,QAAF,spBACEF,QAAF,SACEG,MACFiH,KAAA,MACMhH,MAAN,WACI04D,0BAAJ,UAEAz4D,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,6EAtHAf,KAAEyD,OAAFZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,mBAgBAF,SAAQqD,GAARR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAg2D,SA8JAO,EAAAt1D,iEA7CAq3D,UAAAx4D,KAAAoB,EAAAA,QAUAs3D,WAAA14D,KAAAoB,EAAAA,SAWAq1D,mCCnKA,sBAaAz2D,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,IACVK,SAAUqyD,GAAS1yD,IACnBU,cAAegyD,QAhBjBnwC,KR8BA8yC,GAAA,yBA9BA,MAAAA,MA+BaC,GACT73D,EAAmB43D,IAIvBE,GAAA,yBApCA,MAAAA,MAqCaC,GACT/3D,EAAmB83D,+EAevB,MACgCl8D,GAAhCmqD,EAAAjqD,kBAdA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEC,SAAU,aACVI,MACFiH,KAAA,aACMhH,MAAN,gBAEAH,SAAA,4BACAC,QAAA;4l9BACEF,QAAF,iBACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,WAGAwmD,OACAD,GAAA,SAAAhqD,iBAiBA,GAAAR,GAAAQ,EAAAoE,KAAAhE,OAAAA,IACE,OAAFZ,GAAAgB,YAAAA,EAAAhB,QAlBAM,GAAAkqD,EAAAhqD,uCAsBA,GAAA+H,GAAA3H,KAAAI,WACI,IAAMuH,EAAV,CAGQ,GAARirC,GAAAjrC,EAAAxH,cAAAyyC,SAAArgC,gCACY,MAAZ,MAGA,IAAqB,oBAAbqgC,EACR,MAAA,cAIA,MAAA,OAGAgX,EAAAzkD,aACA7C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,+CArCAG,SAAA,4BACEE,MAAQC,MAAS,YACjBF,QAAF;4l9BACEF,QAAF,iBACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,WAIAumD,EAAAzhC,eAAA,WAAA,QACA7lB,KAAAiI,EAAAA,iDAmCA,+HAAAw/C,iCAUA,yHAAAC,iCAUA,0HAAAC,KAGAH,GAAA,SAAAlqD;wDAkBAR,EAAAgrD,oBAAA,EASAhrD,EAAAgrD,sBAAAC,GAAAC,GAAA,gBAAAA,EAAAC,gBAAEnrD,EAAForD,MAAAH,GAAAC,CAPA,IAAA5pD,GAAAtB,EAAA4mB,iBAgBI,OALJ,WAAAtlB,EAAAkyC,SAAArgC,eAAA7R,EAAA+pD,aAAA,SACA/pD,EAAAgqD,aAA4B,OAA5B,UAIAtrD,gBAKA0qD,EAAA/pD,UAAAc,8BAEA8pD,EAAA3qD,KAAA4qD,OAAA5qD,KAAA09B,yCAKE,sIAMA,8DAAFp7B,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,yDACgBC,SAAhB,cACAI,4BApDA+nD,+BAAA,mBACAC,oCAAA,oBAEEnoD,QAAF,iBACAC,SAAA,8aAEAO,gBAAAC,EAAAA,wBAAAC,WAIAymD,EAAA3hC,eAAe,WAAf,QACA7lB,KAAAiI,EAAAA,aACAjI,KAAAunD,GAAA1kD,aAAA7C,KAAAsD,EAAAA,aACAtD,KAAAsnD,GAAAzkD,aAAA7C,KAAAsD,EAAAA,4EA9HAmlD,UAAAzoD,KAAYk9B,EAAAA,aAAZh9B,MAAAunD,MAyIAiB,QAAA1oD,KAAAk9B,EAAAA,aAAAh9B,MAAAwnD,cF5GAiB,GAAA,yBA5CA,MAAAA,MA6CaxB,GACT3lD,EAAmBmnD,IAGvBC,GAAA,yBAjDA,MAAAA,MAkDaC,GACTrnD,EAAmBonD,IAGV5B,IACXj/C,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAmxC,MAC9BvoB,OAAO,GAIToqB,GAAA,WACE,QAAFA,GAEWv8B,EAEAya,GAFAtpC,KAAX6uB,OAAWA,EAEA7uB,KAAXspC,OAAWA,EAlEX,MAAA8hB,qBA2IE,QAAF5B,GAAsB9rB,EACAmJ,EAE2CwkB,GAH/D,GAAFjsD,GAIIQ,EAJJoE,KAAAhE,OAAAA,WAAsBZ,GAAtBs+B,SAAsBA,EACAt+B,EAAtBynC,gBAAsBA,EAE2CznC,EAAjEisD,cAAiEA,EA5CjEjsD,EAAA2nC,WAAsB,EACtB3nC,EAAA8nC,WAAsB,EACtB9nC,EAAAksD,WAAsB,EAUpBlsD,EAAFmsD,iBAAkD,UAkBlD,MAjCmC7rD,GAAnC8pD,EAAA5pD,GAqBEC,OAAFC,eACM0pD,EADNzpD,UAAA,gBAAE,WACiB,MAAOC,MAAKknC,WAAclnC,KAAKqrD,eAAiBrrD,KAAKqrD,cAAc5mD,cACpF,SAAavE,GACX,GAAMmlC,GAAWrlB,EAAAA,sBAAsB9f,EAEnCmlC,KAAarlC,KAAKknC,YACpBlnC,KAAKknC,UAAY7B,EACjBrlC,KAAK6mC,gBAAgBjmC,iDAKzBf,OAAFC,eACM0pD,EADNzpD,UAAA,gBAAE,WAC0B,MAAOC,MAAKqrD,cAAc5E,gBAAgBwC,WAAWjpD,WAC/E,SAAaE,GACX,GAAM+oD,GAAajpC,EAAAA,sBAAsB9f,EAErC+oD,KAAejpD,KAAK+mC,YACtB/mC,KAAKwrD,aAAavC,GAClBjpD,KAAKqrD,cAAcI,uDAWvBjC,EAAFzpD,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,KAMUgpD,EAAchpD,KAAK+mC,SAEzB5yB,SAAQC,UAAUC,KAAK,YACjBjV,EAAK2nC,WAAaiiB,KACpB5pD,EAAKgnB,UAAW,EAChBhnB,EAAKynC,gBAAgBjmC,mBAK3B4oD,EAAFzpD,UAAAc,mBAAE,WACE8pD,EAAS3qD,KAAK4qD,OAAQ5qD,KAAK09B,WAG7B8rB,EAAFzpD,UAAAgC,YAAE,WAAA,GAAF3C,GAAAY,IACQA,MAAKomB,UAGPjS,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAKgnB,UAAW,GAG/C,IAAMslC,GAAW1rD,KAAKsrD,UAChBK,EAAgB3rD,KAAKqrD,cAAcO,sBAAsB5rD,KAG3D0rD,IAAYC,GACdA,EAAc1xC,SAKlBuvC,EAAFzpD,UAAAkiC,OAAE,WACEjiC,KAAKomB,UAAYpmB,KAAKomB,UAIxBojC,EAAFzpD,UAAAka,MAAE,WACEja,KAAK09B,SAASv9B,cAAc8Z,SAO9BuvC,EAAFzpD,UAAAw8C,SAAE,WACE,MAAOv8C,MAAK6rD,MAAS7rD,KAAK6rD,MAAM1rD,cAAc4I,aAAe,GAAM,IAIrEygD,EAAFzpD,UAAAwoC,kBAAE,WACE,MAAOvoC,MAAKyE,UAAYzE,KAAKwoC,eAAiBxoC,KAAKqrD,cAAc7iB,eAGnEghB,EAAFzpD,UAAAqhB,aAAE,WACOphB,KAAKyE,WACRzE,KAAKiiC,SAGLjiC,KAAKqrD,cAAc9+B,iBAAiBvsB,QAIxCwpD,EAAFzpD,UAAA+rD,aAAE,WACE9rD,KAAKqrD,cAAcU,kBAAkB/rD,MACrCA,KAAKsrD,WAAY,GAGnB9B,EAAFzpD,UAAAisD,YAAE,WACEhsD,KAAKqrD,cAAcxG,aACnB7kD,KAAKsrD,WAAY,GAInB9B,EAAFzpD,UAAAimB,gBAAE,WACE,MAAOhmB,MAAK09B,SAASv9B,eAIvBqpD,EAAFzpD,UAAAyrD,aAAE,SAAaplC,GACX,MAAIA,KAAapmB,KAAK+mC,YAItB/mC,KAAK+mC,UAAY3gB,EAEbA,EACFpmB,KAAKqrD,cAAc5E,gBAAgBR,OAAOjmD,MAE1CA,KAAKqrD,cAAc5E,gBAAgBN,SAASnmD,MAG9CA,KAAK6mC,gBAAgBjmC,gBACd,IAQT4oD,EAAFzpD,UAAA4nC,cAAE,WACE3nC,KAAK6mC,gBAAgBjmC,+BAnLzB0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,gBACVC,QAAF,iBACEG,MACFiH,KAAA,SACMhH,MAAN,gCACIysB,UAAJ,iBACIC,SAAJ,gBACIjkB,UAAW,iBACXygD,SAAJ,KACIC,iCAAJ,WACIpB,oCAAJ,mBACIqB,uBAAJ,sBACI7mD,uBAAJ,uBAEA1C,SAAA,6gBACAI,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,8FAvEAf,KAAEinD,GAAFpkD,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAA4V,EAAAA,WAAA,WAAA,MAAAmxC,YA0HAC,EAAA/lD,kGAxCAmnD,SAAAtoD,KAAA0I,EAAAA,gBAAAxI,MAAA4pD,MACAP,QAAAvpD,KAAGmU,EAAAA,UAAHjU,MAAA,UACA+oD,mBAAAjpD,KAAAoB,EAAAA,QAGAxD,QAAAoC,KAAGoB,EAAAA,QAGHe,WAAAnC,KAAAoB,EAAAA,QAGA0iB,WAAA9jB,KAAAoB,EAAAA,SAeA8lD,sCA0JA,GAAApqD,GAAAQ,EAAAoE,KAAAhE,OAAAA,IAoDE,OAEFZ,GAAAs+B,SAAAA,iOAFAt+B,EAtCA,4DAUAyF,2KAWAE,YAAA,EACAC,cAAA,mGAuBA2X,WACS0hC,gBAGTgO,cAAA,WAAA,OAAA,IACA1D,yBAAA,aACA3oD,KAAAssD,cACAtsD,KAAAusD,sBAAAvsD,KAAAssD,aAEQtsD,KAAKssD,YAAb,MAGAtsD,KAAAwsD,cAAAxsD,KAAAymD,gBAAAl4C,SAAAjN,UAAA,SAAA8X,cAGA,IAAA,GAAAqzC,GAAA,EAA6Bp5C,EAA7B+F,EAAA4sC,MAAAyG,EAAAp5C,EAAuDhL,OAAvDokD,IAAA,CACA,GAAAjO,GAAAnrC,EAAAo5C,EACAjO,GAAAp4B,UAAA,EAEA,GAAAhN,EAAA8sC,QACA,IAAA,GAAAzD,GAAA,EAAAE,EAAAvpC,EAAA8sC,QAAAzD,EAAAE,EAAAt6C,OAAAo6C,IAAA,CAEA,GAAAjE,GAAyBmE,EAAzBF,EACAjE,GAAAp4B,UAAA,4aAmCA,GAAAsmC,GAAA1sD,KAAAsqC,gBAAAhB,EASA,qDANAojB,EAAA,8CAGA,IAAaA,GAAb1sD,KAAAqpC,QAA+ChhC,OAA/C,GACArI,KAAAkb,YAAAC,sBAAA5G,KAAAE,IAAAi4C,EAAA,EAAA1sD,KAAAqpC,QAAAhhC,OAAA,KAEArI,KAAAkb,YAAAgxB,6CAOA,GAAArwB,GAAAzC,EAAAyC,QACUmrC,EAAUhnD,KAAKkb,YACfyxC,EAAV3F,EAAAld,0BACU,IAAV1tB,GAAAA,MAEA,IAAAD,GAAAA,MACAnc,KAAA4sD,uBAEQxzC,EAAR4C,sBAEA,KAAAF,GAAAA,KACA,IAAAG,GAAAA,IACAJ,IAAAC,EAAAA,KAAAkrC,EAAAjrC,qBAAAirC,EAAA9qC,oBACA9C,EAAA4C,gBACQ,MACR,KAAAkrC,GAAAA,EACA9tC,EAAA+tC,UACAnnD,KAAAqpC,QAAA1nC,KAAA,SAAA2nC,GAAA,OAAAA,EAAAljB,WAAApmB,KAAA6sD,YAAA7sD,KAAA8sD,cACY1zC,EAAM4C,iBAElB,MACA,SACQgrC,EAAR1qC,UAAAlD,GAEAyC,IAAAwR,EAAAA,UAAAxR,IAAA0R,EAAAA,aAAAnU,EAAAmuC,UACAP,EAAAld,kBAAA6iB,GAEQ3sD,KAAR4sD,gFAOA5sD,KAAA4kD,UAAA5kD,KAAA+sD,iKAYA/sD,KAAAusD,sBAAAS,OAGAhtD,KAAAssD,YAAAU,6OAqBAhtD,MAAAqpC,QAAAz8B,QAAA,SAAA08B,GAAA,MAAAA,GAAAkiB,cAAA,2BAGA,GAAAnD,GAAwBjpD,EAAxBiqC,QAAA1nC,KAAA,SAAA2nC,uBAKAlqC,EAAAqxC,YAAArxC,EAAAqxC,YAAAnH,EAAAppC,MAAAA,GAAAopC,EAAAppC,QAAAA,IAGQmoD,IACRA,EAAAmD,cAAA,yQAiBQ,GAARyB,GAA4BjtD,KAA5BqpC,QAAAhsB,UAAmD6vC,oBACzCD,EAAVhrB,oFAgBA,GAAAkrB,IAAA,mCAGA7jB,EAAAkiB,aAAAvC,KAEAkE,GAAyB,KAGzBA,GACAntD,KAAAyrD,kLAkBAlC,EAAApkD,+FAzSAxC,QAAA,WAAA,gBAAA,YACEG,MACFiH,KAAA,UACAimB,aAAA,WACAjtB,MAAA,qBACMysB,UAAN,UACIC,SAAJ,eACIE,YAAJ,mBACIy9B,uBAAJ,OACI9nD,uBAAJ,uBAEA1C,SAAA,4BACAC,QAAA;4l9BACAG,cAAAC,EAAAA,kBAAAC,KACAkH,WAAAk/C,IACEnmD,gBAAFC,EAAAA,wBAAAC,WAIAkmD,EAAAphC,eAAA,WAAA,QACA7lB,KAAAiI,EAAAA,gGArQA8+B,UAAA/mC,KAAY0I,EAAAA,gBAAZxI,MAAAgnD,MA4TA5Y,kBAAAtuC,KAAAsX,EAAAA,gEA/CAnV,WAAAnC,KAAAoB,EAAAA,SAOA6lD,GAOAE,gCC/SA,sBA4BAnnD,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUujD,GAAenjD,GAAiBF,GAAiBsjD,GAAyBvjD,EAAAA,cACpFM,SACEkjD,GACAC,GACAC,GACAC,GACAL,GACArjD,GACA2jD,GACAC,GACAN,GACAJ,GACAC,GACAU,IAEFnjD,cACE6iD,GACAC,GACAC,GACAC,GACAC,GACAC,GACAV,GACAC,QApDJW,mBTmCE,QAAFrP,GACYE,EACAG,EACAP,EACArlB,EACA3f,EACkB9N,GALlB9H,KAAZg7C,UAAYA,EACAh7C,KAAZm7C,0BAAYA;iCACAn7C,KAAZ46C,QAAYA,EACA56C,KAAZu1B,UAAYA,EACAv1B,KAAZ4V,kBAAYA,EACkB5V,KAA9B8H,UAA8BA,EAR5B9H,KAAF66C,UAAc,GAAIp7C,GAAAA,QAjClB,MA+CEq7C,GAAF/6C,UAAAgY,OAAE,SAAOgjC,OAAT,KAAAA,IAASA,MACA/6C,KAAK+zC,UACR/zC,KAAK+zC,QAAU,GAAIz9B,GAAAA,eAAetW,KAAKg7C,UAAWh7C,KAAK4V,oBAGzD5V,KAAKkY,SAEAlY,KAAKi7C,UACRj7C,KAAKi7C,QAAU,GAAIC,GAAAA,gBAAgBl7C,KAAK8H,UAAU69B,cAAc,OAC5D3lC,KAAKm7C,0BAA2Bn7C,KAAK46C,QAAS56C,KAAKu1B,WAGzD,IAAM70B,GAAuBV,KAAKg7C,UAAUrzC,WAAWxH,aAKvDO,GAAkB,WAAE06C,aAAap7C,KAAKi7C,QAAQI,cAAe36C,GAC7DV,KAAK+zC,QAAQh8B,OAAO/X,KAAKi7C,QAASF,GAClC/6C,KAAK66C,UAAU74C,QAOjB84C,EAAF/6C,UAAAmY,OAAE,WACMlY,KAAK+zC,QAAQuH,YACft7C,KAAK+zC,QAAQ77B,UAIjB4iC,EAAF/6C,UAAAgC,YAAE,WACM/B,KAAKi7C,SACPj7C,KAAKi7C,QAAQxoB,0BAxDnBnwB,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,sEAhBZH,KAAEkT,EAAAA,cACFlT,KAAE6V,EAAAA,2BACF7V,KAAEi5C,EAAAA,iBACFj5C,KAAEw2B,EAAAA,WACFx2B,KAAEkH,EAAAA,mBA2BFlH,SAAAqD,GAAAR,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAY4G,EAAAA,eAzCZ0xC,KCyBaU,IAYXC,cAAe3kC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,OAAQ7B,EAAAA,OACZ+M,QAAS,EACTjL,UAAW,gBAEbE,EAAAA,WAAW,gBAAiB41B,EAAAA,OAC1BzqB,EAAAA,MAAM,oBAAqBlL,EAAAA,QAAQ,eAAgBjC,EAAAA,OAAO+M,QAAS,MACnE9K,EAAAA,QAAQ,mCAAoCjC,EAAAA,OAAO8B,UAAW,iBAEhEE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBjC,EAAAA,OAAO+M,QAAS,QAQvEy5B,YAAa5kC,EAAAA,QAAQ,eAGnBC,EAAAA,MAAM,UAAW7B,EAAAA,OAAO+M,QAAS,KACjC/K,EAAAA,WAAW,aACThC,EAAAA,OAAO+M,QAAS,IAChB9K,EAAAA,QAAQ,qDAUDukC,GAAcF,GAAkBE,YAOhCD,GAAgBD,GAAkBC,cC3DlCE,GAAiB,GAAIhnC,GAAAA,eAA6B,kBCY/DinC,GAAA,yBA9BA,MAAAA,MA+BaC,GACT/3C,EAAmBC,EAAc63C,oBAwCnC,QAAFE,GACY17C,EACUyH,EACV3D,EACoC63C,GAJ9C,GAAF38C,GAOIQ,EAAJoE,KAAAhE,OAAAA,WANYZ,GAAZgB,YAAYA,EAEAhB,EAAZ8E,cAAYA,EACoC9E,EAAhD28C,YAAgDA,EAZ9C38C,EAAF48C,SAA4C,GAAIv8C,GAAAA,QAG9CL,EAAF68C,cAA0B,EAGxB78C,EAAF88C,kBAA8B,EAWtBh4C,GAIFA,EAAcU,QAAQxF,EAAKgB,aAAa,GAGtC27C,GAAeA,EAAYI,SAC7BJ,EAAYI,QAAQ/8C,GAGtBA,EAAK0I,UAAYD,IAhBrB,MAlBiCnI,GAAjCo8C,EAAAl8C,GAsCEk8C,EAAF/7C,UAAAka,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQjW,KAAKkE,cACPlE,KAAKkE,cAAck4B,SAASp8B,KAAKgmB,kBAAmB/P,GAEpDjW,KAAKgmB,kBAAkB/L,SAI3B6hC,EAAF/7C,UAAAgC,YAAE,WACM/B,KAAKkE,eACPlE,KAAKkE,cAAce,eAAejF,KAAKI,aAGrCJ,KAAK+7C,aAAe/7C,KAAK+7C,YAAYK,YACvCp8C,KAAK+7C,YAAYK,WAAWp8C,MAG9BA,KAAKg8C,SAAS/5C,YAIhB65C,EAAF/7C,UAAAuhB,aAAE,WACE,MAAOthB,MAAKyE,SAAW,KAAO,KAIhCq3C,EAAF/7C,UAAAimB,gBAAE,WACE,MAAOhmB,MAAKI,YAAYD,eAI1B27C,EAAF/7C,UAAAs8C,eAAE,SAAejjC,GACTpZ,KAAKyE,WACP2U,EAAM4C,iBACN5C,EAAMqiB,oBAKVqgB,EAAF/7C,UAAAu8C,kBAAE,WACEt8C,KAAKg8C,SAASh6C,KAAKhC,OAIrB87C,EAAF/7C,UAAAw8C,SAAE,WACE,GAAM77C,GAAuBV,KAAKI,YAAYD,cACxCq8C,EAAex8C,KAAK8H,UAAY9H,KAAK8H,UAAU20C,UAAY,EAC7DC,EAAS,EAEb,IAAIh8C,EAAQ8H,WAMV,IAAK,GALCm0C,GAASj8C,EAAQ8H,WAAWH,OAKzBoF,EAAI,EAAGA,EAAIkvC,EAAQlvC,IACtB/M,EAAQ8H,WAAWiF,GAAG7E,WAAa4zC,IACrCE,GAAUh8C,EAAQ8H,WAAWiF,GAAG1E,YAKtC,OAAO2zC,GAAO1zC,uBAxHlB1G,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEC,SAAU,cACVC,QAAF,WAAA,iBACEG,MACFiH,KAAA,WACMhH,MAAN,gBACI65C,oCAAJ,eACIC,wCAAJ,mBACI1Z,kBAAJ,iBACI79B,uBAAJ,sBACIw3C,kBAAmB,mBACnBtxC,UAAJ,yBACImZ,eAAJ,uBAEAxhB,gBAAAC,EAAAA,wBAAyCC,OACzCL,cAAAC,EAAAA,kBAAAC,KACEN,SAAF,yRA1CAN,KAAE2D,EAAAA,eA8DF3D,SAAAqD,GAAAR,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAYm5C,MAAZr5C,KAAAsD,EAAAA,cAEAk2C,OCdaiB,GACT,GAAIpoC,GAAAA,eAAsC,4BACxCC,WAAY,OACZC,QAASmoC,mBAqKb,QAAFC,GACY78C,EACAf,EACkCwyC,GAFlC7xC,KAAZI,YAAYA,EACAJ,KAAZX,QAAYA,EACkCW,KAA9C6xC,gBAA8CA,EAnI9C7xC,KAAAk9C,WAAsCl9C,KAAK6xC,gBAAgBsL,UAC3Dn9C,KAAAo9C,WAAsCp9C,KAAK6xC,gBAAgBwL,UAI3Dr9C,KAAAs9C,UAGAt9C,KAAAu9C,aAAyB,GAAI99C,GAAAA,QAG7BO,KAAAw9C,iBAA6BrsC,EAAAA,aAAaC,MAGxCpR,KAAFy9C,cAGEz9C,KAAF09C,qBAA2C,OAGzC19C,KAAF22C,eAAmB,GAAIl3C,GAAAA,QAYrBO,KAAF29C,cAAmC39C,KAAK6xC,gBAAgB8L,cA8CxD39C,KAAA49C,gBAAqC59C,KAAK6xC,gBAAgBgM,eAQ1D79C,KAAA89C,aAA8C99C,KAAK6xC,gBAAgBkM,YAgCjE/9C,KAAF+xB,OACM,GAAIrZ,GAAAA,aAOR1Y,KAAFw7B,MAAoBx7B,KAAK+xB,OAAzB,MA3FElyB,QAAFC,eACMm9C,EADNl9C,UAAA,iBAAE,WACiC,MAAOC,MAAKk9C,gBAC7C,SAAch9C,GACE,WAAVA,GAAgC,UAAVA,GACxB89C,KAEFh+C,KAAKk9C,WAAah9C,EAClBF,KAAKi+C,sDAIPp+C,OAAFC,eACMm9C,EADNl9C,UAAA,iBAAE,WACiC,MAAOC,MAAKo9C,gBAC7C,SAAcl9C,GACE,UAAVA,GAA+B,UAAVA,GACvBg+C,KAEFl+C,KAAKo9C,WAAal9C,EAClBF,KAAKi+C,sDAoBPp+C,OAAFC,eACMm9C,EADNl9C,UAAA,sBAAE,WACgC,MAAOC,MAAK49C,qBAC5C,SAAmB19C,GACjBF,KAAK49C,gBAAkB59B,EAAAA,sBAAsB9f,oCAK/CL,OAAFC,eACMm9C,EADNl9C,UAAA,mBAAE,WACyC,MAAOC,MAAK89C,kBACrD,SAAgB59C,GACdF,KAAK89C,aAAe99B,EAAAA,sBAAsB9f,oCAU5CL,OAAFC,eACMm9C,EADNl9C,UAAA,kBAAE,SACeo+C,GACTA,GAAWA,EAAQ91C,SACrBrI,KAAKy9C,WAAaU,EAAQp0B,MAAM,KAAK3X,OAAO,SAACwB,EAAUwqC,GAErD,MADAxqC,GAAIwqC,IAAa,EACVxqC,OAGT5T,KAAKI,YAAYD,cAAci+C,UAAY,qCAW/Cv+C,OAAFC,eACMm9C,EADNl9C,UAAA,iBAAE,WAC0B,MAAOC,MAAK00B,gBACtC,SAAcypB,GAAmBn+C,KAAK00B,WAAaypB,mCAkBnDlB,EAAFl9C,UAAAsW,SAAE,WACErW,KAAKi+C,sBAGPhB,EAAFl9C,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKkb,YAAc,GAAIuB,GAAAA,gBAA6Bzc,KAAKs9C,QAAQ3gC,WAAW0hC,gBAC5Er+C,KAAKw9C,iBAAmBx9C,KAAKkb,YAAYojC,OAAOh9C,UAAU,WAAM,MAAAlC,GAAK2yB,OAAO1Y,KAAK,UAGnF4jC,EAAFl9C,UAAAgC,YAAE,WACE/B,KAAKw9C,iBAAiB7pC,cACtB3T,KAAK+xB,OAAO9vB,YAIdg7C,EAAFl9C,UAAAi8C,SAAE,WACE,MAAOh8C,MAAKu9C,aAAan8C,KACvBsW,EAAAA,UAAU1X,KAAKs9C,QACfiB,EAAAA,UAAU,SAAA5T,GAAS,MAAAxpC,GAAAA,MAFzBqN,UAAA,GAEkCm8B,EAAMl8B,IAAI,SAAA+vC,GAAQ,MAAAA,GAAKxC,gBAKvDiB,EAAFl9C,UAAA6b,eAAE,SAAexC,GACb,GAAMyC,GAAUzC,EAAMyC,OAEtB,QAAQA,GACN,IAAKu4B,GAAAA,OACHp0C,KAAK+xB,OAAO1Y,KAAK,UACnB,MACA,KAAK+T,GAAAA,WACCptB,KAAKy+C,YAAiC,QAAnBz+C,KAAK2R,WAC1B3R,KAAK+xB,OAAO1Y,KAAK,UAErB,MACA,KAAKiU,GAAAA,YACCttB,KAAKy+C,YAAiC,QAAnBz+C,KAAK2R,WAC1B3R,KAAK+xB,OAAO1Y,KAAK,UAErB,MACA,SACMwC,IAAYwR,EAAAA,UAAYxR,IAAY0R,EAAAA,YACtCvtB,KAAKkb,YAAYwjC,eAAe,YAGlC1+C,KAAKkb,YAAYoB,UAAUlD,KAQjC6jC,EAAFl9C,UAAA4+C,eAAE,SAAe1oC,GAAf,GAAF7W,GAAAY,SAAA,KAAAiW,IAAiBA,EAAjB,WAEQjW,KAAK4+C,YACP5+C,KAAKX,QAAQw/C,SAASjsB,eACnBxxB,KAAKsL,EAAAA,KAAK,IACVpL,UAAU,WAAM,MAAAlC,GAAK8b,YAAYwjC,eAAezoC,GAAQ8F,uBAE3D/b,KAAKkb,YAAYwjC,eAAezoC,GAAQ8F,sBAQ5CkhC,EAAFl9C,UAAA++C,gBAAE,WACE9+C,KAAKkb,YAAYkC,eAAe,IAOlC6/B,EAAFl9C,UAAAg/C,aAAE,SAAaC,GAEX,GAAMC,GAAe,mBAxOO,EAwOqCD,GAC3DE,EAAkBr/C,OAAOsS,KAAKnS,KAAKy9C,YAAY97C,KAAK,SAAAw9C,GAAK,MAAAA,GAAEC,WAAW,oBAEvEF,IAAmBA,IAAoBl/C,KAAKq/C,qBAC3Cr/C,KAAKq/C,qBACPr/C,KAAKy9C,WAAWz9C,KAAKq/C,qBAAsB,GAG7Cr/C,KAAKy9C,WAAWwB,IAAgB,EAChCj/C,KAAKq/C,mBAAqBJ,IAQ9BhC,EAAFl9C,UAAAo8C,QAAE,SAAQqC,IAM6B,IAA/Bx+C,KAAKs9C,OAAO7qC,QAAQ+rC,KACtBx+C,KAAKs9C,OAAOhxC,KAAKkyC,GACjBx+C,KAAKu9C,aAAav7C,KAAKhC,KAAKs9C,UAQhCL,EAAFl9C,UAAAq8C,WAAE,SAAWoC,GACT,GAAM1xC,GAAQ9M,KAAKs9C,OAAO7qC,QAAQ+rC,EAE9Bx+C,MAAKs9C,OAAO7qC,QAAQ+rC,IAAS,IAC/Bx+C,KAAKs9C,OAAOrpC,OAAOnH,EAAO,GAC1B9M,KAAKu9C,aAAav7C,KAAKhC,KAAKs9C,UAWhCL,EAAFl9C,UAAAk+C,mBAAE,SAAmBqB,EAAsCC,OAA3D,KAAAD,IAAqBA,EAAsBt/C,KAAKm9C,eAAhD,KAAAoC,IAA2DA,EAAsBv/C,KAAKq9C,UAClF,IAAMc,GAAUn+C,KAAKy9C,UACrBU,GAAQ,mBAA8B,WAATmB,EAC7BnB,EAAQ,kBAA6B,UAATmB,EAC5BnB,EAAQ,kBAA6B,UAAToB,EAC5BpB,EAAQ,kBAA6B,UAAToB,GAI9BtC,EAAFl9C,UAAAy/C,gBAAE,WAEEx/C,KAAK09C,qBAAuB,SAI9BT,EAAFl9C,UAAA0/C,gBAAE,WAEEz/C,KAAK09C,qBAAuB,QAI9BT,EAAFl9C,UAAA2/C,iBAAE,SAAiBtmC,GACfpZ,KAAK22C,eAAe30C,KAAKoX,GACzBpZ,KAAK2/C,cAAe,EAQE,UAAlBvmC,EAAMD,SAA4D,IAArCnZ,KAAKkb,YAAY4uB,kBAChD1wB,EAAM1Y,QAAQypC,UAAY,mBAtThC7nC,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEG,SAAU,wXACVC,QAAF,mzDACEM,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,UACEiX,YACF6hC,GAAAC,cACAD,GAAAE,aAEAtxC,YACAC,QAAAsxC,GAAArxC,YAAA2yC,gFA7EA36C,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAAu6C,SAuNAE,EAAAx5C,0EAnGA45C,YAAA/6C,KAAAoB,EAAAA,QAGA+iB,cAAAnkB,KAAAmU,EAAAA,UAAAjU,MAAAgT,EAAAA,eAWAm1B,QAAAroC,KAAA0I,EAAAA,gBAAAxI,MAAAs5C,MAWA8C,cAAAt8C,KAAGk9B,EAAAA,aAAHh9B,MAAAs4C,MAOA+C,iBAAAv7C,KAAAoB,EAAAA,QAMAq6C,cAAAz7C,KAAGoB,EAAAA,QAGHgxB,aAAApyB,KAAAoB,EAAAA,MAAAlB,MAAA,WAQAnC,YAAAiC,KAAAoB,EAAAA,QAaAquB,SAAAzvB,KAAAsX,EAAAA,SAmBA4hB,QAAAl5B,KAAAsX,EAAAA,UAaAqjC,KCvLa2C,GACT,GAAIjrC,GAAAA,eAAqC,4BAQhCkrC,IACXx1C,QAASu1C,GACT/8B,MAAO+V,EAAAA,SACP7V,WAAY+8B,IAORC,GAA8BC,EAAAA,iCAAiCC,SAAS,kBAiG5E,QAAFC,GAAsB7qB,EACAqI,EACA9nB,EAC0Bg8B,EACdmK,EACQoE,EACRn/C,EAGZkD,GATpB,GAAF9E,GAAAY,IAAsBA,MAAtBq1B,SAAsBA,EACAr1B,KAAtB09B,SAAsBA,EACA19B,KAAtB4V,kBAAsBA,EAEY5V,KAAlC+7C,YAAkCA,EACQ/7C,KAA1CmgD,kBAA0CA,EACRngD,KAAlCgB,KAAkCA,EAGZhB,KAAtBkE,cAAsBA,EArFtBlE,KAAAsxB,YAA2C,KAC3CtxB,KAAAogD,WAA+B,EAC/BpgD,KAAAqgD,mBAA+BlvC,EAAAA,aAAaC,MAC5CpR,KAAAsgD,mBAA+BnvC,EAAAA,aAAaC,MAC5CpR,KAAAugD,uBAAmCpvC,EAAAA,aAAaC,MAOhDpR,KAAAwgD,kBAA8B,WAAM,MAAAphD,GAAKqhD,UAAY,SAInDzgD,KAAFygD,UAAwC,KAwCtCzgD,KAAF0gD,WAAsD,GAAIhoC,GAAAA,aAQxD1Y,KAAF2gD,WAAsD3gD,KAAK0gD,WAGzD1gD,KAAF4gD,WAAsD,GAAIloC,GAAAA,aAQxD1Y,KAAF6gD,YAAuD7gD,KAAK4gD,WAaxDljB,EAASv9B,cAAcwyC,iBAAiB,aAAc3yC,KAAKwgD,kBACvDT,IAEAI,IACFA,EAAkBjE,iBAAmBl8C,KAAK8gD,mBAG5C9gD,KAAKmyC,gBAAkBP,EAnL3B,MA0GE/xC,QAAFC,eACMogD,EADNngD,UAAA,oCAAE,WACmD,MAAOC,MAAK+gD,UAC/D,SAAiCljC,GAC/B7d,KAAK+gD,KAAOljC,mCAIdhe,OAAFC,eACMogD,EADNngD,UAAA,YAAE,WACa,MAAOC,MAAKghD,WACzB,SAASD,GAAT,GAAF3hD,GAAAY,IACQ+gD,KAAS/gD,KAAKghD,QAIlBhhD,KAAKghD,MAAQD,EACb/gD,KAAKugD,uBAAuB5sC,cAExBotC,IACF/gD,KAAKugD,uBAAyBQ,EAAKvlB,MAAM5I,eAAetxB,UAAU,SAAA2/C,GAChE7hD,EAAK8hD,eAGW,UAAXD,GAAiC,QAAXA,IAAqB7hD,EAAK28C,aACnD38C,EAAK28C,YAAYhqB,OAAO1Y,KAAK4nC,wCAqDrCf,EAAFngD,UAAAc,mBAAE,WACEb,KAAKmhD,aACLnhD,KAAKohD,gBAGPlB,EAAFngD,UAAAgC,YAAE,WACM/B,KAAKsxB,cACPtxB,KAAKsxB,YAAYmB,UACjBzyB,KAAKsxB,YAAc,MAGrBtxB,KAAK09B,SAASv9B,cAAcuzC,oBAAoB,aAAc1zC,KAAKwgD,kBAC/DT,IAEJ//C,KAAKqhD,yBAIPxhD,OAAFC,eAAMogD,EAANngD,UAAA,gBAAE,WACE,MAAOC,MAAKogD,2CAIdvgD,OAAFC,eAAMogD,EAANngD,UAAA,WAAE,WACE,MAAOC,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,MAAkB,MAAQ,uCAI1DggD,EAAFngD,UAAA+gD,gBAAE,WACE,SAAU9gD,KAAKmgD,oBAAqBngD,KAAK+7C,cAI3CmE,EAAFngD,UAAAuhD,WAAE,WACE,MAAOthD,MAAKogD,UAAYpgD,KAAKuhD,YAAcvhD,KAAKwhD,YAIlDtB,EAAFngD,UAAAyhD,SAAE,WAAA,GAAFpiD,GAAAY,IACI,KAAIA,KAAKogD,UAAT,CAIApgD,KAAKmhD,YAEL,IAAM3qB,GAAax2B,KAAKm3B,gBACxBn3B,MAAKyhD,aAAajrB,EAAW0e,YAAiE,kBAC9F1e,EAAWze,OAAO/X,KAAK0hD,cAEnB1hD,KAAK+gD,KAAKnC,aACZ5+C,KAAK+gD,KAAKnC,YAAY7mC,OAAO/X,KAAK2hD,UAGpC3hD,KAAKqgD,mBAAqBrgD,KAAK4hD,sBAAsBtgD,UAAU,WAAM,MAAAlC,GAAKmiD,cAC1EvhD,KAAK6hD,YAED7hD,KAAK+gD,eAAgB9D,KACvBj9C,KAAK+gD,KAAKvB,oBAKdU,EAAFngD,UAAAwhD,UAAE,WACEvhD,KAAK+gD,KAAKvlB,MAAMniB,QAOlB6mC,EAAFngD,UAAAka,MAAE,SAAMhE,OAAR,KAAAA,IAAQA,EAAR,WACQjW,KAAKkE,cACPlE,KAAKkE,cAAck4B,SAASp8B,KAAK09B,SAAUznB,GAE3CjW,KAAK09B,SAASv9B,cAAc8Z,SAKxBimC,EAAVngD,UAAAmhD,kCACI,IAAKlhD,KAAKsxB,aAAgBtxB,KAAK8hD,SAA/B,CAIA,GAAMf,GAAO/gD,KAAK+gD,IAElB/gD,MAAKqgD,mBAAmB1sC,cACxB3T,KAAKsxB,YAAYpZ,SAEb6oC,YAAgB9D,KAClB8D,EAAKtB,kBAEDsB,EAAKnC,YAEPmC,EAAKpK,eACFv1C,KACCqH,EAAAA,OAAO,SAAA2Q,GAAS,MAAkB,SAAlBA,EAAMD,UACtBzM,EAAAA,KAAK,GAELrL,EAAAA,UAAU0/C,EAAKnC,YAAY/D,YAE5Bv5C,UAAU,WAArB,MAA2By/C,GAAgB,YAAE7oC,cAAUvS,GAAW,WAEtDvG,EAAK2iD,eAGT/hD,KAAK+hD,eAGP/hD,KAAK+hD,aAEDhB,EAAKnC,aACPmC,EAAKnC,YAAY1mC,YASfgoC,EAAVngD,UAAA8hD,qBACI7hD,KAAK+gD,KAAKtC,WAAaz+C,KAAK8gD,kBAAoB9gD,KAAK+7C,gBAAcp2C,GACnE3F,KAAK+gD,KAAKpvC,UAAY3R,KAAK6Y,IAC3B7Y,KAAKgiD,oBACLhiD,KAAKiiD,gBAAe,GACpBjiD,KAAK+gD,KAAKpC,eAAe3+C,KAAKygD,WAAa,YAIrCP,EAAVngD,UAAAiiD,6BACI,GAAIhiD,KAAK+gD,KAAKhC,aAAc,CAI1B,IAHA,GAAIC,GAAQ,EACRP,EAAaz+C,KAAK+gD,KAAKtC,WAEpBA,GACLO,IACAP,EAAaA,EAAWA,UAG1Bz+C,MAAK+gD,KAAKhC,aAAaC,KAQnBkB,EAAVngD,UAAAgiD,sBACI/hD,KAAKiiD,gBAAe,GAKfjiD,KAAKygD,UAIEzgD,KAAK8gD,mBACf9gD,KAAKia,MAAMja,KAAKygD,WAFhBzgD,KAAKia,QAKPja,KAAKygD,UAAY,MAIXP,EAAVngD,UAAAkiD,eAAA,SAAyBvlB,GACrB18B,KAAKogD,UAAY1jB,EACjB18B,KAAKogD,UAAYpgD,KAAK0gD,WAAWrnC,OAASrZ,KAAK4gD,WAAWvnC,OAEtDrZ,KAAK8gD,oBACP9gD,KAAKmgD,kBAAkBlE,aAAevf,IAQlCwjB,EAAVngD,UAAAohD,sBACSnhD,KAAK+gD,MACRmB,MAQIhC,EAAVngD,UAAAo3B,0BACI,IAAKn3B,KAAKsxB,YAAa,CACrB,GAAM0E,GAASh2B,KAAKmiD,mBACpBniD,MAAKoiD,sBAAsBpsB,EAA4D,kBACvFh2B,KAAKsxB,YAActxB,KAAKq1B,SAASsD,OAAO3C,GAKxCh2B,KAAKsxB,YAAY+wB,gBAAgB/gD,YAGnC,MAAOtB,MAAKsxB,aAON4uB,EAAVngD,UAAAoiD,6BACI,MAAO,IAAIjqB,GAAAA,eACTC,iBAAkBn4B,KAAKq1B,SAASrf,WAC3Bw+B,oBAAoBx0C,KAAK09B,UACzB4kB,qBACA7N,sBAAsB,mBAC3BsJ,YAAsC,MAAzB/9C,KAAK+gD,KAAKhD,aAAuB/9C,KAAK8gD,kBAAoB9gD,KAAK+gD,KAAKhD,YACjFJ,cAAe39C,KAAK+gD,KAAKpD,eAAiB,mCAC1C/L,eAAgB5xC,KAAKmyC,kBACrBxgC,UAAW3R,KAAKgB,QASZk/C,EAAVngD,UAAAqiD,sBAAA,SAAgCpsC,aACxBhW,MAAK+gD,KAAK9C,oBACZjoC,EAAS++B,gBAAgBzzC,UAAU,SAAAL,GACjC,GAAMq+C,GAAyD,UAAnCr+C,EAAOshD,eAAevM,SAAuB,QAAU,SAC7EuJ,EAAyD,QAAnCt+C,EAAOshD,eAAetM,SAAqB,QAAU,OAEjF72C,GAAK2hD,KAAuB,mBAAEzB,EAAMC,MAUlCW,EAAVngD,UAAA0hD,aAAA,SAAuBtpB,GACd,GAAT9kB,GAAA,WAAArT,KAAA+gD,KAAA5D,WAAA,MAAA,UAAA,QAAA,OAASxH,EAATtiC,EAAA,GAAkBmvC,EAAlBnvC,EAAA,GAGAovC,EAAA,UAAAziD,KAAA+gD,KAAA1D,WAAA,SAAA,QAAA,MAAA,UAASpH,EAATwM,EAAA,GAAmBC,EAAnBD,EAAA,GAGAE,GAAA1M,EAAAyM,GAAS9M,EAAT+M,EAAA,GAAkBC,EAAlBD,EAAA,GACAE,GAAAlN,EAAA6M,GAASxM,EAAT6M,EAAA,GAAmBC,EAAnBD,EAAA,GACQE,EAAU,CAEV/iD,MAAK8gD,mBAGPgC,EAAmBnN,EAAkC,WAAxB31C,KAAK+gD,KAAK5D,UAAyB,QAAU,MAC1EqF,EAAkBxM,EAAuB,QAAZL,EAAoB,QAAU,MAC3DoN,EAAuB,WAAb9M,EA3XsB,GAAA,GA4XtBj2C,KAAK+gD,KAAKlD,iBACpBjI,EAAuB,QAAbK,EAAqB,SAAW,MAC1C2M,EAAuC,QAArBF,EAA6B,SAAW,OAG5DvqB,EAAiBmd,gBACdK,QAAPA,EAAgBC,QAAhBA,EAAyBI,SAAzBA,EAAmCC,SAAnCA,EAA6C8M,QAA7CA,IACOpN,QAAS6M,EAAiB5M,QAAjCA,EAA0CI,SAAU8M,EAAkB7M,SAAtEA,EAAgF8M,QAAhFA,IAEQpN,QAARA,EACQC,QAASgN,EACT5M,SAARA,EACQC,SAAUyM,EACVK,SAAUA,IAGVpN,QAAS6M,EACT5M,QAASgN,EACT5M,SAAU8M,EACV7M,SAAUyM,EACVK,SAAUA,MAMR7C,EAAVngD,UAAAshD,iCACIrhD,KAAKqgD,mBAAmB1sC,cACxB3T,KAAKsgD,mBAAmB3sC,eAIlBusC,EAAVngD,UAAA6hD,0CACUoB,EAAWhjD,KAAgB,YAAE49B,gBAC7BjG,EAAc33B,KAAgB,YAAE23B,cAChCsrB,EAAcjjD,KAAK+7C,YAAc/7C,KAAK+7C,YAAYhqB,OAAS7wB,EAAAA,KAC3DgiD,EAAQljD,KAAK+7C,YAAc/7C,KAAK+7C,YAAYC,WAAW56C,KAC3DqH,EAAAA,OAAO,SAAA5G,GAAU,MAAAA,KAAWzC,EAAK+gD,oBACjC13C,EAAAA,OAAO,WAAM,MAAArJ,GAAKghD,aAChBl/C,EAAAA,IAEJ,OAAOC,GAAAA,MAAM6hD,EAAUC,EAAaC,EAAOvrB,IAI7CuoB,EAAFngD,UAAAojD,iBAAE,SAAiB/pC,GACVgqC,EAAAA,gCAAgChqC,KAGnCpZ,KAAKygD,UAA6B,IAAjBrnC,EAAMiqC,OAAe,QAAU,KAK5CrjD,KAAK8gD,mBACP1nC,EAAM4C,mBAMZkkC,EAAFngD,UAAA6b,eAAE,SAAexC,GACb,GAAMyC,GAAUzC,EAAMyC,OAElB7b,MAAK8gD,oBACAjlC,IAAYyR,EAAAA,aAA4B,QAAbttB,KAAK6Y,KAChCgD,IAAYuR,EAAAA,YAA2B,QAAbptB,KAAK6Y,MACtC7Y,KAAKwhD,YAKTtB,EAAFngD,UAAAqhB,aAAE,SAAahI,GACPpZ,KAAK8gD,mBAEP1nC,EAAMqiB,kBACNz7B,KAAKwhD,YAELxhD,KAAKshD,cAKDpB,EAAVngD,UAAAqhD,kCAESphD,MAAK8gD,oBAIV9gD,KAAKsgD,mBAAqBtgD,KAAK+7C,YAAYC,WAIxC56C,KACCqH,EAAAA,OAAO,SAAA5G,GAAU,MAAAA,KAAWzC,EAAK+gD,oBAAsBt+C,EAAO4C,WAC9DkvC,EAAAA,MAAM,EAAG2P,EAAAA,gBAEVhiD,UAAU,WACTlC,EAAKqhD,UAAY,QAKbrhD,EAAK2hD,eAAgB9D,KAAW79C,EAAK2hD,KAAKpB,aAG5CvgD,EAAK2hD,KAAKpK,eACPv1C,KAAKsL,EAAAA,KAAK,GAAIinC,EAAAA,MAAM,EAAG2P,EAAAA,eAAgBjiD,EAAAA,UAAUjC,EAAK28C,YAAYC,aAClE16C,UAAU,WAAM,MAAAlC,GAAKoiD,aAExBpiD,EAAKoiD,eAMLtB,EAAVngD,UAAA2hD,sBAQI,MAJK1hD,MAAK+zC,SAAW/zC,KAAK+zC,QAAQttB,cAAgBzmB,KAAK+gD,KAAKt6B,cAC1DzmB,KAAK+zC,QAAU,GAAIz9B,GAAAA,eAAetW,KAAK+gD,KAAKt6B,YAAazmB,KAAK4V,oBAGzD5V,KAAK+zC,wBA7ehBzxC,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,8CACVK,MACEygD,gBAAiB,OACjBt5C,uBAAwB,mBACxBylB,cAAe,2BACfC,YAAa,yBACbnkB,UAAW,wBAEb9I,SAAU,yDAnEZJ,KAAEs2B,EAAAA,UAUFt2B,KAAEiI,EAAAA,aASFjI,KAAEkH,EAAAA,mBAmIFlH,SAAAqD,GAAAR,aAAA7C,KAAeuD,EAAAA,OAAfrD,MAAsBo9C,QA9HtBt9C,KAAQ26C,GAAR93C,aAAA7C,KA+HesD,EAAAA,aA7HftD,KAAQw5C,GAAR32C,aAAA7C,KA8HesD,EAAAA,WA9HftD,KA8H2B2tC,EAAAA,SA7J3B3tC,KAAmBwc,EAAAA,eAAnB3Z,aAAA7C,KA8JesD,EAAAA,aA/JftD,KAAQ2D,EAAAA,kCAkGRu9C,+BAAAlhD,KAAGoB,EAAAA,MAAHlB,MAAS,0BAOTu+C,OAAAz+C,KAAGoB,EAAAA,MAAHlB,MAAS,uBAwBTm/C,WAAAr/C,KAAGoB,EAAAA,MAAHlB,MAAS,wBAGTk+C,aAAAp+C,KAAGsX,EAAAA,SAQH+mC,aAAAr+C,KAAGsX,EAAAA,SAGHgnC,aAAAt+C,KAAGsX,EAAAA,SAQHinC,cAAAv+C,KAAGsX,EAAAA,UA/JHsmC,iCCAA,sBAqBA59C,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAC,GACAE,GACAwuB,EAAAA,eAEFruB,SAAUu2C,GAASnB,GAAaoE,GAAgBpF,GAAgBz0C,IAChEU,cAAek2C,GAASnB,GAAaoE,GAAgBpF,IACrD1wC,WAAYy1C,QA9Bd4D,KCwBahU,IAaXC,eAAgB54B,EAAAA,QAAQ,kBACtBC,EAAAA,MAAM,OAAQ7B,EAAAA,OACZ8B,UAAW,cACX0sC,SAAU,OACVzhC,QAAS,KAEXlL,EAAAA,MAAM,UAAW7B,EAAAA,OACf+M,QAAS,EACTyhC,SAAU,oBACV1sC,UAAW,eAEbD,EAAAA,MAAM,mBAAoB7B,EAAAA,OACxB+M,QAAS,EACTyhC,SAAU,oBACV1sC,UAAW,eAEbE,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,qCAChCD,EAAAA,WAAW,YAAaC,EAAAA,QAAQ,oBAAqBjC,EAAAA,OAAO+M,QAAS,QAUvE0hC,cAAe7sC,EAAAA,QAAQ,iBACrBC,EAAAA,MAAM,UAAW7B,EAAAA,OAAO+M,QAAS,KACjC/K,EAAAA,WAAW,mBACThC,EAAAA,OAAO+M,QAAS,IAChB9K,EAAAA,QAAQ,qDAWDu4B,GAAiBD,GAAoBC,eAOrCiU,GAAgBlU,GAAoBkU,chEQ7C/iB,GAAe,CA8BnBl6B,GAAAkmC,gCAA6C,CAM7C,IAGasD,IACT,GAAIv7B,GAAAA,eAAqC,8BAShCo8B,IACX1mC,QAAS6lC,GACTrtB,MAAO+V,EAAAA,SACP7V,WAAY6gC,IAIdC,GAAA,WACE,QAAFA,GAEWh1B,EAEA3uB,GAFAF,KAAX6uB,OAAWA,EAEA7uB,KAAXE,MAAWA,EA3JX,MAAA2jD,MAgKAC,GAAA,WACE,QAAFA,GAAqB1jD,EACA2jD,EACAC,EACAC,EACAC,GAJAlkD,KAArBI,YAAqBA,EACAJ,KAArB+jD,0BAAqBA,EACA/jD,KAArBgkD,YAAqBA,EACAhkD,KAArBikD,iBAAqBA,EACAjkD,KAArBkkD,UAAqBA,EArKrB,MAAAJ,MAuKaK,GAMLrgD,EAAmBD,EAAcE,EAAcqgD,EAAgBN,mCA7KvE,sBAmLAxhD,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,yBApLZ8tC,KAsLA/G,GAAA,SAAA5pC,GAoSE,QAAF4pC,GACYjqC,EACAD,EACAD,EACR0kD,EACAp8C,EACoB3G,EACRgjD,EACAC,EACQpY,EACOqY,EACJ7/C,EACaggD,GAZtC,GAAFjlD,GAaIQ,EAbJoE,KAAAhE,KAaU2H,EAAYo8C,EAA2BC,EACvCC,EAAkBC,IAd5BlkD,WACYZ,GAAZG,eAAYA,EACAH,EAAZE,mBAAYA,EACAF,EAAZC,QAAYA,EAGYD,EAAxB4B,KAAwBA,EAGA5B,EAAxBysC,iBAAwBA,EACOzsC,EAA/B8kD,UAA+BA,EA9P/B9kD,EAAAwvC,YAAuB,EAGvBxvC,EAAAoiC,WAA+B,EAG/BpiC,EAAA8rC,WAAuB,EAMvB9rC,EAAAklD,WAA+B,EAG/BllD,EAAAmlD,aAAyB,SAACC,EAASC,GAAY,MAAAD,KAAOC,GAGtDrlD,EAAAslD,KAAiB,cAAc9jB,KAG/BxhC,EAAAulD,SAA8B,GAAIllD,GAAAA,QAShCL,EAAFmvC,iBAAqB,EASnBnvC,EAAFwlD,UAAoC,aAGlCxlD,EAAFylD,WAAe,aAGbzlD,EAAFgqC,WAAuB,GAGrBhqC,EAAF+uC,iBAA6B,MAG3B/uC,EAAF0lD,0BAA8B,GAAIrlD,GAAAA,QAUhCL,EAAFgsC,SAAa,EAQXhsC,EAAF2lD,aAEMpP,QAAS,QACTC,QAAS,MACTI,SAAU,QACVC,SAAU,QAGVN,QAAS,QACTC,QAAS,SACTI,SAAU,QACVC,SAAU,WAKhB72C,EAAAmuC,yBAA6C,EAa7CnuC,EAAA4lD,UAAqB,EAGnB5lD,EAAF6lD,YAAgB,aAuFd7lD,EAAFsX,UAA2C,GAwBzCtX,EAAF8lD,uBAA0EC,EAAAA,MAAM,WAC5E,MAAI/lD,GAAKiqC,QACAloC,EAAAA,MAAbqN,UAAA,GAAsBpP,EAAKiqC,QAAQ56B,IAAI,SAAA66B,GAAU,MAAAA,GAAO8b,qBAG7ChmD,EAAKC,QAAQw/C,SACjBjsB,eACAxxB,KAAKsL,EAAAA,KAAK,GAAI6xC,EAAAA,UAAU,WAAM,MAAAn/C,GAAK8lD,4BAIxC9lD,EAAF87B,aAA2D,GAAIxiB,GAAAA,aAG7DtZ,EAAFk+B,cACMl+B,EAAK87B,aAAa95B,KAAKqH,EAAAA,OAAO,SAAA48C,GAAK,MAAAA,KAAI52C,EAAAA,IAAI,eAG/CrP,EAAFo+B,cACMp+B,EAAK87B,aAAa95B,KAAKqH,EAAAA,OAAO,SAAA48C,GAAK,OAACA,IAAI52C,EAAAA,IAAI,eAGhDrP,EAAFwxC,gBACM,GAAIl4B,GAAAA,aAORtZ,EAAFivB,YAAsD,GAAI3V,GAAAA,aAkBlDtZ,EAAK8kD,YAGP9kD,EAAK8kD,UAAUoB,cAAgBlmD,GAGjCA,EAAKmmD,uBAAyBlB,EAC9BjlD,EAAK+yC,gBAAkB/yC,EAAKmmD,yBAC5BnmD,EAAKiF,SAAWC,SAASD,IAAa,EAGtCjF,EAAKqjB,GAAKrjB,EAAKqjB,KA7BnB,MAxP+B/iB,GAA/B8pC,EAAA5pC,GA8FEC,OAAFC,eAAM0pC,EAANzpC,UAAA,eAAE,WACE,MAAOC,MAAKglD,UAAYhlD,KAAK4uC,gBAM/B,SAAY1uC,GACVF,KAAKglD,SAAW9kD,mCA6BlBL,OAAFC,eACM0pC,EADNzpC,UAAA,mBAAE,WAC4B,MAAOC,MAAKwlD,kBACxC,SAAgBtlD,GACdF,KAAKwlD,aAAetlD,EACpBF,KAAKylD,aAAazjD,wCAIpBnC,OAAFC,eACM0pC,EADNzpC,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GACXF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,GACvCF,KAAKylD,aAAazjD,wCAIpBnC,OAAFC,eACM0pC,EADNzpC,UAAA,gBAAE,WAC0B,MAAOC,MAAKskD,eACtC,SAAapkD,GACX,GAAIF,KAAK2pC,gBACP,KAAM+b,KAGR1lD,MAAKskD,UAAYtkC,EAAAA,sBAAsB9f,oCAIzCL,OAAFC,eACM0pC,EADNzpC,UAAA,8BAAE,WACwC,MAAOC,MAAKutC,6BACpD,SAA2BrtC,GACzBF,KAAKutC,wBAA0BvtB,EAAAA,sBAAsB9f,oCAQvDL,OAAFC,eACM0pC,EADNzpC,UAAA,mBAAE,WACoB,MAAOC,MAAKukD,kBAChC,SAAgBp1B,GACd,GAAkB,kBAAPA,GACT,KAAMw2B,KAER3lD,MAAKukD,aAAep1B,EAChBnvB,KAAK2pC,iBAEP3pC,KAAK4lD,wDAKT/lD,OAAFC,eACM0pC,EADNzpC,UAAA,aAAE,WACmB,MAAOC,MAAK0pB,YAC/B,SAAU2b,GACJA,IAAarlC,KAAK0pB,SACpB1pB,KAAKivB,WAAWoW,GAChBrlC,KAAK0pB,OAAS2b,oCAqBlBxlC,OAAFC,eACM0pC,EADNzpC,UAAA,UAAE,WACmB,MAAOC,MAAK6lD,SAC/B,SAAO3lD,GACLF,KAAK6lD,IAAM3lD,GAASF,KAAK0kD,KACzB1kD,KAAKylD,aAAazjD,wCAmEpBwnC,EAAFzpC,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,IACIA,MAAK2pC,gBAAkB,GAAImc,GAAAA,eAA0B9lD,KAAK2sC,UAC1D3sC,KAAKylD,aAAazjD,OAKlBhC,KAAK8kD,0BACF1jD,KAAK2X,EAAAA,uBAAwB1X,EAAAA,UAAUrB,KAAK2kD,WAC5CrjD,UAAU,WACLlC,EAAK6sC,WACP7sC,EAAK8rC,WAAa,EAClB9rC,EAAK87B,aAAa7hB,MAAK,KAEvBja,EAAK87B,aAAa7hB,MAAK,GACvBja,EAAKktC,WAAWF,QAAU,EAC1BhtC,EAAKE,mBAAmBsB,mBAKhC4oC,EAAFzpC,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAK+lD,kBAEL/lD,KAAK2pC,gBAAgBp7B,SAASnN,KAAKC,EAAAA,UAAUrB,KAAK2kD,WAAWrjD,UAAU,SAAA8X,GACrEA,EAAM4sC,MAAMp5C,QAAQ,SAAA08B,GAAU,MAAAA,GAAO2c,WACrC7sC,EAAM8sC,QAAQt5C,QAAQ,SAAA08B,GAAU,MAAAA,GAAO6c,eAGzCnmD,KAAKqpC,QAAQjhC,QAAQhH,KAAKsW,EAAAA,UAAU,MAAOrW,EAAAA,UAAUrB,KAAK2kD,WAAWrjD,UAAU,WAC7ElC,EAAKgnD,gBACLhnD,EAAKwmD,0BAITpc,EAAFzpC,UAAA6+B,UAAE,WACM5+B,KAAKkkD,WACPlkD,KAAKqmD,oBAIT7c,EAAFzpC,UAAAoW,YAAE,SAAY/N,GAGNA,EAAR,UACMpI,KAAKylD,aAAazjD,QAItBwnC,EAAFzpC,UAAAgC,YAAE,WACE/B,KAAK2kD,SAAS3iD,OACdhC,KAAK2kD,SAAS1iD,WACdjC,KAAKylD,aAAaxjD,YAIpBunC,EAAFzpC,UAAAkiC,OAAE,WACEjiC,KAAKisC,UAAYjsC,KAAKw7B,QAAUx7B,KAAKm2B,QAIvCqT,EAAFzpC,UAAAo2B,KAAE,WAAA,GAAF/2B,GAAAY,MACQA,KAAKyE,UAAazE,KAAKqpC,SAAYrpC,KAAKqpC,QAAQhhC,SAAUrI,KAAK4uC,aAInE5uC,KAAKotC,aAAeptC,KAAK8W,QAAQ3W,cAAc6uB,wBAG/ChvB,KAAKuuC,iBAAmBjqC,SAASgiD,iBAAiBtmD,KAAK8W,QAAQ3W,eAAeomD,UAAY,KAE1FvmD,KAAK4uC,YAAa,EAClB5uC,KAAKkb,YAAYwB,0BAA0B,MAC3C1c,KAAKyqC,4BACLzqC,KAAKypC,0BACLzpC,KAAKV,mBAAmBsB,eAGxBZ,KAAKX,QAAQw/C,SAASjsB,eAAexxB,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WACvDlC,EAAKmvC,kBAAoBnvC,EAAKktC,WAAW9V,YACzCp3B,EAAKktC,WAAW9V,WAAWqB,iBAC7Bz4B,EAAKktC,WAAW9V,WAAWqB,eAAe3iB,MAAMqxC,SAAcnnD,EAAKmvC,iBAA3E,UAME/E,EAAFzpC,UAAAy7B,MAAE,WACMx7B,KAAK4uC,aACP5uC,KAAK4uC,YAAa,EAClB5uC,KAAKkb,YAAYwB,0BAA0B1c,KAAKysC,SAAW,MAAQ,OACnEzsC,KAAKV,mBAAmBsB,eACxBZ,KAAK6kD,eAUTrb,EAAFzpC,UAAAkvB,WAAE,SAAW/uB,GACLF,KAAKqpC,SACPrpC,KAAKwmD,qBAAqBtmD,IAW9BspC,EAAFzpC,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAK4kD,UAAYz1B,GAUnBqa,EAAFzpC,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK6kD,WAAa11B,GASpBqa,EAAFzpC,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,EAChBtvB,KAAKV,mBAAmBsB,eACxBZ,KAAKylD,aAAazjD,QAIpBnC,OAAFC,eAAM0pC,EAANzpC,UAAA,iBAAE,WACE,MAAOC,MAAK4uC,4CAId/uC,OAAFC,eAAM0pC,EAANzpC,UAAA,gBAAE,WACE,MAAOC,MAAK2sC,SAAW3sC,KAAK2pC,gBAAgBvjB,SAAWpmB,KAAK2pC,gBAAgBvjB,SAAS,oCAIvFvmB,OAAFC,eAAM0pC,EAANzpC,UAAA,oBAAE,WACE,GAAIC,KAAK0pC,MACP,MAAO,EAGT,IAAI1pC,KAAKskD,UAAW,CAClB,GAAMmC,GAAkBzmD,KAAK2pC,gBAAgBvjB,SAAS3X,IAAI,SAAA66B,GAAU,MAAAA,GAAOod,WAO3E,OALI1mD,MAAKysC,UACPga,EAAgBE,UAIXF,EAAgBld,KAAK,MAG9B,MAAOvpC,MAAK2pC,gBAAgBvjB,SAAS,GAAGsgC,2CAI1Cld,EAAFzpC,UAAA0sC,OAAE,WACE,QAAOzsC,KAAKgB,MAA2B,QAApBhB,KAAKgB,KAAKd,OAI/BspC,EAAFzpC,UAAA6b,eAAE,SAAexC,GACRpZ,KAAKyE,WACRzE,KAAKisC,UAAYjsC,KAAK4mD,mBAAmBxtC,GAASpZ,KAAK6mD,qBAAqBztC,KAKxEowB,EAAVzpC,UAAA8mD,qBAAA,SAA+BztC,GAC3B,GAAMyC,GAAUzC,EAAMyC,QAChBirC,EAAajrC,IAAY0R,EAAAA,YAAc1R,IAAYwR,EAAAA,UACtCxR,IAAYuR,EAAAA,YAAcvR,IAAYyR,EAAAA,YACnDy5B,EAAYlrC,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,MAC7C4qC,EAAUhnD,KAAKkb,WAGjB6rC,KAAe/mD,KAAK2sC,UAAYvzB,EAAM6tC,SAAWH,GACnD1tC,EAAM4C,iBACNhc,KAAKm2B,QACKn2B,KAAK2sC,WACX9wB,IAAYC,EAAAA,MAAQD,IAAYI,EAAAA,KAClCJ,IAAYC,EAAAA,KAAOkrC,EAAQjrC,qBAAuBirC,EAAQ9qC,oBAC1D9C,EAAM4C,kBAENgrC,EAAQ1qC,UAAUlD,KAMhBowB,EAAVzpC,UAAA6mD,mBAAA,SAA6BxtC,GACzB,GAAMyC,GAAUzC,EAAMyC,QAChBirC,EAAajrC,IAAY0R,EAAAA,YAAc1R,IAAYwR,EAAAA,SACnD25B,EAAUhnD,KAAKkb,WAErB,IAAIW,IAAYC,EAAAA,MAAQD,IAAYI,EAAAA,IAClC7C,EAAM4C,iBACNH,IAAYC,EAAAA,KAAOkrC,EAAQjrC,qBAAuBirC,EAAQ9qC,wBACrD,IAAI4qC,GAAc1tC,EAAM6tC,OAE7B7tC,EAAM4C,iBACNhc,KAAKw7B,YACA,IAAK3f,IAAYM,EAAAA,OAASN,IAAYO,EAAAA,QAAU4qC,EAAQ9a,WAGxD,GAAIlsC,KAAKskD,WAAazoC,IAAYqrC,EAAAA,GAAK9tC,EAAM+tC,QAAS,CAC3D/tC,EAAM4C,gBACN,IAAMorC,GAAuBpnD,KAAKqpC,QAAQvgC,KAAK,SAAAu+C,GAAO,OAACA,EAAI5iD,WAAa4iD,EAAIjhC,UAE5EpmB,MAAKqpC,QAAQz8B,QAAQ,SAAA08B,GACdA,EAAO7kC,WACV2iD,EAAuB9d,EAAO2c,SAAW3c,EAAO6c,kBAG/C,CACL,GAAMmB,GAAyBN,EAAQld,eAEvCkd,GAAQ1qC,UAAUlD,GAEdpZ,KAAKskD,WAAawC,GAAc1tC,EAAMmuC,UAAYP,EAAQ9a,YAC1D8a,EAAQld,kBAAoBwd,GAC9BN,EAAQ9a,WAAWsb,4BAlBrBpuC,GAAM4C,iBACNgrC,EAAQ9a,WAAWsb,yBAsBvBhe,EAAFzpC,UAAA8sB,SAAE,WACO7sB,KAAKyE,WACRzE,KAAKglD,UAAW,EAChBhlD,KAAKylD,aAAazjD,SAQtBwnC,EAAFzpC,UAAA+sB,QAAE,WACE9sB,KAAKglD,UAAW,EAEXhlD,KAAKyE,UAAazE,KAAKisC,YAC1BjsC,KAAK6kD,aACL7kD,KAAKV,mBAAmBsB,eACxBZ,KAAKylD,aAAazjD,SAOtBwnC,EAAFzpC,UAAA0nD,YAAE,WAAA,GAAFroD,GAAAY,IACIA,MAAKssC,WAAWob,eAAetmD,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WACrDlC,EAAKuoD,gCACLvoD,EAAKE,mBAAmBqsB,gBACxBvsB,EAAK+sC,2BACL/sC,EAAK8qC,MAAM/pC,cAAcgqC,UAAY/qC,EAAK8rC,cAK9C1B,EAAFzpC,UAAA6nD,eAAE,WACE,MAAO5nD,MAAK6rC,iBAAmB,OAAO7rC,KAAK6rC,iBAAiBgc,MAAU,IAKhEre,EAAVzpC,UAAA4nD,yCACI,IAAK/a,EAAAA,iCAAmC5sC,KAAK2sC,SAAU,CACrD,GAAMmb,GAAiB9nD,KAAKkqC,MAAM/pC,cAAc4nD,cAAc,uBAC1DD,KACFlb,EAAAA,gCAAkC79B,GAA+B+4C,EAAeztC,eAMtFxa,OAAFC,eAAM0pC,EAANzpC,UAAA,aAAE,WACE,OAAQC,KAAK2pC,iBAAmB3pC,KAAK2pC,gBAAgBqe,2CAG/Cxe,EAAVzpC,UAAA6lD,0CAGIzxC,SAAQC,UAAUC,KAAK,WACrBjV,EAAKonD,qBAAqBpnD,EAAK8kD,UAAY9kD,EAAK8kD,UAAUhkD,MAAQd,EAAKsqB,WAQnE8f,EAAVzpC,UAAAymD,qBAAA,SAA+BtmD,aAC3B,IAAIF,KAAK2sC,UAAYzsC,EAAO,CAC1B,IAAKoI,MAAMkE,QAAQtM,GACjB,KAAM+nD,KAGRjoD,MAAK2pC,gBAAgB5R,QACrB73B,EAAM0M,QAAQ,SAACs7C,GAAsB,MAAA9oD,GAAK+oD,aAAaD,KACvDloD,KAAKooD,kBACA,CACLpoD,KAAK2pC,gBAAgB5R,OACrB,IAAMswB,GAAsBroD,KAAKmoD,aAAajoD,EAI1CmoD,IACFroD,KAAKkb,YAAYkC,cAAcirC,GAInCroD,KAAKV,mBAAmBsB,gBAOlB4oC,EAAVzpC,UAAAooD,aAAA,SAAuBjoD,cACbmoD,EAAsBroD,KAAKqpC,QAAQ1nC,KAAK,SAAC2nC,GAC7C,IAEE,MAAuB,OAAhBA,EAAOppC,OAAiBd,EAAKmlD,aAAajb,EAAOppC,MAAQA,GAChE,MAAOooD,GAKP,MAJItgD,GAAAA,aAEFugD,QAAQC,KAAKF,IAER,IAQX,OAJID,IACFroD,KAAK2pC,gBAAgBsc,OAAOoC,GAGvBA,GAID7e,EAAVzpC,UAAAgmD,qCACI/lD,MAAKkb,YAAc,GAAIutC,GAAAA,2BAAsCzoD,KAAKqpC,SAC/DgV,gBACAqK,0BACAhsC,0BAA0B1c,KAAKysC,SAAW,MAAQ,OAClDkc,yBAAyB,aAE5B3oD,KAAKkb,YAAYojC,OAAOl9C,KAAKC,EAAAA,UAAUrB,KAAK2kD,WAAWrjD,UAAU,WAG/DlC,EAAK6a,QACL7a,EAAKo8B,UAGPx7B,KAAKkb,YAAYja,OAAOG,KAAKC,EAAAA,UAAUrB,KAAK2kD,WAAWrjD,UAAU,WAC3DlC,EAAKwvC,YAAcxvC,EAAK8qC,MAC1B9qC,EAAKwqC,8BACKxqC,EAAKwvC,YAAexvC,EAAKutC,WAAYvtC,EAAK8b,YAAYgxB,YAChE9sC,EAAK8b,YAAYgxB,WAAWsb,2BAM1Bhe,EAAVzpC,UAAAqmD,oCACUwC,EAAqBznD,EAAAA,MAAMnB,KAAKqpC,QAAQjhC,QAASpI,KAAK2kD,SAE5D3kD,MAAKklD,uBAAuB9jD,KAAKC,EAAAA,UAAUunD,IAAqBtnD,UAAU,SAAA8X,GACxEha,EAAKypD,UAAUzvC,EAAMyV,OAAQzV,EAAM0vC,aAE/B1vC,EAAM0vC,cAAgB1pD,EAAKutC,UAAYvtC,EAAKwvC,aAC9CxvC,EAAKo8B,QACLp8B,EAAK6a,WAMT9Y,EAAAA,MAAJqN,UAAA,GAAaxO,KAAKqpC,QAAQ56B,IAAI,SAAA66B,GAAU,MAAAA,GAAOvzB,iBACxC3U,KAAKC,EAAAA,UAAUunD,IACftnD,UAAU,WACTlC,EAAKE,mBAAmBsB,eACxBxB,EAAKqmD,aAAazjD,SAGtBhC,KAAK+oD,iBAICvf,EAAVzpC,UAAA8oD,UAAA,SAAoBvf,EAAmBwf,GACnC,GAAME,GAAchpD,KAAK2pC,gBAAgBsf,WAAW3f,EAEhC,OAAhBA,EAAOppC,OAAkBF,KAAKskD,WAKhChb,EAAOljB,SAAWpmB,KAAK2pC,gBAAgBsc,OAAO3c,GAAUtpC,KAAK2pC,gBAAgBwc,SAAS7c,GAElFwf,GACF9oD,KAAKkb,YAAYkC,cAAcksB,GAG7BtpC,KAAK2sC,WACP3sC,KAAKooD,cAEDU,GAKF9oD,KAAKia,WAlBTqvB,EAAO6c,WACPnmD,KAAK2pC,gBAAgB5R,QACrB/3B,KAAKkpD,kBAAkB5f,EAAOppC,QAqB5B8oD,IAAgBhpD,KAAK2pC,gBAAgBsf,WAAW3f,IAClDtpC,KAAKkpD,oBAGPlpD,KAAKylD,aAAazjD,QAIZwnC,EAAVzpC,UAAAqoD,iCACI,IAAIpoD,KAAK2sC,SAAU,CACjB,GAAMwc,GAAUnpD,KAAKqpC,QAAQhsB,SAE7Brd,MAAK2pC,gBAAgBj4B,KAAK,SAACE,EAAGC,GAC5B,MAAOzS,GAAKuxC,eAAiBvxC,EAAKuxC,eAAe/+B,EAAGC,EAAGs3C,GAC1BA,EAAQ12C,QAAQb,GAAKu3C,EAAQ12C,QAAQZ,KAEpE7R,KAAKylD,aAAazjD,SAKdwnC,EAAVzpC,UAAAmpD,kBAAA,SAA4BE,GACxB,GAAIC,GAAmB,IAGrBA,GADErpD,KAAK2sC,SACQ3sC,KAA4B,SAAEyO,IAAI,SAAA66B,GAAU,MAAAA,GAAOppC,QAEpDF,KAAKomB,SAAYpmB,KAA0B,SAAEE,MAAQkpD,EAGrEppD,KAAK0pB,OAAS2/B,EACdrpD,KAAKquB,YAAYhV,KAAKgwC,GACtBrpD,KAAK4kD,UAAUyE,GACfrpD,KAAK4wC,gBAAgBv3B,KAAK,GAAIwqC,IAAgB7jD,KAAMqpD,IACpDrpD,KAAKV,mBAAmBsB,gBAIlB4oC,EAAVzpC,UAAAgpD;qCACI/oD,KAAKopC,WAAappC,KAAKqpC,QAAQ56B,IAAI,SAAA66B,GAAU,MAAAA,GAAO7mB,KAAI8mB,KAAK,MAOvDC,EAAVzpC,UAAA0pC,mCACQzpC,KAAKkb,cACHlb,KAAK0pC,MACP1pC,KAAKkb,YAAYa,qBAEjB/b,KAAKkb,YAAYkC,cAAcpd,KAAK2pC,gBAAgBvjB,SAAS,MAM3DojB,EAAVzpC,UAAA6pC,uCACI,GAAMC,GAAoB7pC,KAAKkb,YAAY4uB,iBAAmB,EACxDC,EAAaC,EAA8BH,EAAmB7pC,KAAKqpC,QACrErpC,KAAKiqC,aAETjqC,MAAKkqC,MAAM/pC,cAAcgqC,UAAYC,EACnCP,EAAoBE,EACpB/pC,KAAKqqC,iBACLrqC,KAAKkqC,MAAM/pC,cAAcgqC,UAp4BQ,MA04BrCX,EAAFzpC,UAAAka,MAAE,WACEja,KAAKI,YAAYD,cAAc8Z,SAIzBuvB,EAAVzpC,UAAAuqC,gBAAA,SAA0BhB,GACtB,MAAOtpC,MAAKqpC,QAAQj3B,OAAO,SAACm4B,EAA4BC,EAAoB19B,GAC1E,WAAkBnH,KAAX4kC,EAAwBjB,IAAWkB,EAAU19B,MAAQnH,GAAa4kC,OACxE5kC,KAIG6jC,EAAVzpC,UAAA0qC,qCACI,GAAMC,GAAa1qC,KAAKqqC,iBAClBM,EAAQ3qC,KAAK4qC,gBACbC,EAAct2B,KAAKE,IAAIk2B,EAAQD,EAz5BF,KA05B7BI,EAAwBH,EAAQD,EAGhCK,EAAYD,EAAwBD,EAGtCG,EACAhrC,KAAK0pC,MAAQ,EAAI1pC,KAAKsqC,gBAAgBtqC,KAAK2pC,gBAAgBvjB,SAAS,GAExE4kB,IAAwBhB,EAA8BgB,EAAsBhrC,KAAKqpC,QAC7ErpC,KAAKiqC,aAIT,IAAMgB,GAAeJ,EAAc,CACnC7qC,MAAKkrC,WAAalrC,KAAKmrC,wBAAwBH,EAAsBC,EAAcF,GACnF/qC,KAAKorC,SAAWprC,KAAKqrC,yBAAyBL,EAAsBC,EAAcF,GAElF/qC,KAAKsrC,4BAA4BP,IAUnCvB,EAAFzpC,UAAAorC,wBAAE,SAAwBxsB,EAAuBssB,EACvBF,GACtB,GAAML,GAAa1qC,KAAKqqC,iBAClBkB,EAA4Bb,EAAa/rB,EACzC6sB,EAAmBd,EAAa,EAMhCe,EAAwBF,EAA4BN,EAAeO,CACzE,OAAOj3B,MAAKE,IAAIF,KAAKuJ,IAAI,EAAG2tB,GAAwBV,IAItDvB,EAAFzpC,UAAA2rC,cAAE,WAGE,MAAO1rC,MAAK2W,eAAiB,KAAO3W,KAAK0W,WAAa1W,KAAK2rC,aAI7DnC,EAAFzpC,UAAA6rC,mBAAE,WACE,MAAI5rC,MAAK2W,eACA3W,KAAK2W,eAKT3W,KAAK6rC,kBAAqB7rC,KAAK6rC,iBAAiBC,sBACnD9rC,KAAK0rC,gBAIA1rC,KAAK6rC,iBAAiBE,UAAY,KAHhC,MAOXvC,EAAFzpC,UAAAisC,yBAAE,WACE,MAAIhsC,MAAKisC,WAAajsC,KAAKkb,aAAelb,KAAKkb,YAAYgxB,WAClDlsC,KAAKkb,YAAYgxB,WAAWzpB,GAG9B,MAUD+mB,EAAVzpC,UAAAosC,oCACI,GAKIC,GALEC,EAAcrsC,KAAKssC,WAAW9V,WAAWqB,eAAe7I,wBACxDud,EAAevsC,KAAKT,eAAeitC,kBACnCnU,EAAQr4B,KAAKysC,SACbC,EAAe1sC,KAAK2sC,SAAWC,EAAAA,gCA5+BH,GA6+BG79B,EAIrC,IAAI/O,KAAK2sC,SACPP,EAAUQ,EAAAA,oCACL,CACL,GAAIxmB,GAAWpmB,KAAK2pC,gBAAgBvjB,SAAS,IAAMpmB,KAAKqpC,QAAQwD,KAChET,GAAUhmB,GAAYA,EAAS0mB,MAl/BQ/9B,GAHP,GAy/B7BspB,IACH+T,IAAY,EAId,IAAMW,GAAe,GAAKV,EAAY/2B,KAAO82B,GAAW/T,EAAQqU,EAAe,IACzEM,EAAgBX,EAAY7T,MAAQ4T,EAAUG,EAAah3B,OACxC8iB,EAAQ,EAAIqU,EAGjCK,GAAe,EACjBX,GAAWW,EA5+B4B,EA6+B9BC,EAAgB,IACzBZ,GAAWY,EA9+B4B,GAo/BzChtC,KAAKssC,WAAWF,QAAU73B,KAAK4Z,MAAMie,GACrCpsC,KAAKssC,WAAW9V,WAAWyW,kBAQrBzD,EAAVzpC,UAAAsrC,yBAAA,SAAmC1sB,EAAuBssB,EACxBF,GAC9B,GAGImC,GAHExC,EAAa1qC,KAAKqqC,iBAClB8C,GAA0BzC,EAAa1qC,KAAKotC,aAAansB,QAAU,EACnEosB,EAAsB94B,KAAK+4B,MA5hCE,IA4hC8B5C,EAIjE,IAAI1qC,KAAKutC,wBACP,MAAO,EAGT,IAAwB,IAApBvtC,KAAKkrC,WACPgC,EAA2BvuB,EAAgB+rB,MACtC,IAAI1qC,KAAKkrC,aAAeH,EAAW,CACxC,GAAMyC,GAAsBxtC,KAAK4qC,gBAAkByC,EAC7CI,EAAuB9uB,EAAgB6uB,EAIzCE,EACAhD,GAAc1qC,KAAK4qC,gBAAkBF,EA7iCR,KA6iCgDA,CAMjFwC,GAA2BO,EAAuB/C,EAAagD,MAK/DR,GAA2BjC,EAAeP,EAAa,CAMzD,OAAOn2B,MAAK4Z,OAAkC,EAA5B+e,EAAgCC,IAS5C3D,EAAVzpC,UAAAurC,4BAAA,SAAsCP,GAClC,GAAML,GAAa1qC,KAAKqqC,iBAClBkC,EAAevsC,KAAKT,eAAeitC,kBAEnCmB,EAAoB3tC,KAAKotC,aAAavf,IAhjCH,EAijCnC+f,EACFrB,EAAatrB,OAASjhB,KAAKotC,aAAa1U,OAljCH,EAojCnCmV,EAAiBt5B,KAAKu5B,IAAI9tC,KAAKorC,UAC/B2C,EACFx5B,KAAKE,IAAIzU,KAAK4qC,gBAAkBF,EAjlCD,KAklC7BsD,EAAoBD,EAAmBF,EAAiB7tC,KAAKotC,aAAansB,MAE5E+sB,GAAoBJ,EACtB5tC,KAAKiuC,eAAeD,EAAmBJ,GAC9BC,EAAiBF,EAC3B3tC,KAAKkuC,iBAAiBL,EAAgBF,EAAmB5C,GAExD/qC,KAAKmuC,iBAAmBnuC,KAAKouC,2BAKzB5E,EAAVzpC,UAAAkuC,eAAA,SAAyBD,EAA2BJ,GAEhD,GAAMS,GAAwB95B,KAAK4Z,MAAM6f,EAAoBJ,EAI7D5tC,MAAKkrC,YAAcmD,EACnBruC,KAAKorC,UAAYiD,EACjBruC,KAAKmuC,iBAAmBnuC,KAAKouC,0BAKzBpuC,KAAKkrC,YAAc,IACrBlrC,KAAKkrC,WAAa,EAClBlrC,KAAKorC,SAAW,EAChBprC,KAAKmuC,iBAAmB,mBAKpB3E,EAAVzpC,UAAAmuC,iBAAA,SAA2BL,EAAwBF,EACxB5C,GAEvB,GAAMuD,GAAwB/5B,KAAK4Z,MAAM0f,EAAiBF,EAW1D,IAPA3tC,KAAKkrC,YAAcoD,EACnBtuC,KAAKorC,UAAYkD,EACjBtuC,KAAKmuC,iBAAmBnuC,KAAKouC,0BAKzBpuC,KAAKkrC,YAAcH,EAIrB,MAHA/qC,MAAKkrC,WAAaH,EAClB/qC,KAAKorC,SAAW,OAChBprC,KAAKmuC,iBAAmB,gBAMpB3E,EAAVzpC,UAAAquC,mCACI,GAAM1D,GAAa1qC,KAAKqqC,iBAClB8C,GAA0BzC,EAAa1qC,KAAKotC,aAAansB,QAAU,CAEzE,OAAO,QADS1M,KAAKu5B,IAAI9tC,KAAKorC,UAAY+B,EAAyBzC,EAAa,GACpF,UAIUlB,EAAVzpC,UAAA6qC,yBACI,MAAO5qC,MAAKqpC,QAAQhhC,OAASrI,KAAKiqC,aAAa5hC,QAIzCmhC,EAAVzpC,UAAAsqC,0BACI,MA/oCiC,GA+oC1BrqC,KAAKuuC,kBAOd/E,EAAFzpC,UAAAyuC,kBAAE,SAAkBC,GAChBzuC,KAAK0uC,iBAAmBD,EAAIlF,KAAK,MAOnCC,EAAFzpC,UAAA4uC,iBAAE,WACE3uC,KAAKia,QACLja,KAAKm2B,QAOPt2B,OAAFC,eAAM0pC,EAANzpC,UAAA,wBAAE,WACE,MAAOC,MAAK4uC,aAAe5uC,KAAK0pC,sDA/lCpCpnC,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACVE,SAAU,27CACVC,QAAF,ujEACEF,QAAF,WAAA,gBAAA,YACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFiH,KAAA,UACM8+B,YAAN,KACI1F,kBAAJ,WACI0L,oBAAJ,kBACIC,yBAAJ,uBACIC,uBAAJ,sBACIzpC,uBAAwB,sBACxB0pC,sBAAJ,aACIC,mBAAJ,gCACIC,8BAAJ,WACIC,0BAAJ,2BACIC,+BAAJ,6BACIC,8BAAJ,WACIC,6BAA8B,aAC9BC,8BAA+B,WAC/BC,2BAA4B,QAC5BzsC,MAAJ,aACI4sB,YAAJ,yBACIH,UAAJ,aACIC,SAAJ,aAEA9V,YACA81B,GAAAC,gBAEAtlC,YACAC,QAAAslC,GAAArlC,YAAAk/B,IACAn/B,QAAAulC,GAAAtlC,YAAAk/B,8FAnMAlnC,KAAQgB,EAAAA,SAKRhB,KAAE+kB,KAYF/kB,KAAEiI,EAAAA,aAsBFjI,KAAEwc,EAAAA,eAAF3Z,aAAA7C,KAAAsD,EAAAA,aA5BAtD,KAAEutC,EAAAA,OAAF1qC,aAAA7C,KAAAsD,EAAAA,aA1BAtD,KAAQwtC,EAAAA,mBAAR3qC,aAAA7C,KAAAsD,EAAAA,aA4CAtD,KAA6DytC,GAA7D5qC,aA4aK7C,KA5aLsD,EAAAA,aAAAtD,KAA8B0tC,EAAAA,UAA9B7qC,aAAA7C,KAAA2tC,EAAAA,OAAA3tC,KAAAsD,EAAAA,aAsBAtD,KAAQyD,OAARZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAtBAF,SAAkDqD,GAAlDR,aAAA7C,KA+aKuD,EAAAA,OA/aLrD,MAAA0tC,SAibA1G,EAAA/lC,wGAxJA6oC,aAAAhqC,KAAAmU,EAAAA,UAAAjU,MAAA2tC,EAAAA,uBAGA9G,UAAA/mC,KAAA0I,EAAAA,gBAAAxI,MAAA4tC,IAAAvI,aAAA,MAGAoC,eAAA3nC,KAAA0I,EAAAA,gBAAAxI,MAAA6tC,MAGA3b,aAAApyB,KAAAoB,EAAAA,QAGA4sC,gBAAAhuC,KAAAk9B,EAAAA,aAAkBh9B,MAAlB+tC,MAGA5E,cAAArpC,KAAAoB,EAAAA,QAGA4/B,WAAAhhC,KAAAoB,EAAAA,QAGAipC,WAAArqC,KAAAoB,EAAAA,QAQA8sC,yBAAAluC,KAAAoB,EAAAA,QAQA+sC,cAAAnuC,KAAAoB,EAAAA,QAWAxD,QAAAoC,KAAAoB,EAAAA,QAWAgT,YAAApU,KAAAoB,EAAAA,MAAQlB,MAAR,gBAcAmU,iBAAArU,KAAAoB,EAAAA,MAAAlB,MAAA,qBAWAkuC,oBAAApuC,KAAAoB,EAAAA,QAGAitC,iBAAAruC,KAAGoB,EAAAA,QAGH+e,KAAAngB,KAAAoB,EAAAA,QAMAw3B,eAAA54B,KAAAsX,EAAAA,SAGA0jB,gBAAQh7B,KAARsX,EAAAA,OAAApX,MAAA,YAoBAg7B,gBAAAl7B,KAAAsX,EAAAA,OAAApX,MAAA,YAGAouC,kBAAAtuC,KAAAsX,EAAAA,SAIAyU,cAAA/rB,KAAAsX,EAAAA,UAYA4vB,mCmDxdA,sBAgBAlnC,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACA2uB,EAAAA,cACA8b,GACAxqC,IAEFK,SAAUoqC,GAAoBtH,GAAW+G,GAAkBM,GAAiBxqC,IAC5EU,cAAeyiC,GAAW+G,IAC1BnmC,WAAY2mC,QAzBdC,KCqBaC,IAIXC,aAAcp6B,EAAAA,QAAQ,SACpBC,EAAAA,MAAM,wBAAyB7B,EAAAA,OAAO+M,QAAS,EAAGjL,UAAW,cAC7DD,EAAAA,MAAM,UAAW7B,EAAAA,OAAO8B,UAAW,cACnCE,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,mCAAoCgL,EAAAA,WACrEjN,EAAAA,OAAO+M,QAAS,EAAGjL,UAAW,WAAY4W,OAAQ,IAClD1Y,EAAAA,OAAO+M,QAAS,GAAKjL,UAAW,cAAe4W,OAAQ,KACvD1Y,EAAAA,OAAO+M,QAAS,EAAGjL,UAAW,WAAY4W,OAAQ,QAEpD1W,EAAAA,WAAW,cAAeC,EAAAA,QAAQ,mCAAoCjC,EAAAA,OAAO+M,QAAS,SnDiB7EkvB,GAAqB,GAcrBC,GACT,GAAIz8B,GAAAA,eAAqC,+BAQhC08B,IACXhnC,QAAS+mC,GACTvuB,MAAO+V,EAAAA,SACP7V,WAAYuuB,IAWDC,GACT,GAAI58B,GAAAA,eAAyC,+BAC3CC,WAAY,OACZC,QAAS28B,mBA4Gb,QAAFC,GACYpc,EACAj1B,EACAsxC,EACA97B,EACAvW,EACRklC,EACQoN,EACAztC,EAC6B0tC,EACjB5wC,EAEV6wC,EACyBC,GAbrC,GAAF1yC,GAAAY,IACYA,MAAZq1B,SAAYA,EACAr1B,KAAZI,YAAYA,EACAJ,KAAZ0xC,kBAAYA,EACA1xC,KAAZ4V,kBAAYA,EACA5V,KAAZX,QAAYA,EAEAW,KAAZ2xC,eAAYA,EACA3xC,KAAZkE,cAAYA,EAEYlE,KAAxBgB,KAAwBA,EAEVhB,KAAd6xC,gBAAcA,EAxFd7xC,KAAA4X,UAAuC,QACvC5X,KAAAknC,WAA+B,EAoC7BlnC,KAAF+xC,UAA4C/xC,KAAK6xC,gBAAgBE,UAG/D/xC,KAAFgyC,UAA4ChyC,KAAK6xC,gBAAgBG,UAEjEhyC,KAAAiyC,SAAqB,GA6BrBjyC,KAAAkyC,iBAA6B,GAAI9Y,KAGjCp5B,KAAA0a,WAAgC,GAAIjb,GAAAA,QAiBhCO,KAAKmyC,gBAAkBP,CACvB,IAAMlxC,GAAuBN,EAAYD,cACnCiyC,EAAe1xC,EAA+D,MAC9E2xC,EAAgC,mBAAXC,SAA0B,OAAgBC,QAAUT,CAI1EvN,GAASiO,KAAQjO,EAASkO,QAInBJ,GAGVryC,KAAKkyC,iBAAiBvY,IAAI,aAAc,WAAM,MAAAv6B,GAAK+C,SANnDnC,KAAKkyC,iBACFvY,IAAI,aAAc,WAAM,MAAAv6B,GAAK+C,SAC7Bw3B,IAAI,aAAc,WAAM,MAAAv6B,GAAKiD,SAOlCrC,KAAKkyC,iBAAiBtlC,QAAQ,SAAC8lC,EAAUt5B,GAAU,MAAA1Y,GAAQiyC,iBAAiBv5B,EAAOs5B,KAE1D,UAArBhyC,EAAQkyC,UAA6C,aAArBlyC,EAAQkyC,WAM1CR,EAAaS,iBAAmBT,EAAaU,WAAaV,EAAaW,aAAe,IAMpFryC,EAAQsyC,WAA6C,SAAhCZ,EAAaa,iBACpCb,EAAaa,eAAiB,IAGhC/uC,EAAcU,QAAQxE,GAAagB,KAAKC,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,SAAA2U,GAEvEA,EAEiB,aAAXA,GACT5W,EAAQ4d,IAAI,WAAM,MAAA7d,GAAK+C,SAFvB9C,EAAQ4d,IAAI,WAAM,MAAA7d,GAAKiD,KAAK,OA3PpC,MAgIExC,QAAFC,eACM2xC,EADN1xC,UAAA,gBAAE,WACkC,MAAOC,MAAK4X,eAC9C,SAAa1X,GACPA,IAAUF,KAAK4X,YACjB5X,KAAK4X,UAAY1X,EAEbF,KAAKsxB,cACPtxB,KAAKkzC,kBAEDlzC,KAAKmzC,kBACPnzC,KAAqB,iBAAEmC,KAAK,GAG9BnC,KAAKsxB,YAAY2b,oDAMvBptC,OAAFC,eACM2xC,EADN1xC,UAAA,gBAAE,WAC0B,MAAOC,MAAKknC,eACtC,SAAahnC,GACXF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,GAGnCF,KAAKknC,WACPlnC,KAAKqC,KAAK,oCAadxC,OAAFC,eACM2xC,EADN1xC,UAAA,eAAE,WACgB,MAAOC,MAAKiyC,cAC5B,SAAY/xC,GACVF,KAAK2xC,eAAeyB,kBAAkBpzC,KAAKI,YAAYD,cAAeH,KAAKiyC,UAG3EjyC,KAAKiyC,SAAoB,MAAT/xC,GAAgB,GAAGA,GAAQ8I,OAAS,IAE/ChJ,KAAKiyC,UAAYjyC,KAAKqzC,oBACzBrzC,KAAKqC,KAAK,IAEVrC,KAAKszC,wBACLtzC,KAAK2xC,eAAe4B,SAASvzC,KAAKI,YAAYD,cAAeH,KAAKo2B,2CAKtEv2B,OAAFC,eACM2xC,EADN1xC,UAAA,oBAAE,WACqB,MAAOC,MAAKwzC,mBACjC,SAAiBtzC,GACfF,KAAKwzC,cAAgBtzC,EACjBF,KAAKmzC,kBACPnzC,KAAKyzC,iBAAiBzzC,KAAKwzC,gDAwE/B/B,EAAF1xC,UAAAgC,YAAE,WAAA,GAAF3C,GAAAY,IACQA,MAAKsxB,cACPtxB,KAAKsxB,YAAYmB,UACjBzyB,KAAKmzC,iBAAmB,MAI1BnzC,KAAKkyC,iBAAiBtlC,QAAQ,SAAC8lC,EAAUt5B,GACvCha,EAAKgB,YAAYD,cAAcuzC,oBAAoBt6B,EAAOs5B,KAE5D1yC,KAAKkyC,iBAAiBna,QAEtB/3B,KAAK0a,WAAW1Y,OAChBhC,KAAK0a,WAAWzY,WAEhBjC,KAAK2xC,eAAeyB,kBAAkBpzC,KAAKI,YAAYD,cAAeH,KAAKo2B,SAC3Ep2B,KAAKkE,cAAce,eAAejF,KAAKI,cAIzCqxC,EAAF1xC,UAAAoC,KAAE,SAAKwxC,GAAL,GAAFv0C,GAAAY,IACI,QADJ,KAAA2zC,IAAOA,EAAgB3zC,KAAK+xC,YACpB/xC,KAAKyE,UAAazE,KAAKo2B,WAAYp2B,KAAKqzC,qBACzCrzC,KAAqB,iBAAE4zC,gBAAmB5zC,KAAqB,iBAAE6zC,gBADpE,CAKA,GAAMrd,GAAax2B,KAAKm3B,gBAExBn3B,MAAK8zC,UACL9zC,KAAK+zC,QAAU/zC,KAAK+zC,SAAW,GAAIjd,GAAAA,gBAAgBkd,GAAkBh0C,KAAK4V,mBAC1E5V,KAAKmzC,iBAAmB3c,EAAWze,OAAO/X,KAAK+zC,SAAS/c,SACxDh3B,KAAKmzC,iBAAiBc,cACnB7yC,KAAKC,EAAAA,UAAUrB,KAAK0a,aACpBpZ,UAAU,WAAM,MAAAlC,GAAK00C,YACxB9zC,KAAKyzC,iBAAiBzzC,KAAKwzC,eAC3BxzC,KAAKszC,wBACLtzC,KAAqB,iBAAEmC,KAAKwxC,KAI9BlC,EAAF1xC,UAAAsC,KAAE,SAAKsxC,OAAP,KAAAA,IAAOA,EAAgB3zC,KAAKgyC,WACpBhyC,KAAKmzC,kBACPnzC,KAAKmzC,iBAAiB9wC,KAAKsxC,IAK/BlC,EAAF1xC,UAAAkiC,OAAE,WACEjiC,KAAKqzC,oBAAsBrzC,KAAKqC,OAASrC,KAAKmC,QAIhDsvC,EAAF1xC,UAAAszC,kBAAE,WACE,QAASrzC,KAAKmzC,kBAAoBnzC,KAAKmzC,iBAAiBe,aAI1DzC,EAAF1xC,UAAA6b,eAAE,SAAeu4B,GACTn0C,KAAKqzC,qBAAuBc,EAAEt4B,UAAYu4B,EAAAA,SAC5CD,EAAE1Y,kBACFz7B,KAAKqC,KAAK,KAKdovC,EAAF1xC,UAAAs0C,gBAAE,WACEr0C,KAAKqC,KAAKrC,KAAK6xC,gBAAgByC,oBAIzB7C,EAAV1xC,UAAAo3B,oCACI,IAAIn3B,KAAKsxB,YACP,MAAOtxB,MAAKsxB,WAId,IAAMijB,GAAWv0C,KAAKq1B,SAASrf,WAC5Bw+B,oBAAoBx0C,KAAKI,aACzBq0C,sBAAsB,gBACtBC,wBAAuB,GACvBC,mBAAmB,GAEhBC,EAAsB50C,KAAK0xC,kBAC9BmD,4BAA4B70C,KAAKI,YA2BpC,OAzBAm0C,GAASO,yBAAyBF,GAElCL,EAASQ,gBAAgB3zC,KAAKC,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,SAAAL,GAC9D7B,EAAK+zC,kBACHlyC,EAAO+zC,yBAAyBC,kBAAoB71C,EAAK+zC,iBAAiBe,aAG5E90C,EAAKC,QAAQ4d,IAAI,WAAM,MAAA7d,GAAKiD,KAAK,OAKvCrC,KAAKsxB,YAActxB,KAAKq1B,SAASsD,QAC/BhnB,UAAW3R,KAAKgB,KAChBm3B,iBAAkBoc,EAClB7f,WApT6B,oBAqT7Bkd,eAAgB5xC,KAAKmyC,oBAGvBnyC,KAAKkzC,kBAELlzC,KAAKsxB,YAAYqG,cACdv2B,KAAKC,EAAAA,UAAUrB,KAAK0a,aACpBpZ,UAAU,WAAM,MAAAlC,GAAK00C,YAEjB9zC,KAAKsxB,aAINmgB,EAAV1xC,UAAA+zC,mBACQ9zC,KAAKsxB,aAAetxB,KAAKsxB,YAAYxZ,eACvC9X,KAAKsxB,YAAYpZ,SAGnBlY,KAAKmzC,iBAAmB,MAIlB1B,EAAV1xC,UAAAmzC,2BACI,GAAMl9B,GACFhW,KAAgB,YAAEk1C,YAA4B,iBAC5Cj/B,EAASjW,KAAKm1C,aACdC,EAAUp1C,KAAKq1C,qBAErBr/B,GAASs/B,eACbhf,MAAUrgB,EAAOs/B,KAASH,EAAQG,MAClCjf,MAAUrgB,EAAOu/B,SAAaJ,EAAQI,aAQpC/D,EAAF1xC,UAAAo1C,WAAE,WACE,GAEIM,GAFEC,GAAS11C,KAAKgB,MAA2B,OAAnBhB,KAAKgB,KAAKd,MAChC8V,EAAWhW,KAAKgW,QAGtB,IAAgB,SAAZA,GAAmC,SAAZA,EACzBy/B,GAAkBE,QAAS,SAAUC,QAAqB,SAAZ5/B,EAAsB,MAAQ,cACvE,IACO,UAAZA,GACa,QAAZA,GAAsB0/B,GACV,SAAZ1/B,IAAwB0/B,EACzBD,GAAkBE,QAAS,QAASC,QAAS,cACxC,CAAA,KACO,SAAZ5/B,GACa,SAAZA,GAAuB0/B,GACX,QAAZ1/B,IAAuB0/B,GAGxB,KAAMG,IAAkC7/B,EAFxCy/B,IAAkBE,QAAS,MAAOC,QAAS,UAKtC,GAAXviC,GAAArT,KAAA81C,gBAAAL,EAAAE,QAAAF,EAAAG,QAEI,QACEL,KAAME,EACND,UAAWG,QAJjBtiC,EAAA2F,EAI6B48B,QAJ7BviC,EAAA4F,KASEw4B,EAAF1xC,UAAAs1C,oBAAE,WACE,GAEIU,GAFEL,GAAS11C,KAAKgB,MAA2B,OAAnBhB,KAAKgB,KAAKd,MAChC8V,EAAWhW,KAAKgW,QAGtB,IAAgB,SAAZA,EACF+/B,GAAmBC,SAAU,SAAUC,SAAU,cAC5C,IAAgB,SAAZjgC,EACT+/B,GAAmBC,SAAU,SAAUC,SAAU,WAC5C,IACO,UAAZjgC,GACa,QAAZA,GAAsB0/B,GACV,SAAZ1/B,IAAwB0/B,EACzBK,GAAmBC,SAAU,MAAOC,SAAU,cACzC,CAAA,KACO,SAAZjgC,GACa,SAAZA,GAAuB0/B,GACX,QAAZ1/B,IAAuB0/B,GAGxB,KAAMG,IAAkC7/B,EAFxC+/B,IAAmBC,SAAU,QAASC,SAAU,UAK3C,GAAX5iC,GAAArT,KAAA81C,gBAAAC,EAAAC,SAAAD,EAAAE,SAEI,QACEV,KAAMQ,EACNP,UAAWQ,SAJjB3iC,EAAA2F,EAI8Bi9B,SAJ9B5iC,EAAA4F,KASUw4B,EAAV1xC,UAAAuzC,2CAGQtzC,MAAKmzC,mBACPnzC,KAAKmzC,iBAAiB/c,QAAUp2B,KAAKo2B,QACrCp2B,KAAKmzC,iBAAiBxL,gBAEtB3nC,KAAKX,QAAQm1B,iBAAiB5B,eAAexxB,KAC3CsL,EAAAA,KAAK,GACLrL,EAAAA,UAAUrB,KAAK0a,aACfpZ,UAAU,WACNlC,EAAK+zC,kBACP/zC,EAAgB,YAAE6tC,qBAOlBwE,EAAV1xC,UAAA0zC,iBAAA,SAA2ByC,GACnBl2C,KAAKmzC,mBACPnzC,KAAKmzC,iBAAiB+C,aAAeA,EACrCl2C,KAAKmzC,iBAAiBxL,kBAKlB8J,EAAV1xC,UAAA+1C,gBAAA,SAA0B98B,EAA4BC,GAelD,MAdsB,UAAlBjZ,KAAKgW,UAA0C,UAAlBhW,KAAKgW,SAC1B,QAANiD,EACFA,EAAI,SACW,WAANA,IACTA,EAAI,OAGI,QAAND,EACFA,EAAI,QACW,UAANA,IACTA,EAAI,QAIAA,EAAZA,EAAeC,EAAfA,mBA5YA3W,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,eACVC,SAAU,aACVI,MACE8hB,cAAe,SACf+K,YAAa,yBACbwmB,aAAc,6DAhGlB7zC,KAAEs2B,EAAAA,UAeFt2B,KAAEiI,EAAAA,aATFjI,KAAQq4B,EAAAA,mBAgBRr4B,KAAEkH,EAAAA,mBAHFlH,KAAEgB,EAAAA,SAZFhB,KAAQoD,EAAAA,WAjBRpD,KAAQ8zC,EAAAA,gBAAR9zC,KAAuB2D,EAAAA,eAuMvB3D,SAAAqD,GAAAR,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAY4uC,QAtMZ9uC,KAAQwc,EAAAA,eAAR3Z,aAAA7C,KAuMKsD,EAAAA,aACLtD,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB+uC,QAExBjvC,SAAAqD,GAAAR,aAAA7C,KAAKsD,EAAAA,WAALtD,KAAiBuD,EAAAA,OAAjBrD,MAAwB6zC,EAAAA,sCAnFxBrgC,WAAA1T,KAAGoB,EAAAA,MAAHlB,MAAS,wBAmBTiC,WAAAnC,KAAGoB,EAAAA,MAAHlB,MAAS,wBAYTuvC,YAAAzvC,KAAGoB,EAAAA,MAAHlB,MAAS,yBAGTwvC,YAAA1vC,KAAGoB,EAAAA,MAAHlB,MAAS,yBAKT4zB,UAAA9zB,KAAGoB,EAAAA,MAAHlB,MAAS,gBAiBT0zC,eAAA5zC,KAAGoB,EAAAA,MAAHlB,MAAS,sBAxLTivC,mBA2iBE,QAAFuC,GACY10C,EACAk2B,GADAx1B,KAAZV,mBAAYA,EACAU,KAAZw1B,oBAAYA,EAbVx1B,KAAFs2C,YAAmC,UAGnCt2C,KAAAu2C,qBAAyC,EAGzCv2C,KAAAw2C,QAA2C,GAAI/2C,GAAAA,QAG7CO,KAAFy2C,WAA4Cz2C,KAAKw1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SA7hBzF,MAuiBEsc,GAAFj0C,UAAAoC,KAAE,SAAKwxC,GAAL,GAAFv0C,GAAAY,IAEQA,MAAK6zC,iBACP5hB,aAAajyB,KAAK6zC,gBAClB7zC,KAAK6zC,eAAiB,MAIxB7zC,KAAKu2C,qBAAsB,EAC3Bv2C,KAAK4zC,eAAiBrhB,WAAW,WAC/BnzB,EAAKk3C,YAAc,UACnBl3C,EAAKw0C,eAAiB,KAItBx0C,EAAKuoC,iBACJgM,IAOLK,EAAFj0C,UAAAsC,KAAE,SAAKsxC,GAAL,GAAFv0C,GAAAY,IAEQA,MAAK4zC,iBACP3hB,aAAajyB,KAAK4zC,gBAClB5zC,KAAK4zC,eAAiB,MAGxB5zC,KAAK6zC,eAAiBthB,WAAW,WAC/BnzB,EAAKk3C,YAAc,SACnBl3C,EAAKy0C,eAAiB,KAItBz0C,EAAKuoC,iBACJgM,IAILK,EAAFj0C,UAAAk0C,YAAE,WACE,MAAOj0C,MAAKw2C,QAAQ5jB,gBAItBohB,EAAFj0C,UAAAm0C,UAAE,WACE,MAA4B,YAArBl0C,KAAKs2C,aAGdtC,EAAFj0C,UAAA22C,gBAAE,WACE12C,KAAKu2C,qBAAsB,GAG7BvC,EAAFj0C,UAAA42C,eAAE,SAAev9B,GACb,GAAMD,GAAUC,EAAkC,OAElC,YAAZD,GAAyBnZ,KAAKk0C,aAChCl0C,KAAKw2C,QAAQx0C,OAGC,YAAZmX,GAAqC,WAAZA,IAC3BnZ,KAAKu2C,qBAAsB,IAS/BvC,EAAFj0C,UAAA62C,uBAAE,WACM52C,KAAKu2C,qBACPv2C,KAAKqC,KAAK,IASd2xC,EAAFj0C,UAAA4nC,cAAE,WACE3nC,KAAKV,mBAAmBsB,+BApI5B0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,wBACEG,SAAU,mOACVC,QAAF,wVACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEsW,YAAas3B,GAAfC,cACEpuC,2GAKE+zC,cAAJ,wGAjgBA7C,iCoDZA,sBAoBA1xC,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEM,EAAAA,WACAL,EAAAA,aACA2uB,EAAAA,cACA1uB,IAEFK,SAAU+qC,GAAYuC,GAAkB3tC,IACxCU,cAAe0qC,GAAYuC,IAC3Bhf,iBAAkBgf,IAClB5pC,WACEinC,IACChnC,QAAS2mB,EAAAA,sBAAuBC,SAAUC,SAhC/C4lB,gCCsBE92C,KAAFoI,QAAoC,GAAI3I,GAAAA,QAGtCO,KAAF+2C,kBAA8B,kBAG5B/2C,KAAFg3C,cAA0B,YAGxBh3C,KAAFi3C,kBAA8B,gBAG5Bj3C,KAAFk3C,eAA2B,aAGzBl3C,KAAFm3C,cAA0B,YAGxBn3C,KAAFo3C,cAAkB,SAACnkC,EAAce,EAAkB3L,GAC/C,GAAc,GAAVA,GAA2B,GAAZ2L,EAAiB,MAAO,QAAQ3L,CAEnDA,GAASkM,KAAKuJ,IAAIzV,EAAQ,EAE1B,IAAMyL,GAAab,EAAOe,CAO1B,OAAUF,GAAa,EAA3B,OAJqBA,EAAazL,EAC1BkM,KAAKE,IAAIX,EAAaE,EAAU3L,GAChCyL,EAAaE,GAErB,OAAiD3L,GApDjD,sBAgBA/F,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,8GAhBzByiC,KA8DaC,IAEXjtC,QAASgtC,GACTx0B,OAAQ,GAAIjd,GAAAA,SAAY,GAAIkd,GAAAA,SAAYu0B,KACxCt0B,WAAYw0B,IC3BdC,GAAA,yBAvCA,MAAAA,MA0DAC,GAAA,yBA1DA,MAAAA,MA2DaC,GACT3zC,EAAcm1B,EAAiBue,oBAuFjC,QAAFE,GAAqBv0B,EACC9jB,GADpB,GAAFF,GAEIQ,EAFJoE,KAAAhE,OAAAA,WAAqBZ,GAArBgkB,MAAqBA,EACChkB,EAAtBE,mBAAsBA,EArDpBF,EAAFw4C,WAAuB,EASrBx4C,EAAFy4C,QAAoB,EAkBpBz4C,EAAA04C,oBAQA14C,EAAA24C,eAA0B,EAS1B34C,EAAA44C,uBAAkC,EAGhC54C,EAAF6T,KAAqD,GAAIyF,GAAAA,aAQrDtZ,EAAK64C,aAAe70B,EAAMhb,QAAQ9G,UAAU,WAAM,MAAAlC,GAAKE,mBAAmBsB,mBAR9E,MA9DkClB,GAAlCi4C,EAAA/3C,GASEC,OAAFC,eACM63C,EADN53C,UAAA,iBAAE,WAC0B,MAAOC,MAAK43C,gBACtC,SAAc13C,GACZF,KAAK43C,WAAarjC,KAAKuJ,IAAI7C,EAAAA,qBAAqB/a,GAAQ,GACxDF,KAAKV,mBAAmBsB,gDAK1Bf,OAAFC,eACM63C,EADN53C,UAAA,cAAE,WACuB,MAAOC,MAAK63C,aACnC,SAAW33C,GACTF,KAAK63C,QAAU58B,EAAAA,qBAAqB/a,GACpCF,KAAKV,mBAAmBsB,gDAK1Bf,OAAFC,eACM63C,EADN53C,UAAA,gBAAE,WACyB,MAAOC,MAAKk4C,eACrC,SAAah4C,GACXF,KAAKk4C,UAAY3jC,KAAKuJ,IAAI7C,EAAAA,qBAAqB/a,GAAQ,GACvDF,KAAKm4C,mEAKPt4C,OAAFC,eACM63C,EADN53C,UAAA,uBAAE,WACkC,MAAOC,MAAK83C,sBAC9C,SAAoB53C,GAClBF,KAAK83C,kBAAoB53C,OAAauO,IAAI,SAAA2pC,GAAK,MAAAn9B,GAAAA,qBAAqBm9B,KACpEp4C,KAAKm4C,mEAKPt4C,OAAFC,eACM63C,EADN53C,UAAA,oBAAE,WAC8B,MAAOC,MAAK+3C,mBAC1C,SAAiB73C,GACfF,KAAK+3C,cAAgB/3B,EAAAA,sBAAsB9f,oCAM7CL,OAAFC,eACM63C,EADN53C,UAAA,4BAAE,WACsC,MAAOC,MAAKg4C,2BAClD,SAAyB93C,GACvBF,KAAKg4C,sBAAwBh4B,EAAAA,sBAAsB9f,oCAgBrDy3C,EAAF53C,UAAAsW,SAAE,WACErW,KAAKq4C,cAAe,EACpBr4C,KAAKm4C,kCACLn4C,KAAKi6B,oBAGP0d,EAAF53C,UAAAgC,YAAE,WACE/B,KAAKi4C,aAAatkC,eAIpBgkC,EAAF53C,UAAAu4C,SAAE,WACE,GAAKt4C,KAAKu4C,cAAV,CAEA,GAAMC,GAAoBx4C,KAAK+T,SAC/B/T,MAAK+T,YACL/T,KAAKy4C,eAAeD,KAItBb,EAAF53C,UAAA24C,aAAE,WACE,GAAK14C,KAAK24C,kBAAV,CAEA,GAAMH,GAAoBx4C,KAAK+T,SAC/B/T,MAAK+T,YACL/T,KAAKy4C,eAAeD,KAItBb,EAAF53C,UAAA64C,UAAE,WAEE,GAAK54C,KAAK24C,kBAAV,CAEA,GAAMH,GAAoBx4C,KAAK+T,SAC/B/T,MAAK+T,UAAY,EACjB/T,KAAKy4C,eAAeD,KAItBb,EAAF53C,UAAA84C,SAAE,WAEE,GAAK74C,KAAKu4C,cAAV,CAEA,GAAMC,GAAoBx4C,KAAK+T,SAC/B/T,MAAK+T,UAAY/T,KAAK84C,mBAAqB,EAC3C94C,KAAKy4C,eAAeD,KAItBb,EAAF53C,UAAA44C,gBAAE,WACE,MAAO34C,MAAK+T,WAAa,GAAsB,GAAjB/T,KAAKgU,UAIrC2jC,EAAF53C,UAAAw4C,YAAE,WACE,GAAMQ,GAAe/4C,KAAK84C,mBAAqB,CAC/C,OAAO94C,MAAK+T,UAAYglC,GAAiC,GAAjB/4C,KAAKgU,UAI/C2jC,EAAF53C,UAAA+4C,iBAAE,WACE,MAAK94C,MAAKgU,SAIHO,KAAKC,KAAKxU,KAAKqI,OAASrI,KAAKgU,UAH3B,GAeX2jC,EAAF53C,UAAAi5C,gBAAE,SAAgBhlC,GAGd,GAAMF,GAAa9T,KAAK+T,UAAY/T,KAAKgU,SACnCwkC,EAAoBx4C,KAAK+T,SAE/B/T,MAAK+T,UAAYQ,KAAK+4B,MAAMx5B,EAAaE,IAAa,EACtDhU,KAAKgU,SAAWA,EAChBhU,KAAKy4C,eAAeD,IAItBb,EAAF53C,UAAAk5C,qBAAE,WACE,MAAOj5C,MAAKyE,WAAazE,KAAKu4C,eAIhCZ,EAAF53C,UAAAm5C,yBAAE,WACE,MAAOl5C,MAAKyE,WAAazE,KAAK24C,mBAOxBhB,EAAV53C,UAAAo4C,2CACSn4C,KAAKq4C,eAGLr4C,KAAKgU,WACRhU,KAAKk4C,UAA2C,GAA/Bl4C,KAAKm5C,gBAAgB9wC,OAClCrI,KAAKm5C,gBAAgB,GApOL,IAwOtBn5C,KAAKo5C,0BAA4Bp5C,KAAKm5C,gBAAgBnsC,SAES,IAA3DhN,KAAKo5C,0BAA0B3mC,QAAQzS,KAAKgU,WAC9ChU,KAAKo5C,0BAA0B9sC,KAAKtM,KAAKgU,UAI3ChU,KAAKo5C,0BAA0B1nC,KAAK,SAACE,EAAGC,GAAM,MAAAD,GAAIC,IAClD7R,KAAKV,mBAAmBsB,iBAIlB+2C,EAAV53C,UAAA04C,eAAA,SAAyBD,GACrBx4C,KAAKiT,KAAKoG,MACRm/B,kBAANA,EACMzkC,UAAW/T,KAAK+T,UAChBC,SAAUhU,KAAKgU,SACf3L,OAAQrI,KAAKqI,yBAvNnB/F,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,eACVE,SAAU,8oFACVC,QAAF,q0BACEF,QAAF,YACEG,MACFC,MAAA,iBAEAI,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAjEAy0C,EAAAl0C,kEA2EA4E,SAAA/F,KAAAoB,EAAAA,QAGAsQ,WAAA1R,KAAAoB,EAAAA,QASAy1C,kBAAA72C,KAAAoB,EAAAA,QASA21C,eAAA/2C,KAAAoB,EAAAA,QASA41C,uBAAAh3C,KAAQoB,EAAAA,QASRuP,OAAA3Q,KAAAsX,EAAAA,UAiBA+9B,mCC9IA,sBAiBAr1C,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAsiB,GACAsoB,GACA8F,IAEFpwC,SAAUixC,IACV5wC,cAAe4wC,IACfvtC,WAAYktC,QA1BdiC,KZmCAC,GAAA,WACE,QAAFA,GAAqBp5C,GAAAJ,KAArBI,YAAqBA,EApCrB,MAAAo5C,MA4CaC,GACTjyC,EAAWgyC,GAAoB,WAOtB7V,GAA4B,GAAIhvB,GAAAA,eAC3C,6BACCC,WAAY,OAAQC,QAAS6kC,KAyB5BC,GAAgB,iBA0BlB,QAAF/V,GAAqBxjC,EAAiCf,EACUs+B,EAKHic,GAN3D,GAAFx6C,GAOIQ,EAPJoE,KAAAhE,KAOUI,IAPVJ,IAAqBZ,GAArBgB,YAAqBA,EAAiChB,EAAtDC,QAAsDA,EACUD,EAAhEu+B,eAAgEA,EAqB9Dv+B,EAAFy6C,kBAAqB,EAarBz6C,EAAAsqB,OAA2B,EAM3BtqB,EAAA06C,aAAiC,EAS/B16C,EAAF0kC,aAA2B,GAAIprB,GAAAA,aAG/BtZ,EAAA26C,0BAAoD5oC,EAAAA,aAAaC,MAS/DhS,EAAF08B,KAAwE,cAGtE18B,EAAFu6C,cAAkB,oBAAoBA,IAjDlC,IAAMK,GAAOJ,EAAWA,EAASK,cAAclwB,MAAM,KAAK,GAAK,SAC/D3qB,GAAK86C,oBAAsB,QAAQF,EAAvC,IAA+C56C,EAAKu6C,cAApD,KACIv6C,EAAKy6C,iBAAsC,mBAAnBlc,IA4C5B,MAhEoCj+B,GAApCkkC,EAAAhkC,GA2BEC,OAAFC,eACM8jC,EADN7jC,UAAA,aAAE,WACsB,MAAOC,MAAK0pB,YAClC,SAAU7L,GACR7d,KAAK0pB,OAASywB,GAAMt8B,GAAK,GAGrB7d,KAAK65C,kBACP75C,KAAKo6C,oDAMTv6C,OAAFC,eACM8jC,EADN7jC,UAAA,mBAAE,WAC4B,MAAOC,MAAK85C,kBACxC,SAAgBj8B,GAAa7d,KAAK85C,aAAeK,GAAMt8B,GAAK,oCA+B5D+lB,EAAF7jC,UAAAs6C,kBAAE,WAEE,OAAQrjC,UAAW,UADLhX,KAAKE,MAAQ,IAC/B,MAOE0jC,EAAF7jC,UAAAu6C,iBAAE,WACE,GAAkB,WAAdt6C,KAAK87B,KAAmB,CAE1B,OAAQ9kB,UAAW,UADLhX,KAAKu6C,YAAc,IACvC,OAIE3W,EAAF7jC,UAAAgI,gBAAE,WAAA,GAAF3I,GAAAY,IACSA,MAAK65C,kBAGR75C,KAAKX,QAAQyB,kBAAiB,WAC5B1B,EAAK26C,0BACDS,EAAAA,UAA2Bp7C,EAAKykC,iBAAiB1jC,cAAe,iBAC/DiB,KAAKqH,EAAAA,OAAM,SAAG0rC,GACb,MAAAA,GAAEsG,SAAWr7C,EAAKykC,iBAAiB1jC,iBACpCmB,UAAU,SAAAggC,GAAK,MAAAliC,GAAKC,QAAQ4d,IAAI,WAAM,MAAA7d,GAAKg7C,0BAKtDxW,EAAF7jC,UAAAgC,YAAE,WACE/B,KAAK+5C,0BAA0BpmC,eAIzBiwB,EAAV7jC,UAAAq6C,4BACsB,gBAAdp6C,KAAK87B,MAAwC,WAAd97B,KAAK87B,MACtC97B,KAAK8jC,aAAa9hC,MAAM9B,MAAOF,KAAKE,wBAjI1CoC,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVI,MACFiH,KAAA,cACM2wC,gBAAN,IACIC,gBAAJ,MACIxqB,uBAAJ,QACIkW,cAAe,OACftjC,MAAJ,mBACI+tB,kCAAJ,oBAEAnuB,QAAA,SACAC,SAAA;+pBACEC,QAAS,i3JACTM,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,iFAzFAZ,KAAEyD,OAAFZ,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,2BAMAzuB,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAmhC,SA+FAC,EAAAngC,oEAmBAogC,mBAAQvhC,KAARmU,EAAAA,UAAAjU,MAAA,qBAaAshC,eAAAxhC,KAAAsX,EAAAA,SAKAkiB,OAAAx5B,KAAAoB,EAAAA,SAmBAkgC,mCCvKA,sBAcAthC,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,aAAcC,IACxBK,SAAUk9B,GAAgBv9B,IAC1BU,cAAe68B,QAjBjBG,KCgCMC,GAAY,IAUlBC,GAAA,WACE,QAAFA,GAAqB7jC,GAAAJ,KAArBI,YAAqBA,EA3CrB,MAAA6jC,MA6CaC,GACT18B,EAAWy8B,GAAwB,WAgB1BE,GACT,GAAIxvB,GAAAA,eAAiD,wCACnDC,WAAY,OACZC,QAASuvB,KAYTC,GAAmC,27CAoGvC,QAAFC,GAAqBlkC,EACPmkC,EACsCz8B,EAEa08B,EAEvCnD,GANxB,GAAFjiC,GAQIQ,EARJoE,KAAAhE,KAQUI,IARVJ,IAAqBZ,GAArBgB,YAAqBA,EAE+BhB,EAApD0I,UAAoDA,EAEa1I,EAAjEolC,cAAiEA,EAEvCplC,EAA1BiiC,SAA0BA,EAxD1BjiC,EAAAsqB,OAAmB,EAEnBtqB,EAAAqlC,oBAA+B,EAY7BrlC,EAAFslC,gBAAoD,mBAAvBtlC,EAAKolC,iBAC1BplC,EAAKiiC,WAAajiC,EAAKiiC,SAASsD,iBAYxCvlC,EAAAwlC,UAAsBZ,GAYpB5kC,EAAF08B,KAAuC,cAoBnC18B,EAAKqlC,mBAAqBF,EAASM,MAAQN,EAASO,QAEhDzD,IACEA,EAAS0D,WACX3lC,EAAK2lC,SAAW1D,EAAS0D,UAGvB1D,EAAS2D,cACX5lC,EAAK4lC,YAAc3D,EAAS2D,aAMhC,IAAMC,GACJ,sCAAqC7lC,EAAKqlC,mBAAqB,YAAc,IADnF,mBAGIrkC,GAAYD,cAAcE,UAAUG,IAAIykC,KAlC5C,MA5CwCvlC,GAAxC4kC,EAAA1kC,GAoBEC,OAAFC,eACMwkC,EADNvkC,UAAA,gBAAE,WACyB,MAAOC,MAAK4kC,eACrC,SAAa9W,GACX9tB,KAAK4kC,UAAY3pB,EAAAA,qBAAqB6S,GAEjC9tB,KAAKykC,oBAAuBH,EAAmBY,UAAUzL,IAAIz5B,KAAK4kC,YACrE5kC,KAAKmlC,oDAMTtlC,OAAFC,eACMwkC,EADNvkC,UAAA,mBAAE,WAEE,MAAOC,MAAKolC,cAAgBplC,KAAK+kC,SAAW,QAE9C,SAAgB7kC,GACdF,KAAKolC,aAAenqB,EAAAA,qBAAqB/a,oCAO3CL,OAAFC,eACMwkC,EADNvkC,UAAA,aAAE,WAEE,MAAqB,gBAAdC,KAAK87B,KAAyB97B,KAAK0pB,OAAS,OAErD,SAAU2b,GACRrlC,KAAK0pB,OAASnV,KAAKuJ,IAAI,EAAGvJ,KAAKE,IAAI,IAAKwG,EAAAA,qBAAqBoqB,sCAiC/DxlC,OAAFC,eAAMwkC,EAANvkC,UAAA,qBAAE,WACE,OAAQC,KAAK+kC,SA1KS,IA0KuB,mCAI/CllC,OAAFC,eAAMwkC,EAANvkC,UAAA,gBAAE,WACE,GAAMulC,GAA+B,EAArBtlC,KAAKulC,cAAoBvlC,KAAKglC,WAC9C,OAAO,OAAOM,EAAlB,IAA6BA,mCAI3BzlC,OAAFC,eAAMwkC,EAANvkC,UAAA,4BAAE,WACE,MAAO,GAAIwU,KAAKixB,GAAKxlC,KAAKulC,+CAI5B1lC,OAAFC,eAAMwkC,EAANvkC,UAAA,yBAAE,WACE,MAAkB,gBAAdC,KAAK87B,KACA97B,KAAKylC,sBAAwB,IAAMzlC,KAAK0pB,QAAU,IAIvD1pB,KAAKykC,oBAAoC,kBAAdzkC,KAAK87B,KACC,GAA5B97B,KAAKylC,qBAGP,sCAIT5lC,OAAFC,eAAMwkC,EAANvkC,UAAA,0BAAE,WACE,MAAOC,MAAKglC,YAAchlC,KAAK+kC,SAAW,qCAIpCT,EAAVvkC,UAAAolC,4BACI,GAAIO,GAAWpB,EAAmBoB,QAE7BA,KACHA,EAAW1lC,KAAK8H,UAAU69B,cAAc,SACxC3lC,KAAK8H,UAAU89B,KAAKC,YAAYH,GAChCpB,EAAmBoB,SAAWA,GAG5BA,GAAYA,EAASI,OACtBJ,EAA+B,MAAEK,WAAW/lC,KAAKgmC,oBAAqB,GAGzE1B,EAAmBY,UAAU1kC,IAAIR,KAAK+kC,WAIhCT,EAAVvkC,UAAAimC,6BACI,MAAO3B,IAEF4B,QAAQ,eAAgB,GAAG,IAAOjmC,KAAKylC,sBACvCQ,QAAQ,aAAc,GAAG,GAAMjmC,KAAKylC,sBACpCQ,QAAQ,YAAa,GAAGjmC,KAAK+kC,WApItCT,EAAAY,UAA6B,GAAIgB,MAAalC,KAM9CM,EAAAoB,SAAmD,oBAlCnDpjC,KAACC,EAAAA,UAADC,OAAAC,SAAA,uBACEC,SAAU,qBACVI,MACFiH,KAAA,cACMhH,MAAN,uBACI+tB,kCAAJ,kBACIqV,mBAAJ,WACIC,oBAAJ,WACIlW,uBAAJ,oCACID,uBAAJ,sCACIE,uBAAwB,QACxBkW,cAAJ,QAEA1jC,QAAA,SACAC,SAAA,8sBACEC,QAAS,mkGACTM,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,mFA3GAZ,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,cALA9G,KAAQyD,OAAQZ,aAAhB7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,2BA0KAzuB,SAAAqD,GAAAR,aAAA7C,KAAeuD,EAAAA,OAAQrD,MAAvB2hC,SAGAG,EAAA7gC,uEArCAq4B,OAAAx5B,KAAAoB,EAAAA,QAYAxD,QAAAoC,KAAAoB,EAAAA,SAYA4gC,uCA4HEE,EAAFnD,qCAAE,OAGFjiC,GAAA08B,KAAA,gBAHA18B,EACA,6BAOAkD,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oBA1BAsH,KAAA,cACA+xB,KAAA,gBACA/4B,MAAA,mCACM+tB,kCAAN,kBACIqV,mBAAJ,WACIC,oBAAJ,YAEAzjC,QAAA,SACAC,SAAA,8sBACAC,QAAA,mkGACAM,gBAAAC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIAojC,EAAAne,eAAA,WAAA,QACA7lB,KAAAiI,EAAAA,0MArRAjI,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAA2hC,SAwRAmC,GAEAhC,ICjSAiC,GAAA,yBAPA,sBAaAjkC,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,GAAiBD,EAAAA,cAC3BM,SACE49B,GACAgC,GACAjgC,IAEFU,cACEu9B,GACAgC,QAtBJC,KCmDI3F,GAAe,EAON4F,IACXn8B,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAquB,MAC9BzF,OAAO,GAIT0F,GAAA,WACE,QAAFA,GAEW7X,EAEA3uB,GAFAF,KAAX6uB,OAAWA,EAEA7uB,KAAXE,MAAWA,EAtEX,MAAAwmC,MA4EAC,GAAA,yBA5EA,MAAAA,MA6EaC,GACT7iC,EAAc4iC,mBAiIhB,QAAFF,GAAsBI,GAApB,GAAFznC,GACIQ,EADJoE,KAAAhE,OAAAA,WAAsBZ,GAAtBynC,gBAAsBA,EA9GtBznC,EAAAsqB,OAAwB,KAGxBtqB,EAAA0nC,MAA0B,mBAAmBlG,KAG7CxhC,EAAA2nC,UAA6C,KAG7C3nC,EAAA4nC,gBAAoC,EAGpC5nC,EAAA6nC,eAA+C,QAG/C7nC,EAAA8nC,WAA+B,EAG/B9nC,EAAAoiC,WAA+B,EAG7BpiC,EAAFgvB,8BAAwD,aAMtDhvB,EAAF2tB,UAAyB,aAOvB3tB,EAAF6B,OAA4D,GAAIyX,GAAAA,eAnIhE,MA6FmChZ,GAAnC+mC,EAAA7mC,GA6CEC,OAAFC,eACM2mC,EADN1mC,UAAA,YAAE,WACqB,MAAOC,MAAK8mC,WACjC,SAAS5mC,GACPF,KAAK8mC,MAAQ5mC,EACbF,KAAKmnC,2DAIPtnC,OAAFC,eACM2mC,EADN1mC,UAAA,qBAAE,WAEE,MAAOC,MAAKinC,oBAEd,SAAkBppB,GAChB7d,KAAKinC,eAAuB,WAANppB,EAAiB,SAAW,QAClD7d,KAAKonC,uDASPvnC,OAAFC,eACM2mC,EADN1mC,UAAA,aAAE,WACmB,MAAOC,MAAK0pB,YAC/B,SAAU2b,GACJrlC,KAAK0pB,SAAW2b,IAElBrlC,KAAK0pB,OAAS2b,EAEdrlC,KAAKqnC,gCACLrnC,KAAKsnC,8DAITb,EAAF1mC,UAAAunC,0BAAE,WACMtnC,KAAK+mC,YAAc/mC,KAAK+mC,UAAU7F,UACpClhC,KAAK+mC,UAAU7F,SAAU,IAQ7BrhC,OAAFC,eACM2mC,EADN1mC,UAAA,gBAAE,WACiB,MAAOC,MAAK+mC,eAC7B,SAAa3gB,GACXpmB,KAAK+mC,UAAY3gB,EACjBpmB,KAAKE,MAAQkmB,EAAWA,EAASlmB,MAAQ,KACzCF,KAAKsnC,6DAIPznC,OAAFC,eACM2mC,EADN1mC,UAAA,gBAAE,WAC0B,MAAOC,MAAKknC,eACtC,SAAahnC,GACXF,KAAKknC,UAAYlnB,EAAAA,sBAAsB9f,GACvCF,KAAKonC,uDAIPvnC,OAAFC,eACM2mC,EADN1mC,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GACXF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,GACvCF,KAAKonC,uDAWPX,EAAF1mC,UAAAc,mBAAE,WAIEb,KAAKgnC,gBAAiB,GAOxBP,EAAF1mC,UAAAwnC,OAAE,WACMvnC,KAAK+sB,WACP/sB,KAAK+sB,aAID0Z,EAAV1mC,UAAAonC,6CACQnnC,MAAKwnC,SACPxnC,KAAKwnC,QAAQ56B,QAAQ,SAAA66B,GACnBA,EAAMzjB,KAAO5kB,EAAK4kB,QAMhByiB,EAAV1mC,UAAAsnC,oDAEUK,EAAuC,OAAnB1nC,KAAK+mC,WAAsB/mC,KAAK+mC,UAAU7mC,QAAUF,KAAK0pB,MAE/E1pB,MAAKwnC,UAAYE,IACnB1nC,KAAK+mC,UAAY,KACjB/mC,KAAKwnC,QAAQ56B,QAAQ,SAAA66B,GACnBA,EAAMvG,QAAU9hC,EAAKc,QAAUunC,EAAMvnC,MACjCunC,EAAMvG,UACR9hC,EAAK2nC,UAAYU,OAOzBhB,EAAF1mC,UAAAwsB,iBAAE,WACMvsB,KAAKgnC,gBACPhnC,KAAKiB,OAAOoY,KAAK,GAAIqtB,IAAe1mC,KAAc,UAAGA,KAAK0pB,UAI9D+c,EAAF1mC,UAAAqnC,oBAAE,WACMpnC,KAAKwnC,SACPxnC,KAAKwnC,QAAQ56B,QAAQ,SAAA66B,GAAS,MAAAA,GAAME,mBAQxClB,EAAF1mC,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKE,MAAQA,EACbF,KAAK6mC,gBAAgBjmC,gBAQvB6lC,EAAF1mC,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAKouB,8BAAgCe,GAQvCsX,EAAF1mC,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK+sB,UAAYoC,GAOnBsX,EAAF1mC,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,EAChBtvB,KAAK6mC,gBAAgBjmC,+BA3NzB0B,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBACVC,SAAU,gBACV0H,WAAYo8B,IACZ1jC,MACEiH,KAAQ,aACRhH,MAAS,mBAEXJ,QAAS,oDA5EXL,KAAEiB,EAAAA,uCAoHFtC,SAAAqB,KAAGsX,EAAAA,SAGH4tB,UAAAllC,KAAG0I,EAAAA,gBAAHxI,MAAmB4V,EAAAA,WAAW,WAAM,MAAAwvB,OAAmBC,aAAa,MAIpE7jB,OAAA1hB,KAAGoB,EAAAA,QAQHskB,gBAAA1lB,KAAGoB,EAAAA,QAeHxD,QAAAoC,KAAGoB,EAAAA,QAsBH0iB,WAAA9jB,KAAGoB,EAAAA,QASHe,WAAAnC,KAAGoB,EAAAA,QAQH4/B,WAAAhhC,KAAGoB,EAAAA,SAxMH+iC,GA6FmCG,IAuNnCkB,GAAA,WAME,QAAFA,GAAqB1nC,GAAAJ,KAArBI,YAAqBA,EA1TrB,MAAA0nC,MA8TaC,GAELvgC,EAAW1D,EAAmBD,EAAcikC,KAAsB,yBAwJxE,QAAFF,GAA0BI,EACZrgC,EACQk/B,EACA3iC,EACA+jC,EAC0CtK,GAL9D,GAAFv+B,GAMIQ,EANJoE,KAAAhE,KAMU2H,IANV3H,WAEsBZ,GAAtBynC,gBAAsBA,EACAznC,EAAtB8E,cAAsBA,EACA9E,EAAtB6oC,iBAAsBA,EAC0C7oC,EAAhEu+B,eAAgEA,EA/HhEv+B,EAAAmiC,UAA8B,gBAAeX,GAG3CxhC,EAAFqjB,GAAwBrjB,EAAKmiC,UA6F3BniC,EAAF6B,OAA4D,GAAIyX,GAAAA,aAShEtZ,EAAAqiC,UAA8B,EAS9BriC,EAAAsqB,OAAwB,KAGxBtqB,EAAA8oC,+BAAuD,aAenD9oC,EAAK4oC,WAAaA,EAElB5oC,EAAK8oC,+BACHD,EAAiBE,OAAO,SAAC1lB,EAAYuB,GAC/BvB,IAAOrjB,EAAKqjB,IAAMuB,IAAS5kB,EAAK4kB,OAClC5kB,EAAK8hC,SAAU,OAjBzB,MA3HoCxhC,GAApCkoC,EAAAhoC,GAqBEC,OAAFC,eACM8nC,EADN7nC,UAAA,eAAE,WACyB,MAAOC,MAAKyhC,cACrC,SAAYvhC,GACV,GAAMkoC,GAAkBpoB,EAAAA,sBAAsB9f,EAC1CF,MAAKyhC,WAAa2G,IACpBpoC,KAAKyhC,SAAW2G,EACZA,GAAmBpoC,KAAKgoC,YAAchoC,KAAKgoC,WAAW9nC,QAAUF,KAAKE,MACvEF,KAAKgoC,WAAW5hB,SAAWpmB,MACjBooC,GAAmBpoC,KAAKgoC,YAAchoC,KAAKgoC,WAAW9nC,QAAUF,KAAKE,QAI/EF,KAAKgoC,WAAW5hB,SAAW,MAGzBgiB,GAEFpoC,KAAKioC,iBAAiBI,OAAOroC,KAAKyiB,GAAIziB,KAAKgkB,MAE7ChkB,KAAK6mC,gBAAgBjmC,iDAKzBf,OAAFC,eACM8nC,EADN7nC,UAAA,aAAE,WACmB,MAAOC,MAAK0pB,YAC/B,SAAUxpB,GACJF,KAAK0pB,SAAWxpB,IAClBF,KAAK0pB,OAASxpB,EACU,OAApBF,KAAKgoC,aACFhoC,KAAKkhC,UAERlhC,KAAKkhC,QAAUlhC,KAAKgoC,WAAW9nC,QAAUA,GAEvCF,KAAKkhC,UACPlhC,KAAKgoC,WAAW5hB,SAAWpmB,yCAOnCH,OAAFC,eACM8nC,EADN7nC,UAAA,qBAAE,WAEE,MAAOC,MAAKinC,gBAAmBjnC,KAAKgoC,YAAchoC,KAAKgoC,WAAWhgB,eAAkB,aAEtF,SAAkB9nB,GAChBF,KAAKinC,eAAiB/mC,mCAKxBL,OAAFC,eACM8nC,EADN7nC,UAAA,gBAAE,WAEE,MAAOC,MAAKknC,WAAkC,OAApBlnC,KAAKgoC,YAAuBhoC,KAAKgoC,WAAWvjC,cAExE,SAAavE,GACX,GAAMooC,GAAmBtoB,EAAAA,sBAAsB9f,EAC3CF,MAAKknC,YAAcoB,IACrBtoC,KAAKknC,UAAYoB,EACjBtoC,KAAK6mC,gBAAgBjmC,iDAKzBf,OAAFC,eACM8nC,EADN7nC,UAAA,gBAAE,WAEE,MAAOC,MAAKwhC,WAAcxhC,KAAKgoC,YAAchoC,KAAKgoC,WAAW1E,cAE/D,SAAapjC,GACXF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,oCAczCL,OAAFC,eAAM8nC,EAAN7nC,UAAA,eAAE,WAAwB,OAAUC,KAAKyiB,IAAMziB,KAAKuhC,WAApD,0CAyCEqG,EAAF7nC,UAAAka,MAAE,WACEja,KAAKkE,cAAck4B,SAASp8B,KAAK+hC,cAAe,aAQlD6F,EAAF7nC,UAAA4nC,cAAE,WAGE3nC,KAAK6mC,gBAAgBjmC,gBAGvBgnC,EAAF7nC,UAAAsW,SAAE,WACMrW,KAAKgoC,aAEPhoC,KAAKkhC,QAAUlhC,KAAKgoC,WAAW9nC,QAAUF,KAAK0pB,OAE9C1pB,KAAKgkB,KAAOhkB,KAAKgoC,WAAWhkB,OAIhC4jB,EAAF7nC,UAAAgI,gBAAE,WAAA,GAAF3I,GAAAY,IACIA,MAAKkE,cACFU,QAAQ5E,KAAKI,aAAa,GAC1BkB,UAAU,SAAAugC,IACJA,GAAeziC,EAAK4oC,YACvB5oC,EAAK4oC,WAAWT,YAKxBK,EAAF7nC,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,aACvCJ,KAAKkoC,kCAICN,EAAV7nC,UAAAwsB,4BACIvsB,KAAKiB,OAAOoY,KAAK,GAAIqtB,IAAe1mC,KAAMA,KAAK0pB,UAGjDke,EAAF7nC,UAAAwoC,kBAAE,WACE,MAAOvoC,MAAKwoC,eAAiBxoC,KAAKyE,UAGpCmjC,EAAF7nC,UAAAiiC,cAAE,SAAc5oB,GAQZA,EAAMqiB,mBAORmM,EAAF7nC,UAAA0oC,eAAE,SAAervB,GAIbA,EAAMqiB,iBAEN,IAAMiN,GAAoB1oC,KAAKgoC,YAAchoC,KAAKE,QAAUF,KAAKgoC,WAAW9nC,KAC5EF,MAAKkhC,SAAU,EACflhC,KAAKusB,mBAEDvsB,KAAKgoC,aACPhoC,KAAKgoC,WAAW5Z,8BAA8BpuB,KAAKE,OACnDF,KAAKgoC,WAAWT,SACZmB,GACF1oC,KAAKgoC,WAAWzb,oCArPxBjqB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEG,SAAU,++BACVC,QAAF,ilEACEF,QAAF,QAAA,gBAAA,YACEK,cAAFC,EAAAA,kBAAAC,KACER,SAAF,iBACEI,MACFC,MAAA,mBACM4lC,4BAAN,UACIC,6BAAJ,WACI9X,kCAAJ,sCACIqS,kBAAJ,OACI0F,YAAJ,sDAMA1lC,gBAAAC,EAAAA,wBAAAC,4GAiIAf,KAAsCiB,EAAAA,oBArctCjB,KAAE2D,EAAAA,eAJF3D,KAAEwmC,EAAAA,4BAPFxmC,KAAQyD,OAARZ,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,4BAqdA6W,EAAAnkC,0DA5HAiT,YAAApU,KAAAoB,EAAAA,MAAAlB,MAAA,gBAGAmU,iBAAArU,KAAAoB,EAAAA,MAAAlB,MAAA,qBAGAumC,kBAAGzmC,KAAHoB,EAAAA,MAAAlB,MAAA,sBAGA0+B,UAAA5+B,KAAAoB,EAAAA,QAGAxD,QAAAoC,KAAAoB,EAAAA,QAGAskB,gBAAG1lB,KAAHoB,EAAAA,QAwBAe,WAAAnC,KAAAoB,EAAAA,QAkBA4/B,WAAAhhC,KAAAoB,EAAAA,QAUAzC,SAAAqB,KAAAsX,EAAAA,SAaAmoB,gBAAAz/B,KAAQmU,EAAAA,UAARjU,MAAA,YAqCAolC,mCCtdA,sBAcAtlC,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,aAAcG,GAAiBF,IACzCK,SAAU+/B,GAAemB,GAAgBvhC,IACzCU,cAAe0/B,GAAemB,QAjBhCoB,KCoBanM,IAIXC,gBAAiBhmB,EAAAA,QAAQ,aAKvBC,EAAAA,MAAM,qBAAsB7B,EAAAA,OAC1B8B,UAAa,OACb7B,WAAc,aAEhB4B,EAAAA,MAAM,OAAQ7B,EAAAA,OAEZ+zB,aAAc,OACd9zB,WAAc,YAEhB+B,EAAAA,WAAW,uBAAwBC,EAAAA,QAAQ,QAC3CD,EAAAA,WAAW,sCACPC,EAAAA,QAAQ,8CZyBH+xB,GACT,GAAIv0B,GAAAA,eAAwB,+BAC1BC,WAAY,OACZC,QAASs0B,oBAqBb,QAAF7O,GACch7B,EAC6Ci7B,EACrD5yB,EACAi4B,EACAC,GALJ,GAAFzgC,GAMIQ,EANJoE,KAAAhE,KAMU2H,EAAYi4B,EAAkBC,IANxC7/B,WACcZ,GAAdE,mBAAcA,EAC6CF,EAA3Dm7B,WAA2DA,IA7D3D,MA0DsC76B,GAAtC46B,EAAA16B;cAUE06B,EAAFv6B,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKu6B,WAAWC,sBAAsBl5B,UAAU,WAC9ClC,EAAKE,mBAAmBsB,iCAxB9B0B,KAACC,EAAAA,UAADC,OAAAC,SAAA,qBACEG,SAAU,4BACVE,MACFC,MAAA,qBACM03B,yBAAN,kCACIC,0BAAJ,oCAEAv3B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JAjEAZ,KAAEiI,EAAAA,aAwEFjI,KAAuEq4B,EAAAA,mBAnEvEr4B,KAAEgB,EAAAA,UAMFg3B,oEA4MAt6B,MAAAI,YAAAA,EAAEJ,KAAF46B,kBAAAA,EAAsB56B,KAAtBkE,cAAAA,EACsBlE,KAAtB4H,UAAAA,EACsB5H,KAAtBX,QAAAA,EACsBW,KAAtB66B,KAAAA,EACsB76B,KAAtB86B,qCAAA,sDAtGA96B,KAAA+6B,MAAA,OAaA/6B,KAAAg7B,eAAA,EASAh7B,KAAAi7B,YAAA,sHA2BE,GAAFviB,GAAAA,cAAA,6FA0CE1Y,KAAFk7B,aAAA55B,UAAA,SAAA65B,GA6HAA,GA/GA/7B,EAAsBy7B,OACtBz7B,EAAA07B,qCAAA17B,EAAAy7B,KAAA,eAEUz7B,EAAKg8B,qBAAfh8B,EAAAi8B,YACAj8B,EAAAk8B,cAKAl8B,EAAAm8B,+OAUAn8B,EAAAo8B,QACApiB,EAAiCqiB,gJAUzBn6B,UAAR,SAA4B8X,GACtB,GAANF,GAAAE,EAAAF,UAAAC,EAAAC,EAAAD,SACA,IAAAA,EAAA1G,QAAA,SAAA,SAAAyG,GACA,SAAAC,GAAyC,IAAzCD,EAAAzG,QAAA,UAEUrT,EAAV87B,aAAA7hB,KAAkCja,EAAMs8B,WAjExC,MAqEA77B,QAAOC,eAAP67B,EAAA57B,UAAA,YA7IA8E,uDAEA3E,EAAA,QAAAA,EAAA,MAAA,2BAEAF,KAAA4X,UAAA1X,EACQF,KAAK47B,kBAAkBviB,SAG/BtU,YAAA,EACAC,cAAA,8CAIAH,+DAEA7E,KAAA67B,aAAA75B,QAEA+C,YAAA,EACAC,cAAA,sDAIAH,uHAEEG,cAAF,mDAIAH,iHAEEG,cAAF,uDAqBAH,mGAEAE,YAAA,EACAC,cAAA,qDAGAH,6JAEAE,YAAA,EAIAC,cAAA,uDAGAH,mGAEAE,YAAA,EACAC,cAAA,qDAGAH,kJAEAE,YAAA,EAIAC,cAAA,6DAAAH,eAYA,MAAA7E,MAAAm7B,QAAA,SAAAn7B,KAAA87B,MAEA/2B,YAAA,EACAC,cAAA,iEAsDAhF,KAAAq7B,WAAAU,+BAAA1nB,KAAA,SAAA2nB,2JAmBA,GAAAC,GAAAj8B,KAAA66B,MAAA76B,KAAA66B,KAAAqB,8DAEAl8B,KAAA86B,+CAAAqB,aAEAn8B,KAAAkE,cAAAk4B,SAAAp8B,KAAA86B,qCAAA96B,KAAAq8B,YAGAr8B,KAAAI,YAAAD,cAAAqqB,QAEAxqB,KAAO86B,qCAAP,KACA96B,KAAAq8B,WAAA,+HAMAr8B,KAAAq7B,WAAAiB,QAAAt8B,KAAAo7B,6KAeAp7B,KAAAq7B,WAAAkB,UAEAv8B,KAAAw8B,kBAAAv6B,WACAjC,KAAAy8B,cAAAx6B,YAGApC,OAAAC,eAAsB67B,EAAtB57B,UAAA,qHASEiF,cAAF,2JAqCA,YAdA,KAAA03B,IAAAA,GAAA18B,KAAAm7B,YAAA,KAAAwB,IAAAA,EAAA,WAAS38B,KAAT07B,QAAAgB,EAAAA,GAGQ18B,KAAR4zB,gBAAA5zB,KAAA48B,kBAAA,OAAA,eAEQ58B,KAARq8B,WAAAM,IAGA38B,KAAA4zB,gBAAA,OAAA5zB,KAAAu7B,iBAEMv7B,KAAKq7B,aACXr7B,KAAAq7B,WAAAiB,QAAAt8B,KAAAo7B,qBAGA,GAAAjnB,SAAqB,SAArBC,GACAhV,EAAA87B,aAAA95B,KAAAsL,EAAAA,KAAA,IAAApL,UAAA,SAAA60B,GAAA,MAAA/hB,GAAA+hB,EAAA,OAAA,cAIAt2B,OAAOC,eAAP67B,EAAA57B,UAAA,UACA8E,sGAGAE,YAAA,EACAC,cAAA,mBAAA1C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,kCAjSAG,SAAA,0EACE+W,YAAFkjB,GAAAC,iBACEh6B,MACFC,MAAA,aACAg6B,eAAA,kBACAC,qBAAA,iCACMC,oBAAN,6BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACIh5B,SAAJ,MAEAlB,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAIAy4B,EAAAxT,eAAA,WAAA,QACA7lB,KAAAiI,EAAAA,+EA1GAjI,KAAEgB,EAAAA,SAhBFhB,SAA8CqD,GAA9CR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,eAIAuyB,EAAAl4B,gBAkBAuS,WAAA1T,KAAAoB,EAAAA,QAiNAo4B,OAAAx5B,KAAAoB,EAAAA,iEApGAw3B,eAAA54B,KAAAsX,EAAAA,SAaA0jB,gBAAAh7B,KAAAsX,EAAAA,OAAApX,MAAA,YASA+6B,cAAAj7B,KAAAsX,EAAAA,SAMA4jB,gBAAAl7B,KAAAsX,EAAAA,OAAApX,MAAA,YAkBAi7B,cAAAn7B,KAAAsX,EAAAA,SAKAgiB,oBAAAt5B,KAAAsX,EAAAA,OAAApX,MAAA,qBAMA24B,SAAA74B,KAAAoB,EAAAA,SAeAi4B,qFAgSA37B,KAAA09B,SAAAA,EAIc19B,KAAdX,QAAAA,EAJEW,KAAFV,mBAAAA,EAAkCU,KAAlC29B,eAAAA,EAKiE39B,KAAjE49B,cAAA,GAAAllB,GAAAA,aAxCE1Y,KAAF0a,WAAA,GAAAjb,GAAAA,QAgBAO,KAAA69B,gBAAA,GAAAp+B,GAAAA,6FAUAuB,GAEAA,EAAAC,OAAAG,KAAAC,EAAAA,UAAArB,KAAA0a,aAAApZ,UAAA,4DAkBAtB,KAAA89B,UAAAC,EAvFA,MAyFAl+B,QAAAC,eAAAk+B,EAAAj+B,UAAA,SAGI8E,mEAxFJhF,OAAAC,eAAAk+B,EAAAj+B,UAAA,wEAGAF,OAAAC,eAAAk+B,EAAAj+B,UAAA,6IAYAF,OAAAC,eAAAk+B,EAAAj+B,UAAA,+IAQAC,KAAAi+B,mBAGAtE,8FAKE30B,cAAF,IAEAnF,OAAAC,eAAAk+B,EAAAj+B,UAAA,oFAmCEiF,cAAF,IAEAg5B,EAAAj+B,UAAAc,8BAqBA,GAAAzB,GAAAY,6FAAAZ,EAAA8+B,SAAAtxB,QAAA,SAAAuxB,GAAA/+B,EAAAg/B,mBAAAD,GACA/+B,EAAkBi/B,qBAAlBF,GACA/+B,EAAAk/B,iBAAAH,OAGA/+B,EAAA8+B,SAAA71B,QACQjJ,EAAKm/B,cAAbn/B,EAAiCo/B,SACzBp/B,EAAKm/B,cAAbn/B,EAAAq/B,QACAr/B,EAAAs/B,wBAGAt/B,EAAAE,mBAAAsB,iBAEAZ,KAAA69B,gBAAAz8B,KAAAu9B,EAAAA,aAAA,IAGAt9B,EAAAA,UAAWrB,KAAX0a,aAA6BpZ,UAA7B,WAAA,MAAAlC,GAAAs/B,2BAOAV,EAAAj+B,UAAAgC,uBAEA/B,KAAA69B,gBAAA57B,+EAOE,kFAKA,iEAEF+7B,EAAAj+B,UAAA6+B,qBAEA,GAAAx/B,GAAAY,uCAAAA,KAAAX,QAMGyB,kBANH,WAAA,MAAA1B,GAAAy+B,gBAAA77B,yMAcA,iBAAAoX,EAAAD,SAAA,mBACoB/Z,EADpBu+B,gBAIAv+B,EAAcs+B,SAAdv9B,cAAAE,UAAAG,IAAA,mDAGMpB,EAANE,mBAAAsB,iBAEA,SAAAu9B,EAAArC,MAEMqC,EAANjD,aAAA95B,KAAAC,EAAAA,UAAArB,KAAAk+B,SAAA91B,UAAA9G,UAAA,WACA,MAAAlC,GAAAy/B,mBAAAV,EAAAhD,sEAeAgD,EAAAvC,kBAAAx6B,KAAAC,EAAAA,UAAArB,KAAAk+B,SAAA91B,UAAA9G,UAAA,WACAlC,EAAAC,QAAAm1B,iBAAA5B,eAAAxxB,KAAAsL,EAAAA,KAAA,IAAApL,UAAA,6KAWAA,UAAA,qCACAlC,EAAAE,mBAAAsB,8HAWQZ,KAAK09B,SAAbv9B,cAAAE,UAAAC,OAAA,mDAQU,sGACoB,MAA9BlB,EAAsBq/B,gBAIZr/B,EAAMq/B,KAAhBN,IAGA,MAAA/+B,EAAAo/B,QACAM,GAAA,SACA1/B,EAAAo/B,OAAAL,KAGAn+B,KAAA++B,OAAA/+B,KAAAg/B,MAAA,KAEAh/B,KAAAgB,MAAA,QAAAhB,KAAAgB,KAAAd,OACAF,KAAAg/B,MAAAh/B,KAAAy+B,KAEQz+B,KAAR++B,OAAsB/+B,KAAtBw+B,SAIMx+B,KAAKg/B,MAAQh/B,KAAKw+B,OAClBx+B,KAAK++B,OAAS/+B,KAAKy+B,6BAQf,8KAKVz+B,KAAA49B,cAAAvkB,iCAGA2kB,EAAAj+B,UAAAk/B,6BAEA,GAAA7/B,GAAAY,6BAAAyI,OAAA,SAAA01B,GAAA,MAAAA,KAAAA,EAAAe,cAAA9/B,EAAA+/B,iBAAAhB,KAAAvxB,QAAA,SAAAuxB,GAAA,MAAA,GAAA3C,WAKAwC,EAAAj+B,UAAAq/B,8BAEA,MAAAp/B,MAAAu+B,cAAAv+B,KAAAw+B,SAAoBx+B,KAApBm/B,iBAAAn/B,KAAAw+B,uGAKU,SAAVL,8EAIU,SAAVA,8HAgBQ,GAAR,QAAYn+B,KAAKg/B,MAAjBlD,8BAGa,IAAb,QAAA97B,KAAsBg/B,MAAtBlD,KAAA,CAEQ,GAAIvmB,GAAQvV,KAApBg/B,MAAAK,MACA/pB,IAAAC,EAAAijB,GAAqBjjB,EAErB,GAAAvV,KAAA++B,QAAA/+B,KAAA++B,OAAA5D,OACA,GAAA,QAAQn7B,KAAK++B,OAAbjD,KACAtD,GAAAx4B,KAAA++B,OAAAM,WAGa,IAAb,QAAAr/B,KAAA++B,OAAAjD,KAAA,CAEQ,GAARvmB,GAAAvV,KAAA++B,OAAAM,MACA7G,IAAAjjB,EAAAD,GAAAC,4HAcQvV,KAARX,QAAqB4d,IAArB,WAAA,MAA8C7d,GAA9Co7B,sBAAAx4B,KAAA5C,EAAAkgC,oCAKAh9B,KAAUC,EAAAA,UAAVC,OAAAC,SAAA,uBACAC,SAAA,09EA7UAI,MACAC,MAAA,uBACAw8B,iDAAA,qBAEEp8B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAIA86B,EAAA7V,eAAA,WAAA,QACA7lB,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAAsD,EAAAA,aACAtD,KAAAiI,EAAAA,aACAjI,KAAAgB,EAAAA,sLA5YA06B,EAAAv6B,gBAMAy6B,WAAA57B,KAAA0I,EAAAA,gBAAAxI,MAAAm5B,MAXA3jB,WAAA1V,KAAAk9B,EAAAA,aAAAh9B,MAAA83B,MAoeAmF,eAAAn9B,KAAAmU,EAAAA,UAAAjU,MAAA83B,MACAoF,WAAAp9B,KAAAoB,EAAAA,sEAjFAs6B,oBC9XE,QAAF2B,GACMrnB,EAC+C8e,EAC/CzvB,EACAi4B,EACAC,GACN,MAAIjgC,GAAJoE,KAAAhE,KAAUsY,EAAmB8e,EAAWzvB,EAAYi4B,EAAkBC,IAAtE7/B,KA3BA,MAoBuCN,GAAvCigC,EAAA//B,kBAZA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEG,SAAU,4BACVE,MACFC,MAAA,yCACM03B,yBAAN,kCACIC,0BAAJ,oCAEAv3B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,0JA1BAZ,KAAEiI,EAAAA,aAiCFjI,KAAgEq4B,EAAAA,mBAxBhEr4B,KAAEgB,EAAAA,UACFq8B,OAoBAG,GAAA,SAAAlgC,gBAqCA,GAAAR,GAAA,OAAAQ,GAAAA,EAAA4O,MAAAxO,KAAAgQ,YAAAhQ,IAcA,+CATAZ,EAAA2gC,gBAAA,EASA3gC,EAZA,MAvCAM,GAAAogC,EAAAlgC,wDAuCAiF,6HAEEG,cAAF,yKASEA,cAAF,kLASEA,cAAF,mBADA1C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,oCA9CAG,SAAA,0EACE+W,YAAFkjB,GAAAC,iBACEh6B,MACFC,MAAA,yBACAsB,SAAA,KACA04B,eAAA,kBACMC,qBAAN,iCACIC,oBAAJ,6BAEIC,eAAgB,OAChBC,yBAAJ,qBACIC,0BAAJ,8DAEIC,0BAAJ,kBACI2C,4BAAJ,kBACIC,iBAAJ,uCACIC,oBAAJ,2CAEA/8B,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,SAGA48B,EAAAr8B,gBACA08B,kBAAA79B,KAAAoB,EAAAA,QACA08B,cAAA99B,KAAAoB,EAAAA,yCAGAo8B,GASAnE,IASA0E,GAAA,SAAAzgC,+DAmBA,cACyCygC,EAAzCl7B,4jFAbArC,MACAC,MAAA,6CACAw8B,iDAAA,qBAEEp8B,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,SAGAm9B,EAAI58B,gBACJy6B,WAAG57B,KAAH0I,EAAAA,gBAAAxI,MAAAs9B,MACA9nB,WAAA1V,KAAAk9B,EAAAA,aAAAh9B,MAAAm9B,OAEAU,OC7GAC,GAAA,yBAPA,sBAgBAh+B,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAC,GACAk6B,EAAAA,gBACAC,EAAAA,gBAEF95B,SACEL,GACAs1B,GACAqC,GACA1D,GACAwF,GACAO,GACAV,IAEF54B,cACE40B,GACAqC,GACA1D,GACAwF,GACAO,GACAV,QAtCJW,KCmBaG,GACX,GAAI9rB,GAAAA,eAA6C,oCAC/CC,WAAY,OACZC,QAAS,WAAM,OAAE6rB,oBAAoB,EAAOC,kBAAkB,MC2B9DC,GAAe,EAGNC,IACXx2B,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAA2oB,MAC9BC,OAAO,GAITC,GAAA,WACE,QAAFA,GAEWpS,EAEAqS,GAFAlhC,KAAX6uB,OAAWA,EAEA7uB,KAAXkhC,QAAWA,EAhEX,MAAAD,MAqEAE,GAAA,WACE,QAAFA,GAAqB/gC,GAAAJ,KAArBI,YAAqBA,EAtErB,MAAA+gC,MAwEaC,GAMLv9B,EAAc2D,EAAW1D,EAAmBC,EAAco9B,KAAsB,0BAyGtF,QAAFJ,GAAcp5B,EAKAC,EACQ1D,EACA5E,EACe+E,EACfhF,EAEGgiC,EACuC1D,EAC9B38B,GAbhC,GAAF5B,GAcIQ,EAdJoE,KAAAhE,KAcU2H,IAdV3H,WAMsBZ,GAAtB8E,cAAsBA,EACA9E,EAAtBE,mBAAsBA,EAEAF,EAAtBC,QAAsBA,EAEGD,EAAzBiiC,SAAyBA,EACuCjiC,EAAhEu+B,eAAgEA,EAC9Bv+B,EAAlC4B,KAAkCA,EA3FlC5B,EAAAmP,SAAqB,SAAC+yB,KACtBliC,EAAA2tB,UAAsB,aAEtB3tB,EAAAmiC,UAA8B,uBAAsBX,GACpDxhC,EAAAoiC,WAA+B,EAC/BpiC,EAAAqiC,UAA8B,EAG9BriC,EAAAsiC,WAAsB,EAkBpBtiC,EAAF4kB,KAAiC,KAG/B5kB,EAAFqjB,GAAwBrjB,EAAKmiC,UAG3BniC,EAAF4oB,cAA+C,QAG7C5oB,EAAFsX,UAAkD,KAGhDtX,EAAFuX,eAA4D,KAe1DvX,EAAF6B,OACM,GAAIyX,GAAAA,aAQRtZ,EAAFuiC,aAAwD,GAAIjpB,GAAAA,aAQ1DtZ,EAAFwiC,WAAsD,GAAIlpB,GAAAA,aAuBtDtZ,EAAKiF,SAAWC,SAASD,IAAa,IAjB1C,MA/EoC3E,GAApCqhC,EAAAnhC,GA4CEC,OAAFC,eACMihC,EADNhhC,UAAA,gBAAE,WAC0B,MAAOC,MAAKwhC,eACtC,SAAathC,GAASF,KAAKwhC,UAAYxhB,EAAAA,sBAAsB9f,oCAG7DL,OAAFC,eACMihC,EADNhhC,UAAA,eAAE,WACyB,MAAOC,MAAKyhC,cACrC,SAAYvhC,GACVF,KAAKyhC,SAAWzhB,EAAAA,sBAAsB9f,GACtCF,KAAKV,mBAAmBsB,gDAuB1Bf,OAAFC,eAAMihC,EAANhhC,UAAA,eAAE,WAAwB,OAAUC,KAAKyiB,IAAMziB,KAAKuhC,WAApD,0CAuBER,EAAFhhC,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKkE,cACFU,QAAQ5E,KAAKI,aAAa,GAC1BkB,UAAU,SAAAugC,GACJA,GAMH1tB,QAAQC,UAAUC,KAAK,WAAM,MAAAjV,GAAK2tB,iBAK1CgU,EAAFhhC,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,cAIzC2gC,EAAFhhC,UAAA+hC,eAAE,SAAe1oB,GAcb,GAVAA,EAAMqiB,kBAEDz7B,KAAK0hC,WACR1hC,KAAK2hC,aAAatoB,OAOhBrZ,KAAK0hC,WAAa1hC,KAAKqhC,SAASX,mBAElC,YADA1gC,KAAK+hC,cAAc5hC,cAAc+gC,QAAUlhC,KAAKkhC,QAKlDlhC,MAAKkhC,QAAUlhC,KAAK+hC,cAAc5hC,cAAc+gC,QAIhDlhC,KAAKusB,oBAIPwU,EAAFhhC,UAAAiiC,cAAE,SAAc5oB,GAQZA,EAAMqiB,mBAIRsF,EAAFhhC,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKkhC,UAAYhhC,GAInB6gC,EAAFhhC,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAKuO,SAAW4gB,GAIlB4R,EAAFhhC,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK+sB,UAAYoC,GAInB4R,EAAFhhC,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,EAChBtvB,KAAKV,mBAAmBsB,gBAI1BmgC,EAAFhhC,UAAAka,MAAE,WACEja,KAAKkE,cAAck4B,SAASp8B,KAAK+hC,cAAe,aAIlDhB,EAAFhhC,UAAAkiC,OAAE,WACEjiC,KAAKkhC,SAAWlhC,KAAKkhC,QACrBlhC,KAAKuO,SAASvO,KAAKkhC,UAMbH,EAAVhhC,UAAAwsB,4BACIvsB,KAAKuO,SAASvO,KAAKkhC,SACnBlhC,KAAKiB,OAAOoY,KAAK,GAAI4nB,IAAqBjhC,KAAMA,KAAKkhC,WAI/CH,EAAVhhC,UAAAmiC,mBAAA,SAA6BC,GACzB,GAAIrT,GAAcqT,EAAWniC,KAAKoiC,eAAkB,GAOpD,OAJIpiC,MAAKqiC,mBACPvT,GAAc,KAGTva,KAAKuJ,IAAI,EAAGvJ,KAAKE,IAAIqa,EAAY,OAG1CiS,EAAFhhC,UAAAuiC,aAAE,WACE,IAAKtiC,KAAKyE,WAAazE,KAAK0hC,UAAW,CACrC,GAAMa,GAAUviC,KAAKwiC,SAASriC,aAC9BH,MAAKoiC,eAAiBpiC,KAAKyiC,YAAYtiC,cAAcuiC,YAAcH,EAAQG,YAC3EH,EAAQliC,UAAUG,IAAI,gBAEtBR,KAAKqiC,iBAAmBriC,KAAKkhC,QAC7BlhC,KAAK0hC,WAAY,IAIrBX,EAAFhhC,UAAA4iC,QAAE,SAAQvpB,GACN,GAAIpZ,KAAK0hC,UAAW,CAClB,GAAM/vB,GAAY3R,KAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,OAAmB,EAAI,CAChEF,MAAK4iC,gBAAkB5iC,KAAKkiC,mBAAmB9oB,EAAMypB,OAASlxB,EAE9D,IAAMmxB,GAAS9iC,KAAK4iC,gBAAkB,IAAO5iC,KAAKoiC,eAAiBzwB,CACnE3R,MAAKwiC,SAASriC,cAAc+U,MAAM8B,UAAY,eAAe8rB,EAAnE,cAIE/B,EAAFhhC,UAAAgjC,WAAE,WAAA,GAAF3jC,GAAAY,IACI,IAAIA,KAAK0hC,UAAW,CAClB,GAAMsB,GAAkBhjC,KAAK4iC,gBAAkB,EAE3CI,KAAoBhjC,KAAKkhC,UAC3BlhC,KAAK4hC,WAAWvoB,OACXrZ,KAAKqhC,SAASV,mBACjB3gC,KAAKkhC,QAAU8B,EACfhjC,KAAKusB,qBAMTvsB,KAAKX,QAAQyB,kBAAkB,WAAM,MAAAyxB,YAAW,WAC1CnzB,EAAKsiC,YACPtiC,EAAKsiC,WAAY,EACjBtiC,EAAKojC,SAASriC,cAAcE,UAAUC,OAAO,gBAI7ClB,EAAKojC,SAASriC,cAAc+U,MAAM8B,UAAY,UAOtD+pB,EAAFhhC,UAAAkjC,mBAAE,WAMEjjC,KAAKV,mBAAmBqsB,gCA9R5BrpB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEC,SAAU,iBACVI,MACFC,MAAA,mBACMmgC,OAAN,KACIC,kBAAJ,KAEIC,sBAAuB,4CACvBC,wCAAJ,4BACIvS,kCAAJ,sCACItB,UAAJ,uCAEA5sB,SAAA,gpCACAC,QAAA,quGACEuH,WAAFy2B,IACEl+B,QAAS,WAAX,gBAAA,QAAA,YACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,qFAhFAf,KAAE2D,EAAAA,eAPF3D,KAAQiB,EAAAA,oBAHRjB,KAAQyD,OAARZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAQAF,KAAEgB,EAAAA,SA+KFhB,SAAAqD,GAAAR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAyBi+B,QArKzBn+B,KAAEyD,OAAFZ,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,2BAuKAzuB,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAAsD,EAAAA,cAxLAm7B,EAAAt9B,0HAoHAugB,OAAA1hB,KAAAoB,EAAAA,QAGA+e,KAAAngB,KAAAoB,EAAAA,QAGAskB,gBAAA1lB,KAAAoB,EAAAA,QAGAgT,YAAApU,KAAAoB,EAAAA,MAAAlB,MAAA,gBAGAmU,iBAAArU,KAAAoB,EAAAA,MAAAlB,MAAA,qBAGA8gC,WAAAhhC,KAAAoB,EAAAA,QAGAw9B,UAAA5+B,KAAAoB,EAAAA,QAGAzC,SAAAqB,KAAAsX,EAAAA,SAKA+nB,eAAAr/B,KAAQsX,EAAAA,SAORgoB,aAAAt/B,KAAAsX,EAAAA,SASAmoB,gBAAAz/B,KAAAmU,EAAAA,UAAAjU,MAAA,YAcAu+B,mCCrLA,sBAeAz+B,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUI,GAAiBF,GAAiBG,EAAAA,iBAC5CE,SAAUq6B,GAAgB16B,IAC1BU,cAAeg6B,IACf32B,YACGC,QAAS2mB,EAAAA,sBAAuBC,SAAUC,SApB/CqS,Kf0EahU,IACXllB,QAASy2B,EAAAA,kBACTx2B,YAAa8N,EAAAA,WAAW,WAAM,MAAAkR,MAC9B0X,OAAO,GAITpS,GAAA,yBAjFA,MAAAA,MA4FA4U,GAAA,WACE,QAAFA,GAAqBpjC,GAAAJ,KAArBI,YAAqBA,EA7FrB,MAAAojC,MA+FaC,GAKL5/B,EAAc2D,EAAWzD,EAAcy/B,IAAgB,0BAyW7D,QAAFla,GAAc3hB,EACQzD,EACA5E,EACY0B,EACGqD,EAE2Bs5B,GAN9D,GAAFv+B,GAOIQ,EAPJoE,KAAAhE,KAOU2H,IAPV3H,WACsBZ,GAAtB8E,cAAsBA,EACA9E,EAAtBE,mBAAsBA,EACYF,EAAlC4B,KAAkCA,EAG8B5B,EAAhEu+B,eAAgEA,EAzThEv+B,EAAAskC,SAAoB,EAYpBtkC,EAAAmqB,KAAyB,IAiBzBnqB,EAAAuqB,KAAyB,EAezBvqB,EAAAwqB,MAA0B,EAM1BxqB,EAAA6qB,aAAiC,EAiBjC7qB,EAAA8qB,cAA2C,EA4B3C9qB,EAAAsqB,OAAkC,KAelCtqB,EAAAirB,WAAsB,EAGpBjrB,EAAF6B,OAA6D,GAAIyX,GAAAA,aAG/DtZ,EAAFkvB,MAA4D,GAAI5V,GAAAA,aAO9DtZ,EAAFivB,YAAgE,GAAI3V,GAAAA,aA6BlEtZ,EAAF2tB,UAAyB,aAIzB3tB,EAAAoqB,SAA6B,EAM3BpqB,EAAF8sB,YAAwB,EAMtB9sB,EAAF0F,WAAuB,EA2GvB1F,EAAAisB,qBAAyC,EAGzCjsB,EAAAysB,kBAAiD,KAEjDzsB,EAAAgvB,8BAAgE,aAMhEhvB,EAAAmZ,uBAAmCpH,EAAAA,aAAaC,MA8B5ChS,EAAKiF,SAAWC,SAASD,IAAa,IAxB1C,MA5S+B3E,GAA/B4pB,EAAA1pB,GAGEC,OAAFC,eACMwpB,EADNvpB,UAAA,cAAE,WACwB,MAAOC,MAAK0jC,aACpC,SAAWxjC,GACTF,KAAK0jC,QAAU1jB,EAAAA,sBAAsB9f;yEAKvCL,OAAFC,eACMwpB,EADNvpB,UAAA,WAAE,WACoB,MAAOC,MAAKupB,UAChC,SAAQ1L,GACN7d,KAAKupB,KAAOtO,EAAAA,qBAAqB4C,EAAG7d,KAAKupB,MACzCvpB,KAAKwpB,SAAWxpB,KAAKypB,qBAAqBzpB,KAAK0pB,QAG/C1pB,KAAKV,mBAAmBsB,gDAK1Bf,OAAFC,eACMwpB,EADNvpB,UAAA,WAAE,WACoB,MAAOC,MAAK2pB,UAChC,SAAQ9L,GACN7d,KAAK2pB,KAAO1O,EAAAA,qBAAqB4C,EAAG7d,KAAK2pB,MAGrB,OAAhB3pB,KAAK0pB,SACP1pB,KAAKE,MAAQF,KAAK2pB,MAEpB3pB,KAAKwpB,SAAWxpB,KAAKypB,qBAAqBzpB,KAAK0pB,QAG/C1pB,KAAKV,mBAAmBsB,gDAK1Bf,OAAFC,eACMwpB,EADNvpB,UAAA,YAAE,WACqB,MAAOC,MAAK4pB,WACjC,SAAS/L,GACP7d,KAAK4pB,MAAQ3O,EAAAA,qBAAqB4C,EAAG7d,KAAK4pB,OAEtC5pB,KAAK4pB,MAAQ,GAAM,IACrB5pB,KAAK6pB,gBAAkB7pB,KAAK4pB,MAAME,WAAWC,MAAM,KAAKC,MAAO3hB,QAIjErI,KAAKV,mBAAmBsB,gDAK1Bf,OAAFC,eACMwpB,EADNvpB,UAAA,kBAAE,WAC4B,MAAOC,MAAKiqB,iBACxC,SAAe/pB,GAAkBF,KAAKiqB,YAAcjK,EAAAA,sBAAsB9f,oCAO1EL,OAAFC,eACMwpB,EADNvpB,UAAA,oBAAE,WACqB,MAAOC,MAAKkqB,mBACjC,SAAiBhqB,GAEbF,KAAKkqB,cADO,SAAVhqB,EACmB,OACK,gBAAVA,IAAuC,gBAAVA,GACxB+a,EAAAA,qBAAqB/a,EAAOF,KAA4B,eAExD,mCAMzBH,OAAFC,eACMwpB,EADNvpB,UAAA,aAAE,WAME,MAHoB,QAAhBC,KAAK0pB,SACP1pB,KAAKE,MAAQF,KAAK2pB,MAEb3pB,KAAK0pB,YAEd,SAAU7L,GACR,GAAIA,IAAM7d,KAAK0pB,OAAQ,CACrB,GAAIxpB,GAAQ+a,EAAAA,qBAAqB4C,EAI7B7d,MAAK6pB,kBACP3pB,EAAQiqB,WAAWjqB,EAAMkqB,QAAQpqB,KAAK6pB,mBAGxC7pB,KAAK0pB,OAASxpB,EACdF,KAAKwpB,SAAWxpB,KAAKypB,qBAAqBzpB,KAAK0pB,QAG/C1pB,KAAKV,mBAAmBsB,iDAa5Bf,OAAFC,eACMwpB,EADNvpB,UAAA,gBAAE,WAC0B,MAAOC,MAAKqqB,eACtC,SAAanqB,GACXF,KAAKqqB,UAAYrK,EAAAA,sBAAsB9f,oCAkBzCL,OAAFC,eAAMwpB,EAANvpB,UAAA,oBAAE,WACE,MAAIC,MAAKsqB,YACAtqB,KAAKsqB,YAAYtqB,KAAKE,OAM3BF,KAAK6pB,iBAAmB7pB,KAAKE,OAASF,KAAKE,MAAQ,GAAM,EACpDF,KAAKE,MAAMkqB,QAAQpqB,KAAK6pB,iBAG1B7pB,KAAKE,OAAS,mCAIvBopB,EAAFvpB,UAAAka,MAAE,WACEja,KAAKuqB,qBAIPjB,EAAFvpB,UAAAyqB,KAAE,WACExqB,KAAKyqB,oBAOP5qB,OAAFC,eAAMwpB,EAANvpB,UAAA,eAAE,WAAwB,MAAOC,MAAK0qB,OAAO1qB,KAAKwpB,2CAmBhD3pB,OAAFC,eAAMwpB,EAANvpB,UAAA,mBAAE,WAGE,MAAOC,MAAK2qB,UAAY3qB,KAAK4qB,OAAS5qB,KAAK4qB,wCAK7C/qB,OAAFC,eAAMwpB,EAANvpB,UAAA,mBAAE,WACE,MAAwB,KAAjBC,KAAK6qB,yCAOdhrB,OAAFC,eAAMwpB,EAANvpB,UAAA,iBAAE,WACE,MAAIC,MAAKyE,SA5Rc,EA+RnBzE,KAAK8qB,cAAgB9qB,KAAK+qB,WACrB/qB,KAAK8E,UA1RiB,GAHG,EA+R3B,mCAITjF,OAAFC,eAAMwpB,EAANvpB,UAAA,8BAAE,WACE,GAAMirB,GAAOhrB,KAAK2qB,SAAW,IAAM,IAC7BM,EAAQjrB,KAAK2qB,SAAW,OAAM,EAAI3qB,KAAK6qB,SAAjD,MAAmE,EAAI7qB,KAAK6qB,QAA5E,QAGI,QAEE7T,UAAW,YAAYgU,EAA7B,KAJiBhrB,KAAKkrB,2BAA6B,IAAM,IAIblrB,KAAKmrB,UAAjD,eAAyEF,EAAzE,sCAKEprB,OAAFC,eAAMwpB,EAANvpB,UAAA,wBAAE,WACE,GAAMirB,GAAOhrB,KAAK2qB,SAAW,IAAM,IAC7BM,EAAQjrB,KAAK2qB,SAAW,MAAM3qB,KAAK6qB,QAA7C,MAA+D7qB,KAAK6qB,QAApE,QAGI,QAEE7T,UAAW,YAAYgU,EAA7B,KAJiBhrB,KAAKkrB,2BAA6B,GAAK,KAIZlrB,KAAKmrB,UAAjD,eAAyEF,EAAzE,sCAKEprB,OAAFC,eAAMwpB,EAANvpB,UAAA,6BAAE,WAME,OACEiX,UAAa,aANJhX,KAAK2qB,SAAW,IAAM,KAMrC,KAHgB3qB,KAAK2qB,UAAoC,OAAxB3qB,KAAKorB,gBAAgC,IAAL,IAChDprB,KAAKqrB,qBAAuB,EAAI,IAEjD,uCAKExrB,OAAFC,eAAMwpB,EAANvpB,UAAA,oBAAE,WACE,GAAIurB,GAAuC,IAA5BtrB,KAAKqrB,qBAChBE,EAAiBvrB,KAAK2qB,SAAW,OAAOW,EAAhD,IAAiEA,EAAjE,QACQN,EAAOhrB,KAAK2qB,SAAW,IAAM,IAI7Ba,EAAQxrB,KAAK2qB,UAAoC,OAAxB3qB,KAAKorB,gBAAiC,GAAN,IACzDK,EAAUzrB,KAAK2qB,UAAoC,OAAxB3qB,KAAKorB,gBAA+C,GAApB,kBAC3DvoB,GACF0oB,eAAkBA,EAElBvU,UAAa,0BAA0BgU,EAA7C,IAAqDQ,EAAOF,EAAW,EAAvE,KAA6EG,EAGzE,IAAIzrB,KAAK8qB,aAAe9qB,KAAKmrB,UAAW,CAItCtoB,EAAO,WAHI7C,KAAK2qB,SACX3qB,KAAK0rB,YAAc,SAAW,MAC9B1rB,KAAK0rB,YAAc,QAAU,SACJ1rB,KAAKmrB,UAAzC,KAGI,MAAOtoB,oCAGThD,OAAFC,eAAMwpB,EAANvpB,UAAA,6BAAE,WAOE,OACEiX,UAAa,aAPJhX,KAAK2qB,SAAW,IAAM,KAOrC,KAFoE,MADnC,OAAxB3qB,KAAKorB,iBAA6BprB,KAAK2qB,SAAgC3qB,KAAK0rB,aAAxB1rB,KAAK0rB,aACjC1rB,KAAK6qB,QAAU,EAAI7qB,KAAK6qB,SAEzD,uCA4BUvB,EAAVvpB,UAAAmrB,oCACI,MAAgC,OAAxBlrB,KAAKorB,iBAA6BprB,KAAK2qB,SAAgC3qB,KAAK0rB,aAAxB1rB,KAAK0rB,aAI3DpC,EAAVvpB,UAAAqrB,yBACI,MAAQprB,MAAKgB,MAA2B,OAAnBhB,KAAKgB,KAAKd,MAAkB,MAAQ,OAe3DopB,EAAFvpB,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,IACIA,MAAKkE,cACAU,QAAQ5E,KAAKI,aAAa,GAC1BkB,UAAU,SAAC2U,GACV7W,EAAK0F,YAAcmR,GAAqB,aAAXA,EAC7B7W,EAAKE,mBAAmBqsB,kBAE1B3rB,KAAKgB,OACPhB,KAAKuY,uBAAyBvY,KAAKgB,KAAKC,OAAOK,UAAU,WACvDlC,EAAKE,mBAAmBsB,mBAK9B0oB,EAAFvpB,UAAAgC,YAAE,WACE/B,KAAKkE,cAAce,eAAejF,KAAKI,aACvCJ,KAAKuY,uBAAuB5E,eAG9B2V,EAAFvpB,UAAA6rB,cAAE,WACM5rB,KAAKyE,WAMTzE,KAAK6rB,kBAAoB7rB,KAAK8rB,uBAC9B9rB,KAAK+rB,+BAGPzC,EAAFvpB,UAAAisB,aAAE,SAAa5S,GACX,IAAIpZ,KAAKyE,SAAT,CAIA,GAAMwnB,GAAWjsB,KAAKE,KACtBF,MAAKksB,YAAa,EAClBlsB,KAAKuqB,oBACLvqB,KAAKmsB,0BAA0BnT,EAAGI,EAAMgT,QAASnT,EAAGG,EAAMiT,UAGtDJ,GAAYjsB,KAAKE,QACnBF,KAAKssB,kBACLtsB,KAAKusB,sBAITjD,EAAFvpB,UAAAysB,SAAE,SAASpT,GACP,IAAIpZ,KAAKyE,SAAT,CAMKzE,KAAKksB,YACRlsB,KAAKysB,cAAc,MAIrBrT,EAAM4C,gBAEN,IAAIiQ,GAAWjsB,KAAKE,KACpBF,MAAKmsB,0BAA0BnT,EAAGI,EAAMsT,OAAO1T,EAAGC,EAAGG,EAAMsT,OAAOzT,IAG9DgT,GAAYjsB,KAAKE,OACnBF,KAAKssB,oBAIThD,EAAFvpB,UAAA0sB,cAAE,SAAcrT,GACRpZ,KAAKyE,UAAYzE,KAAKksB,aAK1BlsB,KAAK4rB,gBAEL5rB,KAAKksB,YAAa,EAClBlsB,KAAKuqB,oBACLvqB,KAAK2sB,mBAAqB3sB,KAAKE,MAE3BkZ,IACFpZ,KAAKmsB,0BAA0BnT,EAAGI,EAAMsT,OAAO1T,EAAGC,EAAGG,EAAMsT,OAAOzT,IAClEG,EAAM4C,oBAIVsN,EAAFvpB,UAAA6sB,YAAE,WACE5sB,KAAKksB,YAAa,EAEdlsB,KAAK2sB,oBAAsB3sB,KAAKE,OAAUF,KAAKyE,UACjDzE,KAAKusB,mBAEPvsB,KAAK2sB,mBAAqB,MAG5BrD,EAAFvpB,UAAA8sB,SAAE,WAGE7sB,KAAK6rB,kBAAoB7rB,KAAK8rB,uBAC9B9rB,KAAK+rB,8BAGPzC,EAAFvpB,UAAA+sB,QAAE,WACE9sB,KAAK+sB,aAGPzD,EAAFvpB,UAAAitB,WAAE,SAAW5T,GACT,IAAIpZ,KAAKyE,SAAT,CAEA,GAAIwnB,GAAWjsB,KAAKE,KAEpB,QAAQkZ,EAAMyC,SACZ,IAAKoR,GAAAA,QACHjtB,KAAKktB,WAAW,GAChB,MACF,KAAKC,GAAAA,UACHntB,KAAKktB,YAAY,GACjB,MACF,KAAKjR,GAAAA,IACHjc,KAAKE,MAAQF,KAAK8d,GAClB,MACF,KAAKhC,GAAAA,KACH9b,KAAKE,MAAQF,KAAKyU,GAClB,MACF,KAAK2Y,GAAAA,WAQHptB,KAAKktB,WAAmC,OAAxBltB,KAAKorB,gBAA2B,GAAK,EACrD,MACF,KAAKiC,GAAAA,SACHrtB,KAAKktB,WAAW,EAChB,MACF,KAAKI,GAAAA,YAEHttB,KAAKktB,WAAmC,OAAxBltB,KAAKorB,iBAA4B,EAAI,EACrD,MACF,KAAKmC,GAAAA,WACHvtB,KAAKktB,YAAY,EACjB,MACF,SAGE,OAGAjB,GAAYjsB,KAAKE,QACnBF,KAAKssB,kBACLtsB,KAAKusB,oBAGPvsB,KAAKksB,YAAa,EAClB9S,EAAM4C,mBAGRsN,EAAFvpB,UAAAytB,SAAE,WACExtB,KAAKksB,YAAa,GAIZ5C,EAAVvpB,UAAAmtB,WAAA,SAAqBO,GACjBztB,KAAKE,MAAQF,KAAK0qB,QAAQ1qB,KAAKE,OAAS,GAAKF,KAAK0tB,KAAOD,EAAUztB,KAAKyU,IAAKzU,KAAK8d,MAI5EwL,EAAVvpB,UAAAosB,yBAAA,SAAmCwB,GAC/B,GAAK3tB,KAAK6rB,kBAAV,CAIA,GAAI+B,GAAS5tB,KAAK2qB,SAAW3qB,KAAK6rB,kBAAkBgC,IAAM7tB,KAAK6rB,kBAAkBvW,KAC7EwY,EAAO9tB,KAAK2qB,SAAW3qB,KAAK6rB,kBAAkB5K,OAASjhB,KAAK6rB,kBAAkBtW,MAC9EwY,EAAe/tB,KAAK2qB,SAAWgD,EAAI1U,EAAI0U,EAAI3U,EAG3C6R,EAAU7qB,KAAK0qB,QAAQqD,EAAeH,GAAUE,EAUpD,IARI9tB,KAAKkrB,6BACPL,EAAU,EAAIA,GAOA,IAAZA,EACF7qB,KAAKE,MAAQF,KAAKyU,QACb,IAAgB,IAAZoW,EACT7qB,KAAKE,MAAQF,KAAK8d,QACb,CACL,GAAMkQ,GAAahuB,KAAKiuB,gBAAgBpD,GAIlCqD,EAAe3Z,KAAK4Z,OAAOH,EAAahuB,KAAKyU,KAAOzU,KAAK0tB,MAAQ1tB,KAAK0tB,KAAO1tB,KAAKyU,GAGxFzU,MAAKE,MAAQF,KAAK0qB,OAAOwD,EAAcluB,KAAKyU,IAAKzU,KAAK8d,QAKlDwL,EAAVvpB,UAAAwsB,4BACIvsB,KAAKouB,8BAA8BpuB,KAAKE,OACxCF,KAAKquB,YAAYhV,KAAKrZ,KAAKE,OAC3BF,KAAKiB,OAAOoY,KAAKrZ,KAAKogB,uBAIhBkJ,EAAVvpB,UAAAusB,2BACItsB,KAAKsuB,MAAMjV,KAAKrZ,KAAKogB,uBAIfkJ,EAAVvpB,UAAAgsB,sCACI,GAAK/rB,KAAKuuB,cAAiBvuB,KAAK6rB,kBAIhC,GAAyB,QAArB7rB,KAAKuuB,aAAwB,CAC/B,GAAIC,GAAYxuB,KAAK2qB,SAAW3qB,KAAK6rB,kBAAkB5K,OAASjhB,KAAK6rB,kBAAkBtW,MACnFkZ,EAAgBD,EAAYxuB,KAAK0tB,MAAQ1tB,KAAK8d,IAAM9d,KAAKyU,KACzDia,EAAena,KAAKC,KAnoBG,GAmoB6Bia,GACpDE,EAAgBD,EAAe1uB,KAAK0tB,IACxC1tB,MAAKqrB,qBAAuBsD,EAAgBH,MAE5CxuB,MAAKqrB,qBAAuBrrB,KAAKuuB,aAAevuB,KAAK0tB,MAAQ1tB,KAAK8d,IAAM9d,KAAKyU,MAKzE6U,EAAVvpB,UAAAqgB,mBAAA,SAA6BlgB,OAA7B,KAAAA,IAA6BA,EAAQF,KAAKE,MACtC,IAAIkZ,GAAQ,GAAIwV,GAKhB,OAHAxV,GAAMyV,OAAS7uB,KACfoZ,EAAMlZ,MAAQA,EAEPkZ,GAIDkQ,EAAVvpB,UAAA0pB,qBAAA,SAA+BvpB,GAC3B,QAASA,GAAS,GAAKF,KAAKyU,MAAQzU,KAAK8d,IAAM9d,KAAKyU,MAI9C6U,EAAVvpB,UAAAkuB,gBAAA,SAA0Ba,GACtB,MAAO9uB,MAAKyU,IAAMqa,GAAc9uB,KAAK8d,IAAM9d,KAAKyU,MAI1C6U,EAAVvpB,UAAA2qB,OAAA,SAAiBxqB,EAAeuU,EAASqJ,GACrC,WADJ,KAAArJ,IAAgCA,EAAhC,OAAA,KAAAqJ,IAAyCA,EAAzC,GACWvJ,KAAKuJ,IAAIrJ,EAAKF,KAAKE,IAAIvU,EAAO4d,KAQ/BwL,EAAVvpB,UAAA+rB,gCACI,MAAO9rB,MAAK+uB,eAAiB/uB,KAAK+uB,eAAe5uB,cAAc6uB,wBAA0B,MAOnF1F,EAAVvpB,UAAAwqB,6BACIvqB,KAAKI,YAAYD,cAAc8Z,SAIzBqP,EAAVvpB,UAAA0qB,4BACIzqB,KAAKI,YAAYD,cAAcqqB,QAOjClB,EAAFvpB,UAAAkvB,WAAE,SAAW/uB,GACTF,KAAKE,MAAQA,GAQfopB,EAAFvpB,UAAAmvB,iBAAE,SAAiBC,GACfnvB,KAAKouB,8BAAgCe,GAQvC7F,EAAFvpB,UAAAqvB,kBAAE,SAAkBD,GAChBnvB,KAAK+sB,UAAYoC,GAQnB7F,EAAFvpB,UAAAsvB,iBAAE,SAAiBC,GACftvB,KAAKyE,SAAW6qB,kBA1qBpBhtB,KAACC,EAAAA,UAADC,OAAAC,SAAA,aACEC,SAAU,YACV0H,WAAFmlB,IACEzsB,MACF0sB,UAAA,aACMC,SAAN,YACIC,cAAJ,uBACIC,YAAJ,qBACIC,UAAJ,aACIjL,eAAJ,kBACIkL,UAAW,mBACXC,aAAc,gBACdC,eAAJ,wBACIhtB,MAAJ,aACIgH,KAAJ,SACIimB,aAAJ,WACI1qB,uBAAJ,WACI2qB,uBAAwB,MACxBC,uBAAwB,MACxBC,uBAAwB,QACxBC,0BAAJ,uCACIC,8BAA+B,WAC/BC,+BAAJ,eACIC,gCAAJ,YACIC,mCAAJ,cACIC,6BAAJ,aACIC,yCAAJ,aACIC,8BAAJ,WACIC,+BAAJ,cACIC,oCAAJ,sDACIC,kCAAJ,uCAEAluB,SAAA,ipBACAC,QAAA,4uPACEF,QAAF,WAAA,QAAA,YACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAA2CC,yFApH3Cf,KAAEiB,EAAAA,oBAlBFjB,KAAQwc,EAAAA,eAAR3Z,aAAA7C,KAAAsD,EAAAA,aAgBAtD,KAAEyD,OAAFZ,aAAA7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAfAF,KAAQyD,OAARZ,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAuuB,EAAAA,4BA0cAzH,EAAA7lB,6DA9TAgR,MAAAnS,KAAAoB,EAAAA,QAQAgqB,OAAAprB,KAAAoB,EAAAA,QAYAqnB,aAAAzoB,KAAAoB,EAAAA,QAiBA6qB,eAAAjsB,KAAAoB,EAAAA,QAeAxD,QAAAoC,KAAAoB,EAAAA,QASA4mB,cAAAhoB,KAAAoB,EAAAA,QAcAinB,WAAAroB,KAAAoB,EAAAA,QAgCAzC,SAAAqB,KAAAsX,EAAAA,SAGA0U,QAAAhsB,KAAAsX,EAAAA,SAQAyU,cAAA/rB,KAAAsX,EAAAA,SAGAmV,iBAAAzsB,KAAAmU,EAAAA,UAAAjU,MAAA,oBAgLA8mB,mCC9bA,sBAeAhnB,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,aAAcC,IACxBK,SAAU4iB,GAAWjjB,IACrBU,cAAeuiB,IACflf,YAAaC,QAAS2mB,EAAAA,sBAAuBC,SAAUC,SAnBzDC,KCsBAC,GAAA,WA4BE,QAAFA,GAAcC,EACQC,GADpB,GAAFlyB,GAAAY,IACsBA,MAAtBsxB,YAAsBA,EAlBtBtxB,KAAAuxB,gBAAqC,GAAI9xB,GAAAA,QAGzCO,KAAAwxB,aAAkC,GAAI/xB,GAAAA,QAGtCO,KAAAyxB,UAA+B,GAAIhyB,GAAAA,QASnCO,KAAA0xB,oBAA+B,EAI3B1xB,KAAKqxB,kBAAoBA,EAEzBrxB,KAAK2xB,WAAWrwB,UAAU,WAAM,MAAAlC,GAAKwyB,YACrCP,EAAkBQ,QAAQvwB,UAAU,WAAM,MAAAlC,GAAK0yB,mBAvDnD,MA2DEV,GAAFrxB,UAAA6xB,QAAE,WACO5xB,KAAKuxB,gBAAgBQ,QACxB/xB,KAAKqxB,kBAAkBW,OAEzBC,aAAajyB,KAAKkyB,qBAIpBd,EAAFrxB,UAAAoyB,kBAAE,WACOnyB,KAAKyxB,UAAUM,SAClB/xB,KAAK0xB,oBAAqB,EAC1B1xB,KAAKyxB,UAAUzvB,OACfhC,KAAKyxB,UAAUxvB,aAUnBmvB,EAAFrxB,UAAAqyB,gBAAE,WACEpyB,KAAKmyB,qBAIPf,EAAFrxB,UAAAsyB,cAAE,SAAcC,GAAd,GAAFlzB,GAAAY,IACIA,MAAKkyB,mBAAqBK,WAAW,WAAM,MAAAnzB,GAAKwyB,WAAWU,IAI7DlB,EAAFrxB,UAAAyyB,MAAE,WACOxyB,KAAKwxB,aAAaO,SACrB/xB,KAAKwxB,aAAaxvB,OAClBhC,KAAKwxB,aAAavvB,aAKdmvB,EAAVrxB,UAAA+xB,0BACI9xB,KAAKsxB,YAAYmB,UAEZzyB,KAAKyxB,UAAUM,QAClB/xB,KAAKyxB,UAAUxvB,WAGjBjC,KAAKuxB,gBAAgBvvB,MAAM0wB,kBAAmB1yB,KAAK0xB,qBACnD1xB,KAAKuxB,gBAAgBtvB,WACrBjC,KAAK0xB,oBAAqB,GAI5BN,EAAFrxB,UAAA4yB,eAAE,WACE,MAAO3yB,MAAKuxB,gBAAgBqB,gBAI9BxB,EAAFrxB,UAAA8yB,YAAE,WACE,MAAO7yB,MAAKqxB,kBAAkByB,UAIhC1B,EAAFrxB,UAAA4xB,SAAE,WACE,MAAO3xB,MAAKyxB,UAAUmB,gBA3H1BxB,KCaa2B,GAAqB,GAAIpe,GAAAA,eAAoB,mBAW1Dqe,GAAA,wBAEEhzB,KAAFizB,WAAoC,YAMlCjzB,KAAFkzB,oBAAiC,GAM/BlzB,KAAFsyB,SAAsB,EASpBtyB,KAAF2K,KAAoB,KAGlB3K,KAAFmzB,mBAAuD,SAGrDnzB,KAAFozB,iBAAmD,SArDnD,MAAAJ,oBCgCE,QAAFK,GACWC,EACqB3oB,GADrB3K,KAAXszB,YAAWA,EAEPtzB,KAAK2K,KAAOA,EADhB,MAKE0oB,GAAFtzB,UAAAwzB,OAAE,WACEvzB,KAAKszB,YAAYnB,qBAInBtyB,OAAFC,eAAMuzB,EAANtzB,UAAA,iBAAE,WACE,QAASC,KAAK2K,KAAK4oB,uDA5BvBjxB,KAACC,EAAAA,UAADC,OAAAC,SAAA,mBACEG,SAAU,8JACVC,QAAF,yUACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,+HAWAswB,KCdaG,IAIXC,cAAe3c,EAAAA,QAAQ,SACrBC,EAAAA,MAAM,eAAgB7B,EAAAA,OACpB8B,UAAW,aACXiL,QAAS,KAEXlL,EAAAA,MAAM,UAAW7B,EAAAA,OACf8B,UAAW,WACXiL,QAAS,KAEX/K,EAAAA,WAAW,eAAgBC,EAAAA,QAAQ,qCACnCD,EAAAA,WAAW,yBAA0BC,EAAAA,QAAQ,oCAAqCjC,EAAAA,OAChF+M,QAAS,wBCoCb,QAAFyR,GACYr0B,EACAe,EACAd,EAEDq0B,GALT,GAAFv0B,GAOIQ,EAPJoE,KAAAhE,OAAAA,WACYZ,GAAZC,QAAYA,EACAD,EAAZgB,YAAYA,EACAhB,EAAZE,mBAAYA,EAEDF,EAAXu0B,eAAWA,EAtBXv0B,EAAAsb,YAAuB,EAMrBtb,EAAFyyB,QAAmC,GAAIpyB,GAAAA,QAGrCL,EAAF0zB,SAAoC,GAAIrzB,GAAAA,QAGtCL,EAAFw0B,gBAAoB,OAgBkB,cAA9BD,EAAeV,YAA+BU,EAAeT,oBAExB,QAA9BS,EAAeV,WACxB7zB,EAAKy0B,MAAQ,KAEbz0B,EAAKy0B,MAAQ,SAJbz0B,EAAKy0B,MAAQ,UA1BnB,MAL0Cn0B,GAA1Cg0B,EAAA9zB,GAwCE8zB,EAAF3zB,UAAA+zB,sBAAE,SAAyBC,GAGvB,MAFA/zB,MAAKg0B,qBACLh0B,KAAKi0B,wBACEj0B,KAAKk0B,cAAcJ,sBAAsBC,IAIlDL,EAAF3zB,UAAAo0B,qBAAE,SAAwBJ,GAGtB,MAFA/zB,MAAKg0B,qBACLh0B,KAAKi0B,wBACEj0B,KAAKk0B,cAAcC,qBAAqBJ,IAIjDL,EAAF3zB,UAAAq0B,eAAE,SAAehb,GACN,GAAAF,GAAXE,EAAAF,UAAsBC,EAAtBC,EAAAD,OAMI,KAJiB,SAAZA,GAAoC,SAAdD,GAAqC,WAAZC,IAClDnZ,KAAKq0B,gBAGS,YAAZlb,EAAuB,CAGzB,GAAMmb,GAAUt0B,KAAK8yB,QAErB9yB,MAAKX,QAAQ4d,IAAI,WACfqX,EAAQtyB,OACRsyB,EAAQryB,eAMdyxB,EAAF3zB,UAAAw0B,MAAE,WACOv0B,KAAK0a,aACR1a,KAAK4zB,gBAAkB,UACvB5zB,KAAKV,mBAAmBqsB,kBAK5B+H,EAAF3zB,UAAAiyB,KAAE,WAKE,MADAhyB,MAAK4zB,gBAAkB,SAChB5zB,KAAK6xB,SAId6B,EAAF3zB,UAAAgC,YAAE,WACE/B,KAAK0a,YAAa,EAClB1a,KAAKq0B,iBAOCX,EAAV3zB,UAAAs0B,mCACIr0B,MAAKX,QAAQm1B,iBAAiB5B,eAAexxB,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,WACnElC,EAAKyyB,QAAQ7vB,OACb5C,EAAKyyB,QAAQ5vB,cAKTyxB,EAAV3zB,UAAAk0B,iCACI,GAAMvzB,GAAuBV,KAAKI,YAAYD,cACxCs0B,EAAez0B,KAAK2zB,eAAee,UAErCD,KACEnsB,MAAMkE,QAAQioB,GAEhBA,EAAa7nB,QAAQ,SAAA+nB,GAAY,MAAAj0B,GAAQL,UAAUG,IAAIm0B,KAEvDj0B,EAAQL,UAAUG,IAAIi0B,IAIqB,WAA3Cz0B,KAAK2zB,eAAeR,oBACtBzyB,EAAQL,UAAUG,IAAI,wBAGqB,QAAzCR,KAAK2zB,eAAeP,kBACtB1yB,EAAQL,UAAUG,IAAI,sBAKlBkzB,EAAV3zB,UAAAi0B,8BACI,GAAIh0B,KAAKk0B,cAAcpc,cACrB,KAAM8c,OAAM,4FApJlBtyB,KAACC,EAAAA,UAADC,OAAAC,SAAA,sBACEG,SAAU,8CACVC,QAAF,mZACEM,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACEyW,YAAF6Z,GAAAC,eACE3wB,MACFqH,cAAA,QACMpH,MAAN,0BACI8xB,WAAJ,kBACIC,gBAAJ,sGAzBAxyB,KAAEiB,EAAAA,oBAFFjB,KAAE0wB,MAUFU,EAAAjwB,6EA2BAiwB,mDCzDA,sBAkBApxB,KAAC4D,EAAAA,SAAD1D,OACE2D,SACE4uB,EAAAA,cACAzuB,EAAAA,aACAF,EAAAA,aACAsiB,GACAriB,IAEFK,SAAUgtB,GAAsBrtB,IAChCU,cAAe2sB,GAAsBL,IACrC2B,iBAAkBtB,GAAsBL,QA5B1C4B,KCiCaC,GACT,GAAIvgB,GAAAA,eAAkC,iCACpCC,WAAY,OACZC,QAASsgB,mBAkCb,QAAFC,GACcC,EACAC,EACAC,EACAC,EACwBC,EACeC,GALvC11B,KAAdq1B,SAAcA,EACAr1B,KAAds1B,MAAcA,EACAt1B,KAAdu1B,UAAcA,EACAv1B,KAAdw1B,oBAAcA,EACwBx1B,KAAtCy1B,gBAAsCA,EACez1B,KAArD01B,eAAqDA,EAtBrD11B,KAAA21B,wBAAgE,KAtDhE,MAyDE91B,QAAFC,eAAMs1B,EAANr1B,UAAA,0BAAE,WACE,GAAM61B,GAAS51B,KAAKy1B,eACpB,OAAOG,GAASA,EAAOC,mBAAqB71B,KAAK21B,6BAGnD,SAAuBz1B,GACjBF,KAAKy1B,gBACPz1B,KAAKy1B,gBAAgBI,mBAAqB31B,EAE1CF,KAAK21B,wBAA0Bz1B,mCAmBnCk1B,EAAFr1B,UAAA+1B,kBAAE,SAAqBC,EAA6BC,GAEhD,MAAOh2B,MAAKi2B,QAAQF,EAAWC,IAUjCZ,EAAFr1B,UAAAm2B,iBAAE,SAAiBtzB,EAA4BozB,GAE3C,MAAOh2B,MAAKi2B,QAAQrzB,EAAUozB,IAShCZ,EAAFr1B,UAAAo2B,KAAE,SAAKC,EAAiB7C,EAAqByC,OAA7C,KAAAzC,IAAwBA,EAAxB,GAEI,IAAM8C,GAAVC,MAAwBt2B,KAAK01B,eAAmBM,EAU5C,OANAK,GAAQ1rB,MAAQyrB,QAApBA,EAA6B7C,OAA7BA,GAES8C,EAAQnD,sBACXmD,EAAQnD,oBAAsBkD,GAGzBp2B,KAAK81B,kBAAkBzC,GAAgBgD,IAMhDjB,EAAFr1B,UAAA6xB,QAAE,WACM5xB,KAAK61B,oBACP71B,KAAK61B,mBAAmBjE,WAI5BwD,EAAFr1B,UAAAgC,YAAE,WAEM/B,KAAK21B,yBACP31B,KAAK21B,wBAAwB/D,WAOzBwD,EAAVr1B,UAAAw2B,yBAAA,SAAmCC,EACAR,GAE/B,GAAMS,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,SAC5EA,EAAW,GAAIC,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAW,GAAIqB,WACrE5D,GAAmBgD,MAGhBa,EACF,GAAIC,GAAAA,gBAAgBpD,GAAsBsC,EAAO3e,iBAAkBqf,GACjEK,EAAmDP,EAAWze,OAAO8e,EAE3E,OADAE,GAAaC,SAASrD,eAAiBqC,EAChCe,EAAaC,UAMd5B,EAAVr1B,UAAAk2B,QAAA,SAAqBgB,EAA4CC,GAG7D,GAAMlB,GAAVM,MAAuB,GAAItD,IAAwBhzB,KAAK01B,eAAmBwB,GACjEV,EAAax2B,KAAKm3B,eAAenB,GACjCoB,EAAYp3B,KAAKu2B,yBAAyBC,EAAYR,GACtD1C,EAAc,GAAIlC,IAAyCgG,EAAWZ,EAE5E,IAAIS,YAAmBzhB,GAAAA,YAAa,CAClC,GAAMue,GAAS,GAAIzd,GAAAA,eAAe2gB,EAAO,MACvCI,UAAWrB,EAAOrrB,KAClB2oB,YAARA,GAGMA,GAAY0D,SAAWI,EAAUjD,qBAAqBJ,OACjD,CACL,GAAM2C,GAAW12B,KAAKs3B,gBAAgBtB,EAAQ1C,GACxCS,EAAS,GAAI+C,GAAAA,gBAAgBG,MAAStxB,GAAW+wB,GACjDa,EAAaH,EAAUtD,sBAAyBC,EAGtDT,GAAY0D,SAAWO,EAAWP,SAkBpC,MAZAh3B,MAAKw1B,oBAAoBgC,QAAQC,EAAAA,YAAYC,SAASt2B,KACpDC,EAAAA,UAAUm1B,EAAWmB,cAAcv2B,KAAKsL,EAAAA,KAAK,MAC7CpL,UAAU,SAAAyV,GACNA,EAAM6gB,QACRpB,EAAWqB,eAAex3B,UAAUG,IAAI,yBAExCg2B,EAAWqB,eAAex3B,UAAUC,OAAO,2BAI/CN,KAAK83B,iBAAiBxE,EAAa0C,GACnCh2B,KAAK61B,mBAAqBvC,EACnBtzB,KAAK61B,oBAINT,EAAVr1B,UAAA+3B,iBAAA,SAA2BxE,EAAkC0C,aAEzD1C,GAAYX,iBAAiBrxB,UAAU,WAEjClC,EAAKy2B,oBAAsBvC,IAC7Bl0B,EAAKy2B,mBAAqB,MAGxBG,EAAO9C,qBACT9zB,EAAKk2B,MAAMyC,UAIX/3B,KAAK61B,oBAGP71B,KAAK61B,mBAAmBlD,iBAAiBrxB,UAAU,WACjDgyB,EAAYjC,kBAAkBkD,UAEhCv0B,KAAK61B,mBAAmBjE,WAGxB0B,EAAYjC,kBAAkBkD,QAI5ByB,EAAO1D,UAAY0D,EAAO1D,SAAW,GACvCgB,EAAYT,cAAcvxB,UAAU,WAAM,MAAAgyB,GAAYjB,cAAc2D,EAAe,YAGjFA,EAAO9C,qBACTlzB,KAAKs1B,MAAM0C,SAAShC,EAAO9C,oBAAqB8C,EAAO/C,aAQnDmC,EAAVr1B,UAAAo3B,eAAA,SAAyBnB,GACrB,GAAMiC,GAAgB,GAAIC,GAAAA,aAC1BD,GAActmB,UAAYqkB,EAAOrkB,SAEjC,IAAIwmB,GAAmBn4B,KAAKq1B,SAASrf,WAAWoiB,SAE1CC,EAA6B,QAArBrC,EAAOrkB,UACf2mB,EAC0B,SAA9BtC,EAAO7C,oBACwB,UAA9B6C,EAAO7C,qBAAmCkF,GACZ,QAA9BrC,EAAO7C,oBAAgCkF,EACpCE,GAAWD,GAAwC,WAA9BtC,EAAO7C,kBAgBlC,OAfImF,GACFH,EAAiB7iB,KAAK,KACbijB,EACTJ,EAAiBK,MAAM,KAEvBL,EAAiBM,qBAGa,QAA5BzC,EAAO5C,iBACT+E,EAAiBtK,IAAI,KAErBsK,EAAiBO,OAAO,KAG1BT,EAAcE,iBAAmBA,EAC1Bn4B,KAAKq1B,SAASsD,OAAOV,IAQtB7C,EAAVr1B,UAAAu3B,gBACA,SAAMtB,EACA1C,GAEF,GAAMmD,GAAeT,GAAUA,EAAO3e,kBAAoB2e,EAAO3e,iBAAiBqf,QAElF,OAAO,IAAIC,GAAAA,eAAeF,GAAgBz2B,KAAKu1B,UAAW,GAAIqB,WAC3DxF,GAAgBkC,IAChBP,GAAoBiD,EAAOrrB,yBA9OlCrI,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAYqgB,2CArCzB3yB,KAAQs2B,EAAAA,UAFRt2B,KAAQu2B,EAAAA,gBAURv2B,KAAEw2B,EAAAA,WATFx2B,KAAQy2B,EAAAA,qBAkERz2B,KAAuD8yB,EAAvDjwB,aAAA7C,KAAOsD,EAAAA,WAAPtD,KAAmBwgB,EAAAA,aAjDnBxgB,KAA4B0wB,GAA5B7tB,aAAA7C,KAkDOuD,EAAAA,OAlDPrD,MAkDc0yB,uOA5EdE,KC0DA4D,GAAA,yBA1DA,MAAAA,MA2DaC,GACTC,EAAiBn1B,EAAci1B,qFAWjC55B,GAAF+5B,UAAc,GAAIC,KAGhBh6B,EAAF2W,cAA2B,GAAItW,GAAAA,QAS7BL,EAAFqlB,MAAiD,MAWjDrlB,EAAAi6B,WAAsC,GAYpCj6B,EAAF0T,WAAqE,GAAI4F,GAAAA,eA1GzE,MAoE6BhZ,GAA7BwlB,EAAAtlB,GAkBEC,OAAFC,eACMolB,EADNnlB,UAAA,iBAAE,WACiC,MAAOC,MAAKq5B,gBAC7C,SAAc1nB,GACZ,GAAI3J,EAAAA,aAAe2J,GAA2B,QAAdA,GAAqC,SAAdA,EACrD,KAAM2nB,IAA6B3nB,EAErC3R,MAAKq5B,WAAa1nB,mCAQpB9R,OAAFC,eACMolB,EADNnlB,UAAA,oBAAE,WAC8B,MAAOC,MAAK+jB,mBAC1C,SAAiBlG,GAAc7d,KAAK+jB,cAAgB/D,EAAAA,sBAAsBnC,oCAU1EqH,EAAFnlB,UAAAkkB,SAAE,SAASsV,GACP,IAAKA,EAAS9W,GACZ,KAAM+W,KAGR,IAAIx5B,KAAKm5B,UAAUM,IAAIF,EAAS9W,IAC9B,KAAMiX,IAAgCH,EAAS9W,GAEjDziB,MAAKm5B,UAAUQ,IAAIJ,EAAS9W,GAAI8W,IAOlCrU,EAAFnlB,UAAAmkB,WAAE,SAAWqV,GACTv5B,KAAKm5B,UAAUS,OAAOL,EAAS9W,KAIjCyC,EAAFnlB,UAAA2R,KAAE,SAAK6nB,GACCv5B,KAAK6B,QAAU03B,EAAS9W,IAC1BziB,KAAK6B,OAAS03B,EAAS9W,GACvBziB,KAAK2R,UAAY4nB,EAAS9U,MAAQ8U,EAAS9U,MAAQzkB,KAAKykB,OAExDzkB,KAAK2R,UAAY3R,KAAK65B,qBAAqBN,GAG7Cv5B,KAAK8S,WAAWuG,MAAMxX,OAAQ7B,KAAK6B,OAAQ8P,UAAW3R,KAAK2R,aAI7DuT,EAAFnlB,UAAA85B,qBAAE,SAAqBN,GACnB,IAAKA,EAAY,MAAO,EAGxB,IAAMpU,GAAwC,MAAzBoU,EAASpU,aAAuBoU,EAASpU,aAAenlB,KAAKmlB,aAC9E2U,EAAqBC,GAAsBR,EAAS9U,OAASzkB,KAAKykB,MAAOU,GAGzE6U,EAAqBF,EAAmBrnB,QAAQzS,KAAK2R,WAAa,CAEtE,OADIqoB,IAAsBF,EAAmBzxB,SAAU2xB,EAAqB,GACrEF,EAAmBE,IAG5B9U,EAAFnlB,UAAAsW,SAAE,WACErW,KAAKi6B,oBAGP/U,EAAFnlB,UAAAoW,YAAE,WACEnW,KAAK+V,cAAc/T,QAGrBkjB,EAAFnlB,UAAAgC,YAAE,WACE/B,KAAK+V,cAAc9T,2BAvGvBK,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,YACVC,SAAU,UACVC,QAAS,mDAWXd,SAAAS,KAAGoB,EAAAA,MAAHlB,MAAS,mBAMTiiB,QAAAniB,KAAGoB,EAAAA,MAAHlB,MAAS,kBAGTmP,YAAArP,KAAGoB,EAAAA,MAAHlB,MAAS,sBAcT2iB,eAAA7iB,KAAGoB,EAAAA,MAAHlB,MAAS,yBAMTsQ,aAAAxQ,KAAGsX,EAAAA,OAAHpX,MAAU,oBA1GV0iB,GAoE6B+T,ItBlDvBpX,GAA4BqY,GAAmBC,SAAW,IAC9BC,GAAgBC,eAMrCrV,IASXC,UAAWnO,EAAAA,QAAQ,aACjBC,EAAAA,MAAM,kBAAmB7B,EAAAA,OAAO8B,UAAW;+BAE3CD,EAAAA,MAAM,oBAAqB7B,EAAAA,OAAO8B,UAAW,sBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0K,OAInDC,YAAahL,EAAAA,QAAQ,eACnBC,EAAAA,MAAM,kBAAmB7B,EAAAA,OAAO8B,UAAW,oBAC3CD,EAAAA,MAAM,oBAAqB7B,EAAAA,OAAO8B,UAAW,mBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0K,OAInDE,aAAcjL,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,kBAAmB7B,EAAAA,OAAO8B,UAAW,mBAC3CD,EAAAA,MAAM,oBAAqB7B,EAAAA,OAAO8B,UAAW,oBAC7CE,EAAAA,WAAW,6BAA8BC,EAAAA,QAAQ0K,OAInDG,aAAclL,EAAAA,QAAQ,gBACpBC,EAAAA,MAAM,wCAAyC7B,EAAAA,OAAO+M,QAAS,KAC/DlL,EAAAA,MAAM,kCAAmC7B,EAAAA,OAAO+M,QAAS,OACzDlL,EAAAA,MAAM,4EACF7B,EAAAA,OAAO+M,QAAS,KAEpB/K,EAAAA,WAAW,yDAA0DC,EAAAA,QAAQ,QAC7ED,EAAAA,WAAW,UAAWC,EAAAA,QAAQ0K,OAUhCK,cAAepL,EAAAA,QAAQ,iBAErBI,EAAAA,WAAW,yCACPC,EAAAA,QAAQ0K,GAA2BM,EAAAA,WACjCjN,EAAAA,OAAO8B,UAAW,qBAClB9B,EAAAA,OAAO8B,UAAW,sBAGxBE,EAAAA,WAAW,yCACPC,EAAAA,QAAQ0K,GAA2BM,EAAAA,WACjCjN,EAAAA,OAAO8B,UAAW,kBAClB9B,EAAAA,OAAO8B,UAAW,wBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQ0K,GAA2BM,EAAAA,WACjCjN,EAAAA,OAAO8B,UAAW,oBAClB9B,EAAAA,OAAO8B,UAAW,sBAGxBE,EAAAA,WAAW,uCACPC,EAAAA,QAAQ0K,GAA2BM,EAAAA,WACjCjN,EAAAA,OAAO8B,UAAW,kBAClB9B,EAAAA,OAAO8B,UAAW,yBAExBD,EAAAA,MAAM,yEACF7B,EAAAA,OAAO8B,UAAW,mBACtBD,EAAAA,MAAM,qCACF7B,EAAAA,OAAO8B,UAAW,sBACtBD,EAAAA,MAAM,kCACF7B,EAAAA,OAAO8B,UAAW,uBAIxBoL,cAAetL,EAAAA,QAAQ,iBACrBI,EAAAA,WAAW,WACTmL,EAAAA,MAAM,KAAMC,EAAAA,gBAAiBC,UAAU,oCCxF3CviB,KAAFoI,QAAoC,GAAI3I,GAAAA,QAGtCO,KAAFwiB,gBAAoB,SAACC,GACjB,MAAO,sBAAsBA,GAzBjC,sBAeAngB,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,8GAfzB+N,KAkCaC,IAEXvY,QAASsY,GACTE,OAAQ,GAAIjd,GAAAA,SAAY,GAAIkd,GAAAA,SAAYH,KACxCI,WAAYC,ICPdC,GAAA,yBA/BA,MAAAA,MAgCaC,GACTnf,EAAckf,mBAyGhB,QAAFE,GAAqBC,EACP9K,EACmB3F,EAER0Q,GAJvB,GAAFjkB,GASIQ,EAAJoE,KAAAhE,OAAAA,IAEI,IAXiBZ,EAArBgkB,MAAqBA,EAEYhkB,EAAjCuT,MAAiCA,EAERvT,EAAzBikB,WAAyBA,EAvCvBjkB,EAAFkkB,oBAAgC,EAU9BlkB,EAAFmkB,gBAAmC,GAKjCnkB,EAAFokB,4BAA+B,EAS7BpkB,EAAF8iB,cAA+C,SAsBtCvP,EACH,KAAM8Q,YAGRrkB,GAAKskB,sBAAwBviB,EAAAA,MAAMwR,EAAMG,WAAYH,EAAMoD,cAAeqN,EAAMhb,SAC3E9G,UAAU,WACLlC,EAAKukB,aACPvkB,EAAKwkB,yBAIFxkB,EAAKukB,aAAevkB,EAAKykB,YAA0C,WAA5BzkB,EAAKykB,WAAW1K,UAC1D/Z,EAAKokB,4BAA6B,EAClCpkB,EAAK0kB,8BAA8B5K,UAAW,SAAUC,QAAS/Z,EAAKmkB,mBAGxEjL,EAAkB1X,mBAhC5B,MAtCmClB,GAAnCyjB,EAAAvjB,GAsCEC,OAAFC,eACMqjB,EADNpjB,UAAA,oBAAE,WAC8B,MAAOC,MAAK+jB,mBAC1C,SAAiBlG,GAAK7d,KAAK+jB,cAAgB/D,EAAAA,sBAAsBnC,oCAkCjEsF,EAAFpjB,UAAAsW,SAAE,YACOrW,KAAKyiB,IAAMziB,KAAKqjB,aACnBrjB,KAAKyiB,GAAKziB,KAAKqjB,WAAWW,MAI5BhkB,KAAK4jB,wBACL5jB,KAAK8jB,8BACA3K,QAASnZ,KAAK2jB,YAAc,SAAW3jB,KAAKujB,kBAEjDvjB,KAAK2S,MAAMsR,SAASjkB,OAGtBmjB,EAAFpjB,UAAAgC,YAAE,WACE/B,KAAK2S,MAAMuR,WAAWlkB,MACtBA,KAAK0jB,sBAAsB/P,eAO7BwP,EAAFpjB,UAAAokB,yBAAE,SAAyBC,GAEnBpkB,KAAKqkB,eAAiBD,IAE1BpkB,KAAKsjB,mBAAqBc,EAErBpkB,KAAK2jB,cACR3jB,KAAK4jB,wBACD5jB,KAAKsjB,mBACPtjB,KAAK8jB,8BAA8B5K,UAAWlZ,KAAKujB,gBAAiBpK,QAAS,SAE7EnZ,KAAK8jB,8BAA8B5K,UAAW,OAAQC,QAASnZ,KAAKujB,qBAU1EJ,EAAFpjB,UAAA+jB,6BAAE,SAA6BQ,GAC3BtkB,KAAK6jB,WAAaS,EAIdtkB,KAAKwjB,6BACPxjB,KAAK6jB,YAAc1K,QAASmL,EAAUnL,WAK1CgK,EAAFpjB,UAAAqhB,aAAE,WACE,IAAIphB,KAAKqkB,cAAT,CAEArkB,KAAK2S,MAAMjB,KAAK1R,MAGgB,SAA5BA,KAAK6jB,WAAW1K,SAAkD,WAA5BnZ,KAAK6jB,WAAW1K,UACxDnZ,KAAKwjB,4BAA6B,EAKpC,IAAMc,GAAsCtkB,KAAK2jB,aAC5CzK,UAAWlZ,KAAKujB,gBAAiBpK,QAAS,WAC1CD,UAAW,SAAUC,QAASnZ,KAAKujB,gBACxCvjB,MAAK8jB,6BAA6BQ,GAElCtkB,KAAKsjB,oBAAqB,IAI5BH,EAAFpjB,UAAA4jB,UAAE,WACE,MAAO3jB,MAAK2S,MAAM9Q,QAAU7B,KAAKyiB,KACH,QAAzBziB,KAAK2S,MAAMhB,WAAgD,SAAzB3R,KAAK2S,MAAMhB,YAIpDwR,EAAFpjB,UAAAwkB,wBAAE,WACE,OAAUvkB,KAAK2jB,YAAc,UAAY,IAAK3jB,KAAKujB,iBAIrDJ,EAAFpjB,UAAAykB,mBAAE,WACE,GAAMtL,GAAYlZ,KAAK6jB,WAAW3K,SAClC,QAAQA,EAAeA,EAA3B,OAA6C,IAAMlZ,KAAK6jB,WAAW1K,SAajEgK,EAAFpjB,UAAA6jB,sBAAE,WACE5jB,KAAKujB,gBAAkBvjB,KAAK2jB,YACxB3jB,KAAK2S,MAAMhB,UACV3R,KAAKykB,OAASzkB,KAAK2S,MAAM8R,OAGhCtB,EAAFpjB,UAAAskB,YAAE,WACE,MAAOrkB,MAAK2S,MAAMlO,UAAYzE,KAAKyE,UASrC0e,EAAFpjB,UAAA2kB,sBAAE,WACE,MAAK1kB,MAAK2jB,YAEqB,OAAxB3jB,KAAK2S,MAAMhB,UAAqB,YAAc,aAFrB,qBA1NpCrP,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,gBACVE,SAAU,qiCACVC,QAAF,6nDACEC,MACF0I,UAAA,iBACMmZ,eAAN,iCACIC,cAAJ,iCACIC,eAAgB,kCAChBC,mBAAJ,0BACIC,mCAAJ,iBAEA/hB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,OACEV,QAAF,YACEgX,YACFqL,GAAAC,UACAD,GAAAlD,YACIkD,GAAkBjD,aAClBiD,GAAkBhD,aAClBgD,GAAkB9C,cAClB8C,GAAkB5C,4FAhEtB9f,KAAQ4iB,GAAR/f,aAAA7C,KAAAsD,EAAAA,aAfAtD,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAA,gCAAAF,KAAAsD,EAAAA,cAkIAud,EAAA1f,4FAjBAghB,QAAAniB,KAAAoB,EAAAA,QAGAyhB,eAAA7iB,KAAAoB,EAAAA,SAMAyf,mCCrIA,sBAeA7gB,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUC,EAAAA,cACVM,SAAUwe,GAAS/B,IACnBpc,cAAeme,GAAS/B,IACxB/Y,WAAYwY,QAnBdwC,gFCAA,MAckC1lB,GAAlC2lB,EAAAzlB,kBAHA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,qBAZZ4iB,GAckCC,EAAAA,yCCKhCtlB,KAAFoI,QAAoC,GAAI3I,GAAAA,QAGtCO,KAAFulB,cAA0B,WAtB1B,sBAaAjjB,KAACogB,EAAAA,WAADlgB,OAAaoS,WAAY,8GAbzB4Q,KAgCaC,IACXpb,QAASmb,GACT3C,OAAQ,GAAIjd,GAAAA,SAAY,GAAIkd,GAAAA,SAAY0C,KACxCzC,WAAY2C,mBC8BZ,QAAFC,GACWvC,EACClf,EACR9D,EACAkY,GAJF,GAAFlZ,GAKIQ,EALJoE,KAAAhE,KAKUI,IALVJ,WACWZ,GAAXgkB,MAAWA,EACChkB,EAAZ8E,cAAYA,EAIRA,EAAcU,QAAQxE,GAAa,GACnChB,EAAKwmB,kBAAoBxC,EAAMhb,QAAQ9G,UAAU,WAAM,MAAAgX,GAAkB1X,mBAT7E,MAzBmClB,GAAnCimB,EAAA/lB,GAqCE+lB,EAAF5lB,UAAAgC,YAAE,WACE/B,KAAK4lB,kBAAkBjS,cACvB3T,KAAKkE,cAAce,eAAejF,KAAKI,cAIzCulB,EAAF5lB,UAAA8lB,aAAE,WACE,MAAO7lB,MAAK8lB,gBAAiBT,IAAe,KAAOrlB,KAAK8lB,OAI1DH,EAAF5lB,UAAAgmB,eAAE,WACE,MAAO/lB,MAAK8lB,gBAAiBT,IAAerlB,KAAK8lB,MAAQ,MAI3DH,EAAF5lB,UAAAimB,gBAAE,WACE,MAAOhmB,MAAKI,YAAYD,eAI1BwlB,EAAF5lB,UAAAkmB,gBAAE,WACE,OACEnZ,MAAO9M,KAAK8M,MACZjL,OAAQ7B,KAAK6B,OACb0gB,SAAUviB,KAAKuiB,0BA1ErBjgB,KAACC,EAAAA,UAADC,OAAAC,SAAA,kBACEG,SAAU,krEACVC,QAAF,40BACEC,MACFC,MAAA,kBACMgH,KAAN,OAEA/G,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,+EAbAf,KAAQiI,EAAAA,aAbRjI,KAAQiB,EAAAA,qBAGRoiB,EAAAliB,8DA+BAyiB,eAAA5jB,KAAAoB,EAAAA,QAGAyiB,gBAAA7jB,KAAAoB,EAAAA,QAGAoJ,QAAAxK,KAAAoB,EAAAA,QAGA0iB,WAAA9jB,KAAAoB,EAAAA,QAGA7B,SAAAS,KAAAoB,EAAAA,QAGA6e,WAAAjgB,KAAGoB,EAAAA,SAMHiiB,oBC3CaU,IAKXC,yBAA0BxP,EAAAA,QAAQ,kBAChCC,EAAAA,MAAM,WAAY7B,EAAAA,OAAO8B,UAAW,2BAA4B7B,WAAY,YAC5E4B,EAAAA,MAAM,UAAW7B,EAAAA,OAAO8B,UAAW,OAAQ7B,WAAY,aACvD4B,EAAAA,MAAM,OAAQ7B,EAAAA,OAAO8B,UAAW,0BAA2B7B,WAAY,YACvE+B,EAAAA,WAAW,SAAUC,EAAAA,QAAQ,2CAI/BoP,uBAAwBzP,EAAAA,QAAQ,kBAC9BC,EAAAA,MAAM,WAAY7B,EAAAA,OAAO+L,OAAQ,MAAO9L,WAAY,YACpD4B,EAAAA,MAAM,OAAQ7B,EAAAA,OAAO+L,OAAQ,MAAO9L,WAAY,YAChD4B,EAAAA,MAAM,UAAW7B,EAAAA,OAAO+L,OAAQ,IAAK9L,WAAY,aACjD+B,EAAAA,WAAW,gBAAiBC,EAAAA,QAAQ,0DCNtC,QAAFqP,GAAqBC,GAAAzmB,KAArBymB,YAAqBA,EA/BrB,sBAwBAnkB,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,sEAjBZH,KAA0BkT,EAAAA,iCAqB1BwO,OAAA1hB,KAAGoB,EAAAA,MAAHlB,MAAS,qBA7BTgkB,oBC+DE,QAAFE,GAAoDC,EAClBC,EAC4BC,GAF5D,GAAFznB,GAGIQ,EAHJoE,KAAAhE,KAGU2mB,EAASE,IAHnB7mB,WACkCZ,GAAlCwnB,mBAAkCA,IAJlC,MAF6BlnB,GAA7BgnB,EAAA9mB,GAYE8mB,EAAF3mB,UAAA+mB,aAAE,SAAaC,EAA6BC,GACxC,GAAMC,GAAqBjnB,KAAK4mB,mBAAmBE,aAAaC,EAASC,GAKnEE,KAAsBH,GAAWA,EAAQI,SAAWnnB,KAAKonB,WAE/D,OAAOH,IAAsBC,kBA7BjC5kB,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEG,SAAU,uDACVwH,YAAFC,QAAAgd,GAAA/c,YAAAoc,IACE1jB,cAAFC,EAAAA,kBAAAC,KACER,SAAF,UACES,gBAAFC,EAAAA,wBAAAC,0KASAf,SAA6DqD,GAA7DR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAA8kB,EAAAA,iCAEAZ,EAAAjjB,6DALAijB,cA5DAa,GAAA,SAAA3nB,gBAsFA,GAAAR,GAAA,OAAAQ,GAAAA,EAAA4O,MAAAxO,KAAAgQ,YAAAhQ,oGAWA,kEAQAA,MAAAwnB,OAAA5a,QAAA,SAAAyG,GAAA,GAAA2Q,GAAA3Q,EAAA2Q,KAAAyC,EAAApT,EAAAoT,WACQ,OAAOrnB,GAAfqoB,eAA4CzD,GAA5CyC,IAAiDzmB,KAAjD0nB,OAAAtf,QAAAhH,KAAAC,EAAAA,UAAArB,KAAA0a,aAAApZ,UAAA,WAAA,MAAAlC,GAAAuoB,qNASAvoB,EAAAygB,cAAAxG,UAMAkO,EAAApiB,aACA7C,KAAA8C,EAAAA,UAAA5C,mCArCA+kB,EAAA9jB,0GAGA+jB,SAAAllB,KAAA0I,EAAAA,gBAAexI,MAAfgkB,MAGA3G,gBAAAvd,KAAAsX,EAAAA,UAMA2N,iBAjGAK,GAAA,SAAAhoB,gBAgJA,GAAAR,GAAA,OAAAQ,GAAAA,EAAA4O,MAAoDxO,KAApDgQ,YAAAhQ,2JAnBA4C,SAAA,g5CACEC,QAAF,0qGACEF,QAAF,iBACEG,MACFC,MAAe,yBACf8kB,yCAAA,yBACAC,4CAAA,4BACMC,mBAAN,aACIhe,KAAJ,WAEA4P,YAAA0M,GAAAC,0BACAlc,YAAAC,QAAAkd,GAAAjd,YAAAsd,IACA5kB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAukB,EAAAnkB,gBACAukB,gBAAA1lB,KAAAoB,EAAAA,gBAIAukB,GAAA,SAAAroB,uBAqBA,GAAAR,GAAAQ,EAAAoE,KAAAhE,KAAA6Y,EAAAP,EAAA3Q,EAAAG,IAAA9H,WACAZ,GAAA8oB,aAAA,2BAAAD,EAAA9iB,aAOA7C,KAAAC,EAAAA,UAAAC,OAAAC,SAAA,qDACAG,SAAA,0+IA1BAD,QAAA,iBACEG,MACFC,MAAA,uBACAglB,mBAAA,WACAhe,KAAA,WAEE4P,YAAF0M,GAAAE,wBACEnc,YAAFC,QAAAkd,GAAAjd,YAAA2d,IACAjlB,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAIA4kB,EAAAE,eAAA,WAAA,QACA7lB,KAAAwc,EAAAA,eAAA3Z,aAAA7C,KAAmCsD,EAAAA,aACnCtD,KAAAiB,EAAAA,oBACAjB,KAAAiI,EAAAA,8EA9JAgd,+ECRA,MAsBoC7nB,GAApC0oB,EAAAxoB,kBATA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,yBACVK,MACE0I,UAAW,kBACX6c,SAAU,QAEZ1lB,QAAS,QACTyH,YAAaC,QAASie,EAAAA,WAAYhe,YAAaid,SApBjDa,GAsBoCG,EAAAA,2FAtBpC,MAkCwC7oB,GAAxC8oB,EAAA5oB,kBATA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,6BACVK,MACE0I,UAAW,sBACX6c,SAAU,QAEZ1lB,QAAS,QACTyH,YAAaC,QAASie,EAAAA,WAAYhe,YAAaid,SAhCjDiB,GAkCwCC,EAAAA,gDClCxC,sBAuBAnmB,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEE,GACAD,EAAAA,aACAE,EAAAA,aACAoiB,GACAC,EAAAA,iBACAC,GACAriB,IAEFG,SACEL,GACAuhB,GACAK,GACAvB,GACArB,GACAkC,GACAa,GACAI,GACA7C,GACAa,IAEFzf,cACE6gB,GACAK,GACAvB,GACArB,GACAkC,GACAa,GACAI,GACA7C,GACAa,IAEFpc,WAAYqb,GAA2B4B,QAxDzCwB,qFC4BEzpB,GAAF0pB,eAA6B,qBAH7B,MACiCppB,GAAjC4Q,EAAA1Q,kBAZA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,8BACEC,SAAU,WACVE,SAAUmmB,EAAAA,mBACVlmB,QAAF,+wDACEC,MACFC,MAAA,aAEAC,cAAAC,EAAAA,kBAAAC,KACAC,gBAAAC,EAAAA,wBAAAC,WAGAiN,0FzBzBA,MAyBgC5Q,GAAhC+Q,EAAA7Q,kBAJA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,eACV2H,YAAaC,QAAS2e,EAAAA,WAAY1e,YAAamG,QAvBjDA,GAyBgCuY,EAAAA,uFAzBhC,MAmCsCtpB,GAAtC6Q,EAAA3Q,kBAJA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,qBACV2H,YAAaC,QAAS4e,EAAAA,iBAAkB3e,YAAaiG,QAjCvDA,GAmCsC0Y,EAAAA,6FAnCtC,MA6CsCvpB,GAAtCgR,EAAA9Q,kBAJA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,qBACV2H,YAAaC,QAAS6e,EAAAA,iBAAkB5e,YAAaoG,QA3CvDA,GA6CsCwY,EAAAA,6FA7CtC,MA0DkCxpB,GAAlC8Q,EAAA5Q,kBAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,iBACV2H,YACGC,QAAS2E,EAAAA,aAAc1E,YAAakG,IACpCnG,QAAS,6BAA8BC,YAAakG,0BAKzDwT,OAAA1hB,KAAGoB,EAAAA,MAAHlB,MAAS,kBAGT2mB,SAAA7mB,KAAGoB,EAAAA,QAGH0lB,YAAA9mB,KAAGoB,EAAAA,SAlEH8M,GA0DkCxB,EAAAA,6BAoBhC,QAAF2B,GAAcvB,EACAzH,GADZ,GAAFvI,GAEIQ,EAFJoE,KAAAhE,KAEUoP,EAAWzH,IAFrB3H,WAGI2H,GAAWxH,cAAcE,UAAUG,IAAI,cAAc4O,EAAUC,wBAjFnE,MA6EmC3P,GAAnCiR,EAAA/Q,kBAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uCACVK,MACEC,MAAS,kBACTgH,KAAQ,wDA9DZzH,KAAE0M,EAAAA,eAJF1M,KAAmBiI,EAAAA,cARnBoG,GA6EmC0Y,EAAAA,8BAiBjC,QAAFpa,GAAcG,EACAzH,GADZ,GAAFvI,GAEIQ,EAFJoE,KAAAhE,KAEUoP,EAAWzH,IAFrB3H,WAGI2H,GAAWxH,cAAcE,UAAUG,IAAI,cAAc4O,EAAUC,wBAjGnE,MA6FmC3P,GAAnCuP,EAAArP;eAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uCACVK,MACEC,MAAS,kBACTgH,KAAQ,oDA9EZzH,KAAE0M,EAAAA,eAJF1M,KAAmBiI,EAAAA,cARnB0E,GA6FmCC,EAAAA,8BAiBjC,QAAFC,GAAcC,EACAzH,GADZ,GAAFvI,GAEIQ,EAFJoE,KAAAhE,KAEUoP,EAAWzH,IAFrB3H,WAGI2H,GAAWxH,cAAcE,UAAUG,IAAI,cAAc4O,EAAUC,wBAjHnE,MA6G6B3P,GAA7ByP,EAAAvP,kBAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,yBACVK,MACEC,MAAS,WACTgH,KAAQ,oDA9FZzH,KAAE0M,EAAAA,eAJF1M,KAAmBiI,EAAAA,cARnB4E,GA6G6BG,EAAAA,oFC7G7B,MA+BqC5P,GAArC6P,EAAA3P,kBALA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,oBACV2H,YAAaC,QAASmF,EAAAA,gBAAiBlF,YAAaiF,IACpD5M,QAAS,2BAA4B,qCA7BvC4M,GA+BqCC,EAAAA,4FA/BrC,MA0CqC9P,GAArC+P,EAAA7P,kBALA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,oBACV2H,YAAaC,QAASqF,EAAAA,gBAAiBpF,YAAamF,IACpD9M,QAAS,2BAA4B,qCAxCvC8M,GA0CqCC,EAAAA,4FA1CrC,MAsDkChQ,GAAlCiQ,EAAA/P,kBALA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,cACV2H,YAAaC,QAASuF,EAAAA,UAAWtF,YAAaqF,IAC9ChN,QAAS,4BAA6B,2BApDxCgN,GAsDkCC,EAAAA,sFAelC,MACkClQ,GAAlCmQ,EAAAjQ,kBAbA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,qCACEG,SAAUkN,EAAAA,iBACVhN,MACFC,MAAA,iBACMgH,KAAN,OAEA5G,gBAAiBC,EAAAA,wBAAjBC,OACAL,cAAAC,EAAAA,kBAAAC,KACER,SAAF,eACE0H,YAAFC,QAAA0F,EAAAA,aAAuCzF,YAAvCuF,QAGAA,+CAiBA,MAAA,QAAAjQ,GAAAA,EAAA4O,MAAAxO,KAAAgQ,YAAAhQ,KAHA,+HAVA8C,MACAC,MAAA,iBACAgH,KAAA,OAEE5G,gBAAFC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,KACAR,SAAU,eACV0H,YAAAC,QAAA4F,EAAAA,aAAA3F,YAAA4F,QAGAA,GACAD,EAAAA,cAEAE,GAAA,SAAAvQ,+DAWA,cAK4BuQ,EAA5BhL,uHAbA4E,KAAA,OAEE5G,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,SACA0H,YAAAC,QAAA+F,EAAAA,OAAA9F,YAAA6F,QAGAA,GACAC,EAAAA,QCnEMC,IAEJC,GAGAC,GACAhB,GACAiB,GACAC,GACAd,GACAe,GACAjB,GAGAkB,GACAxB,GACAF,GAGAY,GACAM,GACAD,gCApDF,sBAuDA5N,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUyK,EAAAA,eAAgBxK,EAAAA,aAAcC,IACxCK,QAAS2J,GACTtJ,aAAcsJ,OA1DhBQ,KC0BMC,GAAmB,iBAUzBC,GAAA,SAAAnR,GA2JE,QAAFmR,GAAclD,OAAd,KAAAA,IAAcA,KAAZ,IAAFzO,GACIQ,EADJoE,KAAAhE,OAAAA,WAtJAZ,GAAA4R,YAAiC,GAAIjD,GAAAA,oBAGrC3O,EAAA6R,QAA6B,GAAIlD,GAAAA,gBAAwB,IAMvD3O,EAAF8R,2BAA+BC,EAAAA,aAAaC,MA0D1ChS,EAAFiS,oBACM,SAAC1G,EAAS2G,GACZ,GAAMpR,GAAQ,EAA+BoR,EAE7C,IAAIC,EAAAA,eAAerR,GAAQ,CACzB,GAAMsR,GAAcxH,OAAO9J,EAI3B,OAAOsR,GAAcV,GAAmBU,EAActR,EAGxD,MAAOA,IAYTd,EAAFqS,SAAkD,SAAC9G,EAAW+G,GAC1D,GAAM7P,GAAS6P,EAAK7P,OACd8P,EAAYD,EAAKC,SACvB,OAAK9P,IAAuB,IAAb8P,EAERhH,EAAK+G,KAAK,SAACE,EAAGC,GACnB,GAAIC,GAAS1S,EAAKiS,oBAAoBO,EAAG/P,GACrCkQ,EAAS3S,EAAKiS,oBAAoBQ,EAAGhQ,GAMrCmQ,EAAmB,CAcvB,OAbc,OAAVF,GAA4B,MAAVC,EAEhBD,EAASC,EACXC,EAAmB,EACVF,EAASC,IAClBC,GAAoB,GAEH,MAAVF,EACTE,EAAmB,EACA,MAAVD,IACTC,GAAoB,GAGfA,GAAiC,OAAbL,EAAqB,GAAK,KAxBdhH,GAsC3CvL,EAAF6S,gBAA4D,SAACtH,EAASlC,GAElE,GAAMyJ,GAAUrS,OAAOsS,KAAKxH,GAAMyH,OAAO,SAACC,EAAqBC,GAO7D,MAAOD,GAAc,EAA+BC,GAAO,KAC1D,IAAIC,cAGDC,EAAoB/J,EAAOO,OAAOuJ,aAExC,QAA8C,GAAvCL,EAAQO,QAAQD,IAKvBpT,EAAK6O,MAAQ,GAAIF,GAAAA,gBAAqBF,GACtCzO,EAAKsT,8BAlMT,MAoC2ChT,GAA3CqR,EAAAnR,GAyBEC,OAAFC,eAAMiR,EAANhR,UAAA,YAAE,WAAa,MAAOC,MAAKiO,MAAM/N,WAC/B,SAASyK,GAAa3K,KAAKiO,MAAMjM,KAAK2I,oCAMtC9K,OAAFC,eAAMiR,EAANhR,UAAA,cAAE,WAAuB,MAAOC,MAAKiR,QAAQ/Q,WAC3C,SAAWuI,GAAkBzI,KAAKiR,QAAQjP,KAAKyG,oCAM/C5I,OAAFC,eAAMiR,EAANhR,UAAA,YAAE,WAA6B,MAAOC,MAAK2S,WACzC,SAASjB,GACP1R,KAAK2S,MAAQjB,EACb1R,KAAK0S,6DAcP7S,OAAFC,eAAMiR,EAANhR,UAAA,iBAAE,WAAuC,MAAOC,MAAK4S,gBACnD,SAAcC,GACZ7S,KAAK4S,WAAaC,EAClB7S,KAAK0S,6DA2GP3B,EAAFhR,UAAA2S,0BAAE,WAAA,GAAFtT,GAAAY,KAOU8S,EAAyC9S,KAAK2S,MAChDxR,EAAAA,MAAiBnB,KAAK2S,MAAMG,WAAY9S,KAAK2S,MAAMI,aACnD7R,EAAAA,GAAa,MACX8R,EAA8ChT,KAAK4S,WACrDzR,EAAAA,MAAsBnB,KAAK4S,WAAWK,KAAMjT,KAAK4S,WAAWG,aAC5D7R,EAAAA,GAAa,MAEXgS,EAAalT,KAAKiO,MAElBkF,EAAeC,EAAAA,cAAcF,EAAYlT,KAAKiR,SACjD7P,KAAKqN,EAAAA,IAAI,SAAC4E,GAAjB,GAAkB1I,GAAlB0I,EAAA,EAA4B,OAAAjU,GAAKkU,YAAY3I,MAEnC4I,EAAcH,EAAAA,cAAcD,EAAcL,GAC7C1R,KAAKqN,EAAAA,IAAI,SAAC4E,GAAjB,GAAkB1I,GAAlB0I,EAAA,EAA4B,OAAAjU,GAAKoU,WAAW7I,MAElC8I,EAAgBL,EAAAA,cAAcG,EAAaP,GAC9C5R,KAAKqN,EAAAA,IAAI,SAAC4E,GAAjB,GAAkB1I,GAAlB0I,EAAA,EAA4B,OAAAjU,GAAKsU,UAAU/I,KAEvC3K,MAAKkR,2BAA2ByC,cAChC3T,KAAKkR,2BAA6BuC,EAAcnS,UAAU,SAAAqJ,GAAQ,MAAAvL,GAAK4R,YAAYhP,KAAK2I,MAQ1FoG,EAAFhR,UAAAuT,YAAE,SAAY3I,GAAZ,GAAFvL,GAAAY,IASI,OALAA,MAAKmT,aACAnT,KAAKyI,OAAgBkC,EAAKlC,OAAO,SAAAmL,GAAO,MAAAxU,GAAK6S,gBAAgB2B,EAAKxU,EAAKqJ,UAAzDkC,EAEf3K,KAAK6S,WAAa7S,KAAK6T,iBAAiB7T,KAAKmT,aAAa9K,QAEvDrI,KAAKmT,cAQdpC,EAAFhR,UAAAyT,WAAE,SAAW7I,GAET,MAAK3K,MAAK0R,KAEH1R,KAAKyR,SAAS9G,EAAKqC,QAAShN,KAAK0R,MAFf/G,GAS3BoG,EAAFhR,UAAA2T,UAAE,SAAU/I,GACR,IAAK3K,KAAK6S,UAAa,MAAOlI,EAE9B,IAAMmJ,GAAa9T,KAAK6S,UAAUkB,UAAY/T,KAAK6S,UAAUmB,QAC7D,OAAOrJ,GAAKqC,QAAQiH,OAAOH,EAAY9T,KAAK6S,UAAUmB,WAQxDjD,EAAFhR,UAAA8T,iBAAE,SAAiBK,GAAjB,GAAF9U,GAAAY,IACImU,SAAQC,UAAUC,KAAK,WACrB,GAAKjV,EAAKyT,YAEVzT,EAAKyT,UAAUxK,OAAS6L,EAGpB9U,EAAKyT,UAAUkB,UAAY,GAAG,CAChC,GAAMO,GAAgBC,KAAKC,KAAKpV,EAAKyT,UAAUxK,OAASjJ,EAAKyT,UAAUmB,UAAY,GAAK,CACxF5U,GAAKyT,UAAUkB,UAAYQ,KAAKE,IAAIrV,EAAKyT,UAAUkB,UAAWO,OASpEvD,EAAFhR,UAAAoO,QAAE,WAAY,MAAOnO,MAAKgR,aAMxBD,EAAFhR,UAAA2O,WAAE,aA5SFqC,GAoC2CpC,EAAAA,YCf9B+F,GACX,GAAIC,GAAAA,eAAqC,uBACvCC,WAAY,OACZC,QAASC,mBA2BX,QAAF9N,GACY5G,EACAf,EACiC0V,GAFjC/U,KAAZI,YAAYA,EACAJ,KAAZX,QAAYA,EACiCW,KAA7C+U,kBAA6CA,EAtD7C,MA6DE/N,GAAFjH,UAAAqC,eAAE,SAAe1B,GAAf,GAAFtB,GAAAY,IACIA,MAAKmC,OAEgC,mBAA1B6S,uBACThV,KAAKX,QAAQyB,kBAAkB,WAC7BkU,sBAAsB,WAAM,MAAA5V,GAAK6V,WAAWvU,OAG9CV,KAAKiV,WAAWvU,IAKpBsG,EAAFjH,UAAAoC,KAAE,WACEnC,KAAKI,YAAYD,cAAc+U,MAAMC,WAAa,WAIpDnO,EAAFjH,UAAAsC,KAAE,WACErC,KAAKI,YAAYD,cAAc+U,MAAMC,WAAa,UAO5CnO,EAAVjH,UAAAkV,WAAA,SAAqBvU,GACjB,GAAM0U,GAAYpV,KAAK+U,kBAAkBrU,GACnC2U,EAAsBrV,KAAKI,YAAYD,aAE7CkV,GAAOH,MAAMI,KAAOF,EAAUE,KAC9BD,EAAOH,MAAMK,MAAQH,EAAUG,sBAhDnCjT,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,cACVK,MACEC,MAAS,uDAvCbT,KAAmBiI,EAAAA,aAAnBjI,KAAuDgB,EAAAA,SA8CvDhB,SAAAqD,GAAAR,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAYkS,SAtDZ1N,mBCaE,QAAFF,GAAqBlE,GAAA5C,KAArB4C,SAAqBA,EAbrB,sBAWAN,KAAC8C,EAAAA,UAAD5C,OAAYC,SAAU,0DAHtBH,KAAmBkT,EAAAA,eARnB1O,gFCAA,MAeiCpH,GAAjCkH,EAAAhH,kBAHA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,qCAbZmE,GAeiC6O,EAAAA,WCgBjCC,GAAA,yBA/BA,MAAAA,MAgCaC,GACT5R,EAAc2R,mBA+DhB,QAAF7O,GAAsB+O,GAApB,GAAFxW,GACIQ,EADJoE,KAAAhE,OAAAA,WAAsBZ,GAAtBwW,kBAAsBA,EAvCpBxW,EAAFyW,UAAsC,GAYtCzW,EAAA0W,eAAkD,KAQhD1W,EAAF2W,cAA2B,GAAItW,GAAAA,QAM7BL,EAAF4W,SAA4B,KAM1B5W,EAAF6W,OAA0B,KAKxB7W,EAAF8W,UAAa,IA5Bb,MAtB4BxW,GAA5BmH,EAAAjH,GA4BEC,OAAFC,eAAM+G,EAAN9G,UAAA,eAAE,WACE,MAAOC,MAAK8V,gDA2BdjP,EAAF9G,UAAAoW,YAAE,SAAY/N,IACNA,EAAQgO,eAAe,cAAgBhO,EAAQgO,eAAe,cAChEpW,KAAK+V,cAAc/T,QAIvB6E,EAAF9G,UAAAgC,YAAE,WACE/B,KAAK+V,cAAc9T,YAGrB4E,EAAF9G,UAAAsW,SAAE,WACErW,KAAK8V,eAAiB,GAAIQ,GAAAA,eACtBtW,KAAKuW,kBAAoBvW,KAAKwW,iBAAkBxW,KAAK4V,mCA7E7DtT,KAACC,EAAAA,UAADC,OAAAC,SAAA,UACEG,SAAU,uDACVD,QAAF,YACEQ,gBAAFC,EAAAA,wBAAAC,OACEL,cAAFC,EAAAA,kBAAAC,KACER,SAAF,4EApBAmE,EAAApD,wIA0BA+S,mBAAAlU,KAAAmU,EAAAA,UAAAjU,MAAgBgT,EAAAA,eAKhBK,YAAAvT,KAAAoB,EAAAA,MAAGlB,MAAH,WAGAkU,YAAApU,KAAAoB,EAAAA,MAAGlB,MAAH,gBAGAmU,iBAAArU,KAAQoB,EAAAA,MAARlB,MAAA,sBASAqE,OC9Ca+P,IAIXC,aAAcC,EAAAA,QAAQ,gBAEpBC,EAAAA,MAAM,wDAAyD7B,EAAAA,OAAO8B,UAAW,UAMjFD,EAAAA,MAAM,OAAQ7B,EAAAA,OAAO8B,UAAW,2BAA4BC,UAAW,SACvEF,EAAAA,MAAM,QAAS7B,EAAAA,OAAO8B,UAAW,0BAA2BC,UAAW,SAEvEC,EAAAA,WAAW,yDACPC,EAAAA,QAAQ,yDACZD,EAAAA,WAAW,8BACThC,EAAAA,OAAO8B,UAAW,6BAClBG,EAAAA,QAAQ,0DAEVD,EAAAA,WAAW,+BACThC,EAAAA,OAAO8B,UAAW,4BAClBG,EAAAA,QAAQ,4ECyBZ,QAAFhQ,GACIiQ,EACAC,EAC8CC,GAHhD,GAAFlY,GAIMQ,EAJNoE,KAAAhE,KAIYoX,EAA0BC,IAJtCrX,WAGkDZ,GAAlDkY,MAAkDA,EAPlDlY,EAAAmY,cAA0BpG,EAAAA,aAAaC,MAEvChS,EAAAoY,YAAwBrG,EAAAA,aAAaC,QAlErC,MA8DsC1R,GAAtCyH,EAAAvH,GAcEuH,EAAFpH,UAAAsW,SAAE,WAAA,GAAFjX,GAAAY,IACIJ,GAAJG,UAAUsW,SAAVrS,KAAAhE,MAEIA,KAAKuX,cAAgBvX,KAAKsX,MAAMG,iBAC7BrW,KAAKsW,EAAAA,UAAU1X,KAAKsX,MAAMK,kBAAkB3X,KAAKsX,MAAMM,aACvDtW,UAAU,SAACuW,GACNA,IAAgBzY,EAAK0Y,eACvB1Y,EAAK2Y,OAAO3Y,EAAKkY,MAAMU,YAI7BhY,KAAKwX,YAAcxX,KAAKsX,MAAMW,oBAAoB3W,UAAU,WAC1DlC,EAAK8Y,YAKT/Q,EAAFpH,UAAAgC,YAAE,WACEnC,EAAJG,UAAUgC,YAAViC,KAAAhE,MACIA,KAAKuX,cAAc5D,cACnB3T,KAAKwX,YAAY7D,8BArCrBrR,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,2DAtCZH,KAAE6V,EAAAA,2BACF7V,KAAEkH,EAAAA,mBAgDFlH,KAAyD4E,GAAzD/B,aAAA7C,KAAKuD,EAAAA,OAALrD,MAAY4V,EAAAA,WAAW,WAAM,MAAAlR,YAvE7BC,GA8DsCkR,EAAAA,+BAqGpC,QAAFnR,GAAsB9G,EACYY,EAIpBsX,GALZ,GAAFlZ,GAAAY,IAAsBA,MAAtBI,YAAsBA,EACYJ,KAAlCgB,KAAkCA,EA1ClChB,KAAAuY,uBAAmCpH,EAAAA,aAAaC,MAM9CpR,KAAFwY,sBAA0B,GAAI/Y,GAAAA,QAG5BO,KAAFyY,aAA0D,GAAIC,GAAAA,aAG5D1Y,KAAFyX,iBAA+D,GAAIiB,GAAAA,aAGjE1Y,KAAFiY,oBAAkE,GAAIS,GAAAA,aAGpE1Y,KAAF2Y,YAAuD,GAAID,GAAAA,cAAmB,GAc5E1Y,KAAF4Y,kBAAuC,QAgB/B5Y,KAAKgB,MAAQsX,IACftY,KAAKuY,uBAAyBvY,KAAKgB,KAAKC,OAAOK,UAAU,SAACuX,GACxDzZ,EAAK0Z,+BAA+BD,GACpCP,EAAkB1X,kBAMtBZ,KAAKwY,sBAAsBpX,KAAK2X,EAAAA,qBAAqB,SAACC,EAAGC,GACvD,MAAOD,GAAEE,YAAcD,EAAEC,WAAaF,EAAEG,UAAYF,EAAEE,WACpD7X,UAAU,SAAA8X,GAERha,EAAKuY,kBAAkByB,EAAMD,UAAY/Z,EAAKuY,kBAAkBvY,EAAKwY,YACvExY,EAAKuZ,YAAYU,OAGfja,EAAKuY,kBAAkByB,EAAMF,aAAe9Z,EAAKuY,kBAAkBvY,EAAKwY,YAC1ExY,EAAK6Y,oBAAoBoB,SA/BjC,MAAExZ,QAAFC,eACMoH,EADNnH,UAAA,gBAAE,SACaiW,GACXhW,KAAKsZ,eAAiBtD,EACtBhW,KAAK8Y,kEAqCP5R,EAAFnH,UAAAsW,SAAE,WACwB,UAAlBrW,KAAK4X,WAAwC,MAAf5X,KAAKiW,SACrCjW,KAAK4X,UAAY5X,KAAKuZ,+BAI1BrS,EAAFnH,UAAAgC,YAAE,WACE/B,KAAKuY,uBAAuB5E,cAC5B3T,KAAKwY,sBAAsBvW,YAG7BiF,EAAFnH,UAAAyZ,uBAAE,SAAuBJ,GACrB,GAAMvB,GAAc7X,KAAK2X,kBAAkByB,EAAMD,QACjDnZ,MAAKyX,iBAAiB4B,KAAKxB,GACvBA,GACF7X,KAAKyY,aAAaY,KAAKrZ,KAAKI,YAAYD,cAAcsZ,eAK1DvS,EAAFnH,UAAA2Z,oBAAE,WACE,MAAO1Z,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,MAAkB,MAAQ,OAI1DgH,EAAFnH,UAAA4X,kBAAE,SAAkB3B,GAChB,MAAmB,UAAZA,GACS,sBAAZA,GACY,uBAAZA,GAIE9O,EAAVnH,UAAA+Y,+BAAA,SAAyCD,OAAzC,KAAAA,IAAyCA,EAAiB7Y,KAAK0Z,uBACvD1Z,KAAKsZ,eAAiB,EACxBtZ,KAAK4X,UAAmB,OAAPiB,EAAe,OAAS,QAChC7Y,KAAKsZ,eAAiB,EAC/BtZ,KAAK4X,UAAmB,OAAPiB,EAAe,QAAU,OAE1C7Y,KAAK4X,UAAY,UAQb1Q,EAAVnH,UAAAwZ,sCACI,GAAMV,GAAM7Y,KAAK0Z,qBAEjB,OAAY,OAAPb,GAAgB7Y,KAAKiW,QAAU,GAAc,OAAP4C,GAAgB7Y,KAAKiW,OAAS,EAChE,qBAGF,sCAlJX3T,KAACC,EAAAA,UAADC,OAAAC,SAAA,eACEG,SAAU,sSACVC,QAAF,wHACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEsW,YAAa/C,GAAfC,cACE/T,MACFC,MAAe,mIA9FfT,KAAEiB,EAAAA,qBAPF2D,EAAAzD,kFAyHAwU,sBAAA3V,KAAAsX,EAAAA,SAGAjB,cAAArW,KAAAsX,EAAAA,SAGAC,cAAAvX,KAAAmU,EAAAA,UAAAjU,MAAAsX,EAAAA,uBAGA9B,WAAA1V,KAAAoB,EAAAA,MAAAlB,MAAA,aAGAyT,SAAA3T,KAAAoB,EAAAA,QAGAkV,oBAAAtW,KAAAoB,EAAAA,QAGAsS,WAAA1T,KAAAoB,EAAAA,SAQAwD,KC/IA6S,GAAA,yBAdA,MAAAA,MAeaC,GACTjW,EAAcgW,mBAehB,QAAF9S,GAAqBU,GAAnB,GAAFvI,GACIQ,EADJoE,KAAAhE,OAAAA,WAAqBZ,GAArBuI,WAAqBA,IA/BrB,MA8BwCjI,GAAxCuH,EAAArH,GAMEqH,EAAFlH,UAAAka,MAAE,WACEja,KAAK2H,WAAWxH,cAAc8Z,SAGhChT,EAAFlH,UAAAma,cAAE,WACE,MAAOla,MAAK2H,WAAWxH,cAAcga,YAGvClT,EAAFlH,UAAAqa,eAAE,WACE,MAAOpa,MAAK2H,WAAWxH,cAAcka,4BAvBzC/X,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uBACVE,QAAS,YACTG,MACE0C,2BAA4B,WAC5BF,uBAAwB,sDAnB5BhD,KAAmBiI,EAAAA,cARnBtD,GA8BwC+S,ICuBxCM,GAAA,yBArDA,MAAAA,MAsDaC,GACTzW,EAAmBwW,mBAkFrB,QAAFlT,GAAsBhH,EACAd,EACAC,EACYyB,EAEZ3B,GALpB,GAAFD,GAMIQ,EANJoE,KAAAhE,OAAAA,WAAsBZ,GAAtBgB,YAAsBA,EACAhB,EAAtBE,mBAAsBA,EACAF,EAAtBG,eAAsBA,EACYH,EAAlC4B,KAAkCA,EAEZ5B,EAAtBC,QAAsBA,EAvDtBD,EAAAob,gBAA4B,EAG5Bpb,EAAAqb,uBAAkC,EAGlCrb,EAAAsb,WAAgC,GAAIjb,GAAAA,QAGlCL,EAAFub,yBAA4B,EAG1Bvb,EAAFwb,qBAAwB,EAGtBxb,EAAFyb,sBAAyB,EAczBzb,EAAA0b,eAAmC,EAgBjC1b,EAAF2b,mBAA0C,GAAIrC,GAAAA,aAG5CtZ,EAAF4b,aAAoC,GAAItC,GAAAA,eAAxC,MAzDkChZ,GAAlC0H,EAAAxH,GAyCEC,OAAFC,eACMsH,EADNrH,UAAA,qBAAE,WAC8B,MAAOC,MAAK8a,oBAC1C,SAAkB5a,GAChBA,EAAQ+a,EAAAA,qBAAqB/a,GAC7BF,KAAKya,sBAAwBza,KAAK8a,gBAAkB5a,EACpDF,KAAK8a,eAAiB5a,EAElBF,KAAKkb,aACPlb,KAAKkb,YAAYC,sBAAsBjb,oCAmB3CkH,EAAFrH,UAAAyB,sBAAE,WAEMxB,KAAKob,gBAAkBpb,KAAKqb,eAAehT,SAC7CrI,KAAKsb,mBACLtb,KAAKob,eAAiBpb,KAAKqb,eAAehT,OAC1CrI,KAAKV,mBAAmBsB,gBAKtBZ,KAAKya,wBACPza,KAAKub,eAAevb,KAAK8a,gBACzB9a,KAAKwb,0BACLxb,KAAKyb,4BACLzb,KAAKya,uBAAwB,EAC7Bza,KAAKV,mBAAmBsB,gBAKtBZ,KAAK0b,yBACP1b,KAAK2b,2BACL3b,KAAK0b,wBAAyB,EAC9B1b,KAAKV,mBAAmBsB,iBAI5BwG,EAAFrH,UAAA6b,eAAE,SAAexC,GACb,OAAQA,EAAMyC,SACZ,IAAKC,GAAAA,KACH9b,KAAKkb,YAAYa,qBACjB3C,EAAM4C,gBACN,MACF,KAAKC,GAAAA,IACHjc,KAAKkb,YAAYgB,oBACjB9C,EAAM4C,gBACN,MACF,KAAKG,GAAAA,MACL,IAAKC,GAAAA,MACHpc,KAAK+a,mBAAmB1B,KAAKrZ,KAAKqc,YAClCjD,EAAM4C,gBACN,MACF,SACEhc,KAAKkb,YAAYoB,UAAUlD,KAOjChS,EAAFrH,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,KACUe,EAAYf,KAAKgB,KAAOhB,KAAKgB,KAAKC,OAASC,EAAAA,GAAa,MACxDqb,EAASvc,KAAKT,eAAe0B,OAAO,KACpCub,EAAU,WACdpd,EAAKkc,mBACLlc,EAAKqc,4BAGPzb,MAAKkb,YAAc,GAAIuB,GAAAA,gBAAgBzc,KAAKqb,gBACzCqB,0BAA0B1c,KAAK0Z,uBAC/BiD,WAEH3c,KAAKkb,YAAY0B,iBAAiB,GAID,mBAA1B5H,uBAAwCA,sBAAsBwH,GAAWA,IAIhFrb,EAAAA,MAAMJ,EAAWwb,GAAQnb,KAAKC,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,WAClEkb,IACApd,EAAK8b,YAAYwB,0BAA0Btd,EAAKsa,yBAMlD1Z,KAAKkb,YAAYja,OAAOG,KAAKC,EAAAA,UAAUrB,KAAK0a,aAAapZ,UAAU,SAAAub,GACjEzd,EAAK4b,aAAa3B,KAAKwD,GACvBzd,EAAK0d,aAAaD,MAItBzV,EAAFrH,UAAAgC,YAAE,WACE/B,KAAK0a,WAAW1Y,OAChBhC,KAAK0a,WAAWzY,YAMlBmF,EAAFrH,UAAAgd,kBAAE,WAAA,GAAF3d,GAAAY,KACUgd,EAAe,WACnB5d,EAAKkc,mBACLlc,EAAKqc,4BACLrc,EAAKE,mBAAmBsB,eAM1BZ,MAAKX,QAAUW,KAAKX,QAAQ4d,IAAID,GAAgBA,KAUlD5V,EAAFrH,UAAAub,iBAAE,WACEtb,KAAKkd,0BACLld,KAAKwb,0BACLxb,KAAK2b,4BAIP9b,OAAFC,eAAMsH,EAANrH,UAAA,kBAAE,WACE,MAAOC,MAAKkb,YAAclb,KAAKkb,YAA2B,gBAAI,OAIhE,SAAehb,GACRF,KAAKmd,cAAcjd,IAAUF,KAAKqc,aAAenc,GAAUF,KAAKkb,aAIrElb,KAAKkb,YAAYkC,cAAcld,oCAOjCkH,EAAFrH,UAAAod,cAAE,SAAcrQ,GACZ,IAAK9M,KAAKqb,eAAkB,OAAO,CAEnC,IAAMzZ,GAAM5B,KAAKqb,eAAiBrb,KAAKqb,eAAegC,UAAUvQ,GAAS,IACzE,SAASlL,IAAQA,EAAI6C,UAOvB2C,EAAFrH,UAAA+c,aAAE,SAAazY,GAKX,GAJIrE,KAAK2a,yBACP3a,KAAKub,eAAelX,GAGlBrE,KAAKqb,gBAAkBrb,KAAKqb,eAAehT,OAAQ,CACrDrI,KAAKqb,eAAegC,UAAUhZ,GAAU4V,OAKxC,IAAMqD,GAActd,KAAKud,kBAAkBpd,cACrC0Y,EAAM7Y,KAAK0Z,qBAGf4D,GAAYE,WADH,OAAP3E,EACuB,EAEAyE,EAAYG,YAAcH,EAAYjD,cAMrEjT,EAAFrH,UAAA2Z,oBAAE,WACE,MAAO1Z,MAAKgB,MAA4B,QAApBhB,KAAKgB,KAAKd,MAAkB,MAAQ,OAI1DkH,EAAFrH,UAAA4b,yBAAE,WACE,GAAM+B,GAAiB1d,KAAK0d,eACtBC,EAA4C,QAA/B3d,KAAK0Z,uBAAmCgE,EAAiBA,CAM5E1d,MAAK4d,SAASzd,cAAc+U,MAAM8B,UAAY,cAAc2G,EAAhE,OAIE9d,OAAFC,eAAMsH,EAANrH,UAAA,sBAAE,WAA+B,MAAOC,MAAKwa,qBAC3C,SAAmBqD,GACjB7d,KAAKwa,gBAAkBjG,KAAKuJ,IAAI,EAAGvJ,KAAKE,IAAIzU,KAAK+d,wBAAyBF,IAI1E7d,KAAK0b,wBAAyB,EAC9B1b,KAAKwb,2DAWPpU,EAAFrH,UAAAie,cAAE,SAAcC,GACZ,GAAMC,GAAale,KAAKud,kBAAkBpd,cAAcka,WAGxDra,MAAK0d,iBAAgC,UAAbO,GAAyB,EAAI,GAAKC,EAAa,GASzE9W,EAAFrH,UAAAwb,eAAE,SAAe4C,GACb,GAAMC,GAAgBpe,KAAKqb,eAAiBrb,KAAKqb,eAAegC,UAAUc,GAAc,IAExF,IAAKC,EAAL,CAGA,GAEIC,GAAwBC,EAFtBJ,EAAale,KAAKud,kBAAkBpd,cAAcka,WAGtB,QAA9Bra,KAAK0Z,uBACP2E,EAAiBD,EAAclE,gBAC/BoE,EAAgBD,EAAiBD,EAAchE,mBAE/CkE,EAAgBte,KAAK4d,SAASzd,cAAcka,YAAc+D,EAAclE,gBACxEmE,EAAiBC,EAAgBF,EAAchE,iBAGjD,IAAMmE,GAAmBve,KAAK0d,eACxBc,EAAkBxe,KAAK0d,eAAiBQ,CAE1CG,GAAiBE,EAEnBve,KAAK0d,gBAAkBa,EAAmBF,EAjVjB,GAkVhBC,EAAgBE,IAEzBxe,KAAK0d,gBAAkBY,EAAgBE,EApVd,MAgW7BpX,EAAFrH,UAAAmd,wBAAE,WACE,GAAMuB,GACFze,KAAK4d,SAASzd,cAAcsd,YAAczd,KAAKI,YAAYD,cAAcka,WAExEoE,KACHze,KAAK0d,eAAiB,GAGpBe,IAAcze,KAAK2a,yBACrB3a,KAAKV,mBAAmBsB,eAG1BZ,KAAK2a,wBAA0B8D,GAYjCrX,EAAFrH,UAAAyb,wBAAE,WAEExb,KAAK6a,qBAA8C,GAAvB7a,KAAK0d,eACjC1d,KAAK4a,oBAAsB5a,KAAK0d,gBAAkB1d,KAAK+d,wBACvD/d,KAAKV,mBAAmBsB,gBAU1BwG,EAAFrH,UAAAge,sBAAE,WAGE,MAFwB/d,MAAK4d,SAASzd,cAAcsd,YACjCzd,KAAKud,kBAAkBpd,cAAcka,aACf,GAI3CjT,EAAFrH,UAAA0b,0BAAE,WACE,GAAMiD,GAAuB1e,KAAKqb,gBAAkBrb,KAAKqb,eAAehT,OACpErI,KAAKqb,eAAegC,UAAUrd,KAAK2e,eAAehX,WAAWxH,cAC7D,IAEJH,MAAKkC,QAAQE,eAAc,mBAnY/BE,KAACC,EAAAA,UAADC,OAAAC,SAAA,iBACEG,SAAU,+7BACVC,QAAF,61EACEF,QAAF,iBACEK,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEP,MACFC,MAAA,iBACM6b,qDAAN,0BACIC,6BAAJ,yHAtDAvc,KAAEkB,EAAAA,gBAHFlB,KAAEwc,EAAAA,eAAF3Z,aAAA7C,KAAAsD,EAAAA,aALAtD,KAAQgB,EAAAA,UAWR8D,EAAA3D,2GA2DA8Z,oBAAAjb,KAAAmU,EAAAA,UAAAjU,MAAA,sBACAob,WAAAtb,KAAAmU,EAAAA,UAAAjU,MAAA,aACAmc,gBAAArc,KAAAoB,EAAAA,QACAqX,qBAAAzY,KAAAsX,EAAAA,SAmCAoB,eAAA1Y,KAAAsX,EAAAA,UAgBAxS,OC5FI2X,GAAS,EAGbC,GAAA,yBA9CA,MAAAA,MA+DaC,GAAkB,GAAItK,GAAAA,eAAe,mBAIlDuK,GAAA,WACE,QAAFA,GAAqB9e,GAAAJ,KAArBI,YAAqBA,EApErB,MAAA8e,MAsEaC,GACT3X,EAAW1D,EAAmBob,IAAkB,0BA+FlD,QAAFvY,GAAcgB,EACQrI,EAC6B8f,GAFjD,GAAFhgB,GAGIQ,EAHJoE,KAAAhE,KAGU2H,IAHV3H,WACsBZ,GAAtBE,mBAAsBA,EAhEtBF,EAAAigB,eAA0C,EAG1CjgB,EAAAkgB,sBAA0C,EAG1ClgB,EAAAmgB,kBAA8BpO,EAAAA,aAAaC,MAG3ChS,EAAAogB,sBAAkCrO,EAAAA,aAAaC,MAM/ChS,EAAAqgB,gBAAoC,EAQpCrgB,EAAA0b,eAA0C,KAGxC1b,EAAFsgB,eAAkD,QAsBhDtgB,EAAFugB,oBAAiE,GAAIjH,GAAAA,aAGnEtZ,EAAFwgB,YACM,GAAIlH,GAAAA,aAGRtZ,EAAFygB,cAAyD,GAAInH,GAAAA,aAG3DtZ,EAAF0gB,kBACM,GAAIpH,GAAAA,cAAgC,GAQtCtZ,EAAK2gB,SAAWhB,KAChB3f,EAAKwZ,kBAAoBwG,GAAiBA,EAAcxG,kBACpDwG,EAAcxG,kBAAoB,UAX1C,MApEiClZ,GAAjCiH,EAAA/G,GAsBEC,OAAFC,eACM6G,EADN5G,UAAA,qBAAE,WAC+B,MAAOC,MAAKyf,oBAC3C,SAAkBvf,GAAkBF,KAAKyf,eAAiBO,EAAAA,sBAAsB9f,oCAIhFL,OAAFC,eACM6G,EADN5G,UAAA,qBAAE,WACqC,MAAOC,MAAK8a,oBACjD,SAAkB5a,GAChBF,KAAKqf,eAAiBpE,EAAAA,qBAAqB/a,EAAO,uCAWpDL,OAAFC,eACM6G,EADN5G,UAAA,uBAAE,WACsC,MAAOC,MAAKC,sBAClD,SAAoBC,GAClB,GAAMC,GAA6BH,KAAKI,YAAYD,aAEpDA,GAAcE,UAAUC,OAAO,kBAAkBN,KAAKO,iBAElDL,GACFC,EAAcE,UAAUG,IAAI,kBAAkBN,GAGhDF,KAAKC,iBAAmBC,mCAmC1ByG,EAAF5G,UAAAyB,sBAAE,WAAA,GAAFpC,GAAAY,KAGUigB,EAAgBjgB,KAAKqf,eAAiBrf,KAAKkgB,eAAelgB,KAAKqf,eAIrE,IAAIrf,KAAK8a,gBAAkBmF,EAAe,CACxC,GAAME,GAAoC,MAAvBngB,KAAK8a,cAEnBqF,IACHngB,KAAK8f,kBAAkBzG,KAAKrZ,KAAKogB,mBAAmBH,IAKtD9L,QAAQC,UAAUC,KAAK,WACrBjV,EAAKihB,MAAMzT,QAAQ,SAAChL,EAAKkL,GAAU,MAAAlL,GAAIsU,SAAWpJ,IAAUmT,IAEvDE,GACH/gB,EAAKugB,oBAAoBtG,KAAK4G,KAMpCjgB,KAAKqgB,MAAMzT,QAAQ,SAAChL,EAAakL,GAC/BlL,EAAIoU,SAAWlJ,EAAQmT,EAII,MAAvB7gB,EAAK0b,gBAA0C,GAAhBlZ,EAAIoU,UAAkBpU,EAAIqU,SAC3DrU,EAAIqU,OAASgK,EAAgB7gB,EAAK0b,kBAIlC9a,KAAK8a,iBAAmBmF,IAC1BjgB,KAAK8a,eAAiBmF,EACtBjgB,KAAKV,mBAAmBsB,iBAI5B+F,EAAF5G,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKsgB,wBAILtgB,KAAKuf,kBAAoBvf,KAAKqgB,MAAMjY,QAAQ9G,UAAU,WAKpD,GAJsBlC,EAAK8gB,eAAe9gB,EAAKigB,kBAIzBjgB,EAAK0b,eAGzB,IAAK,GAFCyF,GAAOnhB,EAAKihB,MAAMhD,UAEf5P,EAAI,EAAGA,EAAI8S,EAAKlY,OAAQoF,IAC/B,GAAI8S,EAAK9S,GAAGyI,SAAU,CAIpB9W,EAAKigB,eAAiBjgB,EAAK0b,eAAiBrN,CAC5C,OAKNrO,EAAKkhB,wBACLlhB,EAAKE,mBAAmBsB,kBAI5B+F,EAAF5G,UAAAgC,YAAE,WACE/B,KAAKuf,kBAAkB5L,cACvB3T,KAAKwf,sBAAsB7L,eAI7BhN,EAAF5G,UAAAygB,cAAE,WACMxgB,KAAKygB,YACPzgB,KAAKygB,WAAWhF,6BAIpB9U,EAAF5G,UAAA2gB,cAAE,SAAc5T,GACZ9M,KAAK4f,YAAYvG,KAAKrZ,KAAKogB,mBAAmBtT,KAGxCnG,EAAV5G,UAAAqgB,mBAAA,SAA6BtT,GACzB,GAAMsM,GAAQ,GAAI4F,GAKlB,OAJA5F,GAAMtM,MAAQA,EACV9M,KAAKqgB,OAASrgB,KAAKqgB,MAAMhY,SAC3B+Q,EAAMxX,IAAM5B,KAAKqgB,MAAMhD,UAAUvQ,IAE5BsM,GASDzS,EAAV5G,UAAAugB,2CACQtgB,MAAKwf,uBACPxf,KAAKwf,sBAAsB7L,cAG7B3T,KAAKwf,sBAAwBre,EAAAA,MAAjCqN,UAAA,GAA0CxO,KAAKqgB,MAAM5R,IAAI,SAAA7M,GAAO,MAAAA,GAAImU,iBAC7DzU,UAAU,WAAM,MAAAlC,GAAKE,mBAAmBsB,kBAIrC+F,EAAV5G,UAAAmgB,eAAA,SAAyBpT,GAIrB,MAAOyH,MAAKE,IAAIzU,KAAKqgB,MAAMhY,OAAS,EAAGkM,KAAKuJ,IAAIhR,GAAS,EAAG,KAI9DnG,EAAF5G,UAAA4gB,eAAE,SAAelT,GACb,MAAO,iBAAiBzN,KAAK+f,SAAjC,IAA6CtS,GAI3C9G,EAAF5G,UAAA6gB,iBAAE,SAAiBnT,GACf,MAAO,mBAAmBzN,KAAK+f,SAAnC,IAA+CtS,GAO7C9G,EAAF5G,UAAA8gB,yBAAE,SAAyBC,GACvB,GAAK9gB,KAAKyf,gBAAmBzf,KAAKsf,sBAAlC,CAEA,GAAMyB,GAAuB/gB,KAAKghB,gBAAgB7gB,aAElD4gB,GAAQ7L,MAAM+L,OAASjhB,KAAKsf,sBAAwB,KAIhDtf,KAAKghB,gBAAgB7gB,cAAc+gB,eACrCH,EAAQ7L,MAAM+L,OAASH,EAAY,QAKvCna,EAAF5G,UAAAohB,4BAAE,WACE,GAAMJ,GAAU/gB,KAAKghB,gBAAgB7gB,aACrCH,MAAKsf,sBAAwByB,EAAQtH,aACrCsH,EAAQ7L,MAAM+L,OAAS,GACvBjhB,KAAK6f,cAAcxG,QAIrB1S,EAAF5G,UAAAqhB,aAAE,SAAaxf,EAAayf,EAAyBvU,GAC5ClL,EAAI6C,WACPzE,KAAK2e,cAAgB0C,EAAUhF,WAAavP,IAKhDnG,EAAF5G,UAAAuhB,aAAE,SAAa1f,EAAa2f,GACxB,MAAI3f,GAAI6C,SACC,KAEFzE,KAAK2e,gBAAkB4C,EAAM,GAAK,kBA9Q7Cjf,KAACC,EAAAA,UAADC,OAAAC,SAAA,gBACEC,SAAU,cACVE,SAAU,ghDACVC,QAAF,u8CACEG,cAAFC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACEV,QAAF,QAAA,iBACEG,MACFC,MAAA,gBACMye,uCAAN,gBACIC,wCAAJ,qHAxEAnf,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAAyc,MAAA3c,KAAAsD,EAAAA,cAwJAe,EAAAlD,wHAxEAgd,aAAAne,KAAAmU,EAAAA,UAAAjU,MAAA,eAEAkf,gBAAApf,KAAAoB,EAAAA,QAEAib,gBAAArc,KAAAoB,EAAAA,QAeAgc,iBAAApd,KAAAoB,EAAAA,QAMAkV,oBAAAtW,KAAAoB,EAAAA,QAQAnD,kBAAA+B,KAAAoB,EAAAA,QAGAic,sBAAArd,KAAAsX,EAAAA,SAGAgG,cAAAtd,KAAAsX,EAAAA,SAgBAiG,gBAAAvd,KAAAsX,EAAAA,SAGAkG,oBAAGxd,KAAMsX,EAAAA,UAOTjT,O9B5GAgb,GAAA,WACE,QAAFA,GAAqBvhB,GAAAJ,KAArBI,YAAqBA,EAtDrB,MAAAuhB,MAwDaC,GACT9d,EAAmB0D,EAAWma,GAAe,2BAgD/C,QAAFhiB,GAAcgI,EACoB3G,EACZ3B,EACAC,EACAC,GAJpB,GAAFH,GAKIQ,EALJoE,KAAAhE,KAKU2H,IALV3H,WACkCZ,GAAlC4B,KAAkCA;iBACZ5B,EAAtBC,QAAsBA,EACAD,EAAtBE,mBAAsBA,EACAF,EAAtBG,eAAsBA,EA/BtBH,EAAAI,WAAgC,GAAIC,GAAAA,UAYpC,MAhB+BC,GAA/BC,EAAAC,GAgBEC,OAAFC,eACMH,EADNI,UAAA,uBAAE,WACsC,MAAOC,MAAKC,sBAClD,SAAoBC,GAClB,GAAMC,GAA6BH,KAAKI,YAAYD,aAEpDA,GAAcE,UAAUC,OAAO,kBAAkBN,KAAKO,iBAElDL,GACFC,EAAcE,UAAUG,IAAI,kBAAkBN,GAGhDF,KAAKC,iBAAmBC,mCAgB1BP,EAAFI,UAAAU,iBAAE,SAAiBC,GAGfV,KAAKW,qBAAuBD,EAC5BV,KAAKV,mBAAmBsB,gBAG1BjB,EAAFI,UAAAc,mBAAE,WAAA,GAAFzB,GAAAY,IACIA,MAAKX,QAAQyB,kBAAkB,WAC7B,GAAMC,GAAY3B,EAAK4B,KAAO5B,EAAK4B,KAAKC,OAASC,EAAAA,GAAa,KAE9D,OAAOC,GAAAA,MAAMJ,EAAW3B,EAAKG,eAAe0B,OAAO,KAC9CG,KAAKC,EAAAA,UAAUjC,EAAKI,aACpB8B,UAAU,WAAM,MAAAlC,GAAKmC,oBAK9B5B,EAAFI,UAAAyB,sBAAE,WACE,GAAIxB,KAAKW,mBAAoB,CAC3B,GAAMc,GAAYzB,KAAK0B,UAAUC,KAAK,SAAAC,GAAO,MAAAA,GAAIC,QAEjD7B,MAAK8B,mBAAqBL,EAAYA,EAAUrB,YAAc,KAC9DJ,KAAKuB,eACLvB,KAAKW,oBAAqB,IAI9BhB,EAAFI,UAAAgC,YAAE,WACE/B,KAAKR,WAAWwC,OAChBhC,KAAKR,WAAWyC,YAIlBtC,EAAFI,UAAAwB,aAAE,WACMvB,KAAK8B,oBACP9B,KAAKkC,QAAQC,OACbnC,KAAKkC,QAAQE,eAAepC,KAAK8B,mBAAmB3B,gBAEpDH,KAAKkC,QAAQG,uBA7FnBC,KAACC,EAAAA,UAADC,OAAAC,SAAA,oBACEC,SAAU,0BACVC,QAAF,QAAA,iBACEC,SAAU,6HACVC,QAAS,06CACTC,MAAFC,MAAA,mBACEC,cAAFC,EAAAA,kBAAAC,KACEC,gBAAgBC,EAAAA,wBAAlBC,0HAnDAf,KAAEgB,EAAAA,SAZFhB,KAAQiB,EAAAA,oBAgBRjB,KAAEkB,EAAAA,iBAdF7D,EAAA8D,wJA0EAlD,kBAAA+B,KAAAoB,EAAAA,SAOA/D,OA1FAgE,GAAA,qCAmKAC,GAAAC,EAAAC,EAAAC,EAAAJ,+CAqBA,GAAAvE,GAAAQ,EAAAoE,KAAAhE,OAAAA,IAiEA,OA5BAZ,GAAA6E,WAAAA,EAAE7E,EAAFgB,YAAAA,EAAsBhB,EAAtB8E,cAAAA,kGAXE9E,EAAF+E,eAA+BC,mBAA/BhE,EAAAD,eAwBIf,EAAKiF,SAATC,SAAAD,IAAA,EACAE,IAIQnF,EAARoF,2BAAAD,EAAAE,yBAEAC,qBAAAH,EAAAG,qBACAC,UAAAJ,EAAAI,YAGAT,GACAA,EAAAU,QAAAxE,GAGAhB,EApDA,0DAAAyF,2EAEA7E,KAAA8E,UAAA5E,EACQF,KAAKiE,WAAbxD,iBAAAT,KAAAI,eAGA2E,YAAA,EACAC,cAAA,gJAYAhF,KAAAwE,0BAEAO,YAAU,EACVC,cAAA,kFAkCAhF,KAAAkE,eACQlE,KAARkE,cAAAe,eAAAjF,KAA+CI,cAI/C8E,EAAAC,aACA7C,KAAA8C,EAAAA,UAAA5C,+CAxFAE,SAAA,aACEC,QAAF,WAAA,gBAAA,YACEG,MACFC,MAAA,eACMsC,sBAAN,SACIC,uBAAJ,sBACIC,kBAAJ,WACIC,2BAAJ,WACIC,+BAAJ,gFA0CAnD,KAAkCgB,EAAAA,SA1MlChB,KAAEoD,EAAAA,WAIFpD,SAAEqD,GAAFR,aAAA7C,KAAAsD,EAAAA,WAAAtD,KAAAuD,EAAAA,OAAArD,MAAAsD,QAfAxD,KAAQyD,OAAQZ,aAAhB7C,KAAA0D,EAAAA,UAAAxD,MAAA,gBAyNAF,KAAA2D,EAAAA,gBAjLAf,EAAAzB,yCAqJAyB,mCCrMA,sBAyBA5C,KAAC4D,EAAAA,SAAD1D,OACE2D,SACEC,EAAAA,aACAC,GACAC,EAAAA,aACAC,GACAC,EAAAA,gBACAC,EAAAA,YAGFC,SACEL,GACAM,GACAC,GACAC,GACAlH,GACAuF,GACA4B,IAEFC,cACEJ,GACAC,GACAC,GACAG,GACAC,GACAtH,GACAuF,GACAgC,GACAC,GACAC,GACAN,QAvDJO,KC2BAC,GAAA,WACE,QAAFA,GAAqBlH,GAAAJ,KAArBI,YAAqBA,EA5BrB,MAAAkH,MA8BaC,GACTC,EAAWF,gCA/Bf,sBAiCAhF,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,kBACVC,SAAU,gBACVI,MAAOC,MAAS,uBApClB0E,KAsCAC,GAAA,SAAA9H,GAuBE,QAAF8H,GACIC,EACQC,EACUC,GAHpB,GAAFzI,GAIIQ,EAJJoE,KAAAhE,KAIU2H,IAJV3H,WAEYZ,GAAZwI,UAAYA,EAKRxI,EAAK0I,UAAYD,IATrB,MAJgCnI,GAAhCgI,EAAA9H,GAgBE8H,EAAF3H,UAAAgI,gBAAE,WAAA,GAAF3I,GAAAY,IACSgI,GAAAA,aAAgBhI,KAAK4H,UAAUK,YAIpCjI,KAAKkI,0BACLlI,KAAKmI,aAAaC,QAAQ9G,UAAU,WAAM,MAAAlC,GAAK8I,8BAMzCR,EAAV3H,UAAAmI,6CACI,IAAKlI,KAAKmI,aAAaE,OAAvB,CAMwBC,MAAMC,KAAkBvI,KAAKI,YAAYD,cAAcqI,YAC5EC,OAAO,SAAAC,GAAQ,QAAEA,EAAKrI,WAAaqI,EAAKrI,UAAUsI,SAAS,sBAC3DF,OAAO,SAAAC,GAAQ,MAAAA,GAAKE,YAAcxJ,EAAK0I,UAAY1I,EAAK0I,UAAUe,aAAe,KACjFC,KAAK,SAAAJ,GAAQ,SAAGA,EAAKK,cAAeL,EAAKK,YAAYC,WAGtDC,sBAxDN3G,KAACC,EAAAA,UAADC,OAAAC,SAAA,cACEC,SAAU,aACVE,SAAU,8EACVC,QAAF,yiBACEF,QAAF,SACEG,MACFC,MAAA,cACMmG,oCAAN,0BACIC,iCAAJ,6BAEAhG,gBAAAC,EAAAA,wBAAAC,OACAL,cAAAC,EAAAA,kBAAAC,mFAnCAZ,SAAEqD,GAAFR,aAAA7C,KAAAuD,EAAAA,OAAArD,MAAA4G,EAAAA,eAgDA1B,EAAAjE,mEALAiE,mCC3DA,sBAaApF,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUE,IACVK,SAAUgB,GAAYD,GAAepB,IACrCU,cAAeW,GAAYD,QAhB7B4B,mBCqBE,QAAFC,GAAqBC,GAAAvJ,KAArBuJ,cAAqBA,EArBrB,sBAiBAjH,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,8DARZH,KAAEkH,EAAAA,oBAVFF,KC6BaG,GACT5F,EAAcE,EAAc2F,EAAAA,cAEnBC,GAEL9F,EAAcE,EAAc6F,EAAAA,mCAqBlC,QAAFC,GAAwBzJ,EACA0J,EACazF,GAFnC,GAAFjF,GAGIQ,EAHJoE,KAAAhE,KAGUI,EAAa0J,IAHvB9J,WAAwBZ,GAAxBgB,YAAwBA,EACAhB,EAAxB0K,MAAwBA,EAHtB1K,EAAF2K,KAAwC,WAOpC3K,EAAKiF,SAAW2F,OAAO3F,IAAa,IA5DxC,MAmDoC3E,GAApCmK,EAAAjK,kBAZA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,gBACVC,SAAU,cACVC,QAAS,WAAY,YACrBG,MACEmH,uBAAwB,aACxBC,oBAAqB,qCACrBC,cAAe,OACfpH,MAAS,iBAEXqH,YAAaC,QAASX,EAAAA,YAAaY,YAAaT,4CAnClDvH,KAAEiI,EAAAA,aANFjI,KAA2BkI,EAAAA,UAiD3BlI,KAAAyD,OAAAZ,aAAA7C,KAAe0D,EAAAA,UAAfxD,MAAyB,mCAJzBuH,OAAAzH,KAAGoB,EAAAA,SArDHmG,GAmDoCJ,+EAnDpC,MA0EuC/J,GAAvC+K,EAAA7K,kBAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,mBACVE,QACE,4BAEFyH,YAAaC,QAASK,EAAAA,eAAgBJ,YAAaG,0BAGrDE,OAAArI,KAAGoB,EAAAA,MAAHlB,MAAS,kBA3ETiI,GA0EuCC,EAAAA,+BA4BrC,QAAFE,GAAwBxK,EACA0J,EACAe,EACaxG,GAHnC,GAAFjF,GAIIQ,EAJJoE,KAAAhE,KAIUI,EAAa0J,EAAOe,IAJ9B7K,WAAwBZ,GAAxBgB,YAAwBA,EACAhB,EAAxB0K,MAAwBA,EACA1K,EAAxByL,SAAwBA,EAIpBzL,EAAKiF,SAAW2F,OAAO3F,IAAa,IA5GxC,MA+F0C3E,GAA1CkL,EAAAhL,GAmBEgL,EAAF7K,UAAAc,mBAAE,WACEjB,EAAJG,UAAUc,mBAAVmD,KAAAhE,OAGE4K,EAAF7K,UAAAgC,YAAE,WACEnC,EAAJG,UAAUgC,YAAViC,KAAAhE,sBAtCAsC,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uBACVC,SAAU,oBACVI,MACEmH,uBAAwB,aACxBE,cAAe,OACfpH,MAAS,wBAEXJ,QAAS,WAAY,YACrByH,YACGC,QAAST,EAAAA,kBAAmBU,YAAaM,IACzCP,QAASX,EAAAA,YAAaY,YAAaM,4CA9ExCtI,KAAEiI,EAAAA,aANFjI,KAA2BkI,EAAAA,UAQ3BlI,KAAEwI,EAAAA,kBAyFFxI,KAAAyD,OAAAZ,aAAA7C,KAAe0D,EAAAA,UAAfxD,MAAyB,mCAPzBkG,OAAApG,KAAGoB,EAAAA,MAAHlB,MAAS,uBAETuI,aAAAzI,KAAG0I,EAAAA,gBAAHxI,MAAmB8G,OApGnBsB,GA+F0CjB,+EC/F1C,MAiB2CjK,GAA3CuL,EAAArL,kBAJA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,uBACV2H,YAAaC,QAASa,EAAAA,mBAAoBZ,YAAaW,0BAKzDE,QAAA7I,KAAGoB,EAAAA,MAAHlB,MAAS,wBAGT4I,SAAA9I,KAAGoB,EAAAA,MAAHlB,MAAS,+BAvBTyI,GAiB2CC,EAAAA,+FCc3C,MAFgCxL,GAAhC2L,EAAAzL,kBAdA0C,KAACC,EAAAA,UAADC,OAAAC,SAAA,WACEC,SAAU,UACVE,SAAU,kDACVE,MACFC,MAAA,WACMgH,KAAN,QAEAlH,QAAA,mLACAG,cAAAC,EAAAA,kBAAAC,KACEC,gBAAFC,EAAAA,wBAAAC,OACE+G,YAAFC,QAAAG,EAAAA,QAAkCF,YAAlCe,QAGAA,EAAA5H,4DAGA4H,8FCTEjM,GAAFkM,WAA4D,IAtB5D,MAqB0C5L,GAA1C6L,EAAA3L,kBAPA0C,KAAC8C,EAAAA,UAAD5C,OACEC,SAAU,sBACVK,MACE0I,UAAW,mBAEbpB,YAAaC,QAASoB,EAAAA,kBAAmBnB,YAAaiB,0BAGxDD,YAAAhJ,KAAGoB,EAAAA,MAAHlB,MAAS,iCAtBT+I,GAqB0CE,EAAAA,mBCFpCC,IACJd,GACAH,GACAQ,GACAM,GACAF,GACAxB,GACAP,gCA1BF,sBA6BAhH,KAAC4D,EAAAA,SAAD1D,OACE2D,SAAUwF,EAAAA,cAAevF,EAAAA,aAAcC,IACvCK,QAASgF,GACT3E,aAAc2E,OAhChBE,KC+CAC,GAAA,WAEE,QAAFA,GAAqBC,EACAC,EACAC,EACAC,GAHAjM,KAArB8L,kBAAqBA,EACA9L,KAArB+L,SAAqBA,EACA/L,KAArBgM,aAAqBA,EACAhM,KAArBiM,YAAqBA,EApDrB,MAsDEJ,GAAF9L,UAAAmM,aAAE,SAAaxD,EAASyC,EACTgB,EAAkBC,GAD/B,GAAFhN,GAAAY,KAEUqM,EAAWrM,KAAK8L,kBAAkBpD,EAAMyC,EAG9C,IAFAgB,EAAYG,KAAKD,GAEbrM,KAAKgM,aAAaK,GAAW,CAC/B,GAAME,GAAgBvM,KAAKiM,YAAYvD,EACnCJ,OAAMkE,QAAQD,GAChBvM,KAAKyM,iBAAiBF,EAAepB,EAAOgB,EAAaC,GAEzDG,EAAcnL,KAAKsL,EAAAA,KAAK,IAAIpL,UAAU,SAAAqL,GACpCvN,EAAKqN,iBAAiBE,EAAUxB,EAAOgB,EAAaC,KAI1D,MAAOD,IAGTN,EAAF9L,UAAA0M,iBAAE,SAAiBE,EAAexB,EACfgB,EAAkBC,GADnC,GAAFhN,GAAAY,IAEI2M,GAASC,QAAQ,SAACC,EAAOC,GACvB,GAAIC,GAA4BX,EAAUY,OAC1CD,GAAeT,KAAKQ,GAASH,EAAStE,OAAS,GAC/CjJ,EAAK8M,aAAaW,EAAO1B,EAAQ,EAAGgB,EAAaY,MASrDlB,EAAF9L,UAAAkN,aAAE,SAAaC,GAAb,GAAF9N,GAAAY,KACQmM,IAEJ,OADAe,GAAeN,QAAQ,SAAAlE,GAAQ,MAAAtJ,GAAK8M,aAAaxD,EAAM,EAAGyD,QACnDA,GAOTN,EAAF9L,UAAAoN,qBAAE,SAAqBC,EAAYC,GAAjC,GAAFjO,GAAAY,KACQsN,KACAC,IAeJ,OAdAA,GAAc,IAAK,EAEnBH,EAAMR,QAAQ,SAAAlE,GAEZ,IAAK,GADD8E,IAAS,EACJC,EAAI,EAAGA,GAAKrO,EAAK2M,SAASrD,GAAO+E,IACxCD,EAASA,GAAUD,EAAcE,EAE/BD,IACFF,EAAQhB,KAAK5D,GAEXtJ,EAAK4M,aAAatD,KACpB6E,EAAcnO,EAAK2M,SAASrD,GAAQ,GAAK2E,EAAYK,WAAWhF,MAG7D4E,GAjHXzB,KA6HA8B,GAAA,SAAA/N,GAaE,QAAF+N,GAAsBN,EACAO,EACRC,OAAd,KAAAA,IAAcA,KAFZ,IAAFzO,GAGIQ,EAHJoE,KAAAhE,OAAAA,WAAsBZ,GAAtBiO,YAAsBA,EACAjO,EAAtBwO,cAAsBA,EAbpBxO,EAAF0O,eAAmB,GAAIC,GAAAA,oBAErB3O,EAAF4O,cAAkB,GAAID,GAAAA,oBAclB3O,EAAK6O,MAAQ,GAAIF,GAAAA,gBAAqBF,KA9I1C,MA6HiDnO,GAAjDiO,EAAA/N,GAMEC,OAAFC,eAAM6N,EAAN5N,UAAA,YAAE,WAAa,MAAOC,MAAKiO,MAAM/N,WAC/B,SAASA,GACPF,KAAKiO,MAAMjM,KAAK9B,GAChBF,KAAK8N,eAAe9L,KAAKhC,KAAK4N,cAAcX,aAAajN,KAAK2K,OAC9D3K,KAAKqN,YAAYa,UAAYlO,KAAK8N,eAAe5N,uCAUnDyN,EAAF5N,UAAAoO,QAAE,SAAQC,GAAR,GAAFhP,GAAAY,KACUoI,GACJgG,EAAiBC,WACjBrO,KAAKqN,YAAYiB,eAAeC,SAChCvO,KAAK8N,eAEP,OAAO3M,GAAAA,MAAXqN,UAAA,GAAoBpG,GAAShH,KAAKqN,EAAAA,IAAI,WAGhC,MAFArP,GAAK4O,cAAchM,KACjB5C,EAAKwO,cAAcT,qBAAqB/N,EAAK0O,eAAe5N,MAAOd,EAAKiO,cACnEjO,EAAK4O,cAAc9N,UAI9ByN,EAAF5N,UAAA2O,WAAE,aA9JFf,GA6HiDgB,EAAAA,YC1GjDC,GAAA,SAAAhP,oEACER,GAAF6O,MAAU,GAAIF,GAAAA,sBApBd,MAmBgDrO,GAAhDkP,EAAAhP,GAMEC,OAAFC,eAAM8O,EAAN7O,UAAA,YAAE,WAAa,MAAOC,MAAKiO,MAAM/N,WAC/B,SAASA,GAAcF,KAAKiO,MAAMjM,KAAK9B,oCAEvC0O,EAAF7O,UAAAoO,QAAE,SAAQC,GAAR,GAAFhP,GAAAY,IACI,OAAOmB,GAAAA,MAAXqN,UAAA,IAAqBJ,EAAiBC,WAAYrO,KAAKiO,QAChD7M,KAAKqN,EAAAA,IAAI,WACR,MAAOrP,GAAKuL,SAIlBiE,EAAF7O,UAAA2O,WAAE,aAnCFE,GAmBgDD,EAAAA,YCRnCE,GAAU,GAAIC,GAAAA,QAAQ,2XC6CO,+BAGD,0sFC/CtB,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QAAS,QACjF,QAAS,SAAU,y3CCOmB,2wFCmFT,6BAGD,mCAGOC,2BAGR,kCAkBQ,2tFC7EV"}