import { Enumerable, IEnumerable, IEnumerator } from "./enumerable";
/**
* Converts any Iterable<T> object into LINQ-able object
* @param TSource An Array, Map, Set, String or other Iterable object.
*/
declare function getEnumerable<T>(TSource: Iterable<T> | IEnumerable<T>): Enumerable<T>;
/**
* Generates <count> of <T> elements starting with <start>. T is any
* type which could be cast to number: number, enum, etc.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Range(0, 7).Sum();
*/
declare function getRange(start: number, count: number): Enumerable<number>;
/**
* Repeat element <start> of type T <count> of times.
* @param start First value in sequence.
* @param count Number of elements to iteratel.
* @example
*     var sum = Repeat("v", 7);
*/
declare function getRepeat<T>(value: T, count: number): Enumerable<T>;
export { getEnumerable as default, getEnumerable as AsEnumerable, getEnumerable as asEnumerable, getEnumerable as From, getEnumerable as from, getRange as range, getRange as Range, getRepeat as repeat, getRepeat as Repeat, Enumerable, IEnumerable, IEnumerator };
