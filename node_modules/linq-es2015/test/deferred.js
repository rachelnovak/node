"use strict";
///////////////////////////////////////////////////////////////////////////////
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("./data");
const chai_1 = require("chai");
const linq_1 = require("../lib/linq");
describe('Deferred Execution -', function () {
    // Cast
    it('Cast()', function () {
        class a {
        }
        class b extends a {
        }
        let iterable = linq_1.default([]);
        chai_1.assert.equal(iterable.Cast(), iterable);
    });
    // ChunkBy
    it('ChunkBy()', function () {
        let iterable = linq_1.default(data_1.phrase).ChunkBy(o => o.key, o => o.value);
        var iterator = iterable[Symbol.iterator]();
        var arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 3);
        chai_1.assert.equal(arr[0], "We");
        chai_1.assert.equal(arr[1], "think");
        chai_1.assert.equal(arr[2], "that");
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        chai_1.assert.equal(arr[0], "Linq");
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        chai_1.assert.equal(arr[0], "is");
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        chai_1.assert.equal(arr[0], "really");
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 2);
        chai_1.assert.equal(arr[0], "cool");
        chai_1.assert.equal(arr[1], "!");
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ChunkBy() - Index', function () {
        let iterable = linq_1.default(data_1.phrase).ChunkBy((o, i) => Math.max(3, i), o => o.value);
        var iterator = iterable[Symbol.iterator]();
        var arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 4);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 1);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ChunkBy() - Zero', function () {
        let iterable = linq_1.default([{ key: 0, value: "0" },
            { key: 0, value: "1" },
            { key: 0, value: "2" },
            { key: 0, value: "3" },
            { key: 0, value: "4" },
            { key: 0, value: "5" },
            { key: 0, value: "6" },
            { key: 0, value: "7" },
            { key: 0, value: "!" }])
            .ChunkBy(k => k.key, o => o.value);
        var iterator = iterable[Symbol.iterator]();
        var arr = iterator.next().value;
        chai_1.assert.equal(arr.length, 9);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('ChunkBy() - Empty', function () {
        let iterable = linq_1.default([]).ChunkBy(e => e);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Concat
    it('Concat()', function () {
        var iterable = linq_1.default([0, 1, 2]).Concat([3, 4]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Select
    it('Select()', function () {
        let array = linq_1.default(data_1.jsn).Select((a) => a.name).ToArray();
        chai_1.assert.equal(array.length, 4);
        chai_1.assert.equal('d', array[0]);
        chai_1.assert.equal('c', array[1]);
        chai_1.assert.equal('b', array[2]);
        chai_1.assert.equal('a', array[3]);
    });
    it('Select() - With index', function () {
        let array = linq_1.default(data_1.jsn).Select((a, b) => b).ToArray();
        chai_1.assert.equal(array.length, 4);
        chai_1.assert.equal(0, array[0]);
        chai_1.assert.equal(1, array[1]);
        chai_1.assert.equal(2, array[2]);
        chai_1.assert.equal(3, array[3]);
    });
    // Distinct
    it('Distinct() - Number', function () {
        let iterable = linq_1.default([0, 0, 1, 3, 5, 6, 5, 7, 8, 8]).Distinct();
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Distinct() - String', function () {
        let test = [
            "add", "add",
            "subtract",
            "multiply",
            "hello",
            "class",
            "namespace",
            "namespace",
            "namespace"
        ];
        let iterable = linq_1.default(test).Distinct();
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("add", iterator.next().value);
        chai_1.assert.equal("subtract", iterator.next().value);
        chai_1.assert.equal("multiply", iterator.next().value);
        chai_1.assert.equal("hello", iterator.next().value);
        chai_1.assert.equal("class", iterator.next().value);
        chai_1.assert.equal("namespace", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Distinct() - Key', function () {
        let test = [
            { id: 1, "name": "d" },
            { id: 1, "name": "c" },
            { id: 3, "name": "b" },
            { id: 4, "name": "a" }
        ];
        let iterable = linq_1.default(test).Distinct(o => o.id);
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("d", iterator.next().value.name);
        chai_1.assert.equal("b", iterator.next().value.name);
        chai_1.assert.equal("a", iterator.next().value.name);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Where
    it('Where()', function () {
        let iterable = linq_1.default(data_1.simpleArray).Where(a => a % 2 == 1);
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Where() - Index', function () {
        let iterable = linq_1.default(data_1.simpleArray).Where((a, i) => i % 2 == 1);
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Skip
    it('Skip()', function () {
        let iterable = linq_1.default(data_1.simpleArray).Skip(7);
        let iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('SkipWhile()', function () {
        var iterable = linq_1.default(data_1.simpleArray).SkipWhile((a) => a < 8);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('SkipWhile() - Index', function () {
        var amounts = [
            5000, 2500, 9000, 8000,
            6500, 4000, 1500, 5500
        ];
        var iterable = linq_1.default(amounts).SkipWhile((amount, index) => amount > index * 1000);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(4000, iterator.next().value);
        chai_1.assert.equal(1500, iterator.next().value);
        chai_1.assert.equal(5500, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Take
    it('Take()', function () {
        var iterable = linq_1.default(data_1.simpleArray).Take(3);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('TakeWhile()', function () {
        var iterable = linq_1.default(data_1.simpleArray).TakeWhile(a => a < 4);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Except
    it('Except()', function () {
        var iterable = linq_1.default(data_1.simpleArray).Except([0, 2, 4, 6, 11]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.equal(10, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Except() - Key', function () {
        var iterable = linq_1.default(data_1.un1).Except(data_1.un2, o => o.id);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value.id);
        chai_1.assert.equal(2, iterator.next().value.id);
        chai_1.assert.equal(null, iterator.next().value.id);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Intersect
    it('Intersect()', function () {
        var iterable = linq_1.default(data_1.simpleArray).Intersect([1, 3, 5, 11, 23, 44]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Intersect() - Key', function () {
        var iterable = linq_1.default(data_1.un1).Intersect(data_1.un2, o => o.id);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(3, iterator.next().value.id);
        chai_1.assert.equal(3, iterator.next().value.id);
        chai_1.assert.equal(4, iterator.next().value.id);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // OfType
    it('OfType() - Number', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Number);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 0);
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.equal(iterator.next().value, 2);
        chai_1.assert.equal(iterator.next().value, 3);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - Boolean', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Boolean);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, true);
        chai_1.assert.equal(iterator.next().value, false);
        chai_1.assert.equal(iterator.next().value, true);
        chai_1.assert.equal(iterator.next().value, false);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - String', function () {
        var iterable = linq_1.default(data_1.mix).OfType(String);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, data_1.mix[2]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[3]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[4]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - Date', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Date);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, data_1.mix[5]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - Symbol', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Symbol);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, data_1.mix[7]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - Function', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Function);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, data_1.mix[17]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('OfType() - Object', function () {
        var iterable = linq_1.default(data_1.mix).OfType(Object);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(iterator.next().value, 1);
        chai_1.assert.equal(iterator.next().value, data_1.mix[3]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[4]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[5]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[10]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[11]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[12]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[13]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[14]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[15]);
        chai_1.assert.equal(iterator.next().value, data_1.mix[17]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Union
    it('Union()', function () {
        var iterable = linq_1.default([0, 1, 2, 2, 3, 4, 5, 6, 7]).Union([5, 6, 6, 7, 8, 9]);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(0, iterator.next().value);
        chai_1.assert.equal(1, iterator.next().value);
        chai_1.assert.equal(2, iterator.next().value);
        chai_1.assert.equal(3, iterator.next().value);
        chai_1.assert.equal(4, iterator.next().value);
        chai_1.assert.equal(5, iterator.next().value);
        chai_1.assert.equal(6, iterator.next().value);
        chai_1.assert.equal(7, iterator.next().value);
        chai_1.assert.equal(8, iterator.next().value);
        chai_1.assert.equal(9, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Union() - Keyed', function () {
        var iterable = linq_1.default(data_1.un1).Union(data_1.un2, (o) => o.id);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(data_1.un1[0], iterator.next().value);
        chai_1.assert.equal(data_1.un1[1], iterator.next().value);
        chai_1.assert.equal(data_1.un1[2], iterator.next().value);
        chai_1.assert.equal(data_1.un1[3], iterator.next().value);
        chai_1.assert.equal(data_1.un1[5], iterator.next().value);
        chai_1.assert.equal(data_1.un2[2], iterator.next().value);
        chai_1.assert.equal(data_1.un2[3], iterator.next().value);
        chai_1.assert.equal(data_1.un2[5], iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // Join
    it('Join()', function () {
        var iterable = linq_1.default(data_1.people).Join(data_1.pets, person => person, pet => pet.Owner, (person, pet) => {
            return person.Name + " - " + pet.Name;
        });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("Hedlund, Magnus - Daisy", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Barley", iterator.next().value);
        chai_1.assert.equal("Adams, Terry - Boots", iterator.next().value);
        chai_1.assert.equal("Weiss, Charlotte - Whiskers", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('Join() - Redundant', function () {
        var iterable = linq_1.default(data_1.un1).Join(data_1.jsn, e => e.id, u => u.id, (e, u) => {
            return e.name + " - " + u.name;
        });
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal("q - d", iterator.next().value);
        chai_1.assert.equal("w - c", iterator.next().value);
        chai_1.assert.equal("e - b", iterator.next().value);
        chai_1.assert.equal("e - b", iterator.next().value);
        chai_1.assert.equal("r - a", iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // GroupJoin
    it('GroupJoin()', function () {
        var iterable = linq_1.default(data_1.people)
            .GroupJoin(data_1.pets, person => person, pet => pet.Owner, (person, petCollection) => {
            return {
                Owner: person.Name,
                Pets: !petCollection ? null
                    : linq_1.default(petCollection).Select(pet => pet.Name)
                        .ToArray()
            };
        });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.isTrue(Array.isArray(result.Pets));
        chai_1.assert.equal("Hedlund, Magnus", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Daisy", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal(null, result.Owner);
        chai_1.assert.equal(null, result.Pets);
        result = iterator.next().value;
        chai_1.assert.equal("Weiss, Charlotte", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Whiskers", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal(undefined, result.Owner);
        chai_1.assert.equal(null, result.Pets);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupJoin() - MSDN', function () {
        var iterable = linq_1.default(data_1.msdn)
            .GroupJoin(data_1.pets, person => person, pet => pet.Owner, (person, petCollection) => {
            return {
                Owner: person.Name,
                Pets: linq_1.default(petCollection).Select(pet => pet.Name)
                    .ToArray()
            };
        });
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.isTrue(Array.isArray(result.Pets));
        chai_1.assert.equal("Hedlund, Magnus", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Daisy", result.Pets[0]);
        result = iterator.next().value;
        chai_1.assert.equal("Adams, Terry", result.Owner);
        chai_1.assert.equal(2, result.Pets.length);
        chai_1.assert.equal("Barley", result.Pets[0]);
        chai_1.assert.equal("Boots", result.Pets[1]);
        result = iterator.next().value;
        chai_1.assert.equal("Weiss, Charlotte", result.Owner);
        chai_1.assert.equal(1, result.Pets.length);
        chai_1.assert.equal("Whiskers", result.Pets[0]);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupJoin() - QJesus', function () {
        const yx = [
            { id: '1', batchNumber: 'ZKFM1' },
            { id: '2', batchNumber: 'ZKFM' },
            { id: '3', batchNumber: 'ZKFM1' }
        ];
        const zx = [
            { id: '1', value: 'zzz' },
            { id: '2', value: 'xxx' },
        ];
        var join = linq_1.default(yx).GroupJoin(zx, a => a.id, b => b.id, (a, temp) => ({ a, temp }))
            .ToArray();
        chai_1.assert.equal(3, join.length);
    });
    // GroupBy
    it('GroupBy()', function () {
        var iterable = linq_1.default(data_1.pets).GroupBy(pet => pet.Age);
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.equal(8, result.key);
        chai_1.assert.equal(1, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(4, result.key);
        chai_1.assert.equal(3, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(1, result.key);
        chai_1.assert.equal(1, result.length);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupBy() - Element selector', function () {
        var iterable = linq_1.default(data_1.pets).GroupBy(pet => pet.Age, pet => pet);
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.equal(8, result.key);
        chai_1.assert.equal(1, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(4, result.key);
        chai_1.assert.equal(3, result.length);
        result = iterator.next().value;
        chai_1.assert.equal(1, result.key);
        chai_1.assert.equal(1, result.length);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('GroupBy() - Result selector', function () {
        var iterable = linq_1.default(data_1.pets).GroupBy(pet => pet.Age, pet => pet, (age, group) => age);
        var iterator = iterable[Symbol.iterator]();
        var result = iterator.next().value;
        chai_1.assert.equal(8, result);
        result = iterator.next().value;
        chai_1.assert.equal(4, result);
        result = iterator.next().value;
        chai_1.assert.equal(1, result);
        chai_1.assert.isTrue(iterator.next().done);
    });
    // SelectMany
    it('SelectMany()', function () {
        var iterable = linq_1.default(data_1.jsn).SelectMany(a => a.ids);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
    it('SelectMany() - Selector', function () {
        var iterable = linq_1.default(data_1.jsn).SelectMany(a => a.ids, (t, s) => s);
        var iterator = iterable[Symbol.iterator]();
        chai_1.assert.equal(11, iterator.next().value);
        chai_1.assert.equal(21, iterator.next().value);
        chai_1.assert.equal(31, iterator.next().value);
        chai_1.assert.equal(12, iterator.next().value);
        chai_1.assert.equal(22, iterator.next().value);
        chai_1.assert.equal(32, iterator.next().value);
        chai_1.assert.equal(13, iterator.next().value);
        chai_1.assert.equal(23, iterator.next().value);
        chai_1.assert.equal(33, iterator.next().value);
        chai_1.assert.equal(14, iterator.next().value);
        chai_1.assert.equal(24, iterator.next().value);
        chai_1.assert.equal(34, iterator.next().value);
        chai_1.assert.isTrue(iterator.next().done);
    });
});
/** Copyright (c) ENikS.  All rights reserved. */
//# sourceMappingURL=deferred.js.map