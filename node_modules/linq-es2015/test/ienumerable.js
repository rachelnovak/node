"use strict";
///////////////////////////////////////////////////////////////////////////////
//
// Licensed under the Apache License, Version 2.0  ( the  "License" );  you may 
// not use this file except in compliance with the License.  You may  obtain  a 
// copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required  by  applicable  law  or  agreed  to  in  writing,  software 
// distributed under the License is distributed on an "AS  IS"  BASIS,  WITHOUT
// WARRANTIES OR CONDITIONS  OF  ANY  KIND, either express or implied.  See the 
// License for the specific  language  governing  permissions  and  limitations 
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("./data");
const chai_1 = require("chai");
const linq_1 = require("../lib/linq");
describe('Enumerable - ', function () {
    it('GetEnumerator()', function () {
        var enumerable = linq_1.asEnumerable(data_1.jsn).SelectMany(a => a.ids);
        var enumerator = enumerable.GetEnumerator();
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(11, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(21, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(31, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(12, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(22, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(32, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(13, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(23, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(33, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(14, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(24, enumerator.Current);
        chai_1.assert.isTrue(enumerator.MoveNext());
        chai_1.assert.equal(34, enumerator.Current);
        chai_1.assert.isFalse(enumerator.MoveNext());
    });
    it('Enumerate()', function () {
        var enumerable = linq_1.Range(0, 100);
        var enumerator = enumerable.GetEnumerator();
        var index = 0;
        while (enumerator.MoveNext()) {
            chai_1.assert.equal(index++, enumerator.Current);
        }
    });
    it('Reset()', function () {
        var enumerable = linq_1.Range(0, 100);
        var enumerator = enumerable.GetEnumerator();
        var index = 0;
        while (enumerator.MoveNext()) {
            chai_1.assert.equal(index++, enumerator.Current);
        }
        chai_1.assert.throw(function () {
            enumerator.Reset();
        });
    });
});
/** Copyright (c) ENikS.  All rights reserved. */
//# sourceMappingURL=ienumerable.js.map